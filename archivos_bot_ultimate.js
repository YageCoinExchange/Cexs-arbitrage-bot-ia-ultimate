DATOS DEL BOT 

## 1. **Pares a monitorear**
Lista de pares:
LTC/USDT, 
BNB/USDT,
XRP/USDT,
ALGO/USDT,
ANIME/USDT,
APT/USDT,
ARB/USDT,
ATOM/USDT,
AVAX/USDT,
AXL/USDT,
BB/USDT,
BEL/USDT,
BERA/USDT,
BOME/USDT,
BONK/USDT,
C98/USDT,
CAKE/USDT,
CATI/USDT,
CELO/USDT,
CGPT/USDT,
CHZ/USDT,
CYBER/USDT,
DOGS/USDT,
DOT/USDT,
DYDX/USDT,
EGLD/USDT,
ENJ/USDT,
FIDA/USDT,
FLOKI/USDT,
FLOW/USDT,
GMT/USDT,
GMX/USDT,
HAEDAL/USDT,
HBAR/USDT,
HMSTR/USDT,
HOME/USDT,
HYPER/USDT,
ICP/USDT,
ICX/USDT,
INJ/USDT,
IO/USDT,
JUP/USDT,
KAIA/USDT,
KMNO/USDT,
KSM/USDT,
LUNA/USDT,
MAGIC/USDT,
MANTA/USDT,
MBOX/USDT,
MINA/USDT,
NEAR/USDT,
NOT/USDT,
ONE/USDT,
OP/USDT, 
PSG/USDT, 
PYTH/USDT,
RDNT/USDT,
ROSE/USDT,
SCRT/USDT,
SEI/USDT,
SHIB/USDT,
SIGN/USDT,
STX/USDT,
SUI/USDT,
TIA/USDT,
TNSR/USDT,
TON/USDT,
TRUMP/USDT,
TRX/USDT,
WAXP/USDT,
WCT/USDT,
WIF/USDT,
WLD/USDT,
XAI/USDT,
XLM/USDT,
ZIL/USDT,
ZRO/USDT
  
Determinar el activo base:
 (USDT)

## 2. ** Direcciones y Redes de depósito**
-        Direcciónes y Redes soportadas para cada token en ambos exchanges
BINANCE 
USDT= EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801 ( TON The Open Network )* 
LTC = LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4 ( Litecoin )* 
BNB = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20) )* 
XRP = rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV MEMO 466152795 ( XRP Ripple (xrp) )* 
ALGO = L43SHHRVHAIYHGFGXFBKM7IMZNYT7WSLSMXPHGNH4D5NPYOBIJSK35X5OE ( ALGO Algorand )
ANIME = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )
APT = 0x0b69478291cb55e808a716a046cc0d1ab2981e85778957da3fd519c6061ccb9e ( APT Aptos )
ARB = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )
ATOM = cosmos1j8pp7zvcu9z8vd882m284j29fn2dszh05cqvf9 MEMO 100738176 ( ATOM Cosmos )*
AVAX = X-avax1j2suzh09083n9cyd80dk3lsr0c3e8ry3skk27q ( AVAX Avalanche )
AXL = axelar17ewha7y7fr0xsej6xfep88rq30rse9hgynll78 MEMO 101408734 ( AXL Axelar )*
BB = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BB BounceBit )
BEL = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20) )
BERA = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BERA Berachain )
BOME = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
BONK = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
C98 = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20) )
CAKE = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20) )
CATI = EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801 ( TON The Open Network )*
CELO = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( CELO CELO )
CGPT = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20) )
CHZ = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( CHZ2 Chiliz Chain (CAP20) )
CYBER = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( OPTIMISM Optimism )
DOGS = EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801 ( TON The Open Network )*
DOT = 12zByesGXudgBh4C6ZRbF82SkEAwxC6viaTZwg6BbkWABuT5 ( DOT Polkadot )
DYDX = dydx1vvl7htcnzc3g0hsrysxf3vvrk6tpx70822ef6g MEMO 100903728 ( DYDX DYDX )*
EGLD = erd1ecw70t7jjw77c6sdmesz2quzlxwv87tv983970wlr8gchy0sqv8sp8ef3k ( EGLD MultiversX eGold )
ENJ = enExKScymYYPkj9tzvgs4UFDCEVCyWuJi7zVAdwuAsF5jokn5 ( ENJ Enjin Relay Chain )
FIDA = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
FLOKI = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20 ) 
FLOW = 0x94ad1c8825ca243d ( FLOW Flow )
GMT = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20 )
GMX = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )
HAEDAL = 0xd03819773837ad71e19c3903561d61a5ae7cb7035ade1c841d84f23040ea79f4 ( SUI Sui )
HBAR = 0.0.1873771 MEMO 103878176
HMSTR = EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801 ( TON The Open Network )*
HOME = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
HYPER = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20 )
ICP = 3cb40b0fb786925bc5e4f5cf4e4d7c5d617a70fdefa8e483487d076b65c50151 ( ICP Internet Computer )
ICX = hx5ff80447faff8dfb5193ff420c35b72535282f3d  ( ICX ICON )
INJ = inj1u2rajhqtptzvu23leheta9yg99k3hazf4waf43 MEMO 105901031 ( INJ Injective )*
IO = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
JUP = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
KAIA = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7  ( KAIA Kaia )
KMNO = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa  ( SOL Solana )
KSM = G8AjQrZs9CfPYiTCjkS75r2tHQPqxK1bNagLefLa4QvHGCQ  ( KSM Kusama )
LUNA = terra1frh79vmtur5fmrghz6gfjvfhpa3u2c0uemv4af MEMO 103811345 ( LUNA Terra )
MAGIC = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )
MANTA = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7  ( MANTA Manta Network )
MBOX = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7  ( BSC BNB Smart Chain (BEP20 )
MINA = B62qkTezzMtbX71ZnR74N4JAs1LT4jvacx2aLJR9yPFzdtDqA3dGLQD ( MINA Mina )
NEAR = 836da29a0b7172bf48cb1cb5466d29adc0aac38904a091e64b71e66539ab984b ( NEAR NEAR Protocol )
NOT = EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801  ( TON The Open Network )*
ONE = one1hwlkh335c6k6w8eugsj9f2qkjvxuk5q59z0m8s ( ONE Harmony )
OP = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( OPTIMISM Optimism )
PSG = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( CHZ2 Chiliz Chain (CAP20) )
PYTH = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
RDNT = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )
ROSE = oasis1qz0f26wkrt5852xcghrnr52rwgk30jwxcq3lwcee ( ROSE Oasis Network )
SCRT = secret13fh085csr7w7e866r402cqa9xp42trsch7w269 MEMO 101301675 ( SCRT Secret )
SEI = sei1zrqryvr8m40yqej95lcqzw7y0sf0662cxh0kcv MEMO 100286985 ( SEI SEI )
SHIB = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20 )
SIGN = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( BSC BNB Smart Chain (BEP20 )
STX = SP2TA4FGB43WVAS8MVS6YCWTSN2BZNQ1ASGEAKSDD MEMO 103289850 ( STX Stacks )
SUI = 0xd03819773837ad71e19c3903561d61a5ae7cb7035ade1c841d84f23040ea79f4 ( SUI Sui )
TIA =  celestia1fd3mclxp4e2fh0wpau3eg55x2fsm7yjxzg29j2 MEMO 105643806  ( TIA Celestia ) 
TON = EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb MEMO 163771801  ( TON The Open Network ) 
TRUMP = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa  ( SOL Solana )
TRX = TNZx9MUo2Db4xLT9zVe17NqwconpaaWwDq  ( TRX Tron (TRC20) ) 
WAXP = waxonbinance MEMO 106691034 ( WAX WAX  ) 
WIF = 9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa ( SOL Solana )
WCT = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( OPTIMISM Optimism )
WLD = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( OPTIMISM Optimism )XAI =  
XLM = GABFQIK63R2NETJM7T673EAMZN4RJLLGP3OFUEJU5SZVTGWUKULZJNL6 MEMO 380362871  ( XLM Stellar Network ) 
ZIL = zil1ldwp360uz36800cr5n73gtm0fjxmrn8sr4r3uq ( ZIL Zilliqa ) 
ZRO = 0xe5b10a8fa449155d5b4b657dab4e856815d52bd7 ( ARBITRUM Arbitrum One )


BYBIT  
USDT= UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON )*           
LTC = LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ ( LTC ) * 
BNB = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )*
XRP = rJn2zAPdFA193sixJwuFixRkYDUtx3apQh MEMO 501350199 (XRP)*
ALGO = U5EPBBGTH4ZHEJMSYWRRBEOTOORYTSTSTYZITGDYM2KUQPDXWTHFDJPFVY ( ALGO )
ANIME = 0x4231d188a91481a8c3d39d444b7451436babee94 ( ARBI )
APT = 0x9f5ade930d03eb3fd1f0906f4e7edaddc458ac71260bf985bb61cfb61ac09191 ( APTOS )
ARB = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Arbitrum One )
ATOM = cosmos1c8dskmuz2wj29tg3rygt8mzg92f09gwcqqyexa ( ATOM )
AVAX = X-avax1unlvn8ef6lpjsac0t37t9za6astc8a55pugnm2( AVAX )
AXL = axelar1yzsury9fldydgk425gmphy2zyehh3emc43ds6x MEMO 10048670 ( AXL)
BB = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BounceBit )
BEL = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
BERA = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Berachain )
BOME = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
BONK = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
C98 = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
CAKE = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
CATI = UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON )
CELO = 0x4231d188a91481a8c3d39d444b7451436babee94 ( CELO )
CGPT = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
CHZ = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Chiliz Chain )
CYBER = 0x4231d188a91481a8c3d39d444b7451436babee94 ( OP Mainnet )
DOGS = UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON )
DOT = 13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm ( DOT )
DYDX = dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq MEMO 10178277 ( DYDX )
EGLD = erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4 ( EGLD )
ENJ = enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i ( Enjin )
FIDA = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
FLOKI = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
FLOW = 0xdbb61e402a382eb3 ( FLOW )
GMT = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
GMX = 0x4231d188a91481a8c3d39d444b7451436babee94 ( AVAXC )
HAEDAL = 0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c ( SUI )
HBAR = 0.0.615422 MEMO 10067078 ( HBAR ) 
HMSTR = UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON ) 
HOME = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
HYPER = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
ICP = dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a ( ICP ) 
ICX = hx8c278a658331a569b640e925ac55a70a8e5534b6 ( ICX )
INJ = inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n MEMO 10014232 ( INJ )
IO = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
JUP = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
KAIA = 0x4231d188a91481a8c3d39d444b7451436babee94 ( KAIA )
KMNO = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
KSM = GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV ( KSM )
LUNA = terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s ( Terra )
MAGIC = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Arbitrum One )
MANTA = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Manta Pacific Mainnet )
MBOX = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
MINA = B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW ( MINA )
NEAR = 7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef ( NEAR )
NOT = UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON )
ONE = one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3 ( ONE )
OP = 0x4231d188a91481a8c3d39d444b7451436babee94 ( OP Mainnet )
PSG = 0x4231d188a91481a8c3d39d444b7451436babee94 (Chiliz Chain)
PYTH = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
RDNT = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Arbitrum One )
ROSE = oasis1qqgk0fmqlmcr5k0d0rgknw7e6a7hlc0t3qljrnhe ( ROSE )
SCRT = secret1tsz8v9k75jeqtl4exnf0qye5nme840h5n0pldk MEMO 10120271 ( SCRT )
SEI = sei10czwjwhcjdjexgz9ecn2xma5at9t04dfaxsf4t MEMO 10124250 ( SEI )
SHIB = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
SIGN = 0x4231d188a91481a8c3d39d444b7451436babee94 ( BSC (BEP20) )
STX = SP27ANV45PCAG98PGFA2GVN9K7QYY1KWWS1V6RFSX MEMO 10167021 ( STX )
SUI = 0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c ( SUI )
TIA = celestia12stggm53c5wzqdz6w5xn6tkrj56phnzktj7d5w ( Celestia )
TON = UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB ( TON )
TRUMP = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
TRX = TAF6zJUsa3yja8p5XQTWhMaY3QXxZmZdGN ( TRX Tron (TRC20) )
WAXP = bybitwaxonly MEMO 10068817 ( WAX )
WCT = 0x4231d188a91481a8c3d39d444b7451436babee94 ( OP Mainnet )
WIF = 3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8 ( Solana )
WLD = 0x4231d188a91481a8c3d39d444b7451436babee94 ( OP Mainnet )
XAI = 0x4231d188a91481a8c3d39d444b7451436babee94 ( Arbitrum One )
XLM = GDT7ARDYZRBXXYOCSQ3MUMISTITSSRWZI6KR2A5L5Q3KB4QIZHGYMTIH MEMO 11088858 ( Stellar Lumens )
ZIL = zil1f5xpvwltm6uheftrlrhjtxcv392uuxtejekpjs ( ZIL )
ZRO = 0x4231d188a91481a8c3d39d444b7451436babee94 ( AVAXC )

## 3.   ** Fees y mínimos de retiro (≈$) y mínimos de depósito para cada red/token         
BINANCE
USDT=  Comisión de la red 0.3 USDT( ≈ 0,30 $) e Importe del retiro 5 USDT como mínimo** / Depósito mín.: 0,002 USDT**
LTC =  Comisión de la red 0,0001 LTC( ≈ 0,01 $) e Importe del retiro 0.002 LTC como minimo* /Depósito mín.: 0,002 LTC*
BNB =  comisión de la red 0.00001 BNB( ≈ 0,01 $) e Importe del retiro 0.0005 como mínimo* /Depósito mín.: 0,000003 BNB*
XRP =  comisión de la red 0.2 XRP( ≈ 0,43 $) e Importe del retiro 2 XRP como minimo* /Depósito mín.: 0,001 XRP*
ALGO = comisión de la red 0,008 ALGO( ≈ 0,001 $) e Importe del retiro 10 ALGO como minimo* /Depósito mín.: 0,007 ALGO
ANIME = Comisión de la red 7,74 ANIME( ≈ 0,17 $) e Importe del retiro 16 ANIME como minimo* /Depósito mín.:  0,00000001 ANIME                           
APT = Comisión de la red 0,016 APT( ≈ 0,17 $) e Importe del retiro 0,06 APT como minimo* /Depósito mín.: 0,00015 APT
ARB = Comisión de la red 0,56 ARB( ≈ 0,17 $) e Importe del retiro 1,12 ARB como minimo*/Depósito mín.: 0,01 ARB
ATOM = Comisión de la red 0,02 ATOM( ≈ 0,08 $) e Importe del retiro 0,04 ATOM como minimo*/Depósito mín.: 0,00016 ATOM**
AVAX = Comisión de la red 0,008 AVAX( ≈ 0,15 $) e Importe del retiro 0,1 AVAX como minimo*/Depósito mín.: 0,00005 AVAX**
AXL = Comisión de la red 0,02 AXL( ≈ 0,01 $) e Importe del retiro 1 AXL como minimo*/Depósito mín.: 0,0015 AXL**
BB = Comisión de la red 0,05 BB( ≈ 0,001 $) e Importe del retiro 1 BB como minimo* /Depósito mín.: 0,06 BB**
BEL = Comisión de la red 0,051 BE( ≈ 0,01 $) e Importe del retiro 0,1 BE como minimo*  /Depósito mín.: 0,002 BEL**
BERA = Comisión de la red 0,001 BERA( ≈ 0,001 $) e Importe del retiro 0,1 BERA como minimo*/Depósito mín.: 0,00000002 BERA**
BOME = Comisión de la red 380,00 BOME( ≈ 0,59 $) e Importe del retiro 760 BOME como minimo*/Depósito mín.: 0,02 BOME**
BONK = Comisión de la red 41 657,00 BONK( ≈ 0,59 $) e Importe del retiro 83314,00 BONK como minimo*/Depósito mín.: 0,02 BONK**
C98 = Comisión de la red 0,26 C98( ≈ 0,01 $) e Importe del retiro 0,52 C98 como minimo* /Depósito mín.: 0,007 C98**
CAKE = Comisión de la red 0,0057 CAKE( ≈ 0,01 $) e Importe del retiro 0,011 CAKE como minimo*/Depósito mín.: 0,0006 CAKE**
CATI = Comisión de la red 1,08 CATI( ≈ 0,08 $) e Importe del retiro 2,16 CATI como minimo*/Depósito mín.: 0,00000002 CATI**
CELO = Comisión de la red 0,003 CELO( ≈ 0,001 $) e Importe del retiro 0,018 CELO como minimo*/Depósito mín.: 0,02 CELO**
CGPT = Comisión de la red 0,14 CGPT( ≈ 0,01 $) e Importe del retiro 0,28 CGPT como minimo*/Depósito mín.: 0,00000002 CGPT**
CHZ = Comisión de la red 1,00 CHZ( ≈ 0,01 $) e Importe del retiro 2 CHZ como minimo*/Depósito mín.: 0,0001 CHZ**
CYBER = Comisión de la red 0,019 CYBER( ≈ 0,03 $) e Importe del retiro 0,038 CYBER como minimo*/Depósito mín.: 0,0003 CYBER**
DOGS = Comisión de la red 100,00 DOGS( ≈ 0,01 $) e Importe del retiro 1000 DOGS como minimo*/Depósito mín.: 0,02 DOGS**
DOT =  Comisión de la red 0,08 DOT( ≈ 0,30 $) e Importe del retiro 1,3 DOT como minimo*/Depósito mín.: 1,05 DOT** 
DYDX = Comisión de la red 0,01 DYDX( ≈ 0,01 $) e Importe del retiro 0,1 DYDX como minimo*/Depósito mín.: 0,0009 DYDX**
EGLD = Comisión de la red 8,99 FIDA( ≈ 0,01 $) e Importe del retiro 0,0015 EGLD como minimo*/Depósito mín.: 0,00004 EGLD**
ENJ = Comisión de la red 0,0003 ENJ( ≈ 0,001 $) e Importe del retiro 1 ENJ como minimo*/Depósito mín.: 0,006 ENJ
FIDA = Comisión de la red 0,0003 ENJ( ≈ 0,58 $) e Importe del retiro 17 FIDA como minimo*/Depósito mín.: 0,005 FIDA
FLOKI = Comisión de la red 175,00 FLOKI( ≈ 0,01 $) e Importe del retiro 350,00 FLOKI como minimo*/Depósito mín.: 0,01 FLOKI
FLOW = Comisión de la red 0,0001 FLOW( ≈ 0,001 $) e Importe del retiro 2,7 FLOW como minimo*/Depósito mín.: 0,0018 FLOW
GMT = Comisión de la red 0,29 GMT( ≈ 0,01 $) e Importe del retiro 0,58 GMT como minimo*/Depósito mín.: 0,008 GMT
GMX =  Comisión de la red 0,005 GMX( ≈ 0,01 $) e Importe del retiro 0,01 GMX como minimo*/Depósito mín.: 0,00005 GMX
HAEDAL = Comisión de la red 1,44 HAEDAL( ≈ 0,18 $) e Importe del retiro 2,88 HAEDAL como minimo*/Depósito mín.: 0,00000002 HAEDAL
HBAR = Comisión de la red 0,06 HBAR( ≈ 0,01 $) e Importe del retiro 2 HBAR como minimo*/Depósito mín.: 0,013 HBAR
HMSTR = Comisión de la red 108,00 HMSTR( ≈ 0,09 $) e Importe del retiro 216,00 HMSTR como minimo*/Depósito mín.: 0,02 HMSTR
HOME =  Comisión de la red 0,55 HOME( ≈ 0,01 $) e Importe del retiro 1,1 HOME como minimo*/Depósito mín.: 0,000002 HOME
HYPER = Comisión de la red 0,12 HYPER( ≈ 0,01 $) e Importe del retiro 0,24 HYPER como minimo*/Depósito mín.: 0,00000002 HYPER
ICP = Comisión de la red 0,0003 ICP( ≈ 0,0001 $) e Importe del retiro 0,001 ICP como minimo*/Depósito mín.: 0,0002 ICP
ICX = Comisión de la red 0,02 ICX( ≈ 0,0001 $) e Importe del retiro 0,04 ICX como minimo*/Depósito mín.: 0,008 ICX
INJ = Comisión de la red 0,01 INJ( ≈ 0,11 $) e Importe del retiro 0,1 INJ como minimo*/Depósito mín.: 0,00005 INJ 
IO = Comisión de la red 0,81 IO( ≈ 0,58 $) e Importe del retiro 1,62 IO como minimo*/Depósito mín.: 0,0005 IO
JUP = Comisión de la red 1,48 JUP( ≈ 0,59 $) e Importe del retiro 2,96 JUP como minimo*/Depósito mín.: 0,0013 JUP
KAIA = Comisión de la red 0,005 KAIA( ≈ 0,01 $) e Importe del retiro 100 KAIA como minimo*/Depósito mín.: 0,008 KAIA
KMNO = Comisión de la red 8,85 KMNO( ≈ 0,58 $) e Importe del retiro 17 KMNO como minimo*/Depósito mín.: 0,000002 KMNO
KSM = Comisión de la red 0,01 KSM( ≈ 0,14 $) e Importe del retiro 0,4 KSM como minimo*/Depósito mín.: 0,001 KSM
LUNA = Comisión de la red 0,01 LUNA( ≈ 0,001 $) e Importe del retiro 1 LUNA como minimo*/Depósito mín.: 0,0026 LUNA
MAGIC = Comisión de la red 1,15 MAGIC( ≈ 0,17 $) e Importe del retiro 2,3 MAGIC como minimo*/Depósito mín.: 0,003 MAGIC
MANTA = Comisión de la red 0,15 MANTA( ≈ 0,03 $) e Importe del retiro 0,42 MANTA como minimo*/Depósito mín.: 0,0012 MANTA
MBOX = Comisión de la red 0,29 MBOX( ≈ 0,01 $) e Importe del retiro 0,58 MBOX como minimo*/Depósito mín.: 0,0046 MBOX
MINA = Comisión de la red 0,90 MINA( ≈ 0,15 $) e Importe del retiro 5 MINA como minimo*/Depósito mín.: 0,004 MINA
NEAR = Comisión de la red 0,018 NEAR( ≈ 0,04 $) e Importe del retiro 6 NEAR como minimo*/Depósito mín.: 0,0002 NEAR
NOT = Comisión de la red 44,00 NOT( ≈ 0,09 $) e Importe del retiro 88,00 NOT como minimo*/Depósito mín.: 0,01 NOT
ONE = Comisión de la red 0,10 ONE( ≈ 0,001 $) e Importe del retiro 60 ONE como minimo*/Depósito mín.: 0,07 ONE
OP =  Comisión de la red 0,045 OP( ≈ 0,02 $) e Importe del retiro 0,09 OP como minimo*/Depósito mín.: 0,0006 OP
PSG = Comisión de la red 0,00 PSG( ≈ 0,001 $) e Importe del retiro 1  PSG como minimo*/Depósito mín.: 0,00000002 PSG
PYTH = Comisión de la red 0,00 PSG( ≈ 0,001 $) e Importe del retiro 1  PSG como minimo*/Depósito mín.: 0,004 PYTH
RDNT = Comisión de la red 8,26 RDNT( ≈ 0,17 $) e Importe del retiro 16  RDNT como minimo*/Depósito mín.: 0,03 RDN
ROSE = Comisión de la red 0,10 ROSE( ≈ 0,001 $) e Importe del retiro 1  ROSE como minimo*/Depósito mín.: 0,013 ROSE
SCRT = Comisión de la red 0,10 SCRT( ≈ 0,02 $) e Importe del retiro 5  SCRT como minimo*/Depósito mín.: 0,005 SCRT
SEI = Comisión de la red 0,40 SEI( ≈ 0,07 $) e Importe del retiro 5 SEI como minimo*/Depósito mín.: 0,004 SEI
SHIB = Comisión de la red 1 112,00 SHIB( ≈ 0,01 $) e Importe del retiro 2224,00 SHIB como minimo*/Depósito mín.: 1.1 SHIB
SIGN = Comisión de la red 0,19 SIGN( ≈ 0,01 $) e Importe del retiro 0,38 SIGN como minimo*/Depósito mín.: 0,00000003 SIGN
STX = Comisión de la red 1,00 STX( ≈ 0,60 $) e Importe del retiro 5 STX como minimo*/Depósito mín.: 0,0006 STX
SUI = Comisión de la red 0,06 SUI( ≈ 0,17 $) e Importe del retiro 1 SUI como minimo*/Depósito mín.: 0,0013 SUI
TIA = Comisión de la red 0,10 TIA( ≈ 0,17 $) e Importe del retiro 0,4 TIA como minimo*/Depósito mín.: 0,00015 TIA
TON = Comisión de la red 0,02 TON( ≈ 0,06 $) e Importe del retiro 0,4 TON como minimo*/Depósito mín.: 0,00000001 TON
TRUMP = Comisión de la red 0,062 TRUMP( ≈ 0,57 $) e Importe del retiro 0,12 TRUMP como minimo*/Depósito mín.: 0,000002 TRUMP
TRX = Comisión de la red 1,00 TRX( ≈ 0,27 $) e Importe del retiro 30,00 TRX como minimo*/Depósito mín.: 1 TRX    
WAXP = Comisión de la red 0,20 WAXP( ≈ 0,001 $) e Importe del retiro 7 WAXP como minimo*/Depósito mín.: 2 WAXP
WIF =  Comisión de la red 0,76 WIF( ≈ 0,001 $) e Importe del retiro 1,52 WIF como minimo*/Depósito mín.: 0,0006 WIF                                          
WCT = Comisión de la red 0,069 WCT( ≈ 0,001 $) e Importe del retiro 0,14 WCT como minimo*/Depósito mín.: 0,00000002 WCT
WLD = Comisión de la red 0,028 WLD( ≈ 0,03 $) e Importe del retiro 0,056 WLD como minimo*/Depósito mín.: 0,0004 WLD
XAI = Comisión de la red 3,25 XAI( ≈ 0,17 $) e Importe del retiro 6,5 XAI como minimo*/Depósito mín.: 0,0029 XAI
XLM = Comisión de la red 0,01 XLM( ≈ 0,001 $) e Importe del retiro 25 XLM como minimo*/Depósito mín.: 0,02 XLM
ZIL = Comisión de la red 1,00 ZIL( ≈ 0,01 $) e Importe del retiro 2,00 ZIL como minimo*/Depósito mín.: 0,07 ZIL
ZRO = Comisión de la red 0,04 ZRO( ≈ 0,07 $) e Importe del retiro 0,08 ZROL como minimo* /Depósito mín.: 0,00026 ZRO


BYBIT
USDT=  Comisión de la red 0.3 USDT( ≈ 0,30 $) e Importe del retiro 1 USDC como minimo* / Depósito mín.: 0,001 USDT*  
LTC =  Comisión de la red 0.0001 LTC e Importe del retiro 0.001 LTC como minimo* / Depósito mín.: 0,00000001 LTC*
BNB =  Comisión de la red 0.0002 BNB e Importe del retiro 0.0002 BNB como minimo*  / Depósito mín.: 0,000 BNB*
XRP =  Comisión de la red 0.2 XRP XRP e Importe del retiro 1.2 XRP como minimo*  / Depósito mín.: 0.01 XRP*
ALGO = Comisión de la red 0.01 ALGO e Importe del retiro 10 ALGO como minimo* / Depósito mín.: 1 ALGO
ANIME = Comisión de la red 16 ANIME ( ≈ 0,37 $) e Importe del retiro 30 ANIME como minimo* /Depósito mín.: 1 ANIME
APT = Comisión de la red 0.01 APT( ≈ 0,04 $) e Importe del retiro 0.01 APT como minimo* /Depósito mín.: 1 APT
ARB = Comisión de la red 0.4 ARB( ≈ 0,12 $) e Importe del retiro 0.4 ARB como minimo* /Depósito mín.:  0.00000001 ARB
ATOM = Comisión de la red 0.005 ATOM( ≈ 0,02 $) e Importe del retiro 0.015 ATOM como minimo* /Depósito mín.: 0.0001 ATOM       
AVAX = Comisión de la red 0.008 AVAX( ≈ 0,15 $) e Importe del retiro 0.008 AVAX como minimo* /Depósito mín.: 0 AVAX
AXL =  Comisión de la red 0.005 AXL( ≈ 0,005 $) e Importe del retiro 0.005 AXL como minimo* /  Depósito mín.: 0 AXL
BB = Comisión de la red 1 BB( ≈ 0,09 $) e Importe del retiro 1 BB como minimo* / Depósito mín.: 0 BB
BEL = Comisión de la red 0.12 BEL( ≈ 0,03 $) e Importe del retiro 0.12 BEL como minimo* / Depósito mín.: 0 BEL
BERA = Comisión de la red 0.000001 BERA( ≈ 0,01 $) e Importe del retiro 0.00001 BERA como minimo* /Depósito mín.: 0 BERA
BOME = Comisión de la red 400 BOME( ≈ 0,64 $) e Importe del retiro 200 BOME como minimo* / Depósito mín.: 0 BOME
BONK = Comisión de la red 40,000 BONK( ≈ 0,58 $) e Importe del retiro 50,000 BONK como minimo* /Depósito mín.: 0 BONK
C98 = Comisión de la red 0.3 C98( ≈ 0,01 $) e Importe del retiro 0.3 C98 como minimo* /Depósito mín.: 0 C98
CAKE = Comisión de la red 0.023 CAKE( ≈ 0,05 $) e Importe del retiro 0.023 CAKE como minimo* /Depósito mín.: 0 CAKE
CATI = Comisión de la red 0.3 CATI( ≈ 0,02 $) e Importe del retiro 0.3 CATI como minimo* /Depósito mín.: 0 CAT
CELO = Comisión de la red 0.001 CELO( ≈ 0,01 $) e Importe del retiro 0.002 CELO como minimo* /Depósito mín.: 0 CELO
CGPT = Comisión de la red 2 CGPT( ≈ 0,18 $) e Importe del retiro 2 CGPT como minimo* /Depósito mín.: 0 CGPT
CHZ =  Comisión de la red 0 CHZ( ≈ 0,01 $) e Importe del retiro  0,0002 CHZ como minimo* /Depósito mín.: 0 CHZ
CYBER = Comisión de la red 0.1 CYBER( ≈ 0,13 $) e Importe del retiro 0.1 CYBER como minimo* /Depósito mín.: 0 CYBER 
DOGS = Comisión de la red 50 DOGS( ≈ 0,01 $) e Importe del retiro 50 DOGS como minimo* /Depósito mín.: 0 DOGS
DOT = Comisión de la red 0.08 DOT( ≈ 0,30 $) e Importe del retiro 2 DOT como minimo* /Depósito mín.: 1.05 DOT
DYDX = Comisión de la red 0.2 DYDX( ≈ 0,10 $) e Importe del retiro 0.2 DYDX como minimo* /Depósito mín.: 0.000000000000000001 DYDX
EGLD = Comisión de la red 0.001 EGLD( ≈ 0,001 $) e Importe del retiro 0.01 EGLD como minimo* /Depósito mín.: 0 EGLD
ENJ = Comisión de la red 0.001 ENJ( ≈ 0,001 $) e Importe del retiro 0.1 ENJ como minimo* /Depósito mín.: 0 ENJ
FIDA = Comisión de la red 7 FIDA( ≈ 0,47 $) e Importe del retiro 1.5 FIDA como minimo* /Depósito mín.: 0 FIDA
FLOKI = Comisión de la red 2,617 FLOKI( ≈ 0,19 $) e Importe del retiro 2,617 FLOKI como minimo* /Depósito mín.: 0 FLOKI
FLOW = Comisión de la red 0.01 FLOW( ≈ 0,01 $) e Importe del retiro 0.01 FLOW como minimo* /Depósito mín.: 0 FLOW
GMT = Comisión de la red 0.25 GMT( ≈ 0,01 $) e Importe del retiro 0.25 GMT como minimo* /Depósito mín.: 0 GMT
GMX = Comisión de la red 0.006 GMX( ≈ 0,09 $) e Importe del retiro 0.006 GMX como minimo* /Depósito mín.: 0 GMX
HAEDAL = Comisión de la red 1 HAEDAL( ≈ 0,11 $) e Importe del retiro 1 HAEDAL como minimo* /Depósito mín.: 0 HAEDAL
HBAR = Comisión de la red 1 HBAR( ≈ 0,15 $) e Importe del retiro 2 HBAR como minimo* /Depósito mín.: 0 HBAR
HMSTR = Comisión de la red 80 HMSTR( ≈ 0,06 $) e Importe del retiro 80 HMSTR como minimo* /Depósito mín.: 0 HMSTR
HOME = Comisión de la red 20 HOME( ≈ 0,48 $) e Importe del retiro 40 HOME como minimo* /Depósito mín.: 0 HOME
HYPER = Comisión de la red 5 HYPER( ≈ 0,54 $) e Importe del retiro 10 HYPER como minimo* /Depósito mín.: 0 HYPER
ICP =  Comisión de la red 0.0003 ICP( ≈ 0,01 $) e Importe del retiro 0.0003 ICP como minimo* /Depósito mín.: 0 ICP
ICX = Comisión de la red 0.02 ICX( ≈ 0,02 $) e Importe del retiro 0.02 ICX como minimo* /Depósito mín.: 0 ICX 
INJ = Comisión de la red 0.008 INJ( ≈ 0,08 $) e Importe del retiro 0.008 INJ como minimo* /Depósito mín.: 0.000000000000000001 INJ
IO = Comisión de la red 1 IO( ≈ 0,68 $) e Importe del retiro 0.02 IO como minimo* /Depósito mín.: 0 IO
JUP = Comisión de la red 0.8 JUP( ≈ 0,31 $) e Importe del retiro 0.5 JUP como minimo* /Depósito mín.: 0 JUP
KAIA = Comisión de la red 0.1 KAIA( ≈ 0,01 $) e Importe del retiro 0.1 KAIAP como minimo* /Depósito mín.: 0 KAIA
KMNO = Comisión de la red 10 KMNO( ≈ 0,66 $) e Importe del retiro 10 KMNO como minimo* /Depósito mín.: 0 KMNO
KSM = Comisión de la red 0.01 KSM( ≈ 0,14 $) e Importe del retiro 0.01 KSM como minimo* /Depósito mín.: 0 KSM
LUNA = Comisión de la red 0.01 LUNA( ≈ 0,14 $) e Importe del retiro 0.01 LUNA como minimo* /Depósito mín.: 0 LUNA
MAGIC = Comisión de la red 0.3 MAGIC( ≈ 0,04 $) e Importe del retiro 0.3 MAGIC como minimo* /Depósito mín.: 12 MAGIC
MANTA = Comisión de la red 1 MANTA( ≈ 0,19 $) e Importe del retiro 2 MANTA como minimo* /Depósito mín.: 0 MANTA
MBOX = Comisión de la red 1 MBOX( ≈ 0,04 $) e Importe del retiro 1 MBOX como minimo* /Depósito mín.: 0 MBOX
MINA = Comisión de la red 0.5 MINA( ≈ 0,08 $) e Importe del retiro 2.5 MINA como minimo* /Depósito mín.: 0 MINA
NEAR = Comisión de la red 0.01 NEAR( ≈ 0,02 $) e Importe del retiro 0.2 NEAR como minimo* /Depósito mín.: 0 NEAR
NOT = Comisión de la red 30 NOT( ≈ 0,05 $) e Importe del retiro 30 NOT como minimo* /Depósito mín.: 0 NOT
ONE = Comisión de la red 0.1 ONE( ≈ 0,01 $) e Importe del retiro 60 ONE como minimo* /Depósito mín.: 0 ONE
OP = Comisión de la red 0.1 OP( ≈ 0,05 $) e Importe del retiro 0.1 OP como minimo* /Depósito mín.: 0 OP
PSG = Comisión de la red 0 PSG( ≈ 0,001 $) e Importe del retiro 0 PSG como minimo* /Depósito mín.: 0 PSG
PYTH = Comisión de la red 3 PYTH( ≈ 0,29 $) e Importe del retiro 2 PYTH como minimo* /Depósito mín.: 0 PYTH
RDNT = Comisión de la red 0.3 RDNT( ≈ 0,01 $) e Importe del retiro 0.3 RDNT como minimo* /Depósito mín.: 0 RDNT
ROSE = Comisión de la red 0.1 ROSE( ≈ 0,01 $) e Importe del retiro 0.1 ROSE como minimo* /Depósito mín.: 0 ROSE
SCRT = Comisión de la red 0.1 SCRT( ≈ 0,001 $) e Importe del retiro 0.1 SCRT como minimo* /Depósito mín.: 0 SCRT
SEI = Comisión de la red 0.2 SEI( ≈ 0,003 $) e Importe del retiro 0.2 SEI como minimo* /Depósito mín.: 0 SEI 
SHIB = Comisión de la red 7,000 SHIB( ≈ 0,008 $) e Importe del retiro 7,000 SHIB como minimo* /Depósito mín.: 0 SHIB
SIGN = Comisión de la red 1 SIGN( ≈ 0,006 $) e Importe del retiro 1 SIGN como minimo* /Depósito mín.: 0 SIGN
STX = Comisión de la red 1 STX( ≈ 0,061 $) e Importe del retiro 2 STX como minimo* /Depósito mín.: 0 STX
SUI = Comisión de la red 0.02 SUI( ≈ 0,05 $) e Importe del retiro 0.02 SUI como minimo* /Depósito mín.: 0 SUI
TIA = Comisión de la red 0.1 TIA( ≈ 0,16 $) e Importe del retiro 0.1 TIA como minimo* /Depósito mín.: 0 TIA 
TON = Comisión de la red 0.02 TON( ≈ 0,05 $) e Importe del retiro 0.02 TON como minimo* /Depósito mín.: 0.00000001 TON
TRUMP = Comisión de la red 0.05 TRUMP( ≈ 0,47 $) e Importe del retiro 0.1 TRUMP como minimo* /Depósito mín.: 0 TRUMP
TRX = Comisión de la red 1 TRX( ≈ 0,27 $) e Importe del retiro 1 TRX como minimo* /Depósito mín.: 1 TRX
WAXP = Comisión de la red 2 WAXP ( ≈ 0,04 $) e Importe del retiro 2 WAXP como minimo* /Depósito mín.: 0 WAXP
WIF = Comisión de la red 0.6 WIF ( ≈ 0,46 $) e Importe del retiro 0.6 WIF como minimo* /Depósito mín.: 0 WIF                                            WCT = Comisión de la red 1 WCT ( ≈ 0,35 $) e Importe del retiro 2 WCT como minimo* /Depósito mín.: 0 WCT
WLD =  Comisión de la red 0.2 WLD ( ≈ 0,18 $) e Importe del retiro 0.2 WLD como minimo* /Depósito mín.: 0 WLD
XAI = Comisión de la red 0.1 XAI ( ≈ 0,01 $) e Importe del retiro 0.2 XAI como minimo* /Depósito mín.: 0 XAI
XLM = Comisión de la red 0.02 XLM ( ≈ 0,01 $) e Importe del retiro 8 XLM como minimo* /Depósito mín.: 0 XLM
ZIL = Comisión de la red 0.2 ZIL ( ≈ 0,01 $) e Importe del retiro 0.4 ZIL como minimo* /Depósito mín.: 0 ZIL
ZRO = Comisión de la red 0.1 ZRO ( ≈ 0,18 $) e Importe del retiro 0.1 ZRO como minimo* /Depósito mín.: 0 ZRO



## 4. **Comisiones**
- Fee de trading en Binance y BYBIT para cada par
BINANCE 0.1% 
BYBIT   0.1%

- Fee (si existe) de depósito en ambos exchanges
BINANCE 0
BYBIT  0

## 5. **Balances iniciales**
- Cuánto capital tienes en USDT y/o en otros activos en cada exchange
BINANCE 20
BYBIT  20

## 6. **Umbrales y control de riesgo**
- Monto mínimo/máximo por operación
BINANCE 10
BYBIT  10

- Spread mínimo necesario para ejecutar arbitraje (porcentaje o cantidad neta)

- Slippage máximo tolerado
que me recomiendas ?
## 7. **Límites y reglas del exchange**
- Límites de retiro por día/mes
BINANCE NINGUNO 
BYBIT NINGUNO
- Límites de trading
BINANCE NINGUNO
BYBIT  NINGUNO
- Restricciones/regulaciones por país
BINANCE NINGUNO
BYBIT NINGUNO

===================================================================================================================================
BACKEND

ROUTES:

const express = require('express');
const fs = require('fs');
const path = require('path');
const router = express.Router();
const configPath = path.join(__dirname, '..', 'config.js');

// GET config (ya lo tienes)
router.get('/config', (req, res) => {
  // Si usas module.exports = { ... }, haz require dinámico
  delete require.cache[require.resolve(configPath)];
  const config = require(configPath);
  res.json(config);
});

// PUT config (GUARDAR)
router.put('/config', express.json(), (req, res) => {
  const newConfig = req.body;
  // OJO: Sobreescribe config.js. Haz backup antes de producción.
  const fileContents = "module.exports = " + JSON.stringify(newConfig, null, 2);
  fs.writeFile(configPath, fileContents, (err) => {
    if (err) {
      console.error("Error guardando config.js:", err);
      return res.status(500).json({ error: "Error guardando configuración." });
    }
    res.json({ ok: true });
  });
});

module.exports = router;

------------------------------------------------------------------------------------------------------------

router.post('/rebalance', async (req, res) => {
  const { amount, fromExchange, toExchange, token } = req.body;
  try {
    if (amount && fromExchange && toExchange) {
      await portfolioManager.rebalanceCustom({ amount: Number(amount), fromExchange, toExchange, token });
      return res.json({ success: true, message: `Rebalanceo manual de ${amount} de ${fromExchange} a ${toExchange} ejecutado.` });
    } else {
      await portfolioManager.rebalancePortfolio();
      return res.json({ success: true, message: "Rebalanceo auto ejecutado." });
    }
  } catch (err) {
    console.error(err)
    return res.status(500).json({ success: false, message: err.message });
  }
});

----------------------------------------------------------------------------------------------------------------

const express = require("express");
const router = express.Router();
const path = require("path");
const configPath = path.join(__dirname, "..", "config.js");
const fs = require("fs");

// Cargar config como objeto JS común
function loadConfig() {
  delete require.cache[require.resolve(configPath)];
  return require(configPath);
}

// Guardar config sobrescribiendo el archivo config.js
function saveConfig(newConfig) {
  fs.writeFileSync(
    configPath,
    "module.exports = " + JSON.stringify(newConfig, null, 2) + ";"
  );
}

// GET /api/risk
router.get("/", (req, res) => {
  try {
    const config = loadConfig();
    res.json(config.RISK_MANAGEMENT || {});
  } catch (e) {
    res.status(500).json({ error: "No se pudo leer la configuración de riesgo", details: String(e) });
  }
});

// PUT /api/risk
router.put("/", (req, res) => {
  try {
    const config = loadConfig();
    config.RISK_MANAGEMENT = req.body;
    saveConfig(config);
    res.json({ ok: true });
  } catch (e) {
    res.status(500).json({ error: "No se pudo guardar la configuración de riesgo", details: String(e) });
  }
});

module.exports = router;
-----------------------------------------------------------------------------------------------------
SRC

SRC/AI:

// ========== MÓDULO DE ASESOR DE TRADING CON IA ==========
// Soporte para IA heurística y Machine Learning avanzado (TensorFlow.js)
// Requiere: npm install @tensorflow/tfjs-node
const config = require('../strategies/config')
const EventEmitter = require('events');

let tf = null; // TensorFlow.js para Node

class AITradingAdvisor extends EventEmitter {
  constructor() {
    super();
    this.model = null
    this.modelType = config.AI_TRADING && config.AI_TRADING.MODE === "ml" ? "ml" : "heuristic";
    this.initialized = false
    this.marketData = {
      priceHistory: new Map(),
      volatilityHistory: new Map(),
      spreadHistory: new Map(),
      profitHistory: [],
    }

    this.initialize()
  }

  async initialize() {
    try {
      // Cargar modelo ML si está activado, sino heurístico
      this.model = await this.createModel()
      this.initialized = true
      console.log(`✅ Módulo de IA inicializado (${this.modelType})`)
    } catch (error) {
      console.error("❌ Error inicializando módulo de IA:", error.message)
    }
  }

  // ----------- ML avanzado ----------------
  async loadMLModel() {
    try {
      tf = require('@tensorflow/tfjs-node');
      // Asegúrate de tener model.json y archivos .bin en el path configurado
      this.model = await tf.loadLayersModel(`file://${config.AI_TRADING.MODEL_PATH}/model.json`);
      this.modelType = "ml";
      console.log("✅ Modelo ML (TensorFlow.js) cargado correctamente");
    } catch (err) {
      console.error("❌ Error cargando modelo ML, usando heurística. Detalle:", err.message);
      this.modelType = "heuristic";
      this.model = await this.createHeuristicModel();
    }
  }

  // ----------- Alternador de motor -----------
  async createModel() {
    if (config.AI_TRADING && config.AI_TRADING.MODE === "ml") {
      await this.loadMLModel();
      return this.model;
    }
    return this.createHeuristicModel();
  }

  createHeuristicModel() {
    console.log("🤖 Usando modelo heurístico simplificado (sin TensorFlow)");
    return {
      predict: (inputData) => {
        // Lógica heurística simple
        const [spread, volatility, hour, dayOfWeek, lastProfit, marketTrend] = inputData.dataSync
          ? inputData.dataSync()
          : inputData[0]

        let probability = 0.5 // Base

        // Ajustar por spread
        if (spread > 0.5) probability += 0.2
        if (spread > 1.0) probability += 0.1

        // Ajustar por volatilidad
        if (volatility < 2.0) probability += 0.1
        if (volatility > 5.0) probability -= 0.2

        // Ajustar por hora del día
        if (hour >= 8 && hour <= 16) probability += 0.1 // Horario activo

        // Ajustar por tendencia de mercado
        if (marketTrend > 0) probability += 0.1

        return { dataSync: () => [Math.min(0.95, Math.max(0.05, probability))] }
      },
    }
  }

  // Registrar datos de mercado para entrenamiento
  recordMarketData(pair, buyPrice, sellPrice, spread, volatility, wasSuccessful = null) {
    const now = new Date()
    const timestamp = now.getTime()
    const hour = now.getHours()
    const dayOfWeek = now.getDay()

    // Registrar precios
    if (!this.marketData.priceHistory.has(pair)) {
      this.marketData.priceHistory.set(pair, [])
    }
    this.marketData.priceHistory.get(pair).push({ buyPrice, sellPrice, timestamp })

    // Registrar spread
    if (!this.marketData.spreadHistory.has(pair)) {
      this.marketData.spreadHistory.set(pair, [])
    }
    this.marketData.spreadHistory.get(pair).push({ spread, timestamp })

    // Registrar volatilidad
    if (!this.marketData.volatilityHistory.has(pair)) {
      this.marketData.volatilityHistory.set(pair, [])
    }
    this.marketData.volatilityHistory.get(pair).push({ volatility, timestamp })

    // Registrar resultado si está disponible
    if (wasSuccessful !== null) {
      this.marketData.profitHistory.push({
        pair,
        spread,
        volatility,
        hour,
        dayOfWeek,
        wasSuccessful,
        timestamp,
      })
    }

    // Limitar el tamaño del historial
    this.pruneHistoricalData()
  }

  pruneHistoricalData() {
    const MAX_HISTORY_ITEMS = 1000
    const ONE_WEEK_MS = 7 * 24 * 60 * 60 * 1000
    const cutoffTime = Date.now() - ONE_WEEK_MS

    // Eliminar datos antiguos
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      this.marketData.priceHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.spreadHistory.entries()) {
      this.marketData.spreadHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      this.marketData.volatilityHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    this.marketData.profitHistory = this.marketData.profitHistory
      .filter((item) => item.timestamp > cutoffTime)
      .slice(-MAX_HISTORY_ITEMS)
  }

  async trainModel() {
    if (this.marketData.profitHistory.length < 10) {
      return { success: false, message: "Datos insuficientes para entrenar el modelo heurístico" }
    }

    // Simular entrenamiento con heurísticas
    const recentSuccessRate = this.getRecentProfitTrend()

    console.log(`🤖 Modelo heurístico actualizado con ${this.marketData.profitHistory.length} datos históricos`)

    return {
      success: true,
      accuracy: (recentSuccessRate + 1) / 2, // Convertir de -1,1 a 0,1
      loss: 1 - (recentSuccessRate + 1) / 2,
    }
  }

  getRecentProfitTrend() {
    // Calcular tendencia de ganancias recientes (-1 a 1)
    const recentProfits = this.marketData.profitHistory.slice(-10)
    if (recentProfits.length < 5) return 0

    const successCount = recentProfits.filter((p) => p.wasSuccessful).length
    return (successCount / recentProfits.length) * 2 - 1
  }

  getMarketTrend(pair) {
    // Calcular tendencia del mercado (-1 a 1)
    const priceHistory = this.marketData.priceHistory.get(pair)
    if (!priceHistory || priceHistory.length < 10) return 0

    const recentPrices = priceHistory.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)
    const firstPrice = recentPrices[0]
    const lastPrice = recentPrices[recentPrices.length - 1]

    return (lastPrice - firstPrice) / firstPrice
  }

  // Ahora alterna ML y heurística
  async predictOpportunitySuccess(opportunity) {
    if (!this.initialized) {
      return { probability: 0.5, confidence: "LOW", engine: this.modelType }
    }

    try {
      const now = new Date()
      const hour = now.getHours()
      const dayOfWeek = now.getDay()

      // Preparar datos de entrada igual para ambos motores
      const inputData = [
        opportunity.grossProfit,
        this.getVolatility(opportunity.pair),
        hour / 24,
        dayOfWeek / 6,
        this.getRecentProfitTrend(),
        this.getMarketTrend(opportunity.pair),
      ]

      let probability = 0.5;

      if (this.modelType === "ml" && this.model && tf) {
        // ML: Usa tensor
        const inputTensor = tf.tensor2d([inputData]);
        const prediction = this.model.predict(inputTensor);
        probability = prediction.dataSync()[0];
      } else {
        // Heurístico
        const prediction = this.model.predict([inputData])
        probability = prediction.dataSync()[0]
      }

      // Determinar nivel de confianza
      let confidence = "MEDIUM"
      if (probability > 0.8 || probability < 0.2) {
        confidence = "HIGH"
      } else if (probability > 0.4 && probability < 0.6) {
        confidence = "LOW"
      }

      return { probability, confidence, engine: this.modelType }
    } catch (error) {
      console.error("Error en predicción:", error)
      return { probability: 0.5, confidence: "LOW", engine: this.modelType }
    }
  }

  getVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length === 0) return 0

    // Obtener volatilidad más reciente
    return volatilityHistory[volatilityHistory.length - 1].volatility
  }

  async generateTradingSuggestions(bot) {
    try {
      // Obtener oportunidades actuales
      const opportunities = await bot.findArbitrageOpportunities()

      // Analizar cada oportunidad con IA
      const enhancedOpportunities = await Promise.all(
        opportunities.map(async (opportunity) => {
          // Predecir probabilidad de éxito
          const prediction = await this.predictOpportunitySuccess(opportunity)

          // Calcular tamaño óptimo basado en confianza
          const optimalSize = this.calculateOptimalSize(opportunity, prediction.probability, prediction.confidence)

          // Analizar mejor momento para ejecutar
          const timing = this.analyzeTradingTiming(opportunity.pair)

          return {
            ...opportunity,
            aiPrediction: {
              successProbability: prediction.probability,
              confidence: prediction.confidence,
              optimalSize,
              recommendedTiming: timing.recommendation,
              reasoning: this.generateReasoning(opportunity, prediction, timing),
              engine: prediction.engine // Para saber si fue ML o heurístico
            },
          }
        }),
      )

      // Ordenar por probabilidad de éxito ajustada por profit
      const sortedOpportunities = enhancedOpportunities
        .filter((o) => o.profitable)
        .sort((a, b) => {
          const scoreA = a.aiPrediction.successProbability * a.finalProfit
          const scoreB = b.aiPrediction.successProbability * b.finalProfit
          return scoreB - scoreA
        })

      // Generar recomendaciones generales
      const generalRecommendations = this.generateGeneralRecommendations(bot)

      return {
        opportunities: sortedOpportunities,
        generalRecommendations,
        marketInsights: this.generateMarketInsights(),
        lastUpdated: new Date().toISOString(),
      }
    } catch (error) {
      console.error("Error generando sugerencias de trading:", error)
      return {
        opportunities: [],
        generalRecommendations: [
          {
            type: "ERROR",
            message: `Error generando sugerencias: ${error.message}`,
            importance: "HIGH",
          },
        ],
        lastUpdated: new Date().toISOString(),
      }
    }
  }

  calculateOptimalSize(opportunity, probability, confidence) {
    // Base: tamaño mínimo del par
    let size = opportunity.tradeAmount

    // Ajustar según probabilidad de éxito
    if (probability > 0.8) {
      // Alta probabilidad de éxito
      size = Math.min(size * 1.5, opportunity.pair.maxTradeAmount)
    } else if (probability < 0.4) {
      // Baja probabilidad de éxito
      size = Math.max(size * 0.5, opportunity.pair.minTradeAmount)
    }

    // Ajustar según nivel de confianza
    if (confidence === "LOW") {
      size = Math.max(size * 0.7, opportunity.pair.minTradeAmount)
    }

    return Number.parseFloat(size.toFixed(2))
  }

  analyzeTradingTiming(pair) {
    const now = new Date()
    const hour = now.getHours()

    // Analizar patrones históricos por hora
    const hourlySuccessRate = this.calculateHourlySuccessRate()
    const currentHourRate = hourlySuccessRate[hour] || 0.5

    let recommendation = "NEUTRAL"
    let reason = ""

    if (currentHourRate > 0.7) {
      recommendation = "EXECUTE_NOW"
      reason = `Alta tasa de éxito histórica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del día`
    } else if (currentHourRate < 0.3) {
      recommendation = "WAIT"
      reason = `Baja tasa de éxito histórica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del día`
    }

    // Verificar volatilidad reciente
    const recentVolatility = this.getRecentVolatility(pair)
    if (recentVolatility > 3.0) {
      recommendation = "WAIT"
      reason = `Alta volatilidad reciente (${recentVolatility.toFixed(1)}%)`
    }

    return { recommendation, reason }
  }

  calculateHourlySuccessRate() {
    const hourlyStats = Array(24)
      .fill(0)
      .map(() => ({ success: 0, total: 0 }))

    // Calcular estadísticas por hora
    this.marketData.profitHistory.forEach((item) => {
      const hour = new Date(item.timestamp).getHours()
      hourlyStats[hour].total++
      if (item.wasSuccessful) {
        hourlyStats[hour].success++
      }
    })

    // Calcular tasas de éxito
    return hourlyStats.map((stats) => (stats.total > 0 ? stats.success / stats.total : 0.5))
  }

  getRecentVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length < 5) return 0

    // Calcular volatilidad promedio de las últimas 5 mediciones
    const recentVolatilities = volatilityHistory.slice(-5).map((v) => v.volatility)
    return recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length
  }

  generateReasoning(opportunity, prediction, timing) {
    const reasoning = []

    // Análisis de probabilidad
    if (prediction.probability > 0.8) {
      reasoning.push(`Alta probabilidad de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else if (prediction.probability < 0.4) {
      reasoning.push(`Baja probabilidad de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else {
      reasoning.push(`Probabilidad moderada de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    }

    // Análisis de profit
    if (opportunity.finalProfit > opportunity.pair.minProfit * 2) {
      reasoning.push(`Profit potencial alto (${opportunity.finalProfit.toFixed(2)}%)`)
    } else {
      reasoning.push(`Profit potencial moderado (${opportunity.finalProfit.toFixed(2)}%)`)
    }

    // Análisis de timing
    reasoning.push(timing.reason)

    // Análisis de riesgo
    const riskLevel = this.assessRiskLevel(opportunity)
    reasoning.push(`Nivel de riesgo: ${riskLevel.level} (${riskLevel.reason})`)

    return reasoning
  }

  assessRiskLevel(opportunity) {
    // Evaluar nivel de riesgo basado en múltiples factores
    let riskScore = 0
    const reasons = []

    // Factor 1: Volatilidad
    const volatility = this.getVolatility(opportunity.pair)
    if (volatility > 4.0) {
      riskScore += 2
      reasons.push(`alta volatilidad (${volatility.toFixed(1)}%)`)
    } else if (volatility > 2.0) {
      riskScore += 1
      reasons.push(`volatilidad moderada (${volatility.toFixed(1)}%)`)
    }

    // Factor 2: Spread sospechoso
    if (opportunity.grossProfit > config.SECURITY.SUSPICIOUS_PROFIT_THRESHOLD * 0.8) {
      riskScore += 2
      reasons.push(`spread inusualmente alto (${opportunity.grossProfit.toFixed(2)}%)`)
    }

    // Factor 3: Historial del par
    const pairHistory = this.getPairSuccessRate(opportunity.pair)
    if (pairHistory.rate < 0.4 && pairHistory.total > 5) {
      riskScore += 1
      reasons.push(`historial de éxito bajo (${(pairHistory.rate * 100).toFixed(1)}%)`)
    }

    // Determinar nivel
    let level = "BAJO"
    if (riskScore >= 3) {
      level = "ALTO"
    } else if (riskScore >= 1) {
      level = "MEDIO"
    }

    return {
      level,
      reason: reasons.length > 0 ? reasons.join(", ") : "sin factores de riesgo significativos",
    }
  }

  getPairSuccessRate(pair) {
    const pairHistory = this.marketData.profitHistory.filter((item) => item.pair === pair)

    if (pairHistory.length === 0) {
      return { rate: 0.5, total: 0 }
    }

    const successCount = pairHistory.filter((item) => item.wasSuccessful).length
    return {
      rate: successCount / pairHistory.length,
      total: pairHistory.length,
    }
  }

  generateGeneralRecommendations(bot) {
    const recommendations = []

    // Recomendación 1: Basada en rendimiento reciente
    const recentPerformance = this.analyzeRecentPerformance()
    if (recentPerformance.profitRate < 0.3 && recentPerformance.tradeCount > 5) {
      recommendations.push({
        type: "STRATEGY_ADJUSTMENT",
        message: `Considere ajustar parámetros de trading. Tasa de éxito reciente: ${(recentPerformance.profitRate * 100).toFixed(1)}%`,
        importance: "HIGH",
      })
    }

    // Recomendación 2: Basada en volatilidad del mercado
    const marketVolatility = this.getAverageMarketVolatility()
    if (marketVolatility > 4.0) {
      recommendations.push({
        type: "RISK_WARNING",
        message: `Alta volatilidad del mercado (${marketVolatility.toFixed(1)}%). Considere reducir tamaños de operación`,
        importance: "HIGH",
      })
    }

    // Recomendación 3: Oportunidad de rebalanceo
    if (bot.riskManager) {
      const imbalance = this.detectExchangeImbalance(bot)
      if (imbalance.detected) {
        recommendations.push({
          type: "REBALANCE",
          message: `Desbalance detectado: ${imbalance.message}`,
          importance: "MEDIUM",
        })
      }
    }

    // Recomendación 4: Mejores pares para trading
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recommendations.push({
        type: "PAIR_SUGGESTION",
        message: `Mejores pares por rendimiento: ${bestPairs.map((p) => p.pair).join(", ")}`,
        importance: "MEDIUM",
      })
    }

    return recommendations
  }

  analyzeRecentPerformance() {
    // Analizar rendimiento de las últimas 10 operaciones
    const recentTrades = this.marketData.profitHistory.slice(-10)

    if (recentTrades.length === 0) {
      return { profitRate: 0.5, tradeCount: 0 }
    }

    const successCount = recentTrades.filter((trade) => trade.wasSuccessful).length
    return {
      profitRate: successCount / recentTrades.length,
      tradeCount: recentTrades.length,
    }
  }

  getAverageMarketVolatility() {
    let totalVolatility = 0
    let pairCount = 0

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      if (history.length > 0) {
        // Obtener volatilidad promedio de las últimas 5 mediciones
        const recentVolatilities = history.slice(-5).map((v) => v.volatility)
        const avgVolatility = recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length

        totalVolatility += avgVolatility
        pairCount++
      }
    }

    return pairCount > 0 ? totalVolatility / pairCount : 0
  }

  detectExchangeImbalance(bot) {
    try {
      // Verificar si hay un desbalance significativo entre exchanges
      const binanceBalance = bot.balanceCache.get("BINANCE")
      const kucoinBalance = bot.balanceCache.get("KUCOIN")

      if (!binanceBalance || !kucoinBalance) {
        return { detected: false }
      }

      const binanceUsdt = binanceBalance.balances.USDT?.total || 0
      const kucoinUsdt = kucoinBalance.balances.USDT?.total || 0

      const totalUsdt = binanceUsdt + kucoinUsdt
      const threshold = totalUsdt * 0.3 // 30% de desbalance

      if (Math.abs(binanceUsdt - kucoinUsdt) > threshold) {
        const fromExchange = binanceUsdt > kucoinUsdt ? "Binance" : "KuCoin"
        const toExchange = binanceUsdt > kucoinUsdt ? "KuCoin" : "Binance"
        const amount = Math.abs(binanceUsdt - kucoinUsdt) / 2

        return {
          detected: true,
          message: `Considere transferir ~${amount.toFixed(2)} USDT de ${fromExchange} a ${toExchange}`,
        }
      }

      return { detected: false }
    } catch (error) {
      console.error("Error detectando desbalance:", error)
      return { detected: false }
    }
  }

  identifyBestPerformingPairs() {
    const pairStats = new Map()

    // Recopilar estadísticas por par
    this.marketData.profitHistory.forEach((item) => {
      if (!pairStats.has(item.pair)) {
        pairStats.set(item.pair, { success: 0, total: 0 })
      }

      const stats = pairStats.get(item.pair)
      stats.total++
      if (item.wasSuccessful) {
        stats.success++
      }
    })

    // Convertir a array y calcular tasas
    const pairPerformance = Array.from(pairStats.entries())
      .map(([pair, stats]) => ({
        pair,
        successRate: stats.total > 0 ? stats.success / stats.total : 0,
        tradeCount: stats.total,
      }))
      .filter((item) => item.tradeCount >= 5) // Mínimo 5 operaciones

    // Ordenar por tasa de éxito
    pairPerformance.sort((a, b) => b.successRate - a.successRate)

    // Devolver los 3 mejores
    return pairPerformance.slice(0, 3)
  }

  generateMarketInsights() {
    return {
      marketVolatility: this.getAverageMarketVolatility(),
      bestTradingHours: this.identifyBestTradingHours(),
      recentTrends: this.identifyRecentTrends(),
      lastUpdated: new Date().toISOString(),
    }
  }

  identifyBestTradingHours() {
    const hourlySuccessRate = this.calculateHourlySuccessRate()

    // Encontrar las mejores horas (top 3)
    const hourRanking = hourlySuccessRate
      .map((rate, hour) => ({ hour, rate }))
      .filter((item) => item.rate > 0) // Solo horas con datos
      .sort((a, b) => b.rate - a.rate)
      .slice(0, 3)

    return hourRanking.map((item) => ({
      hour: item.hour,
      successRate: item.rate,
      formattedHour: `${item.hour}:00 - ${item.hour + 1}:00`,
    }))
  }

  identifyRecentTrends() {
    const trends = []

    // Analizar tendencias de precios por par
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      if (history.length < 10) continue

      // Obtener precios recientes
      const recentPrices = history.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)

      // Calcular tendencia
      const firstPrice = recentPrices[0]
      const lastPrice = recentPrices[recentPrices.length - 1]
      const percentChange = ((lastPrice - firstPrice) / firstPrice) * 100

      // Determinar dirección
      let direction = "NEUTRAL"
      if (percentChange > 1.0) {
        direction = "UP"
      } else if (percentChange < -1.0) {
        direction = "DOWN"
      }

      trends.push({
        pair,
        direction,
        percentChange,
        strength: Math.abs(percentChange) > 3.0 ? "STRONG" : "MODERATE",
      })
    }

    return trends
  }

  // ======= AGREGADO PARA DASHBOARD (RECOMENDACIONES SIMPLES) =======
  /**
   * Devuelve recomendaciones actuales simples para el dashboard.
   * (Puedes mejorar esta función para mostrar aún más información si lo deseas)
   */
  getCurrentRecommendations() {
    // Ejemplo básico usando heurística y datos simulados
    const now = new Date()
    const hour = now.getHours()
    const recs = []

    // Ejemplo de recomendación por horario
    if (hour >= 8 && hour <= 16) {
      recs.push({ texto: "Mayor volumen: operar con más confianza", probabilidad: 80 })
    } else {
      recs.push({ texto: "Mercado lento: precaución al operar", probabilidad: 55 })
    }

    // Ejemplo de profit reciente
    const perf = this.analyzeRecentPerformance()
    if (perf.profitRate > 0.7) {
      recs.push({ texto: "El bot está en racha positiva", probabilidad: Math.round(perf.profitRate * 100) })
    } else if (perf.profitRate < 0.3) {
      recs.push({ texto: "Racha negativa: considere cambiar la estrategia", probabilidad: Math.round((1 - perf.profitRate) * 100) })
    } else {
      recs.push({ texto: "Rendimiento estable, mantener parámetros", probabilidad: 60 })
    }

    // Sugerencia de par
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recs.push({ texto: `Mejores pares: ${bestPairs.map((p) => p.pair).join(", ")}`, probabilidad: 65 })
    }

    return recs
  }
}

module.exports = new AITradingAdvisor()

--------------------------------------------------------------------------------------------------------------

// ========== MOTOR DE MACHINE LEARNING AVANZADO ==========
const fs = require('fs').promises
const path = require('path')
const config = require("../strategies/config")

class MLEngine {
  constructor() {
    this.models = new Map()
    this.trainingData = []
    this.predictions = []
    this.modelAccuracy = new Map()
    this.featureImportance = new Map()
    this.lastTraining = 0
    this.minTrainingInterval = 3600000 // 1 hora
    
    this.initializeModels()
  }

  initializeModels() {
    // Modelo de predicción de precios
    this.models.set('PRICE_PREDICTION', {
      name: 'Predicción de Precios',
      type: 'REGRESSION',
      features: ['price', 'volume', 'rsi', 'macd', 'bollinger_position'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    // Modelo de detección de oportunidades
    this.models.set('OPPORTUNITY_DETECTION', {
      name: 'Detección de Oportunidades',
      type: 'CLASSIFICATION',
      features: ['spread', 'volume_ratio', 'price_volatility', 'market_sentiment'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    // Modelo de gestión de riesgo
    this.models.set('RISK_ASSESSMENT', {
      name: 'Evaluación de Riesgo',
      type: 'CLASSIFICATION',
      features: ['volatility', 'correlation', 'market_cap', 'liquidity'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    console.log('🤖 Modelos de ML inicializados:', Array.from(this.models.keys()))
  }

  async collectTrainingData(marketData, opportunity, result) {
    const features = this.extractFeatures(marketData, opportunity)
    
    const trainingPoint = {
      timestamp: Date.now(),
      features,
      opportunity,
      result,
      profit: result.profit || 0,
      success: result.success || false,
      executionTime: result.executionTime || 0,
    }

    this.trainingData.push(trainingPoint)

    // Mantener solo los últimos 10,000 puntos de datos
    if (this.trainingData.length > 10000) {
      this.trainingData = this.trainingData.slice(-10000)
    }

    // Entrenar modelos periódicamente
    if (this.shouldRetrain()) {
      await this.retrainModels()
    }
  }

  extractFeatures(marketData, opportunity) {
    return {
      // Características de precio
      price: opportunity.buyPrice,
      priceChange24h: marketData.priceChange24h || 0,
      volume24h: marketData.volume24h || 0,
      
      // Características técnicas
      rsi: this.calculateRSI(marketData.prices || []),
      macd: this.calculateMACD(marketData.prices || []),
      bollingerPosition: this.calculateBollingerPosition(marketData.prices || []),
      
      // Características de oportunidad
      spread: opportunity.finalProfit,
      volumeRatio: this.calculateVolumeRatio(marketData),
      priceVolatility: this.calculateVolatility(marketData.prices || []),
      
      // Características de mercado
      marketSentiment: this.calculateMarketSentiment(marketData),
      liquidity: marketData.liquidity || 0,
      correlation: this.calculateCorrelation(marketData),
      
      // Características temporales
      hourOfDay: new Date().getHours(),
      dayOfWeek: new Date().getDay(),
      isWeekend: [0, 6].includes(new Date().getDay()),
    }
  }

  calculateRSI(prices, period = 14) {
    if (prices.length < period + 1) return 50

    let gains = 0
    let losses = 0

    for (let i = 1; i <= period; i++) {
      const change = prices[prices.length - i] - prices[prices.length - i - 1]
      if (change > 0) gains += change
      else losses += Math.abs(change)
    }

    const avgGain = gains / period
    const avgLoss = losses / period
    
    if (avgLoss === 0) return 100
    
    const rs = avgGain / avgLoss
    return 100 - (100 / (1 + rs))
  }

  calculateMACD(prices, fastPeriod = 12, slowPeriod = 26) {
    if (prices.length < slowPeriod) return 0

    const fastEMA = this.calculateEMA(prices, fastPeriod)
    const slowEMA = this.calculateEMA(prices, slowPeriod)
    
    return fastEMA - slowEMA
  }

  calculateEMA(prices, period) {
    if (prices.length === 0) return 0
    
    const multiplier = 2 / (period + 1)
    let ema = prices[0]
    
    for (let i = 1; i < prices.length; i++) {
      ema = (prices[i] * multiplier) + (ema * (1 - multiplier))
    }
    
    return ema
  }

  calculateBollingerPosition(prices, period = 20) {
    if (prices.length < period) return 0.5

    const recentPrices = prices.slice(-period)
    const sma = recentPrices.reduce((a, b) => a + b) / period
    const variance = recentPrices.reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / period
    const stdDev = Math.sqrt(variance)
    
    const currentPrice = prices[prices.length - 1]
    const upperBand = sma + (2 * stdDev)
    const lowerBand = sma - (2 * stdDev)
    
    // Posición entre 0 (banda inferior) y 1 (banda superior)
    return (currentPrice - lowerBand) / (upperBand - lowerBand)
  }

  calculateVolumeRatio(marketData) {
    const currentVolume = marketData.volume24h || 0
    const avgVolume = marketData.avgVolume || currentVolume
    return avgVolume > 0 ? currentVolume / avgVolume : 1
  }

  calculateVolatility(prices, period = 20) {
    if (prices.length < period) return 0

    const recentPrices = prices.slice(-period)
    const returns = []
    
    for (let i = 1; i < recentPrices.length; i++) {
      returns.push((recentPrices[i] - recentPrices[i-1]) / recentPrices[i-1])
    }
    
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    
    return Math.sqrt(variance) * Math.sqrt(365) // Volatilidad anualizada
  }

  calculateMarketSentiment(marketData) {
    // Sentimiento simplificado basado en varios factores
    let sentiment = 0.5 // Neutral

    // Ajustar por cambio de precio
    if (marketData.priceChange24h > 0) sentiment += 0.1
    else if (marketData.priceChange24h < 0) sentiment -= 0.1

    // Ajustar por volumen
    const volumeRatio = this.calculateVolumeRatio(marketData)
    if (volumeRatio > 1.2) sentiment += 0.1
    else if (volumeRatio < 0.8) sentiment -= 0.1

    return Math.max(0, Math.min(1, sentiment))
  }

  calculateCorrelation(marketData) {
    // Correlación simplificada - en producción usar datos reales de múltiples activos
    return marketData.correlation || 0.5
  }

  shouldRetrain() {
    const now = Date.now()
    const hasEnoughData = this.trainingData.length >= 100
    const timeToRetrain = now - this.lastTraining > this.minTrainingInterval
    
    return hasEnoughData && timeToRetrain
  }

  async retrainModels() {
    console.log('🔄 Reentrenando modelos de ML...')
    
    try {
      for (const [modelName, model] of this.models.entries()) {
        await this.trainModel(modelName, model)
      }
      
      this.lastTraining = Date.now()
      console.log('✅ Modelos reentrenados exitosamente')
      
      // Guardar modelos entrenados
      await this.saveModels()
      
    } catch (error) {
      console.error('❌ Error reentrenando modelos:', error)
    }
  }

  async trainModel(modelName, model) {
    // Preparar datos de entrenamiento
    const trainingSet = this.prepareTrainingData(model)
    
    if (trainingSet.length < 50) {
      console.log(`⚠️ Datos insuficientes para entrenar ${modelName}`)
      return
    }

    // Simulación de entrenamiento (en producción usar TensorFlow.js o similar)
    const accuracy = this.simulateTraining(trainingSet, model)
    
    // Actualizar métricas del modelo
    model.accuracy = accuracy
    model.lastTrained = Date.now()
    
    console.log(`📊 Modelo ${modelName} entrenado - Precisión: ${(accuracy * 100).toFixed(2)}%`)
  }

  prepareTrainingData(model) {
    return this.trainingData
      .filter(point => point.features && point.result)
      .map(point => ({
        features: model.features.map(feature => point.features[feature] || 0),
        target: this.getTarget(point, model.type),
      }))
  }

  getTarget(dataPoint, modelType) {
    switch (modelType) {
      case 'REGRESSION':
        return dataPoint.profit || 0
      case 'CLASSIFICATION':
        return dataPoint.success ? 1 : 0
      default:
        return 0
    }
  }

  simulateTraining(trainingSet, model) {
    // Simulación simple de entrenamiento
    // En producción, aquí iría el algoritmo real de ML
    
    const correctPredictions = trainingSet.filter(point => {
      const prediction = this.makeSimplePrediction(point.features, model)
      const actual = point.target
      
      if (model.type === 'CLASSIFICATION') {
        return (prediction > 0.5 && actual === 1) || (prediction <= 0.5 && actual === 0)
      } else {
        return Math.abs(prediction - actual) < Math.abs(actual) * 0.1 // 10% de tolerancia
      }
    }).length

    return correctPredictions / trainingSet.length
  }

  makeSimplePrediction(features, model) {
    // Predicción simple basada en pesos aleatorios
    // En producción usar modelo entrenado real
    
    const weights = model.weights || features.map(() => Math.random() - 0.5)
    if (!model.weights) model.weights = weights
    
    let prediction = 0
    for (let i = 0; i < features.length; i++) {
      prediction += features[i] * weights[i]
    }
    
    return model.type === 'CLASSIFICATION' ? this.sigmoid(prediction) : prediction
  }

  sigmoid(x) {
    return 1 / (1 + Math.exp(-x))
  }

  async predictOpportunitySuccess(opportunity, marketData) {
    const features = this.extractFeatures(marketData, opportunity)
    const model = this.models.get('OPPORTUNITY_DETECTION')
    
    if (!model || model.accuracy < 0.6) {
      return { confidence: 0.5, prediction: 'UNCERTAIN', reason: 'Modelo no entrenado suficientemente' }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const prediction = this.makeSimplePrediction(featureVector, model)
    
    // Actualizar estadísticas del modelo
    model.predictions++
    
    return {
      confidence: prediction,
      prediction: prediction > 0.7 ? 'SUCCESS' : prediction < 0.3 ? 'FAILURE' : 'UNCERTAIN',
      reason: this.explainPrediction(featureVector, model),
      modelAccuracy: model.accuracy,
    }
  }

  async predictPriceMovement(pair, marketData, timeframe = '1h') {
    const features = this.extractFeatures(marketData, { pair })
    const model = this.models.get('PRICE_PREDICTION')
    
    if (!model || model.accuracy < 0.6) {
      return { direction: 'NEUTRAL', confidence: 0.5, change: 0 }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const prediction = this.makeSimplePrediction(featureVector, model)
    
    return {
      direction: prediction > 0.01 ? 'UP' : prediction < -0.01 ? 'DOWN' : 'NEUTRAL',
      confidence: Math.abs(prediction),
      change: prediction,
      timeframe,
    }
  }

  async assessRisk(opportunity, marketData) {
    const features = this.extractFeatures(marketData, opportunity)
    const model = this.models.get('RISK_ASSESSMENT')
    
    if (!model || model.accuracy < 0.6) {
      return { risk: 'MEDIUM', confidence: 0.5, factors: [] }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const riskScore = this.makeSimplePrediction(featureVector, model)
    
    const riskLevel = riskScore > 0.7 ? 'HIGH' : riskScore < 0.3 ? 'LOW' : 'MEDIUM'
    
    return {
      risk: riskLevel,
      score: riskScore,
      confidence: model.accuracy,
      factors: this.identifyRiskFactors(features),
    }
  }

  explainPrediction(features, model) {
    const weights = model.weights || []
    const contributions = features.map((feature, i) => ({
      feature: model.features[i],
      value: feature,
      weight: weights[i] || 0,
      contribution: feature * (weights[i] || 0),
    }))

    contributions.sort((a, b) => Math.abs(b.contribution) - Math.abs(a.contribution))
    
    const topFactors = contributions.slice(0, 3)
    return `Factores principales: ${topFactors.map(f => f.feature).join(', ')}`
  }

  identifyRiskFactors(features) {
    const factors = []
    
    if (features.priceVolatility > 0.3) factors.push('Alta volatilidad')
    if (features.volumeRatio < 0.5) factors.push('Volumen bajo')
    if (features.rsi > 80) factors.push('Sobrecompra (RSI)')
    if (features.rsi < 20) factors.push('Sobreventa (RSI)')
    if (features.spread < 0.2) factors.push('Spread muy bajo')
    
    return factors
  }

  async saveModels() {
    try {
      const modelsData = {
        models: Object.fromEntries(this.models),
        lastTraining: this.lastTraining,
        trainingDataCount: this.trainingData.length,
      }
      
      const modelsPath = path.join(__dirname, 'models.json')
      await fs.writeFile(modelsPath, JSON.stringify(modelsData, null, 2))
      
      console.log('💾 Modelos guardados exitosamente')
    } catch (error) {
      console.error('❌ Error guardando modelos:', error)
    }
  }

  async loadModels() {
    try {
      const modelsPath = path.join(__dirname, 'models.json')
      const data = await fs.readFile(modelsPath, 'utf8')
      const modelsData = JSON.parse(data)
      
      this.models = new Map(Object.entries(modelsData.models))
      this.lastTraining = modelsData.lastTraining || 0
      
      console.log('📂 Modelos cargados exitosamente')
    } catch (error) {
      console.log('ℹ️ No se encontraron modelos guardados, usando configuración por defecto')
    }
  }

  getModelStats() {
    const stats = {}
    
    for (const [name, model] of this.models.entries()) {
      stats[name] = {
        name: model.name,
        type: model.type,
        accuracy: model.accuracy,
        predictions: model.predictions,
        lastTrained: model.lastTrained,
        features: model.features.length,
      }
    }
    
    return {
      models: stats,
      trainingDataPoints: this.trainingData.length,
      lastTraining: this.lastTraining,
      nextTraining: this.lastTraining + this.minTrainingInterval,
    }
  }
}

module.exports = { MLEngine }

---------------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');

/**
 * Asesor de Trading con IA
 * Utiliza modelos de machine learning para analizar oportunidades y hacer recomendaciones
 */
class AITradingAdvisor extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.AI_TRADING.ENABLED;
        this.modelPath = config.AI_TRADING.MODEL_PATH;
        this.trainingDataDays = config.AI_TRADING.TRAINING_DATA_DAYS;
        this.predictionHorizon = config.AI_TRADING.PREDICTION_HORIZON;
        this.features = config.AI_TRADING.FEATURES;
        this.models = config.AI_TRADING.MODELS;
        this.autoRetrain = config.AI_TRADING.AUTO_RETRAIN;
        this.retrainThreshold = config.AI_TRADING.RETRAIN_THRESHOLD;
        
        this.priceModel = null;
        this.opportunityModel = null;
        this.riskModel = null;
        
        this.marketData = [];
        this.lastPredictions = {};
        this.modelAccuracy = {
            priceModel: 0,
            opportunityModel: 0,
            riskModel: 0
        };
        
        this.logger = console;
    }
    
    /**
     * Inicializa el asesor de IA
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('AI Trading Advisor deshabilitado');
            return;
        }
        
        this.logger.info('Inicializando AI Trading Advisor...');
        
        try {
            // Crear directorio de modelos si no existe
            await this.ensureModelDirectory();
            
            // Cargar modelos existentes o crear nuevos
            await this.loadModels();
            
            this.logger.info('AI Trading Advisor inicializado correctamente');
        } catch (error) {
            this.logger.error('Error inicializando AI Trading Advisor:', error);
            throw error;
        }
    }
    
    /**
     * Asegura que el directorio de modelos exista
     */
    async ensureModelDirectory() {
        try {
            await fs.mkdir(this.modelPath, { recursive: true });
        } catch (error) {
            if (error.code !== 'EEXIST') {
                throw error;
            }
        }
    }
    
    /**
     * Carga los modelos de ML o crea nuevos si no existen
     */
    async loadModels() {
        try {
            // En una implementación real, aquí cargaríamos modelos de TensorFlow.js, ONNX, etc.
            // Para esta implementación, usaremos modelos simulados
            
            this.priceModel = await this.loadOrCreateModel('price_prediction');
            this.opportunityModel = await this.loadOrCreateModel('opportunity_scoring');
            this.riskModel = await this.loadOrCreateModel('risk_assessment');
            
            this.logger.info('Modelos cargados correctamente');
        } catch (error) {
            this.logger.error('Error cargando modelos:', error);
            throw error;
        }
    }
    
    /**
     * Carga un modelo específico o crea uno nuevo
     * @param {string} modelType - Tipo de modelo
     * @returns {Object} - Modelo cargado
     */
    async loadOrCreateModel(modelType) {
        const modelFilePath = path.join(this.modelPath, `${modelType}.json`);
        
        try {
            // Intentar cargar el modelo
            const modelData = await fs.readFile(modelFilePath, 'utf8');
            const model = JSON.parse(modelData);
            this.logger.info(`Modelo ${modelType} cargado correctamente`);
            return model;
        } catch (error) {
            // Si el modelo no existe, crear uno nuevo
            if (error.code === 'ENOENT') {
                this.logger.info(`Modelo ${modelType} no encontrado, creando uno nuevo...`);
                const newModel = await this.createModel(modelType);
                
                // Guardar el nuevo modelo
                await fs.writeFile(modelFilePath, JSON.stringify(newModel, null, 2));
                
                return newModel;
            }
            
            throw error;
        }
    }
    
    /**
     * Crea un nuevo modelo
     * @param {string} modelType - Tipo de modelo
     * @returns {Object} - Nuevo modelo
     */
    async createModel(modelType) {
        // En una implementación real, aquí crearíamos y entrenaríamos un modelo real
        // Para esta implementación, usaremos un modelo simulado
        
        switch (modelType) {
            case 'price_prediction':
                return {
                    type: 'lstm',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    weights: this.generateRandomWeights(100),
                    biases: this.generateRandomWeights(10),
                    config: this.models.PRICE_PREDICTION
                };
                
            case 'opportunity_scoring':
                return {
                    type: 'random_forest',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    trees: this.generateRandomTrees(this.models.OPPORTUNITY_SCORING.nEstimators),
                    config: this.models.OPPORTUNITY_SCORING
                };
                
            case 'risk_assessment':
                return {
                    type: 'gradient_boosting',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    trees: this.generateRandomTrees(this.models.RISK_ASSESSMENT.nEstimators),
                    config: this.models.RISK_ASSESSMENT
                };
                
            default:
                throw new Error(`Tipo de modelo desconocido: ${modelType}`);
        }
    }
    
    /**
     * Genera pesos aleatorios para simular un modelo
     * @param {number} size - Tamaño del array
     * @returns {Array} - Array de pesos aleatorios
     */
    generateRandomWeights(size) {
        return Array.from({ length: size }, () => Math.random() * 2 - 1);
    }
    
    /**
     * Genera árboles aleatorios para simular un modelo de bosque
     * @param {number} numTrees - Número de árboles
     * @returns {Array} - Array de árboles aleatorios
     */
    generateRandomTrees(numTrees) {
        return Array.from({ length: numTrees }, () => ({
            depth: Math.floor(Math.random() * 10) + 3,
            nodes: Math.floor(Math.random() * 100) + 20,
            weights: this.generateRandomWeights(20)
        }));
    }
    
    /**
     * Analiza oportunidades de arbitraje usando IA
     * @param {Array} opportunities - Lista de oportunidades
     * @returns {Array} - Oportunidades analizadas con recomendaciones
     */
    async analyzeOpportunities(opportunities) {
        if (!this.enabled || !opportunities.length) {
            return opportunities;
        }
        
        try {
            // Preparar datos para el análisis
            const preparedData = this.prepareDataForAnalysis(opportunities);
            
            // Predecir precios futuros
            const pricePredictions = await this.predictPrices(preparedData);
            
            // Evaluar oportunidades
            const scoredOpportunities = await this.scoreOpportunities(opportunities, pricePredictions);
            
            // Evaluar riesgos
            const riskAssessment = await this.assessRisks(scoredOpportunities);
            
            // Generar recomendaciones
            const recommendedOpportunities = this.generateRecommendations(riskAssessment);
            
            // Evaluar si se necesita cambiar de estrategia
            const strategyRecommendation = this.recommendStrategy(recommendedOpportunities);
            if (strategyRecommendation) {
                this.emit('recommendation', strategyRecommendation);
            }
            
            return recommendedOpportunities;
        } catch (error) {
            this.logger.error('Error analizando oportunidades con IA:', error);
            return opportunities; // Devolver oportunidades originales en caso de error
        }
    }
    
    /**
     * Prepara los datos para el análisis
     * @param {Array} opportunities - Lista de oportunidades
     * @returns {Object} - Datos preparados
     */
    prepareDataForAnalysis(opportunities) {
        // Extraer pares únicos
        const uniquePairs = [...new Set(opportunities.map(opp => opp.pair))];
        
        // Preparar datos por par
        const preparedData = {};
        
        for (const pair of uniquePairs) {
            const pairOpportunities = opportunities.filter(opp => opp.pair === pair);
            
            preparedData[pair] = {
                prices: pairOpportunities.map(opp => ({
                    exchange: opp.exchanges[0],
                    price: opp.buyPrice
                })),
                volumes: pairOpportunities.map(opp => ({
                    exchange: opp.exchanges[0],
                    volume: opp.volume || 1000 // Valor por defecto si no hay volumen
                })),
                spreads: pairOpportunities.map(opp => opp.profitPercentage),
                timestamp: Date.now()
            };
        }
        
        return preparedData;
    }
    
    /**
     * Predice precios futuros
     * @param {Object} data - Datos preparados
     * @returns {Object} - Predicciones de precios
     */
    async predictPrices(data) {
        // En una implementación real, aquí usaríamos el modelo LSTM para predecir precios
        // Para esta implementación, usaremos predicciones simuladas
        
        const predictions = {};
        
        for (const pair in data) {
            predictions[pair] = {};
            
            for (const priceData of data[pair].prices) {
                const exchange = priceData.exchange;
                const currentPrice = priceData.price;
                
                // Simular predicción con una variación aleatoria de ±2%
                const randomFactor = 1 + (Math.random() * 0.04 - 0.02);
                predictions[pair][exchange] = currentPrice * randomFactor;
            }
        }
        
        return predictions;
    }
    
    /**
     * Evalúa y puntúa oportunidades
     * @param {Array} opportunities - Lista de oportunidades
     * @param {Object} pricePredictions - Predicciones de precios
     * @returns {Array} - Oportunidades puntuadas
     */
    async scoreOpportunities(opportunities, pricePredictions) {
        return opportunities.map(opportunity => {
            const { pair, exchanges } = opportunity;
            
            // Obtener predicciones para este par y exchanges
            const buyExchange = exchanges[0];
            const sellExchange = exchanges[1];
            
            let predictedProfit = opportunity.profitPercentage;
            
            // Si tenemos predicciones para ambos exchanges, calcular ganancia predicha
            if (pricePredictions[pair] && 
                pricePredictions[pair][buyExchange] && 
                pricePredictions[pair][sellExchange]) {
                
                const predictedBuyPrice = pricePredictions[pair][buyExchange];
                const predictedSellPrice = pricePredictions[pair][sellExchange];
                
                predictedProfit = ((predictedSellPrice - predictedBuyPrice) / predictedBuyPrice) * 100;
            }
            
            // Calcular puntuación basada en ganancia actual y predicha
            const score = this.calculateOpportunityScore(opportunity, predictedProfit);
            
            return {
                ...opportunity,
                aiScore: score,
                predictedProfit
            };
        });
    }
    
    /**
     * Calcula la puntuación de una oportunidad
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {number} predictedProfit - Ganancia predicha
     * @returns {number} - Puntuación (0-100)
     */
    calculateOpportunityScore(opportunity, predictedProfit) {
        // Factores para la puntuación
        const currentProfitWeight = 0.4;
        const predictedProfitWeight = 0.3;
        const volumeWeight = 0.15;
        const exchangeReliabilityWeight = 0.15;
        
        // Normalizar ganancia actual (0-100)
        const normalizedCurrentProfit = Math.min(opportunity.profitPercentage * 20, 100);
        
        // Normalizar ganancia predicha (0-100)
        const normalizedPredictedProfit = Math.min(predictedProfit * 20, 100);
        
        // Normalizar volumen (asumiendo que mayor volumen es mejor, hasta cierto punto)
        const volume = opportunity.volume || 1000; // Valor por defecto
        const normalizedVolume = Math.min(volume / 10000 * 100, 100);
        
        // Fiabilidad de exchanges (valores simulados)
        const exchangeReliability = {
            'Binance': 95,
            'Coinbase': 90,
            'Kraken': 85,
            'Kucoin': 80
        };
        
        // Calcular fiabilidad promedio de los exchanges involucrados
        const avgExchangeReliability = opportunity.exchanges.reduce((sum, exchange) => {
            return sum + (exchangeReliability[exchange] || 70);
        }, 0) / opportunity.exchanges.length;
        
        // Calcular puntuación final
        const score = (
            normalizedCurrentProfit * currentProfitWeight +
            normalizedPredictedProfit * predictedProfitWeight +
            normalizedVolume * volumeWeight +
            avgExchangeReliability * exchangeReliabilityWeight
        );
        
        return Math.round(score);
    }
    
    /**
     * Evalúa los riesgos de las oportunidades
     * @param {Array} opportunities - Oportunidades puntuadas
     * @returns {Array} - Oportunidades con evaluación de riesgo
     */
    async assessRisks(opportunities) {
        return opportunities.map(opportunity => {
            // En una implementación real, aquí usaríamos el modelo de evaluación de riesgos
            // Para esta implementación, usaremos una evaluación simulada
            
            // Factores de riesgo
            const volatilityRisk = Math.random() * 40; // 0-40
            const liquidityRisk = Math.random() * 30; // 0-30
            const exchangeRisk = Math.random() * 20; // 0-20
            const timingRisk = Math.random() * 10; // 0-10
            
            // Riesgo total (0-100)
            const totalRisk = volatilityRisk + liquidityRisk + exchangeRisk + timingRisk;
            
            // Categoría de riesgo
            let riskCategory;
            if (totalRisk < 30) {
                riskCategory = 'low';
            } else if (totalRisk < 60) {
                riskCategory = 'medium';
            } else {
                riskCategory = 'high';
            }
            
            return {
                ...opportunity,
                riskAssessment: {
                    volatilityRisk,
                    liquidityRisk,
                    exchangeRisk,
                    timingRisk,
                    totalRisk,
                    riskCategory
                }
            };
        });
    }
    
    /**
     * Genera recomendaciones finales
     * @param {Array} opportunities - Oportunidades con evaluación de riesgo
     * @returns {Array} - Oportunidades con recomendaciones
     */
    generateRecommendations(opportunities) {
        return opportunities.map(opportunity => {
            // Calcular puntuación final (score - riesgo)
            const finalScore = opportunity.aiScore - (opportunity.riskAssessment.totalRisk / 2);
            
            // Determinar acción recomendada
            let action;
            if (finalScore >= 70) {
                action = 'execute'; // Ejecutar inmediatamente
            } else if (finalScore >= 50) {
                action = 'monitor'; // Monitorear para posible ejecución
            } else {
                action = 'ignore'; // Ignorar esta oportunidad
            }
            
            // Determinar tamaño de inversión recomendado
            let recommendedSize;
            if (finalScore >= 80) {
                recommendedSize = 1.0; // 100% del tamaño máximo
            } else if (finalScore >= 70) {
                recommendedSize = 0.75; // 75% del tamaño máximo
            } else if (finalScore >= 60) {
                recommendedSize = 0.5; // 50% del tamaño máximo
            } else {
                recommendedSize = 0.25; // 25% del tamaño máximo
            }
            
            return {
                ...opportunity,
                aiRecommendation: {
                    finalScore,
                    action,
                    recommendedSize,
                    confidence: finalScore / 100,
                    reasoning: this.generateReasoning(opportunity, finalScore)
                }
            };
        });
    }
    
    /**
     * Genera un razonamiento para la recomendación
     * @param {Object} opportunity - Oportunidad evaluada
     * @param {number} finalScore - Puntuación final
     * @returns {string} - Razonamiento
     */
    generateReasoning(opportunity, finalScore) {
        const { profitPercentage, predictedProfit, riskAssessment } = opportunity;
        
        if (finalScore >= 70) {
            return `Alta probabilidad de ganancia (${profitPercentage.toFixed(2)}% actual, ${predictedProfit.toFixed(2)}% predicha) con riesgo ${riskAssessment.riskCategory}.`;
        } else if (finalScore >= 50) {
            return `Ganancia moderada (${profitPercentage.toFixed(2)}%) con algunas señales de precaución. Riesgo ${riskAssessment.riskCategory}.`;
        } else {
            return `Baja probabilidad de éxito. Ganancia insuficiente (${profitPercentage.toFixed(2)}%) para el nivel de riesgo ${riskAssessment.riskCategory}.`;
        }
    }
    
    /**
     * Recomienda cambios de estrategia basados en el análisis
     * @param {Array} opportunities - Oportunidades analizadas
     * @returns {Object|null} - Recomendación de estrategia o null
     */
    recommendStrategy(opportunities) {
        // Contar oportunidades por estrategia
        const strategyCounts = {};
        const strategyScores = {};
        
        for (const opp of opportunities) {
            if (!opp.strategy) continue;
            
            if (!strategyCounts[opp.strategy]) {
                strategyCounts[opp.strategy] = 0;
                strategyScores[opp.strategy] = 0;
            }
            
            strategyCounts[opp.strategy]++;
            strategyScores[opp.strategy] += opp.aiRecommendation.finalScore;
        }
        
        // Calcular puntuación promedio por estrategia
        for (const strategy in strategyCounts) {
            strategyScores[strategy] /= strategyCounts[strategy];
        }
        
        // Encontrar la estrategia con mejor puntuación
        let bestStrategy = null;
        let bestScore = 0;
        
        for (const strategy in strategyScores) {
            if (strategyScores[strategy] > bestScore) {
                bestScore = strategyScores[strategy];
                bestStrategy = strategy;
            }
        }
        
        // Si la mejor estrategia tiene una puntuación significativamente mejor, recomendarla
        if (bestStrategy && bestScore > 60) {
            return {
                suggestedStrategy: bestStrategy,
                score: bestScore,
                reason: `La estrategia ${bestStrategy} muestra el mejor rendimiento con una puntuación de ${bestScore.toFixed(2)}.`
            };
        }
        
        return null;
    }
    
    /**
     * Actualiza los datos de mercado para entrenamiento
     * @param {Object} marketData - Nuevos datos de mercado
     */
    updateMarketData(marketData) {
        this.marketData.push({
            ...marketData,
            timestamp: Date.now()
        });
        
        // Mantener solo los datos de los últimos N días
        const cutoffTime = Date.now() - (this.trainingDataDays * 24 * 60 * 60 * 1000);
        this.marketData = this.marketData.filter(data => data.timestamp >= cutoffTime);
        
        // Verificar si es necesario reentrenar
        if (this.autoRetrain && this.shouldRetrain()) {
            this.retrainModels();
        }
    }
    
    /**
     * Determina si es necesario reentrenar los modelos
     * @returns {boolean} - True si se debe reentrenar
     */
    shouldRetrain() {
        // Verificar si hay suficientes datos nuevos
        if (this.marketData.length < 1000) {
            return false;
        }
        
        // Verificar si la precisión ha caído por debajo del umbral
        for (const model in this.modelAccuracy) {
            if (this.modelAccuracy[model] < 1 - this.retrainThreshold) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Reentrenar los modelos con nuevos datos
     */
    async retrainModels() {
        this.logger.info('Reentrenando modelos de IA...');
        
        try {
            // En una implementación real, aquí reentrenaremos los modelos
            // Para esta implementación, simularemos el reentrenamiento
            
            // Simular reentrenamiento del modelo de predicción de precios
            await this.retrainPriceModel();
            
            // Simular reentrenamiento del modelo de puntuación de oportunidades
            await this.retrainOpportunityModel();
            
            // Simular reentrenamiento del modelo de evaluación de riesgos
            await this.retrainRiskModel();
            
            this.logger.info('Modelos reentrenados correctamente');
        } catch (error) {
            this.logger.error('Error reentrenando modelos:', error);
        }
    }
    
    /**
     * Reentrenar el modelo de predicción de precios
     */
    async retrainPriceModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Actualizar modelo simulado
        this.priceModel.version = `${parseFloat(this.priceModel.version) + 0.1}.0`;
        this.priceModel.updated = new Date().toISOString();
        this.priceModel.weights = this.generateRandomWeights(100);
        this.priceModel.biases = this.generateRandomWeights(10);
        
        // Simular mejora en precisión
        this.modelAccuracy.priceModel = 0.85 + Math.random() * 0.1;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'price_prediction.json'),
            JSON.stringify(this.priceModel, null, 2)
        );
    }
    
    /**
     * Reentrenar el modelo de puntuación de oportunidades
     */
    async retrainOpportunityModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // Actualizar modelo simulado
        this.opportunityModel.version = `${parseFloat(this.opportunityModel.version) + 0.1}.0`;
        this.opportunityModel.updated = new Date().toISOString();
        this.opportunityModel.trees = this.generateRandomTrees(this.models.OPPORTUNITY_SCORING.nEstimators);
        
        // Simular mejora en precisión
        this.modelAccuracy.opportunityModel = 0.82 + Math.random() * 0.12;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'opportunity_scoring.json'),
            JSON.stringify(this.opportunityModel, null, 2)
        );
    }
    
    /**
     * Reentrenar el modelo de evaluación de riesgos
     */
    async retrainRiskModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 600));
        
        // Actualizar modelo simulado
        this.riskModel.version = `${parseFloat(this.riskModel.version) + 0.1}.0`;
        this.riskModel.updated = new Date().toISOString();
        this.riskModel.trees = this.generateRandomTrees(this.models.RISK_ASSESSMENT.nEstimators);
        
        // Simular mejora en precisión
        this.modelAccuracy.riskModel = 0.8 + Math.random() * 0.15;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'risk_assessment.json'),
            JSON.stringify(this.riskModel, null, 2)
        );
    }
    
    /**
     * Obtiene el estado actual del asesor de IA
     * @returns {Object} - Estado del asesor
     */
    getStatus() {
        return {
            enabled: this.enabled,
            models: {
                priceModel: {
                    version: this.priceModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.priceModel || 0
                },
                opportunityModel: {
                    version: this.opportunityModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.opportunityModel || 0
                },
                riskModel: {
                    version: this.riskModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.riskModel || 0
                }
            },
            dataPoints: this.marketData.length,
            lastUpdated: this.marketData.length ? new Date(Math.max(...this.marketData.map(d => d.timestamp))).toISOString() : 'N/A'
        };
    }
}

module.exports = AITradingAdvisor;

-----------------------------------------------------------------------------------------------------------------------

ALERTS

const https = require("https")
const EventEmitter = require("events")
const nodemailer = require("nodemailer")
const axios = require("axios")

/**
 * Gestor de Alertas para el Bot de Arbitraje
 */
class AlertManager extends EventEmitter {
  constructor(config) {
    super()
    this.config = config
    this.enabled = config.ALERTS.ENABLED
    this.channels = config.ALERTS.CHANNELS
    this.alertTypes = config.ALERTS.ALERT_TYPES

    this.emailTransporter = null
    this.alertHistory = []
    this.alertQueue = []
    this.isProcessingQueue = false

    this.logger = console

    // ======= AGREGADO DASHBOARD: historial reciente de anomalías =======
    this.anomalies = []
    // ======= FIN AGREGADO =======
  }

  /**
   * Inicializa el gestor de alertas
   */
  async initialize() {
    if (!this.enabled) {
      this.logger.info("Alert Manager deshabilitado")
      return
    }

    this.logger.info("Inicializando Alert Manager...")

    try {
      // Inicializar transportador de email
      if (this.channels.EMAIL.enabled) {
        await this.initializeEmailTransporter()
      }

      // Verificar configuración de Telegram
      if (this.channels.TELEGRAM.enabled) {
        await this.verifyTelegramConfig()
      }

      // Iniciar procesamiento de cola
      this.startQueueProcessor()

      // Programar resumen diario
      this.scheduleDailySummary()

      this.logger.info("Alert Manager inicializado correctamente")

      // ENVIAR MENSAJE DE PRUEBA AL INICIALIZAR - CAMBIADO A BOT_STARTED
      await this.sendAlert("BOT_STARTED", "🤖 Bot de Arbitraje iniciado correctamente")
    } catch (error) {
      this.logger.error("Error inicializando Alert Manager:", error)
      throw error
    }
  }

  /**
   * Inicializa el transportador de email
   */
  async initializeEmailTransporter() {
    try {
      this.emailTransporter = nodemailer.createTransport(this.channels.EMAIL.smtp)

      // Verificar configuración
      await this.emailTransporter.verify()
      this.logger.info("Transportador de email configurado correctamente")
    } catch (error) {
      this.logger.error("Error configurando email:", error)
      this.channels.EMAIL.enabled = false
    }
  }

  /**
   * Verifica la configuración de Telegram
   */
  async verifyTelegramConfig() {
    try {
      const { botToken, chatId } = this.channels.TELEGRAM

      // VERIFICAR QUE LAS VARIABLES ESTÉN CONFIGURADAS
      this.logger.info("=== VERIFICANDO CONFIGURACIÓN DE TELEGRAM ===")
      this.logger.info("Bot Token:", botToken ? "CONFIGURADO" : "NO CONFIGURADO")
      this.logger.info("Chat ID:", chatId ? "CONFIGURADO" : "NO CONFIGURADO")

      if (!botToken || botToken === "") {
        throw new Error("TELEGRAM_BOT_TOKEN no está configurado en las variables de entorno")
      }

      if (!chatId || chatId === "") {
        throw new Error("TELEGRAM_CHAT_ID no está configurado en las variables de entorno")
      }

      // Verificar que el bot esté activo
      const response = await axios.get(`https://api.telegram.org/bot${botToken}/getMe`)

      if (response.data.ok) {
        this.logger.info(`✅ Bot de Telegram verificado: ${response.data.result.username}`)
      } else {
        throw new Error("Token de bot de Telegram inválido")
      }
    } catch (error) {
      this.logger.error("❌ Error verificando Telegram:", error.message)
      // NO DESHABILITAR TELEGRAM, SOLO MOSTRAR EL ERROR
      // this.channels.TELEGRAM.enabled = false;
    }
  }

  /**
   * Inicia el procesador de cola de alertas
   */
  startQueueProcessor() {
    setInterval(async () => {
      if (!this.isProcessingQueue && this.alertQueue.length > 0) {
        await this.processAlertQueue()
      }
    }, 1000)
  }

  /**
   * Procesa la cola de alertas
   */
  async processAlertQueue() {
    this.isProcessingQueue = true

    while (this.alertQueue.length > 0) {
      const alert = this.alertQueue.shift()

      try {
        await this.sendAlertToChannels(alert)
      } catch (error) {
        this.logger.error("Error procesando alerta:", error)
      }

      // Pequeña pausa entre alertas
      await new Promise((resolve) => setTimeout(resolve, 100))
    }

    this.isProcessingQueue = false
  }

  /**
   * Programa el resumen diario
   */
  scheduleDailySummary() {
    if (!this.alertTypes.DAILY_SUMMARY.enabled) {
      return
    }

    const summaryTime = this.alertTypes.DAILY_SUMMARY.time || "23:59"
    const [hours, minutes] = summaryTime.split(":").map(Number)

    // Calcular tiempo hasta el próximo resumen
    const now = new Date()
    const nextSummary = new Date()
    nextSummary.setHours(hours, minutes, 0, 0)

    if (nextSummary <= now) {
      nextSummary.setDate(nextSummary.getDate() + 1)
    }

    const timeUntilSummary = nextSummary.getTime() - now.getTime()

    setTimeout(() => {
      this.sendDailySummary()

      // Programar para el día siguiente
      setInterval(
        () => {
          this.sendDailySummary()
        },
        24 * 60 * 60 * 1000,
      )
    }, timeUntilSummary)
  }

  /**
   * Envía una alerta
   * @param {string} type - Tipo de alerta ('info', 'warning', 'error', 'trade', 'risk')
   * @param {string} message - Mensaje de la alerta
   * @param {Object} data - Datos adicionales
   */
  async sendAlert(type, message, data = {}) {
    if (!this.enabled) {
      this.logger.info("Alertas deshabilitadas, no se enviará:", message)
      return
    }

    // BUSCAR CONFIGURACIÓN DE ALERTA O USAR VALORES POR DEFECTO
    const alertConfig = this.alertTypes[type.toUpperCase()] || {
      enabled: true,
      channels: ["telegram"],
      priority: "medium",
    }

    if (!alertConfig.enabled) {
      this.logger.info(`Tipo de alerta ${type} deshabilitado`)
      return
    }

    // Crear objeto de alerta
    const alert = {
      id: this.generateAlertId(),
      type,
      message,
      data,
      timestamp: new Date(),
      priority: alertConfig.priority || "medium",
      channels: alertConfig.channels || ["telegram"],
    }

    this.logger.info(`📢 Enviando alerta: ${type} - ${message}`)

    // Añadir a la cola
    this.alertQueue.push(alert)

    // Añadir al historial
    this.alertHistory.push(alert)

    // ======= AGREGADO DASHBOARD: guardar anomalías si corresponde =======
    if (type && (type.toUpperCase().includes("ANOMALY") || type.toUpperCase().includes("ANOMALIA") || type.toUpperCase().includes("RISK") || type.toUpperCase().includes("VOLATILIDAD") || type.toUpperCase().includes("OPPORTUNITY"))) {
      this.anomalies.push({
        tipo: type,
        descripcion: message,
        timestamp: new Date().toLocaleString(),
        data: data || {},
      })
      if (this.anomalies.length > 100) {
        this.anomalies.shift()
      }
    }
    // ======= FIN AGREGADO DASHBOARD =======

    // Mantener solo las últimas 1000 alertas
    if (this.alertHistory.length > 1000) {
      this.alertHistory.shift()
    }

    // Emitir evento
    this.emit("alertSent", alert)
  }

  /**
   * Envía una alerta a todos los canales configurados
   */
  async sendAlertToChannels(alert) {
    const promises = []

    for (const channel of alert.channels) {
      switch (channel.toLowerCase()) {
        case "email":
          if (this.channels.EMAIL.enabled) {
            promises.push(this.sendEmailAlert(alert))
          }
          break

        case "telegram":
          if (this.channels.TELEGRAM.enabled) {
            promises.push(this.sendTelegramAlert(alert))
          }
          break

        case "discord":
          if (this.channels.DISCORD.enabled) {
            promises.push(this.sendDiscordAlert(alert))
          }
          break

        case "slack":
          if (this.channels.SLACK.enabled) {
            promises.push(this.sendSlackAlert(alert))
          }
          break
      }
    }

    // Esperar a que se envíen todas las alertas
    const results = await Promise.allSettled(promises)

    // MOSTRAR RESULTADOS DE CADA CANAL
    results.forEach((result, index) => {
      if (result.status === "rejected") {
        this.logger.error(`Error enviando alerta por ${alert.channels[index]}:`, result.reason.message)
      }
    })
  }

  /**
   * Envía alerta por email
   */
  async sendEmailAlert(alert) {
    if (!this.emailTransporter) {
      throw new Error("Transportador de email no inicializado")
    }

    const subject = this.formatEmailSubject(alert)
    const html = this.formatEmailBody(alert)

    const mailOptions = {
      from: this.channels.EMAIL.from,
      to: this.channels.EMAIL.to,
      subject,
      html,
    }

    await this.emailTransporter.sendMail(mailOptions)
    this.logger.info(`✅ Alerta enviada por email: ${alert.type}`)
  }

  /**
   * Envía alerta por Telegram
   */
  async sendTelegramAlert(alert) {
    try {
      const { botToken, chatId, parseMode } = this.channels.TELEGRAM

      // VERIFICAR CONFIGURACIÓN ANTES DE ENVIAR
      if (!botToken || botToken === "") {
        throw new Error("TELEGRAM_BOT_TOKEN no configurado")
      }

      if (!chatId || chatId === "") {
        throw new Error("TELEGRAM_CHAT_ID no configurado")
      }

      const message = this.formatTelegramMessage(alert)
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`

      this.logger.info("📱 Enviando mensaje a Telegram...")

      const response = await axios.post(url, {
        chat_id: chatId,
        text: message,
        parse_mode: parseMode || "HTML",
      })

      if (response.data.ok) {
        this.logger.info(`✅ Alerta enviada por Telegram: ${alert.type}`)
      } else {
        throw new Error(`Error de Telegram: ${response.data.description}`)
      }
    } catch (error) {
      this.logger.error("❌ Error enviando alerta por Telegram:", error.message)

      if (error.response) {
        this.logger.error("Respuesta de Telegram:", error.response.data)
      }

      throw error
    }
  }

  /**
   * Envía alerta por Discord
   */
  async sendDiscordAlert(alert) {
    const { webhookUrl } = this.channels.DISCORD
    const embed = this.formatDiscordEmbed(alert)

    await axios.post(webhookUrl, {
      embeds: [embed],
    })

    this.logger.info(`✅ Alerta enviada por Discord: ${alert.type}`)
  }

  /**
   * Envía alerta por Slack
   */
  async sendSlackAlert(alert) {
    const { webhookUrl } = this.channels.SLACK
    const payload = this.formatSlackMessage(alert)

    await axios.post(webhookUrl, payload)

    this.logger.info(`✅ Alerta enviada por Slack: ${alert.type}`)
  }

  /**
   * Formatea el asunto del email
   */
  formatEmailSubject(alert) {
    const priorityEmoji = {
      low: "🔵",
      medium: "🟡",
      high: "🟠",
      critical: "🔴",
    }

    const emoji = priorityEmoji[alert.priority] || "🔵"
    return `${emoji} Bot de Arbitraje - ${alert.type.toUpperCase()}`
  }

  /**
   * Formatea el cuerpo del email
   */
  formatEmailBody(alert) {
    return `
      <html>
      <body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
        <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h2 style="color: #333; margin-top: 0;">Bot de Arbitraje CEX</h2>
          
          <div style="background-color: ${this.getPriorityColor(alert.priority)}; color: white; padding: 10px; border-radius: 4px; margin: 20px 0;">
            <strong>Tipo:</strong> ${alert.type.toUpperCase()}
          </div>
          
          <div style="margin: 20px 0;">
            <strong>Mensaje:</strong><br>
            ${alert.message}
          </div>
          
          <div style="margin: 20px 0;">
            <strong>Timestamp:</strong> ${alert.timestamp.toLocaleString()}
          </div>
          
          ${
            alert.data && Object.keys(alert.data).length > 0
              ? `
          <div style="margin: 20px 0;">
            <strong>Datos adicionales:</strong><br>
            <pre style="background-color: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto;">${JSON.stringify(alert.data, null, 2)}</pre>
          </div>
          `
              : ""
          }
          
          <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
          
          <p style="color: #666; font-size: 12px; margin: 0;">
            Esta es una notificación automática del Bot de Arbitraje CEX.
          </p>
        </div>
      </body>
      </html>
    `
  }

  /**
   * Formatea el mensaje de Telegram
   */
  formatTelegramMessage(alert) {
    const priorityEmoji = {
      low: "🔵",
      medium: "🟡",
      high: "🟠",
      critical: "🔴",
    }

    const emoji = priorityEmoji[alert.priority] || "🔵"

    let message = `${emoji} <b>Bot de Arbitraje CEX</b>\n\n`
    message += `<b>Tipo:</b> ${alert.type.toUpperCase()}\n`
    message += `<b>Mensaje:</b> ${alert.message}\n`
    message += `<b>Timestamp:</b> ${alert.timestamp.toLocaleString()}\n`

    if (alert.data && Object.keys(alert.data).length > 0) {
      message += `\n<b>Datos:</b>\n`
      for (const [key, value] of Object.entries(alert.data)) {
        message += `• ${key}: ${value}\n`
      }
    }

    return message
  }

  /**
   * Formatea el embed de Discord
   */
  formatDiscordEmbed(alert) {
    const color = this.getPriorityColorHex(alert.priority)

    const embed = {
      title: `Bot de Arbitraje CEX - ${alert.type.toUpperCase()}`,
      description: alert.message,
      color: Number.parseInt(color.replace("#", ""), 16),
      timestamp: alert.timestamp.toISOString(),
      fields: [],
    }

    if (alert.data && Object.keys(alert.data).length > 0) {
      for (const [key, value] of Object.entries(alert.data)) {
        embed.fields.push({
          name: key,
          value: String(value),
          inline: true,
        })
      }
    }

    return embed
  }

  /**
   * Formatea el mensaje de Slack
   */
  formatSlackMessage(alert) {
    const color = this.getPriorityColor(alert.priority)

    const attachment = {
      color,
      title: `Bot de Arbitraje CEX - ${alert.type.toUpperCase()}`,
      text: alert.message,
      timestamp: Math.floor(alert.timestamp.getTime() / 1000),
      fields: [],
    }

    if (alert.data && Object.keys(alert.data).length > 0) {
      for (const [key, value] of Object.entries(alert.data)) {
        attachment.fields.push({
          title: key,
          value: String(value),
          short: true,
        })
      }
    }

    return {
      attachments: [attachment],
    }
  }

  /**
   * Obtiene el color según la prioridad
   */
  getPriorityColor(priority) {
    const colors = {
      low: "#007bff",
      medium: "#ffc107",
      high: "#fd7e14",
      critical: "#dc3545",
    }

    return colors[priority] || colors.medium
  }

  /**
   * Obtiene el color hexadecimal según la prioridad
   */
  getPriorityColorHex(priority) {
    const colors = {
      low: "#007bff",
      medium: "#ffc107",
      high: "#fd7e14",
      critical: "#dc3545",
    }

    return colors[priority] || colors.medium
  }

  /**
   * Envía el resumen diario
   */
  async sendDailySummary() {
    try {
      // Obtener alertas del día
      const today = new Date()
      today.setHours(0, 0, 0, 0)

      const todayAlerts = this.alertHistory.filter((alert) => new Date(alert.timestamp) >= today)

      // Agrupar por tipo
      const alertsByType = {}
      for (const alert of todayAlerts) {
        if (!alertsByType[alert.type]) {
          alertsByType[alert.type] = 0
        }
        alertsByType[alert.type]++
      }

      // Crear mensaje de resumen
      let summary = `📊 Resumen diario del Bot de Arbitraje CEX\n\n`
      summary += `Total de alertas: ${todayAlerts.length}\n\n`

      if (Object.keys(alertsByType).length > 0) {
        summary += `Alertas por tipo:\n`
        for (const [type, count] of Object.entries(alertsByType)) {
          summary += `• ${type}: ${count}\n`
        }
      } else {
        summary += `No se generaron alertas hoy.`
      }

      // Enviar resumen
      await this.sendAlert("DAILY_SUMMARY", summary)
    } catch (error) {
      this.logger.error("Error enviando resumen diario:", error)
    }
  }

  /**
   * Genera un ID único para la alerta
   */
  generateAlertId() {
    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * Obtiene el historial de alertas
   */
  getAlertHistory(limit = 100) {
    return this.alertHistory.slice(-limit)
  }

  /**
   * Obtiene estadísticas de alertas
   */
  getAlertStatistics() {
    const stats = {
      total: this.alertHistory.length,
      byType: {},
      byPriority: {},
      last24Hours: 0,
    }

    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000)

    for (const alert of this.alertHistory) {
      // Por tipo
      if (!stats.byType[alert.type]) {
        stats.byType[alert.type] = 0
      }
      stats.byType[alert.type]++

      // Por prioridad
      if (!stats.byPriority[alert.priority]) {
        stats.byPriority[alert.priority] = 0
      }
      stats.byPriority[alert.priority]++

      // Últimas 24 horas
      if (new Date(alert.timestamp) >= last24Hours) {
        stats.last24Hours++
      }
    }

    return stats
  }

  // ======= AGREGADO DASHBOARD: método para anomalias recientes =======
  getRecentAnomalies(limit = 25) {
    return this.anomalies.slice(-limit)
  }
  // ======= FIN AGREGADO DASHBOARD =======
}

module.exports = AlertManager
----------------------------------------------------------------------------------------------------------

const nodemailer = require('nodemailer');

/**
 * Gestor de Email para el Bot de Arbitraje
 */
class EmailManager {
  constructor(config) {
    this.config = config;
    this.emailConfig = config.ALERTS.CHANNELS.EMAIL;
    this.transporter = null;
    this.logger = console;
  }

  /**
   * Inicializa el gestor de email
   */
  async initialize() {
    if (!this.emailConfig.enabled) {
      this.logger.info('Email deshabilitado en la configuración');
      return;
    }

    try {
      this.logger.info('Inicializando EmailManager...');
      
      // Crear transporter
      this.transporter = nodemailer.createTransporter({
        host: this.emailConfig.smtp.host,
        port: this.emailConfig.smtp.port,
        secure: this.emailConfig.smtp.secure,
        auth: {
          user: this.emailConfig.smtp.auth.user,
          pass: this.emailConfig.smtp.auth.pass,
        },
      });

      // Verificar conexión
      await this.transporter.verify();
      this.logger.info('✅ Conexión de email verificada correctamente');
      
      // Enviar email de prueba
      await this.sendTestEmail();
      
    } catch (error) {
      this.logger.error('❌ Error inicializando EmailManager:', error.message);
      throw error;
    }
  }

  /**
   * Envía un email de prueba
   */
  async sendTestEmail() {
    try {
      const testMessage = {
        from: this.emailConfig.from,
        to: this.emailConfig.to,
        subject: '🤖 Bot de Arbitraje - Test de Conexión',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2563eb;">🤖 Bot de Arbitraje CEX</h2>
            <p>Este es un mensaje de prueba para verificar que las notificaciones por email funcionan correctamente.</p>
            <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
              <p><strong>Estado:</strong> ✅ Conexión exitosa</p>
            </div>
            <p style="color: #6b7280; font-size: 12px;">
              Este mensaje fue enviado automáticamente por el sistema de alertas.
            </p>
          </div>
        `
      };

      await this.transporter.sendMail(testMessage);
      this.logger.info('✅ Email de prueba enviado correctamente');
      
    } catch (error) {
      this.logger.error('❌ Error enviando email de prueba:', error.message);
      throw error;
    }
  }

  /**
   * Envía un email de alerta
   * @param {string} type - Tipo de alerta
   * @param {string} message - Mensaje de la alerta
   * @param {Object} data - Datos adicionales
   */
  async sendAlert(type, message, data = {}) {
    if (!this.emailConfig.enabled || !this.transporter) {
      return;
    }

    try {
      const emailContent = this.formatEmailContent(type, message, data);
      
      const mailOptions = {
        from: this.emailConfig.from,
        to: this.emailConfig.to,
        subject: emailContent.subject,
        html: emailContent.html
      };

      await this.transporter.sendMail(mailOptions);
      this.logger.info(`📧 Email enviado: ${type} - ${message}`);
      
    } catch (error) {
      this.logger.error('❌ Error enviando email:', error.message);
    }
  }

  /**
   * Formatea el contenido del email según el tipo
   * @param {string} type - Tipo de alerta
   * @param {string} message - Mensaje
   * @param {Object} data - Datos adicionales
   * @returns {Object} - Contenido formateado
   */
  formatEmailContent(type, message, data) {
    const timestamp = new Date().toLocaleString();
    let emoji = '📢';
    let color = '#6b7280';
    let priority = 'Normal';

    switch (type) {
      case 'info':
        emoji = 'ℹ️';
        color = '#2563eb';
        priority = 'Información';
        break;
      case 'warning':
        emoji = '⚠️';
        color = '#f59e0b';
        priority = 'Advertencia';
        break;
      case 'error':
        emoji = '❌';
        color = '#dc2626';
        priority = 'Error';
        break;
      case 'trade':
        emoji = '💰';
        color = '#059669';
        priority = 'Operación';
        break;
      case 'risk':
        emoji = '🚨';
        color = '#dc2626';
        priority = 'Riesgo Alto';
        break;
      case 'profit':
        emoji = '💵';
        color = '#059669';
        priority = 'Ganancia';
        break;
      case 'balance':
        emoji = '💳';
        color = '#7c3aed';
        priority = 'Balance';
        break;
    }

    const subject = `${emoji} Bot Arbitraje - ${priority}: ${message.substring(0, 50)}...`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
        <div style="background-color: ${color}; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0; font-size: 24px;">${emoji} Bot de Arbitraje CEX</h1>
          <p style="margin: 5px 0 0 0; opacity: 0.9;">Alerta de ${priority}</p>
        </div>
        
        <div style="padding: 30px;">
          <div style="background-color: #f9fafb; border-left: 4px solid ${color}; padding: 15px; margin-bottom: 20px;">
            <h3 style="margin: 0 0 10px 0; color: ${color};">Mensaje:</h3>
            <p style="margin: 0; font-size: 16px; line-height: 1.5;">${message}</p>
          </div>

          ${data.details ? `
            <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #374151;">Detalles:</h4>
              <pre style="margin: 0; font-family: monospace; font-size: 12px; white-space: pre-wrap;">${JSON.stringify(data.details, null, 2)}</pre>
            </div>
          ` : ''}

          ${data.balances ? `
            <div style="background-color: #ecfdf5; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #065f46;">💳 Balances Actuales:</h4>
              ${Object.entries(data.balances).map(([exchange, balance]) => 
                `<p style="margin: 5px 0;"><strong>${exchange}:</strong> $${balance.toFixed(2)}</p>`
              ).join('')}
            </div>
          ` : ''}

          ${data.profit ? `
            <div style="background-color: #ecfdf5; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #065f46;">💰 Información de Ganancia:</h4>
              <p style="margin: 5px 0;"><strong>Ganancia:</strong> $${data.profit.toFixed(2)}</p>
              <p style="margin: 5px 0;"><strong>Porcentaje:</strong> ${data.profitPercentage?.toFixed(2)}%</p>
            </div>
          ` : ''}

          <div style="border-top: 1px solid #e5e7eb; padding-top: 15px; margin-top: 20px;">
            <p style="margin: 0; color: #6b7280; font-size: 12px;">
              <strong>Fecha:</strong> ${timestamp}<br>
              <strong>Tipo:</strong> ${priority}<br>
              <strong>Sistema:</strong> Bot de Arbitraje CEX con IA
            </p>
          </div>
        </div>

        <div style="background-color: #f9fafb; padding: 15px; text-align: center; border-top: 1px solid #e5e7eb;">
          <p style="margin: 0; color: #6b7280; font-size: 11px;">
            Este mensaje fue enviado automáticamente por el sistema de alertas del Bot de Arbitraje.
          </p>
        </div>
      </div>
    `;

    return { subject, html };
  }

  /**
   * Envía resumen diario por email
   * @param {Object} stats - Estadísticas del día
   */
  async sendDailySummary(stats) {
    const data = {
      details: stats,
      balances: stats.balances,
      profit: stats.totalProfit
    };

    const message = `Resumen diario del bot de arbitraje:
    
💰 Ganancia Total: $${stats.totalProfit.toFixed(2)}
📈 Operaciones Exitosas: ${stats.successfulTrades}
📉 Operaciones Fallidas: ${stats.failedTrades}
🎯 Tasa de Éxito: ${((stats.successfulTrades / (stats.totalTrades || 1)) * 100).toFixed(1)}%
⚡ Latencia Promedio: ${stats.averageLatency}`;

    await this.sendAlert('info', message, data);
  }
}

module.exports = EmailManager;
---------------------------------------------------------------------------------------------------------------

BACKTESTING

// ========== MOTOR DE BACKTESTING HISTÓRICO ==========
const fs = require('fs').promises
const path = require('path')
const config = require("../strategies/config") // ✅ CORRECTO

class BacktestEngine {
  constructor(strategyManager) {
    this.strategyManager = strategyManager
    this.historicalData = new Map()
    this.backtestResults = []
    this.isRunning = false
  }

  async loadHistoricalData(pair, startDate, endDate) {
    try {
      const dataPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, `${pair.replace('/', '_')}.json`)
      
      // Intentar cargar datos existentes
      try {
        const data = await fs.readFile(dataPath, 'utf8')
        const historicalData = JSON.parse(data)
        
        // Filtrar por rango de fechas
        const filteredData = historicalData.filter(point => {
          const timestamp = new Date(point.timestamp).getTime()
          return timestamp >= startDate.getTime() && timestamp <= endDate.getTime()
        })
        
        this.historicalData.set(pair, filteredData)
        console.log(`📊 Cargados ${filteredData.length} puntos de datos históricos para ${pair}`)
        
        return filteredData
      } catch (fileError) {
        // Si no hay datos históricos, generar datos simulados
        console.log(`⚠️ No se encontraron datos históricos para ${pair}, generando datos simulados...`)
        const simulatedData = this.generateSimulatedData(pair, startDate, endDate)
        this.historicalData.set(pair, simulatedData)
        
        // Guardar datos simulados para uso futuro
        await this.saveHistoricalData(pair, simulatedData)
        
        return simulatedData
      }
    } catch (error) {
      console.error(`❌ Error cargando datos históricos para ${pair}:`, error)
      throw error
    }
  }

  generateSimulatedData(pair, startDate, endDate) {
    const data = []
    const basePrice = this.getBasePriceForPair(pair)
    let currentPrice = basePrice
    
    const totalMinutes = (endDate.getTime() - startDate.getTime()) / (1000 * 60)
    const interval = 5 // 5 minutos entre puntos de datos
    
    for (let i = 0; i < totalMinutes; i += interval) {
      const timestamp = new Date(startDate.getTime() + i * 60 * 1000)
      
      // Simular movimiento de precio con volatilidad
      const volatility = 0.02 // 2% volatilidad
      const randomChange = (Math.random() - 0.5) * volatility
      currentPrice *= (1 + randomChange)
      
      // Simular datos de ambos exchanges con spread
      const spread = (Math.random() * 0.01) + 0.001 // 0.1% - 1.1% spread
      const binancePrice = currentPrice * (1 - spread / 2)
      const kucoinPrice = currentPrice * (1 + spread / 2)
      
      data.push({
        timestamp: timestamp.toISOString(),
        pair,
        binance: {
          price: binancePrice,
          volume: Math.random() * 1000000,
        },
        kucoin: {
          price: kucoinPrice,
          volume: Math.random() * 800000,
        },
        spread: ((kucoinPrice - binancePrice) / binancePrice) * 100,
        volatility: this.calculateVolatility(data.slice(-20).map(d => d.binance.price)),
      })
    }
    
    return data
  }

  getBasePriceForPair(pair) {
    const basePrices = {
      'POL/USDT': 0.45,
      'USDC/USDT': 1.0,
      'BTC/USDT': 45000,
      'ETH/USDT': 3000,
    }
    return basePrices[pair] || 1.0
  }

  calculateVolatility(prices) {
    if (prices.length < 2) return 0
    
    const returns = []
    for (let i = 1; i < prices.length; i++) {
      returns.push((prices[i] - prices[i-1]) / prices[i-1])
    }
    
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    
    return Math.sqrt(variance)
  }

  async runBacktest(options = {}) {
    const {
      pairs = config.TRADING_PAIRS.map(p => p.symbol),
      startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 días atrás
      endDate = new Date(),
      initialBalance = config.BACKTESTING.INITIAL_BALANCE_SIM,
      strategy = 'BALANCED',
      maxTrades = 100,
    } = options

    if (this.isRunning) {
      throw new Error('Ya hay un backtest en ejecución')
    }

    this.isRunning = true
    console.log(`🔄 Iniciando backtest: ${startDate.toDateString()} - ${endDate.toDateString()}`)

    try {
      const results = {
        id: Date.now(),
        startDate,
        endDate,
        strategy,
        initialBalance,
        pairs,
        trades: [],
        performance: {},
        summary: {},
        timestamp: new Date(),
      }

      // Cargar datos históricos para todos los pares
      for (const pair of pairs) {
        await this.loadHistoricalData(pair, startDate, endDate)
      }

      // Simular trading
      const simulation = await this.simulateTrading(results, maxTrades)
      results.trades = simulation.trades
      results.performance = simulation.performance
      results.summary = this.calculateSummary(simulation)

      this.backtestResults.push(results)
      
      console.log(`✅ Backtest completado: ${results.trades.length} trades simulados`)
      console.log(`📊 Rendimiento: ${results.summary.totalReturn.toFixed(2)}%`)

      // Guardar resultados
      await this.saveBacktestResults(results)

      return results
    } catch (error) {
      console.error('❌ Error en backtest:', error)
      throw error
    } finally {
      this.isRunning = false
    }
  }

  async simulateTrading(backtestConfig, maxTrades) {
    const trades = []
    let currentBalance = backtestConfig.initialBalance
    let totalFees = 0
    const balanceHistory = []

    // Obtener todos los puntos de datos ordenados por tiempo
    const allDataPoints = []
    for (const pair of backtestConfig.pairs) {
      const pairData = this.historicalData.get(pair) || []
      pairData.forEach(point => {
        allDataPoints.push({ ...point, pair })
      })
    }

    allDataPoints.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))

    console.log(`📈 Simulando trading con ${allDataPoints.length} puntos de datos...`)

    for (let i = 0; i < allDataPoints.length && trades.length < maxTrades; i++) {
      const dataPoint = allDataPoints[i]
      
      // Simular detección de oportunidad
      const opportunity = this.simulateOpportunityDetection(dataPoint)
      
      if (opportunity && opportunity.profitable) {
        // Evaluar con la estrategia seleccionada
        const evaluatedOpp = this.strategyManager.strategies.get(backtestConfig.strategy)?.evaluate(opportunity)
        
        if (evaluatedOpp && currentBalance >= evaluatedOpp.tradeAmount) {
          // Simular ejecución del trade
          const tradeResult = this.simulateTradeExecution(evaluatedOpp, dataPoint)
          
          if (tradeResult.success) {
            const fees = evaluatedOpp.tradeAmount * (config.BACKTESTING.FEE_PERCENTAGE_SIM / 100)
            const netProfit = tradeResult.profit - fees
            
            currentBalance += netProfit
            totalFees += fees
            
            trades.push({
              timestamp: dataPoint.timestamp,
              pair: dataPoint.pair,
              type: 'ARBITRAGE',
              amount: evaluatedOpp.tradeAmount,
              profit: netProfit,
              fees,
              balance: currentBalance,
              strategy: backtestConfig.strategy,
              confidence: evaluatedOpp.confidence,
            })
          }
        }
      }

      // Registrar balance cada 100 puntos
      if (i % 100 === 0) {
        balanceHistory.push({
          timestamp: dataPoint.timestamp,
          balance: currentBalance,
        })
      }
    }

    return {
      trades,
      performance: {
        initialBalance: backtestConfig.initialBalance,
        finalBalance: currentBalance,
        totalFees,
        balanceHistory,
      }
    }
  }

  simulateOpportunityDetection(dataPoint) {
    const binancePrice = dataPoint.binance.price
    const kucoinPrice = dataPoint.kucoin.price
    
    if (!binancePrice || !kucoinPrice) return null

    // Calcular oportunidad de arbitraje
    const spread = Math.abs(kucoinPrice - binancePrice)
    const spreadPercent = (spread / Math.min(binancePrice, kucoinPrice)) * 100
    
    // Determinar dirección del arbitraje
    const buyExchange = binancePrice < kucoinPrice ? 'BINANCE' : 'KUCOIN'
    const sellExchange = binancePrice < kucoinPrice ? 'KUCOIN' : 'BINANCE'
    const buyPrice = Math.min(binancePrice, kucoinPrice)
    const sellPrice = Math.max(binancePrice, kucoinPrice)
    
    // Simular fees y costos
    const tradingFees = 0.2 // 0.2% total en fees
    const netProfit = spreadPercent - tradingFees
    
    return {
      pair: dataPoint.pair,
      buyExchange,
      sellExchange,
      buyPrice,
      sellPrice,
      spread: spreadPercent,
      finalProfit: netProfit,
      profitable: netProfit > 0.1, // Mínimo 0.1% profit
      confidence: Math.min(0.9, Math.max(0.1, netProfit / 2)), // Confianza basada en profit
      tradeAmount: 50, // Monto fijo para simulación
      timestamp: new Date(dataPoint.timestamp).getTime(),
    }
  }

  simulateTradeExecution(opportunity, dataPoint) {
    // Simular éxito/fallo basado en condiciones de mercado
    const volatility = dataPoint.volatility || 0
    const volume = Math.min(dataPoint.binance.volume, dataPoint.kucoin.volume)
    
    // Factores que afectan el éxito
    let successProbability = 0.8 // Base 80%
    
    // Reducir probabilidad con alta volatilidad
    if (volatility > 0.05) successProbability -= 0.2
    
    // Reducir probabilidad con bajo volumen
    if (volume < 100000) successProbability -= 0.1
    
    // Aumentar probabilidad con alto profit
    if (opportunity.finalProfit > 1.0) successProbability += 0.1
    
    const success = Math.random() < successProbability
    
    if (success) {
      // Simular slippage
      const slippage = Math.random() * 0.1 // Hasta 0.1% slippage
      const actualProfit = (opportunity.finalProfit - slippage) * opportunity.tradeAmount / 100
      
      return {
        success: true,
        profit: Math.max(0, actualProfit),
        executionTime: Math.random() * 30000 + 5000, // 5-35 segundos
      }
    } else {
      return {
        success: false,
        profit: 0,
        reason: 'Fallo en ejecución simulada',
      }
    }
  }

  calculateSummary(simulation) {
    const { trades, performance } = simulation
    const { initialBalance, finalBalance, totalFees } = performance
    
    const successfulTrades = trades.filter(t => t.profit > 0)
    const totalProfit = trades.reduce((sum, t) => sum + t.profit, 0)
    const totalReturn = ((finalBalance - initialBalance) / initialBalance) * 100
    
    const profitableTrades = trades.filter(t => t.profit > 0)
    const losingTrades = trades.filter(t => t.profit <= 0)
    
    const avgProfit = profitableTrades.length > 0 
      ? profitableTrades.reduce((sum, t) => sum + t.profit, 0) / profitableTrades.length 
      : 0
    
    const avgLoss = losingTrades.length > 0 
      ? Math.abs(losingTrades.reduce((sum, t) => sum + t.profit, 0)) / losingTrades.length 
      : 0

    const maxDrawdown = this.calculateMaxDrawdown(performance.balanceHistory)
    const sharpeRatio = this.calculateSharpeRatio(trades)
    
    return {
      totalTrades: trades.length,
      successfulTrades: successfulTrades.length,
      successRate: trades.length > 0 ? (successfulTrades.length / trades.length) * 100 : 0,
      totalProfit,
      totalReturn,
      totalFees,
      avgProfit,
      avgLoss,
      profitFactor: avgLoss > 0 ? avgProfit / avgLoss : 0,
      maxDrawdown,
      sharpeRatio,
      finalBalance,
      roi: totalReturn,
    }
  }

  calculateMaxDrawdown(balanceHistory) {
    if (balanceHistory.length < 2) return 0
    
    let maxDrawdown = 0
    let peak = balanceHistory[0].balance
    
    for (const point of balanceHistory) {
      if (point.balance > peak) {
        peak = point.balance
      } else {
        const drawdown = ((peak - point.balance) / peak) * 100
        maxDrawdown = Math.max(maxDrawdown, drawdown)
      }
    }
    
    return maxDrawdown
  }

  calculateSharpeRatio(trades) {
    if (trades.length < 2) return 0
    
    const returns = trades.map(t => (t.profit / t.amount) * 100)
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    const stdDev = Math.sqrt(variance)
    
    return stdDev > 0 ? avgReturn / stdDev : 0
  }

  async saveHistoricalData(pair, data) {
    try {
      const dataPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, `${pair.replace('/', '_')}.json`)
      
      // Crear directorio si no existe
      await fs.mkdir(path.dirname(dataPath), { recursive: true })
      
      await fs.writeFile(dataPath, JSON.stringify(data, null, 2))
      console.log(`💾 Datos históricos guardados para ${pair}`)
    } catch (error) {
      console.error(`❌ Error guardando datos históricos para ${pair}:`, error)
    }
  }

  async saveBacktestResults(results) {
    try {
      const resultsPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, 'backtest_results.json')
      
      // Cargar resultados existentes
      let existingResults = []
      try {
        const data = await fs.readFile(resultsPath, 'utf8')
        existingResults = JSON.parse(data)
      } catch (error) {
        // Archivo no existe, usar array vacío
      }
      
      existingResults.push(results)
      
      // Mantener solo los últimos 50 resultados
      if (existingResults.length > 50) {
        existingResults = existingResults.slice(-50)
      }
      
      await fs.writeFile(resultsPath, JSON.stringify(existingResults, null, 2))
      console.log('💾 Resultados de backtest guardados')
    } catch (error) {
      console.error('❌ Error guardando resultados de backtest:', error)
    }
  }

  async getBacktestHistory() {
    try {
      const resultsPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, 'backtest_results.json')
      const data = await fs.readFile(resultsPath, 'utf8')
      return JSON.parse(data)
    } catch (error) {
      return []
    }
  }

  compareStrategies(backtestResults) {
    const strategyPerformance = new Map()
    
    for (const result of backtestResults) {
      const strategy = result.strategy
      if (!strategyPerformance.has(strategy)) {
        strategyPerformance.set(strategy, {
          backtests: 0,
          avgReturn: 0,
          avgSharpe: 0,
          avgSuccessRate: 0,
          totalReturn: 0,
        })
      }
      
      const perf = strategyPerformance.get(strategy)
      perf.backtests++
      perf.totalReturn += result.summary.totalReturn
      perf.avgReturn = perf.totalReturn / perf.backtests
      perf.avgSharpe = (perf.avgSharpe * (perf.backtests - 1) + result.summary.sharpeRatio) / perf.backtests
      perf.avgSuccessRate = (perf.avgSuccessRate * (perf.backtests - 1) + result.summary.successRate) / perf.backtests
    }
    
    return Object.fromEntries(strategyPerformance)
  }
}

module.exports = { BacktestEngine }
---------------------------------------------------------------------------------------------------------
const fs = require('fs').promises;
const path = require('path');
const EventEmitter = require('events');

/**
 * Motor de Backtesting
 * Permite probar estrategias con datos históricos
 */
class BacktestEngine extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.BACKTESTING.ENABLED;
        this.dataSource = config.BACKTESTING.DATA_SOURCE;
        this.defaultPeriod = config.BACKTESTING.DEFAULT_PERIOD;
        this.commissionRate = config.BACKTESTING.COMMISSION_RATE;
        this.slippageRate = config.BACKTESTING.SLIPPAGE_RATE;
        this.initialCapital = config.BACKTESTING.INITIAL_CAPITAL;
        this.benchmark = config.BACKTESTING.BENCHMARK;
        this.metrics = config.BACKTESTING.METRICS;
        this.monteCarloSimulations = config.BACKTESTING.MONTE_CARLO_SIMULATIONS;
        this.confidenceIntervals = config.BACKTESTING.CONFIDENCE_INTERVALS;
        
        this.historicalData = {};
        this.backtestResults = {};
        this.currentBacktest = null;
        
        this.logger = console;
    }
    
    /**
     * Inicializa el motor de backtesting
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('Backtesting deshabilitado');
            return;
        }
        
        this.logger.info('Inicializando motor de backtesting...');
        
        try {
            // Crear directorio de datos si no existe
            await this.ensureDataDirectory();
            
            // Cargar datos históricos iniciales
            await this.loadInitialData();
            
            this.logger.info('Motor de backtesting inicializado correctamente');
        } catch (error) {
            this.logger.error('Error inicializando motor de backtesting:', error);
            throw error;
        }
    }
    
    /**
     * Asegura que el directorio de datos exista
     */
    async ensureDataDirectory() {
        const dataDir = path.join(__dirname, 'data');
        try {
            await fs.mkdir(dataDir, { recursive: true });
        } catch (error) {
            if (error.code !== 'EEXIST') {
                throw error;
            }
        }
    }
    
    /**
     * Carga datos históricos iniciales
     */
    async loadInitialData() {
        try {
            // En una implementación real, aquí cargaríamos datos históricos de una API o archivos
            // Para esta implementación, generaremos datos simulados
            
            const pairs = this.config.TRADING_PAIRS;
            const exchanges = Object.keys(this.config.EXCHANGES)
                .filter(key => this.config.EXCHANGES[key].enabled)
                .map(key => this.config.EXCHANGES[key].name);
            
            for (const pair of pairs) {
                this.historicalData[pair] = {};
                
                for (const exchange of exchanges) {
                    this.historicalData[pair][exchange] = await this.generateHistoricalData(pair, exchange);
                }
            }
            
            this.logger.info(`Datos históricos cargados para ${pairs.length} pares en ${exchanges.length} exchanges`);
        } catch (error) {
            this.logger.error('Error cargando datos históricos:', error);
            throw error;
        }
    }
    
    /**
     * Genera datos históricos simulados
     * @param {string} pair - Par de trading
     * @param {string} exchange - Exchange
     * @returns {Array} - Datos históricos simulados
     */
    async generateHistoricalData(pair, exchange) {
        const days = this.defaultPeriod;
        const dataPoints = days * 24 * 6; // 6 puntos por hora
        const endDate = new Date();
        const data = [];
        
        // Generar precio base según el par
        let basePrice;
        if (pair.includes('BTC')) {
            basePrice = 30000 + Math.random() * 10000;
        } else if (pair.includes('ETH')) {
            basePrice = 2000 + Math.random() * 500;
        } else if (pair.includes('XRP')) {
            basePrice = 0.5 + Math.random() * 0.2;
        } else {
            basePrice = 10 + Math.random() * 90;
        }
        
        // Añadir variación por exchange
        if (exchange === 'Binance') {
            basePrice *= 1.0;
        } else if (exchange === 'Coinbase') {
            basePrice *= 1.005;
        } else if (exchange === 'Kraken') {
            basePrice *= 0.995;
        } else {
            basePrice *= 1.002;
        }
        
        // Generar serie temporal
        let currentPrice = basePrice;
        for (let i = 0; i < dataPoints; i++) {
            const timestamp = new Date(endDate.getTime() - (dataPoints - i) * 10 * 60 * 1000); // 10 minutos
            
            // Simular movimiento de precio
            const change = (Math.random() - 0.5) * 0.01; // ±0.5%
            currentPrice = currentPrice * (1 + change);
            
            // Añadir algo de volatilidad según el par
            if (pair.includes('BTC')) {
                currentPrice += (Math.random() - 0.5) * 50;
            } else if (pair.includes('ETH')) {
                currentPrice += (Math.random() - 0.5) * 10;
            } else {
                currentPrice += (Math.random() - 0.5) * 0.05;
            }
            
            // Asegurar que el precio no sea negativo
            currentPrice = Math.max(currentPrice, 0.001);
            
            // Generar volumen simulado
            let volume;
            if (pair.includes('BTC')) {
                volume = Math.random() * 10 + 1;
            } else if (pair.includes('ETH')) {
                volume = Math.random() * 50 + 5;
            } else {
                volume = Math.random() * 100000 + 10000;
            }
            
            // Añadir datos
            data.push({
                timestamp: timestamp.toISOString(),
                open: currentPrice * (1 - 0.001),
                high: currentPrice * (1 + 0.002),
                low: currentPrice * (1 - 0.002),
                close: currentPrice,
                volume: volume,
                exchange
            });
        }
        
        return data;
    }
    
    /**
     * Ejecuta un backtest con una estrategia específica
     * @param {Object} options - Opciones del backtest
     * @returns {Object} - Resultados del backtest
     */
    async runBacktest(options) {
        if (!this.enabled) {
            throw new Error('Backtesting está deshabilitado');
        }
        
        const {
            strategy = 'basic',
            pairs = this.config.TRADING_PAIRS,
            exchanges = Object.keys(this.config.EXCHANGES)
                .filter(key => this.config.EXCHANGES[key].enabled)
                .map(key => this.config.EXCHANGES[key].name),
            startDate = new Date(Date.now() - this.defaultPeriod * 24 * 60 * 60 * 1000),
            endDate = new Date(),
            initialCapital = this.initialCapital,
            parameters = {}
        } = options;
        
        this.logger.info(`Iniciando backtest para estrategia ${strategy}...`);
        
        try {
            // Crear ID único para este backtest
            const backtestId = `backtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            
            // Inicializar estado del backtest
            this.currentBacktest = {
                id: backtestId,
                strategy,
                pairs,
                exchanges,
                startDate,
                endDate,
                initialCapital,
                parameters,
                status: 'running',
                progress: 0,
                trades: [],
                balance: initialCapital,
                equity: initialCapital,
                startTime: new Date()
            };
            
            // Emitir evento de inicio
            this.emit('backtestStarted', { id: backtestId });
            
            // Filtrar datos históricos según fechas y pares/exchanges
            const filteredData = await this.filterHistoricalData(pairs, exchanges, startDate, endDate);
            
            // Ejecutar simulación
            const result = await this.simulateStrategy(strategy, filteredData, initialCapital, parameters);
            
            // Calcular métricas
            const metrics = this.calculateMetrics(result);
            
            // Ejecutar simulaciones de Monte Carlo
            const monteCarloResults = await this.runMonteCarloSimulations(result);
            
            // Guardar resultados
            this.backtestResults[backtestId] = {
                ...this.currentBacktest,
                status: 'completed',
                progress: 100,
                result,
                metrics,
                monteCarloResults,
                endTime: new Date(),
                executionTime: new Date() - this.currentBacktest.startTime
            };
            
            // Emitir evento de finalización
            this.emit('backtestCompleted', { 
                id: backtestId,
                metrics,
                executionTime: this.backtestResults[backtestId].executionTime
            });
            
            this.currentBacktest = null;
            
            return this.backtestResults[backtestId];
        } catch (error) {
            this.logger.error('Error ejecutando backtest:', error);
            
            if (this.currentBacktest) {
                this.backtestResults[this.currentBacktest.id] = {
                    ...this.currentBacktest,
                    status: 'failed',
                    error: error.message,
                    endTime: new Date(),
                    executionTime: new Date() - this.currentBacktest.startTime
                };
                
                // Emitir evento de error
                this.emit('backtestError', { 
                    id: this.currentBacktest.id,
                    error: error.message
                });
                
                this.currentBacktest = null;
            }
            
            throw error;
        }
    }
    
    /**
     * Filtra datos históricos según criterios
     * @param {Array} pairs - Pares de trading
     * @param {Array} exchanges - Exchanges
     * @param {Date} startDate - Fecha de inicio
     * @param {Date} endDate - Fecha de fin
     * @returns {Object} - Datos históricos filtrados
     */
    async filterHistoricalData(pairs, exchanges, startDate, endDate) {
        const filteredData = {};
        
        for (const pair of pairs) {
            if (!this.historicalData[pair]) continue;
            
            filteredData[pair] = {};
            
            for (const exchange of exchanges) {
                if (!this.historicalData[pair][exchange]) continue;
                
                // Filtrar por fecha
                filteredData[pair][exchange] = this.historicalData[pair][exchange].filter(data => {
                    const timestamp = new Date(data.timestamp);
                    return timestamp >= startDate && timestamp <= endDate;
                });
            }
        }
        
        return filteredData;
    }
    
    /**
     * Simula una estrategia con datos históricos
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} data - Datos históricos
     * @param {number} initialCapital - Capital inicial
     * @param {Object} parameters - Parámetros de la estrategia
     * @returns {Object} - Resultados de la simulación
     */
    async simulateStrategy(strategyName, data, initialCapital, parameters) {
        // Obtener configuración de la estrategia
        const strategyConfig = this.config.STRATEGIES[strategyName.toUpperCase()] || this.config.STRATEGIES.BASIC;
        
        // Inicializar resultado
        const result = {
            trades: [],
            balanceHistory: [],
            equityHistory: [],
            positions: {},
            currentBalance: initialCapital,
            maxBalance: initialCapital,
            minBalance: initialCapital,
            finalBalance: initialCapital,
            totalTrades: 0,
            successfulTrades: 0,
            failedTrades: 0,
            totalProfit: 0,
            totalLoss: 0,
            netProfit: 0,
            winRate: 0,
            maxDrawdown: 0,
            maxDrawdownPercentage: 0
        };
        
        // Ordenar todos los datos por timestamp
        const allDataPoints = [];
        
        for (const pair in data) {
            for (const exchange in data[pair]) {
                for (const point of data[pair][exchange]) {
                    allDataPoints.push({
                        ...point,
                        pair,
                        exchange
                    });
                }
            }
        }
        
        // Ordenar por timestamp
        allDataPoints.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        
        // Inicializar balance histórico
        result.balanceHistory.push({
            timestamp: allDataPoints[0]?.timestamp || new Date().toISOString(),
            balance: initialCapital
        });
        
        result.equityHistory.push({
            timestamp: allDataPoints[0]?.timestamp || new Date().toISOString(),
            equity: initialCapital
        });
        
        // Simular trading
        let lastProgressUpdate = 0;
        
        for (let i = 0; i < allDataPoints.length; i++) {
            // Actualizar progreso cada 5%
            const progress = Math.floor((i / allDataPoints.length) * 100);
            if (progress >= lastProgressUpdate + 5) {
                lastProgressUpdate = progress;
                if (this.currentBacktest) {
                    this.currentBacktest.progress = progress;
                    this.emit('backtestProgress', { 
                        id: this.currentBacktest.id,
                        progress
                    });
                }
            }
            
            const currentPoint = allDataPoints[i];
            const { pair, exchange, timestamp, close: price } = currentPoint;
            
            // Buscar oportunidades de arbitraje
            const opportunities = await this.findArbitrageOpportunities(allDataPoints, i, strategyName, strategyConfig);
            
            // Ejecutar operaciones para oportunidades encontradas
            for (const opportunity of opportunities) {
                const trade = await this.executeTrade(opportunity, result.currentBalance, timestamp);
                
                if (trade) {
                    // Actualizar balance
                    result.currentBalance += trade.profit;
                    
                    // Actualizar estadísticas
                    result.totalTrades++;
                    if (trade.profit > 0) {
                        result.successfulTrades++;
                        result.totalProfit += trade.profit;
                    } else {
                        result.failedTrades++;
                        result.totalLoss += trade.profit; // Será negativo
                    }
                    
                    // Actualizar máximo y mínimo balance
                    result.maxBalance = Math.max(result.maxBalance, result.currentBalance);
                    result.minBalance = Math.min(result.minBalance, result.currentBalance);
                    
                    // Registrar operación
                    result.trades.push(trade);
                }
            }
            
            // Actualizar historial de balance cada hora simulada
            if (i % 6 === 0) { // Asumiendo 6 puntos por hora
                result.balanceHistory.push({
                    timestamp,
                    balance: result.currentBalance
                });
                
                // Calcular equity (balance + valor de posiciones abiertas)
                let equity = result.currentBalance;
                
                // Añadir valor de posiciones abiertas (si las hubiera)
                for (const positionPair in result.positions) {
                    for (const positionExchange in result.positions[positionPair]) {
                        const position = result.positions[positionPair][positionExchange];
                        // En este ejemplo simplificado no manejamos posiciones abiertas
                    }
                }
                
                result.equityHistory.push({
                    timestamp,
                    equity
                });
            }
        }
        
        // Finalizar resultado
        result.finalBalance = result.currentBalance;
        result.netProfit = result.totalProfit + result.totalLoss;
        result.winRate = result.totalTrades > 0 ? result.successfulTrades / result.totalTrades : 0;
        
        // Calcular drawdown
        let peak = initialCapital;
        let maxDrawdown = 0;
        let maxDrawdownPercentage = 0;
        
        for (const point of result.balanceHistory) {
            if (point.balance > peak) {
                peak = point.balance;
            } else {
                const drawdown = peak - point.balance;
                const drawdownPercentage = drawdown / peak;
                
                if (drawdown > maxDrawdown) {
                    maxDrawdown = drawdown;
                    maxDrawdownPercentage = drawdownPercentage;
                }
            }
        }
        
        result.maxDrawdown = maxDrawdown;
        result.maxDrawdownPercentage = maxDrawdownPercentage;
        
        return result;
    }
    
    /**
     * Busca oportunidades de arbitraje en datos históricos
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} strategyConfig - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findArbitrageOpportunities(dataPoints, currentIndex, strategyName, strategyConfig) {
        const opportunities = [];
        const currentPoint = dataPoints[currentIndex];
        const { timestamp } = currentPoint;
        
        // Obtener precios actuales para todos los pares y exchanges
        const currentPrices = {};
        
        // Buscar en un rango cercano al punto actual (simulando datos simultáneos)
        const rangeStart = Math.max(0, currentIndex - 10);
        const rangeEnd = Math.min(dataPoints.length - 1, currentIndex + 10);
        
        for (let i = rangeStart; i <= rangeEnd; i++) {
            const point = dataPoints[i];
            const { pair, exchange, close: price } = point;
            
            if (!currentPrices[pair]) {
                currentPrices[pair] = {};
            }
            
            currentPrices[pair][exchange] = price;
        }
        
        // Buscar oportunidades según la estrategia
        switch (strategyName.toLowerCase()) {
            case 'basic':
                return this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                
            case 'triangular':
                return this.findTriangularArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                
            case 'statistical':
                return this.findStatisticalArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
            case 'ml':
                return this.findMLArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
            case 'combined':
                // Combinar resultados de varias estrategias
                const basicOpps = await this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                const triangularOpps = await this.findTriangularArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                const statisticalOpps = await this.findStatisticalArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
                return [...basicOpps, ...triangularOpps, ...statisticalOpps];
                
            default:
                return this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
        }
    }
    
    /**
     * Busca oportunidades de arbitraje básico
     * @param {Object} prices - Precios actuales
     * @param {string} timestamp - Timestamp actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findBasicArbitrageOpportunities(prices, timestamp, config) {
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.2;
        
        for (const pair in prices) {
            const exchanges = Object.keys(prices[pair]);
            
            // Necesitamos al menos 2 exchanges para arbitraje
            if (exchanges.length < 2) continue;
            
            // Encontrar el exchange con el precio más bajo y más alto
            let lowestPrice = Infinity;
            let highestPrice = -Infinity;
            let buyExchange = null;
            let sellExchange = null;
            
            for (const exchange of exchanges) {
                const price = prices[pair][exchange];
                
                if (price < lowestPrice) {
                    lowestPrice = price;
                    buyExchange = exchange;
                }
                
                if (price > highestPrice) {
                    highestPrice = price;
                    sellExchange = exchange;
                }
            }
            
            // Calcular ganancia potencial
            const profitPercentage = ((highestPrice - lowestPrice) / lowestPrice) * 100;
            
            // Verificar si la ganancia supera el mínimo requerido
            if (profitPercentage >= minProfitPercentage && buyExchange !== sellExchange) {
                opportunities.push({
                    type: 'basic',
                    pair,
                    buyExchange,
                    sellExchange,
                    buyPrice: lowestPrice,
                    sellPrice: highestPrice,
                    profitPercentage,
                    timestamp
                });
            }
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje triangular
     * @param {Object} prices - Precios actuales
     * @param {string} timestamp - Timestamp actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findTriangularArbitrageOpportunities(prices, timestamp, config) {
        // En una implementación real, aquí buscaríamos oportunidades de arbitraje triangular
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.15;
        
        // Simular algunas oportunidades triangulares
        if (Math.random() < 0.05) { // 5% de probabilidad de encontrar una oportunidad
            const profitPercentage = minProfitPercentage + Math.random() * 0.5;
            
            // Elegir pares y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 2) return opportunities;
            
            const pair1 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            let pair2 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            while (pair2 === pair1) {
                pair2 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            }
            
            const availableExchanges = Object.keys(prices[pair1]);
            if (availableExchanges.length < 1) return opportunities;
            
            const exchange = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            
            opportunities.push({
                type: 'triangular',
                pairs: [pair1, pair2],
                exchange,
                steps: [
                    { pair: pair1, action: 'buy', price: prices[pair1][exchange] || 1000 },
                    { pair: pair2, action: 'sell', price: prices[pair2][exchange] || 1000 }
                ],
                profitPercentage,
                timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje estadístico
     * @param {Object} prices - Precios actuales
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findStatisticalArbitrageOpportunities(prices, dataPoints, currentIndex, config) {
        // En una implementación real, aquí buscaríamos oportunidades de arbitraje estadístico
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.1;
        const lookbackPeriod = config.lookbackPeriod || 100;
        const zScoreThreshold = config.zScoreThreshold || 2.0;
        
        // Simular algunas oportunidades estadísticas
        if (Math.random() < 0.03) { // 3% de probabilidad de encontrar una oportunidad
            const profitPercentage = minProfitPercentage + Math.random() * 0.3;
            
            // Elegir par y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 1) return opportunities;
            
            const pair = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            
            const availableExchanges = Object.keys(prices[pair]);
            if (availableExchanges.length < 2) return opportunities;
            
            const exchange1 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            let exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            while (exchange2 === exchange1) {
                exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            }
            
            opportunities.push({
                type: 'statistical',
                pair,
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[pair][exchange1] || 1000,
                sellPrice: prices[pair][exchange2] || 1000,
                zScore: zScoreThreshold + Math.random(),
                profitPercentage,
                timestamp: dataPoints[currentIndex].timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje con ML
     * @param {Object} prices - Precios actuales
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findMLArbitrageOpportunities(prices, dataPoints, currentIndex, config) {
        // En una implementación real, aquí usaríamos un modelo de ML para encontrar oportunidades
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const confidenceThreshold = config.confidenceThreshold || 0.7;
        
        // Simular algunas oportunidades basadas en ML
        if (Math.random() < 0.02) { // 2% de probabilidad de encontrar una oportunidad
            const confidence = confidenceThreshold + Math.random() * (1 - confidenceThreshold);
            const profitPercentage = 0.1 + Math.random() * 0.4;
            
            // Elegir par y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 1) return opportunities;
            
            const pair = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            
            const availableExchanges = Object.keys(prices[pair]);
            if (availableExchanges.length < 2) return opportunities;
            
            const exchange1 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            let exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            while (exchange2 === exchange1) {
                exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            }
            
            opportunities.push({
                type: 'ml',
                pair,
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[pair][exchange1] || 1000,
                sellPrice: prices[pair][exchange2] || 1000,
                confidence,
                profitPercentage,
                timestamp: dataPoints[currentIndex].timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Ejecuta una operación simulada
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {number} balance - Balance actual
     * @param {string} timestamp - Timestamp actual
     * @returns {Object|null} - Detalles de la operación o null si no se ejecutó
     */
    async executeTrade(opportunity, balance, timestamp) {
        // Determinar cantidad a invertir (10% del balance)
        const investmentAmount = balance * 0.1;
        
        // Verificar si hay suficiente balance
        if (investmentAmount < 10) { // Mínimo $10
            return null;
        }
        
        // Calcular comisiones
        const buyCommission = investmentAmount * this.commissionRate;
        const sellCommission = (investmentAmount * (1 + opportunity.profitPercentage / 100)) * this.commissionRate;
        
        // Calcular slippage
        const buySlippage = investmentAmount * this.slippageRate;
        const sellSlippage = (investmentAmount * (1 + opportunity.profitPercentage / 100)) * this.slippageRate;
        
        // Calcular ganancia neta
        const grossProfit = investmentAmount * (opportunity.profitPercentage / 100);
        const netProfit = grossProfit - buyCommission - sellCommission - buySlippage - sellSlippage;
        
        // Simular éxito/fallo (95% éxito)
        const success = Math.random() > 0.05;
        
        // Si falla, perder una parte de la inversión
        const finalProfit = success ? netProfit : -investmentAmount * 0.02;
        
        return {
            timestamp,
            type: opportunity.type,
            pair: opportunity.pair || (opportunity.pairs ? opportunity.pairs[0] : 'unknown'),
            buyExchange: opportunity.buyExchange || opportunity.exchange || 'unknown',
            sellExchange: opportunity.sellExchange || opportunity.exchange || 'unknown',
            buyPrice: opportunity.buyPrice || 0,
            sellPrice: opportunity.sellPrice || 0,
            investmentAmount,
            grossProfit,
            fees: buyCommission + sellCommission,
            slippage: buySlippage + sellSlippage,
            netProfit,
            profit: finalProfit,
            profitPercentage: (finalProfit / investmentAmount) * 100,
            success
        };
    }
    
    /**
     * Calcula métricas de rendimiento
     * @param {Object} result - Resultados del backtest
     * @returns {Object} - Métricas calculadas
     */
    calculateMetrics(result) {
        const metrics = {};
        
        // Total Return
        metrics.totalReturn = ((result.finalBalance - this.initialCapital) / this.initialCapital) * 100;
        
        // Annualized Return (asumiendo 365 días por año)
        const days = result.balanceHistory.length > 1 ? 
            (new Date(result.balanceHistory[result.balanceHistory.length - 1].timestamp) - 
             new Date(result.balanceHistory[0].timestamp)) / (1000 * 60 * 60 * 24) : 1;
        
        metrics.annualizedReturn = ((1 + metrics.totalReturn / 100) ** (365 / days) - 1) * 100;
        
        // Sharpe Ratio (asumiendo tasa libre de riesgo del 2%)
        const riskFreeRate = 0.02;
        const returns = [];
        
        for (let i = 1; i < result.balanceHistory.length; i++) {
            const prevBalance = result.balanceHistory[i - 1].balance;
            const currentBalance = result.balanceHistory[i].balance;
            returns.push((currentBalance - prevBalance) / prevBalance);
        }
        
        const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;
        const stdReturn = Math.sqrt(returns.reduce((sum, r) => sum + (r - avgReturn) ** 2, 0) / returns.length);
        
        metrics.sharpeRatio = stdReturn !== 0 ? 
            (avgReturn - riskFreeRate / 365) / stdReturn * Math.sqrt(365) : 0;
        
        // Max Drawdown
       metrics.maxDrawdown = result.maxDrawdown;
        metrics.maxDrawdownPercentage = result.maxDrawdownPercentage * 100;
        
        // Win Rate
        metrics.winRate = result.winRate * 100;
        
        // Profit Factor
        metrics.profitFactor = result.totalLoss !== 0 ? 
            Math.abs(result.totalProfit / result.totalLoss) : 
            (result.totalProfit > 0 ? Infinity : 0);
        
        // Calmar Ratio
        metrics.calmarRatio = metrics.maxDrawdownPercentage !== 0 ? 
            metrics.annualizedReturn / metrics.maxDrawdownPercentage : 0;
        
        // Average Trade
        metrics.averageTrade = result.totalTrades > 0 ? 
            result.netProfit / result.totalTrades : 0;
        
        // Best Trade
        metrics.bestTrade = result.trades.length > 0 ? 
            Math.max(...result.trades.map(t => t.profit)) : 0;
        
        // Worst Trade
        metrics.worstTrade = result.trades.length > 0 ? 
            Math.min(...result.trades.map(t => t.profit)) : 0;
        
        // Average Win
        const winningTrades = result.trades.filter(t => t.profit > 0);
        metrics.averageWin = winningTrades.length > 0 ? 
            winningTrades.reduce((sum, t) => sum + t.profit, 0) / winningTrades.length : 0;
        
        // Average Loss
        const losingTrades = result.trades.filter(t => t.profit < 0);
        metrics.averageLoss = losingTrades.length > 0 ? 
            losingTrades.reduce((sum, t) => sum + t.profit, 0) / losingTrades.length : 0;
        
        // Largest Winning Streak
        let currentWinStreak = 0;
        let maxWinStreak = 0;
        
        for (const trade of result.trades) {
            if (trade.profit > 0) {
                currentWinStreak++;
                maxWinStreak = Math.max(maxWinStreak, currentWinStreak);
            } else {
                currentWinStreak = 0;
            }
        }
        
        metrics.largestWinningStreak = maxWinStreak;
        
        // Largest Losing Streak
        let currentLossStreak = 0;
        let maxLossStreak = 0;
        
        for (const trade of result.trades) {
            if (trade.profit < 0) {
                currentLossStreak++;
                maxLossStreak = Math.max(maxLossStreak, currentLossStreak);
            } else {
                currentLossStreak = 0;
            }
        }
        
        metrics.largestLosingStreak = maxLossStreak;
        
        return metrics;
    }
    
    /**
     * Ejecuta simulaciones de Monte Carlo
     * @param {Object} result - Resultados del backtest
     * @returns {Object} - Resultados de Monte Carlo
     */
    async runMonteCarloSimulations(result) {
        const simulations = [];
        const trades = result.trades;
        
        if (trades.length === 0) {
            return { simulations: [], statistics: {} };
        }
        
        // Extraer retornos de las operaciones
        const returns = trades.map(trade => trade.profit / this.initialCapital);
        
        // Ejecutar simulaciones
        for (let sim = 0; sim < this.monteCarloSimulations; sim++) {
            let balance = this.initialCapital;
            const simulationReturns = [];
            
            // Generar secuencia aleatoria de retornos
            for (let i = 0; i < trades.length; i++) {
                const randomReturn = returns[Math.floor(Math.random() * returns.length)];
                balance += balance * randomReturn;
                simulationReturns.push((balance - this.initialCapital) / this.initialCapital);
            }
            
            simulations.push({
                finalReturn: simulationReturns[simulationReturns.length - 1],
                maxDrawdown: this.calculateSimulationDrawdown(simulationReturns),
                returns: simulationReturns
            });
        }
        
        // Calcular estadísticas
        const finalReturns = simulations.map(sim => sim.finalReturn);
        const maxDrawdowns = simulations.map(sim => sim.maxDrawdown);
        
        finalReturns.sort((a, b) => a - b);
        maxDrawdowns.sort((a, b) => a - b);
        
        const statistics = {};
        
        // Intervalos de confianza para retorno final
        for (const confidence of this.confidenceIntervals) {
            const lowerIndex = Math.floor((1 - confidence) / 2 * finalReturns.length);
            const upperIndex = Math.floor((1 + confidence) / 2 * finalReturns.length);
            
            statistics[`finalReturn_${confidence * 100}%`] = {
                lower: finalReturns[lowerIndex] * 100,
                upper: finalReturns[upperIndex] * 100
            };
        }
        
        // Intervalos de confianza para máximo drawdown
        for (const confidence of this.confidenceIntervals) {
            const lowerIndex = Math.floor((1 - confidence) / 2 * maxDrawdowns.length);
            const upperIndex = Math.floor((1 + confidence) / 2 * maxDrawdowns.length);
            
            statistics[`maxDrawdown_${confidence * 100}%`] = {
                lower: maxDrawdowns[lowerIndex] * 100,
                upper: maxDrawdowns[upperIndex] * 100
            };
        }
        
        // Probabilidad de pérdida
        const lossCount = finalReturns.filter(r => r < 0).length;
        statistics.probabilityOfLoss = (lossCount / finalReturns.length) * 100;
        
        return { simulations, statistics };
    }
    
    /**
     * Calcula el drawdown para una simulación
     * @param {Array} returns - Retornos de la simulación
     * @returns {number} - Máximo drawdown
     */
    calculateSimulationDrawdown(returns) {
        let peak = 0;
        let maxDrawdown = 0;
        
        for (const returnValue of returns) {
            if (returnValue > peak) {
                peak = returnValue;
            } else {
                const drawdown = peak - returnValue;
                maxDrawdown = Math.max(maxDrawdown, drawdown);
            }
        }
        
        return maxDrawdown;
    }
    
    /**
     * Obtiene los resultados de un backtest
     * @param {string} backtestId - ID del backtest
     * @returns {Object|null} - Resultados del backtest
     */
    getBacktestResults(backtestId) {
        return this.backtestResults[backtestId] || null;
    }
    
    /**
     * Obtiene la lista de todos los backtests
     * @returns {Array} - Lista de backtests
     */
    getAllBacktests() {
        return Object.values(this.backtestResults);
    }
    
    /**
     * Obtiene el estado del backtest actual
     * @returns {Object|null} - Estado del backtest actual
     */
    getCurrentBacktestStatus() {
        return this.currentBacktest;
    }
    
    /**
     * Cancela el backtest actual
     */
    cancelCurrentBacktest() {
        if (this.currentBacktest) {
            this.backtestResults[this.currentBacktest.id] = {
                ...this.currentBacktest,
                status: 'cancelled',
                endTime: new Date(),
                executionTime: new Date() - this.currentBacktest.startTime
            };
            
            this.emit('backtestCancelled', { id: this.currentBacktest.id });
            this.currentBacktest = null;
        }
    }
}

module.exports = BacktestEngine;

-------------------------------------------------------------------------------------------------------

// ========== GESTOR DE DATOS HISTÓRICOS PARA BACKTESTING ==========
const fs = require("fs").promises
const path = require("path")
const config = require("../config") // Ajusta la ruta según tu estructura
const { ExchangeManager } = require("../exchanges") // Ajusta la ruta

class HistoricalDataManager {
  constructor(exchangeManager) {
    this.dataDir = config.BACKTESTING.HISTORICAL_DATA_PATH || "./historical_data"
    this.exchangeManager = exchangeManager || new ExchangeManager() // Puede pasarse o crearse uno nuevo
    this.ensureDataDirExists()
  }

  async ensureDataDirExists() {
    try {
      await fs.mkdir(this.dataDir, { recursive: true })
      console.log(`Directorio de datos históricos asegurado: ${this.dataDir}`)
    } catch (error) {
      console.error(`Error creando directorio de datos históricos ${this.dataDir}:`, error)
    }
  }

  getFilePath(exchange, pair, date) {
    // Formato de fecha YYYY-MM-DD
    const dateString = date.toISOString().split("T")[0]
    const pairFilename = pair.replace("/", "_") // BTC/USDT -> BTC_USDT
    return path.join(this.dataDir, exchange, pairFilename, `${dateString}.json`)
  }

  async saveData(exchange, pair, date, data) {
    const filePath = this.getFilePath(exchange, pair, date)
    try {
      await fs.mkdir(path.dirname(filePath), { recursive: true })
      await fs.writeFile(filePath, JSON.stringify(data, null, 2))
      console.log(`Datos guardados para ${exchange} - ${pair} en ${filePath}`)
    } catch (error) {
      console.error(`Error guardando datos en ${filePath}:`, error)
    }
  }

  async loadData(exchange, pair, date) {
    const filePath = this.getFilePath(exchange, pair, date)
    try {
      const data = await fs.readFile(filePath, "utf-8")
      return JSON.parse(data)
    } catch (error) {
      if (error.code === "ENOENT") {
        // console.log(`No se encontraron datos para ${exchange} - ${pair} en ${filePath}`);
        return null
      }
      console.error(`Error cargando datos desde ${filePath}:`, error)
      return null
    }
  }

  // Ejemplo: Obtener datos de Klines (velas)
  // Binance API: /api/v3/klines
  // KuCoin API: /api/v1/market/candles
  async fetchAndStoreCandlestickData(exchange, pair, interval = "1m", startTime, endTime) {
    // Esta función necesitaría implementaciones específicas por exchange
    // y manejar paginación si es necesario.
    console.log(
      `Simulando obtención de datos de velas para ${exchange} - ${pair} de ${new Date(startTime)} a ${new Date(endTime)}`,
    )

    // Ejemplo simplificado: generar datos aleatorios para un día
    const date = new Date(startTime)
    const existingData = await this.loadData(exchange, pair, date)
    if (existingData) {
      console.log(`Datos para ${exchange} - ${pair} en ${date.toISOString().split("T")[0]} ya existen.`)
      return existingData
    }

    const mockCandles = []
    let currentTime = startTime
    while (currentTime < endTime) {
      const open = Math.random() * 100 + 1000 // Precio de apertura aleatorio
      const close = open + (Math.random() - 0.5) * 10
      const high = Math.max(open, close) + Math.random() * 5
      const low = Math.min(open, close) - Math.random() * 5
      const volume = Math.random() * 1000

      mockCandles.push([
        currentTime, // Open time
        open.toFixed(4), // Open
        high.toFixed(4), // High
        low.toFixed(4), // Low
        close.toFixed(4), // Close
        volume.toFixed(4), // Volume
        currentTime + (60000 - 1), // Close time (para intervalo de 1m)
        (volume * ((open + close) / 2)).toFixed(4), // Quote asset volume
        Math.floor(Math.random() * 100), // Number of trades
        (volume / 2).toFixed(4), // Taker buy base asset volume
        ((volume * ((open + close) / 2)) / 2).toFixed(4), // Taker buy quote asset volume
        "0", // Ignore
      ])
      currentTime += 60000 // Avanzar 1 minuto
    }

    await this.saveData(exchange, pair, date, mockCandles)
    return mockCandles
  }

  async getHistoricalRange(exchange, pair, startDate, endDate, interval = "1m") {
    let allData = []
    const currentDate = new Date(startDate)
    const finalDate = new Date(endDate)

    while (currentDate <= finalDate) {
      let dailyData = await this.loadData(exchange, pair, currentDate)
      if (!dailyData) {
        // Si no hay datos locales, intentar obtenerlos (si se implementa la lógica de fetch real)
        // Por ahora, para el ejemplo, podríamos simular o simplemente saltar.
        console.log(
          `No hay datos locales para ${exchange} - ${pair} en ${currentDate.toISOString().split("T")[0]}, intentando obtener...`,
        )
        dailyData = await this.fetchAndStoreCandlestickData(
          exchange,
          pair,
          interval,
          currentDate.getTime(),
          currentDate.getTime() + (24 * 60 * 60 * 1000 - 1),
        )
      }
      if (dailyData) {
        allData = allData.concat(dailyData)
      }
      currentDate.setDate(currentDate.getDate() + 1) // Siguiente día
    }
    return allData
  }
}

module.exports = { HistoricalDataManager }

---------------------------------------------------------------------------------------------------------------

CORE 

const EventEmitter = require('events');
const nodemailer = require('nodemailer');
const axios = require('axios');

/**
 * Gestor de Alertas
 * Maneja notificaciones por email, Telegram, Discord y Slack
 */
class AlertManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.ALERTS.ENABLED;
        this.channels = config.ALERTS.CHANNELS;
        this.alertTypes = config.ALERTS.ALERT_TYPES;
        
        this.emailTransporter = null;
        this.alertHistory = [];
        this.alertQueue = [];
        this.isProcessingQueue = false;
        
        this.logger = console;
    }

    initialize() {
        // Método vacío para compatibilidad con el bot base
        // Agrega aquí inicialización si la necesitas en el futuro
    }
    
    // ... (el resto de los métodos de AlertManager quedan igual, como en tu dump)
}

module.exports = AlertManager;
---------------------------------------------------------------------------------------------------
const StrategyManager = require('./StrategyManager');
const AlertManager = require('./AlertManager');
const ExchangeManager = require('../exchanges/exchange-manager');

class CEXArbitrageBot {
    constructor(config) {
        this.config = config;
        this.logger = console;
        this.exchangeManager = new ExchangeManager(config);
        this.strategyManager = new StrategyManager(config);   // <-- AGREGADO
        this.alertManager = new AlertManager(config);         // <-- AGREGADO
        console.log("✅ CEXArbitrageBot base inicializado");
        this.botState = {
            isRunning: false,
            totalProfit: 0
        };
    }

    async initialize() {
    this.logger.info('Iniciando bot de arbitraje...');
    if (typeof this.strategyManager.initialize === 'function') {
        this.strategyManager.initialize();
    }
    await this.alertManager.initialize();
    this.logger.info('Bot inicializado correctamente');
}

    async start() {
        console.log("⚙️ Bot base iniciado");
        if (this.isRunning) return;
        await this.initialize();
        this.isRunning = true;
        this.logger.info('Bot arrancando ciclo de arbitraje...');
        while (this.isRunning) {
            try {
                const prices = {
                    BINANCE: Math.random() * 100 + 100,
                    KUCOIN: Math.random() * 100 + 100,
                    OKX: Math.random() * 100 + 100
                };
                const pair = "BTC/USDT";
                const opportunities = [
                    ...this.strategyManager.findBasicArbitrage(prices, pair),
                    ...this.strategyManager.findTriangularArbitrage(prices, pair),
                    ...this.strategyManager.findStatisticalArbitrage(prices, pair)
                ];
                if (opportunities.length > 0) {
                    for (const opp of opportunities) {
                        await this.alertManager.sendAlert(
                            "OPPORTUNITY",
                            `Oportunidad de arbitraje detectada: ${opp.strategy} (${opp.profitPercentage.toFixed(2)}%)`,
                            opp
                        );
                        this.strategyManager.updateStrategyPerformance(opp.strategy, {
                            success: true,
                            profit: opp.profitPercentage
                        });
                    }
                }
                await this._sleep(10000);
            } catch (error) {
                this.logger.error('Error en el ciclo principal:', error);
            }
        }
    }

    stop() {
        console.log("⚙️ Bot base detenido");
        this.isRunning = false;
        this.logger.info('Bot detenido.');
    }

    _sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { CEXArbitrageBot };
---------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');

/**
 * Gestor de Estrategias
 * Maneja múltiples estrategias de arbitraje y su selección
 */
class StrategyManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.strategies = config.STRATEGIES;
        this.activeStrategy = 'BASIC';
        this.strategyInstances = {};
        this.strategyPerformance = {};
        this.strategyHistory = [];
        this.logger = console;
    }

    findBasicArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje básico
        // Por ahora devolvemos un array vacío para evitar errores
        return [];
    }

    findTriangularArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje triangular
        return [];
    }

    findStatisticalArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje estadístico
        return [];
    }

    // ... (el resto de los métodos de StrategyManager quedan igual, como en tu dump)
}

/**
 * Clase Strategy
 * Representa una estrategia individual
 */
class Strategy {
    constructor(name, config) {
        this.name = name;
        this.config = config;
        this.isActive = false;
        this.lastExecution = null;
    }
    
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    
    execute(marketData) {
        this.lastExecution = new Date();
        // Implementación específica de cada estrategia
        return [];
    }
}

module.exports = StrategyManager;

-------------------------------------------------------------------------------------------------------------
CSS

.dashboard-container {
  display: flex;
  min-height: 100vh;
  background: linear-gradient(160deg, #6a11cb 0%, #2575fc 100%);
}

.sidebar {
  width: 220px;
  background: #222;
  color: #fff;
  padding: 30px 10px;
  min-height: 100vh;
}
.sidebar h2 {
  font-size: 1.2em;
  margin-bottom: 2em;
}
.sidebar ul {
  list-style: none;
  padding: 0;
}
.sidebar li {
  margin: 18px 0;
}
.sidebar a {
  color: #fff;
  text-decoration: none;
  font-weight: bold;
}

.dashboard-main {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
}
.dashboard-row {
  display: flex;
  flex-wrap: wrap;
  gap: 22px;
  margin-bottom: 28px;
}
.panel {
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 16px rgba(100,100,100,0.10);
  padding: 22px;
  flex: 1;
  min-width: 320px;
  max-width: 420px;
}
.panel h3 {
  font-size: 1.15em;
  margin-bottom: 12px;
}
.panel ul {
  margin: 0;
  padding-left: 18px;
}
button {
  margin-bottom: 10px;
  background: #2575fc;
  color: #fff;
  padding: 8px 18px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
button:disabled {
  background: #aaa;
}
input, select {
  margin: 4px 0 10px 0;
  padding: 6px 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

------------------------------------------------------------------------------------------------------------

EXCHANGES

const ccxt = require("ccxt")

/**
 * Gestor de Exchanges para el Bot de Arbitraje
 */
class ExchangeManager {
  constructor(config) {
    this.config = config
    this.exchanges = {}
    this.logger = console
  }

  /**
   * 
   * Inicializa las conexiones a los exchanges
   */
  async initialize() {
    try {
      this.logger.info("🔄 Inicializando conexiones a exchanges...")

      // Configurar Binance
      if (this.config.EXCHANGES.BINANCE.enabled) {
        this.exchanges.binance = new ccxt.binance({
          apiKey: this.config.EXCHANGES.BINANCE.apiKey,
          secret: this.config.EXCHANGES.BINANCE.apiSecret,
          sandbox: this.config.EXCHANGES.BINANCE.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.BINANCE.rateLimit,
        })

        await this.exchanges.binance.loadMarkets()
        this.logger.info("✅ Binance conectado")
      }

      // Configurar Bybit (NUEVO)
      if (this.config.EXCHANGES.BYBIT.enabled) {
        this.exchanges.bybit = new ccxt.bybit({
          apiKey: this.config.EXCHANGES.BYBIT.apiKey,
          secret: this.config.EXCHANGES.BYBIT.apiSecret,
          sandbox: this.config.EXCHANGES.BYBIT.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.BYBIT.rateLimit,
        })

        await this.exchanges.bybit.loadMarkets()
        this.logger.info("✅ Bybit conectado")
      }

      // Configurar Kucoin (DESHABILITADO)
      if (this.config.EXCHANGES.KUCOIN.enabled) {
        this.exchanges.kucoin = new ccxt.kucoin({
          apiKey: this.config.EXCHANGES.KUCOIN.apiKey,
          secret: this.config.EXCHANGES.KUCOIN.apiSecret,
          password: this.config.EXCHANGES.KUCOIN.passphrase,
          sandbox: this.config.EXCHANGES.KUCOIN.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.KUCOIN.rateLimit,
        })

        await this.exchanges.kucoin.loadMarkets()
        this.logger.info("✅ Kucoin conectado")
      }

      // Configurar Coinbase (si está habilitado)
      if (this.config.EXCHANGES.COINBASE.enabled) {
        this.exchanges.coinbase = new ccxt.coinbasepro({
          apiKey: this.config.EXCHANGES.COINBASE.apiKey,
          secret: this.config.EXCHANGES.COINBASE.apiSecret,
          password: this.config.EXCHANGES.COINBASE.passphrase,
          sandbox: this.config.EXCHANGES.COINBASE.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.COINBASE.rateLimit,
        })

        await this.exchanges.coinbase.loadMarkets()
        this.logger.info("✅ Coinbase conectado")
      }

      // Configurar Kraken (si está habilitado)
      if (this.config.EXCHANGES.KRAKEN.enabled) {
        this.exchanges.kraken = new ccxt.kraken({
          apiKey: this.config.EXCHANGES.KRAKEN.apiKey,
          secret: this.config.EXCHANGES.KRAKEN.apiSecret,
          sandbox: this.config.EXCHANGES.KRAKEN.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.KRAKEN.rateLimit,
        })

        await this.exchanges.kraken.loadMarkets()
        this.logger.info("✅ Kraken conectado")
      }

      this.logger.info("🎉 ExchangeManager inicializado correctamente")
      return true
    } catch (error) {
      this.logger.error("❌ Error inicializando ExchangeManager:", error.message)
      throw error
    }
  }

  /**
   * Obtiene un exchange por su nombre
   */
  getExchange(exchangeName) {
    return this.exchanges[exchangeName.toLowerCase()]
  }

  /**
   * Obtiene todos los exchanges
   */
  getAllExchanges() {
    return this.exchanges
  }

  /**
   * Obtiene los nombres de los exchanges habilitados
   */
  getEnabledExchangeNames() {
    return Object.keys(this.exchanges)
  }

  /**
   * Verifica si un exchange está habilitado
   */
  isExchangeEnabled(exchangeName) {
    return !!this.exchanges[exchangeName.toLowerCase()]
  }

  /**
   * Obtiene el balance de un exchange
   */
  async getBalance(exchangeName, symbol = null) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      const balance = await exchange.fetchBalance()
      if (symbol) {
        return balance[symbol] || { free: 0, used: 0, total: 0 }
      }
      return balance
    } catch (error) {
      this.logger.error(`❌ Error obteniendo balance de ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Obtiene el ticker de un par en un exchange
   */
  async getTicker(exchangeName, symbol) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      return await exchange.fetchTicker(symbol)
    } catch (error) {
      this.logger.error(`❌ Error obteniendo ticker de ${symbol} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Obtiene el libro de órdenes de un par en un exchange
   */
  async getOrderBook(exchangeName, symbol, limit = 5) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      return await exchange.fetchOrderBook(symbol, limit)
    } catch (error) {
      this.logger.error(`❌ Error obteniendo libro de órdenes de ${symbol} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Ejecuta una orden de compra
   */
  async buy(exchangeName, symbol, amount, price = null, params = {}) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      // Orden de mercado si no se especifica precio
      const orderType = price ? "limit" : "market"

      return await exchange.createOrder(symbol, orderType, "buy", amount, price, params)
    } catch (error) {
      this.logger.error(`❌ Error ejecutando orden de compra de ${symbol} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Ejecuta una orden de venta
   */
  async sell(exchangeName, symbol, amount, price = null, params = {}) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      // Orden de mercado si no se especifica precio
      const orderType = price ? "limit" : "market"

      return await exchange.createOrder(symbol, orderType, "sell", amount, price, params)
    } catch (error) {
      this.logger.error(`❌ Error ejecutando orden de venta de ${symbol} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Verifica el estado de una orden
   */
  async checkOrder(exchangeName, orderId, symbol) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      return await exchange.fetchOrder(orderId, symbol)
    } catch (error) {
      this.logger.error(`❌ Error verificando orden ${orderId} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Cancela una orden
   */
  async cancelOrder(exchangeName, orderId, symbol) {
    try {
      const exchange = this.getExchange(exchangeName)
      if (!exchange) {
        throw new Error(`Exchange ${exchangeName} no encontrado`)
      }

      return await exchange.cancelOrder(orderId, symbol)
    } catch (error) {
      this.logger.error(`❌ Error cancelando orden ${orderId} en ${exchangeName}:`, error.message)
      throw error
    }
  }

  /**
   * Cierra todas las conexiones
   */
  async close() {
    this.logger.info("🔄 Cerrando conexiones a exchanges...")
    // No hay un método específico para cerrar conexiones en ccxt
    // pero podemos limpiar el objeto exchanges
    this.exchanges = {}
    this.logger.info("✅ Conexiones cerradas")
  }

  // =========== AGREGADO PARA DASHBOARD PANEL DE COMISIONES ===========
  getFees() {
    // Devuelve las comisiones de cada exchange habilitado
    const fees = {}
    for (const [exName, exObj] of Object.entries(this.config.EXCHANGES)) {
      if (exObj.enabled && exObj.fees) {
        fees[exName] = exObj.fees
      }
    }
    return fees
  }
  // =========== FIN AGREGADO ===========
}

module.exports = ExchangeManager

----------------------------------------------------------------------------------------------------------------

// ========== MÓDULO DE GESTIÓN DE EXCHANGES ==========
const axios = require("axios")
const crypto = require("crypto")
const EventEmitter = require('events')
const config = require('../strategies/config');

class ExchangeManager extends EventEmitter {
  constructor(config) {
    super();
    this.config = config;
    this.exchanges = {
      BINANCE: {
        name: "Binance",
        baseURL: config.EXCHANGES.BINANCE.testnet || config.EXCHANGES.BINANCE.baseURL,
        apiKey: config.EXCHANGES.BINANCE.apiKey,
        apiSecret: config.EXCHANGES.BINANCE.apiSecret,
      },
      KUCOIN: {
        name: "KuCoin",
        baseURL: config.EXCHANGES.KUCOIN.testnet || config.EXCHANGES.KUCOIN.baseURL,
        apiKey: config.EXCHANGES.KUCOIN.apiKey,
        apiSecret: config.EXCHANGES.KUCOIN.apiSecret,
        passphrase: config.EXCHANGES.KUCOIN.passphrase,
      },
    }

    console.log(`🔄 Exchange Manager inicializado: ${Object.keys(this.exchanges).join(", ")}`)
    console.log(`🧪 Modo testnet: ${config.TRADING_MODE === 'simulation' ? "Activado" : "Desactivado"}`)
  }

  // Obtener precios de todos los pares en todos los exchanges
  async getAllPrices() {
    const allPrices = {}

    for (const pair of config.TRADING_PAIRS) {
      allPrices[pair.symbol] = {}

      for (const exchangeName of Object.keys(this.exchanges)) {
        try {
          const price = await this.getPrice(exchangeName, pair.symbol)
          allPrices[pair.symbol][exchangeName] = price
        } catch (error) {
          console.error(`Error obteniendo precio de ${pair.symbol} en ${exchangeName}:`, error.message)
        }
      }
    }

    return allPrices
  }

  // Obtener precio de un par en un exchange específico
  async getPrice(exchangeName, symbol) {
    if (exchangeName === "BINANCE") {
      return this.getBinancePrice(symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinPrice(symbol)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener precio en Binance
  async getBinancePrice(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/ticker/price`, {
        params: { symbol: formattedSymbol },
      })

      return Number.parseFloat(response.data.price)
    } catch (error) {
      throw new Error(`Error en Binance: ${error.message}`)
    }
  }

  // Obtener precio en KuCoin
  async getKucoinPrice(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      // Usar endpoint público sin autenticación para evitar problemas SSL
      const response = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1`, {
        params: { symbol: formattedSymbol },
        timeout: 10000,
        headers: {
          "User-Agent": "CEX-Arbitrage-Bot/1.0",
        },
      })

      // KuCoin devuelve precio en data.data.price
      return Number.parseFloat(response.data.data.price)
    } catch (error) {
      // Si falla KuCoin, usar precio simulado
      console.warn(`⚠️ Usando precio simulado para ${symbol} en KuCoin`)
      return this.getSimulatedPrice(symbol)
    }
  }

  // Calcular spread entre dos precios
  calculateSpread(price1, price2) {
    return Math.abs((price1 - price2) / Math.min(price1, price2)) * 100
  }

  // Obtener balances en un exchange
  async getBalances(exchangeName) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver balances iniciales
      return this.getSimulatedBalances(exchangeName)
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceBalances()
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinBalances()
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Balances simulados para modo DRY_RUN
  getSimulatedBalances(exchangeName) {
    const initialBalances = config.INITIAL_BALANCES[exchangeName]
    const balances = {}

    for (const [asset, amount] of Object.entries(initialBalances)) {
      balances[asset] = {
        free: amount,
        locked: 0,
        total: amount,
      }
    }

    return balances
  }

  // Obtener balances en Binance
  async getBinanceBalances() {
    try {
      const timestamp = Date.now()
      const queryString = `timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/account`, {
        params: {
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      const balances = {}
      response.data.balances.forEach((balance) => {
        const free = Number.parseFloat(balance.free)
        const locked = Number.parseFloat(balance.locked)
        const total = free + locked

        if (total > 0) {
          balances[balance.asset] = {
            free,
            locked,
            total,
          }
        }
      })

      return balances
    } catch (error) {
      throw new Error(`Error obteniendo balances de Binance: ${error.message}`)
    }
  }

  // Obtener balances en KuCoin
  async getKucoinBalances() {
    try {
      // Primero necesitamos obtener un token de KuCoin
      const timestamp = Date.now()
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + "/api/v1/accounts")
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}/api/v1/accounts`, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      const balances = {}
      response.data.data.forEach((balance) => {
        const free = Number.parseFloat(balance.available)
        const locked = Number.parseFloat(balance.holds)
        const total = free + locked

        if (total > 0) {
          balances[balance.currency] = {
            free,
            locked,
            total,
          }
        }
      })

      return balances
    } catch (error) {
      throw new Error(`Error obteniendo balances de KuCoin: ${error.message}`)
    }
  }

  // Colocar orden en un exchange
  async placeOrder(exchangeName, symbol, side, amount) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, simular la orden
      return this.simulateOrder(exchangeName, symbol, side, amount)
    }

    if (exchangeName === "BINANCE") {
      return this.placeBinanceOrder(symbol, side, amount)
    } else if (exchangeName === "KUCOIN") {
      return this.placeKucoinOrder(symbol, side, amount)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Simular orden para modo DRY_RUN
  async simulateOrder(exchangeName, symbol, side, amount) {
    try {
      const price = await this.getPrice(exchangeName, symbol)
      const executedQty = side === "buy" ? amount / price : amount
      const orderId = `sim-${Date.now()}-${Math.floor(Math.random() * 1000)}`

      console.log(
        `🧪 SIMULACIÓN: Orden ${side} de ${amount} ${symbol} en ${exchangeName} a precio ${price} (ID: ${orderId})`,
      )

      return {
        orderId,
        status: "FILLED",
        executedQty,
        price,
      }
    } catch (error) {
      throw new Error(`Error simulando orden: ${error.message}`)
    }
  }

  // Colocar orden en Binance
  async placeBinanceOrder(symbol, side, amount) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const timestamp = Date.now()
      const params = {
        symbol: formattedSymbol,
        side: side.toUpperCase(),
        type: "MARKET",
        quantity: amount,
        timestamp,
      }

      const queryString = Object.entries(params)
        .map(([key, value]) => `${key}=${value}`)
        .join("&")

      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.post(`${this.exchanges.BINANCE.baseURL}/api/v3/order`, null, {
        params: {
          ...params,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        orderId: response.data.orderId,
        status: response.data.status,
        executedQty: Number.parseFloat(response.data.executedQty),
        price: Number.parseFloat(response.data.price),
      }
    } catch (error) {
      throw new Error(`Error colocando orden en Binance: ${error.message}`)
    }
  }

  // Colocar orden en KuCoin
  async placeKucoinOrder(symbol, side, amount) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      const timestamp = Date.now()
      const data = {
        clientOid: `bot-${timestamp}`,
        side: side.toUpperCase(),
        symbol: formattedSymbol,
        type: "market",
        size: amount,
      }

      const dataString = JSON.stringify(data)
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "POST" + "/api/v1/orders" + dataString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.post(`${this.exchanges.KUCOIN.baseURL}/api/v1/orders`, data, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
          "Content-Type": "application/json",
        },
      })

      // KuCoin devuelve solo el ID de la orden, necesitamos consultar el estado
      const orderId = response.data.data.orderId
      const orderDetails = await this.getKucoinOrderDetails(orderId)

      return {
        orderId,
        status: orderDetails.status,
        executedQty: Number.parseFloat(orderDetails.executedQty),
        price: Number.parseFloat(orderDetails.price),
      }
    } catch (error) {
      throw new Error(`Error colocando orden en KuCoin: ${error.message}`)
    }
  }

  // Obtener detalles de una orden en KuCoin
  async getKucoinOrderDetails(orderId) {
    try {
      const timestamp = Date.now()
      const endpoint = `/api/v1/orders/${orderId}`
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + endpoint)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}${endpoint}`, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      const order = response.data.data
      return {
        status: order.isActive ? "ACTIVE" : "FILLED",
        executedQty: order.dealSize,
        price: order.dealFunds / order.dealSize, // Precio promedio
      }
    } catch (error) {
      throw new Error(`Error obteniendo detalles de orden en KuCoin: ${error.message}`)
    }
  }

  // Obtener estado de una orden
  async getOrderStatus(exchangeName, orderId, symbol) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver estado completado
      return {
        status: "FILLED",
        executedQty: 1,
        price: 1,
      }
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceOrderStatus(orderId, symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinOrderDetails(orderId)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener estado de una orden en Binance
  async getBinanceOrderStatus(orderId, symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const timestamp = Date.now()
      const queryString = `symbol=${formattedSymbol}&orderId=${orderId}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/order`, {
        params: {
          symbol: formattedSymbol,
          orderId,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        status: response.data.status,
        executedQty: Number.parseFloat(response.data.executedQty),
        price: Number.parseFloat(response.data.price),
      }
    } catch (error) {
      throw new Error(`Error obteniendo estado de orden en Binance: ${error.message}`)
    }
  }

  // Obtener dirección de depósito
  async getDepositAddress(exchangeName, asset, network) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver dirección simulada
      return {
        address: `sim-${exchangeName.toLowerCase()}-${asset.toLowerCase()}-address`,
        tag: null,
      }
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceDepositAddress(asset, network)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinDepositAddress(asset, network)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener dirección de depósito en Binance
  async getBinanceDepositAddress(asset, network) {
    try {
      const timestamp = Date.now()
      const queryString = `coin=${asset}&network=${network}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/sapi/v1/capital/deposit/address`, {
        params: {
          coin: asset,
          network,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        address: response.data.address,
        tag: response.data.tag,
      }
    } catch (error) {
      throw new Error(`Error obteniendo dirección de depósito en Binance: ${error.message}`)
    }
  }

  // Obtener dirección de depósito en KuCoin
  async getKucoinDepositAddress(asset, network) {
    try {
      const timestamp = Date.now()
      const endpoint = `/api/v1/deposit-addresses`
      const queryString = `currency=${asset}&network=${network}`
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + endpoint + "?" + queryString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}${endpoint}`, {
        params: {
          currency: asset,
          network,
        },
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      return {
        address: response.data.data.address,
        tag: response.data.data.memo,
      }
    } catch (error) {
      throw new Error(`Error obteniendo dirección de depósito en KuCoin: ${error.message}`)
    }
  }

  // Realizar retiro
  async withdraw(exchangeName, asset, amount, address, network) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, simular retiro
      const withdrawId = `sim-withdraw-${Date.now()}`
      console.log(`🧪 SIMULACIÓN: Retiro de ${amount} ${asset} desde ${exchangeName} a ${address} (ID: ${withdrawId})`)
      return { withdrawId }
    }

    if (exchangeName === "BINANCE") {
      return this.binanceWithdraw(asset, amount, address, network)
    } else if (exchangeName === "KUCOIN") {
      return this.kucoinWithdraw(asset, amount, address, network)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Realizar retiro en Binance
  async binanceWithdraw(asset, amount, address, network) {
    try {
      const timestamp = Date.now()
      const queryString = `coin=${asset}&address=${address}&amount=${amount}&network=${network}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.post(`${this.exchanges.BINANCE.baseURL}/sapi/v1/capital/withdraw/apply`, null, {
        params: {
          coin: asset,
          address,
          amount,
          network,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        withdrawId: response.data.id,
      }
    } catch (error) {
      throw new Error(`Error realizando retiro en Binance: ${error.message}`)
    }
  }

  // Realizar retiro en KuCoin
  async kucoinWithdraw(asset, amount, address, network) {
    try {
      const timestamp = Date.now()
      const data = {
        currency: asset,
        address,
        amount: amount.toString(),
        network,
      }

      const dataString = JSON.stringify(data)
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "POST" + "/api/v1/withdrawals" + dataString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.post(`${this.exchanges.KUCOIN.baseURL}/api/v1/withdrawals`, data, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
          "Content-Type": "application/json",
        },
      })

      return {
        withdrawId: response.data.data.withdrawalId,
      }
    } catch (error) {
      throw new Error(`Error realizando retiro en KuCoin: ${error.message}`)
    }
  }

  // Obtener order book
  async getOrderBook(exchangeName, symbol) {
    if (exchangeName === "BINANCE") {
      return this.getBinanceOrderBook(symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinOrderBook(symbol)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener order book en Binance
  async getBinanceOrderBook(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/depth`, {
        params: {
          symbol: formattedSymbol,
          limit: 20,
        },
      })

      return {
        bids: response.data.bids.map((bid) => [Number.parseFloat(bid[0]), Number.parseFloat(bid[1])]),
        asks: response.data.asks.map((ask) => [Number.parseFloat(ask[0]), Number.parseFloat(ask[1])]),
      }
    } catch (error) {
      throw new Error(`Error obteniendo order book en Binance: ${error.message}`)
    }
  }

  // Obtener order book en KuCoin
  async getKucoinOrderBook(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}/api/v1/market/orderbook/level2_20`, {
        params: {
          symbol: formattedSymbol,
        },
      })

      return {
        bids: response.data.data.bids.map((bid) => [Number.parseFloat(bid[0]), Number.parseFloat(bid[1])]),
        asks: response.data.data.asks.map((ask) => [Number.parseFloat(ask[0]), Number.parseFloat(ask[1])]),
      }
    } catch (error) {
      throw new Error(`Error obteniendo order book en KuCoin: ${error.message}`)
    }
  }

  // Método auxiliar para generar precios simulados
  getSimulatedPrice(symbol) {
    // Precios base simulados
    const basePrices = {
      "POL/USDT": 0.45,
      "USDC/USDT": 1.0001,
    }

    const basePrice = basePrices[symbol] || 1.0
    // Agregar variación aleatoria del ±0.1%
    const variation = (Math.random() - 0.5) * 0.002
    return basePrice * (1 + variation)
  }
}

module.exports = ExchangeManager
---------------------------------------------------------------------------------------------------------------

const ccxt = require("ccxt")

/**
 * Fetcher de precios reales para Binance y Bybit
 */
class RealPriceFetcher {
  constructor(config) {
    this.config = config
    this.exchanges = {}
    this.lastPrices = {}
    this.isInitialized = false

    this.logger = console
  }

  /**
   * Inicializa las conexiones a los exchanges
   */
  async initialize() {
    try {
      this.logger.info("🔄 Inicializando conexiones a exchanges...")

      // Configurar Binance
if (this.config.EXCHANGES.BINANCE.enabled) {
   this.exchanges.binance = new ccxt.binance({
    apiKey: this.config.EXCHANGES.BINANCE.apiKey,
    secret: this.config.EXCHANGES.BINANCE.apiSecret,
    sandbox: this.config.EXCHANGES.BINANCE.sandbox,
    enableRateLimit: true,
    rateLimit: this.config.EXCHANGES.BINANCE.rateLimit,
  });

  await this.exchanges.binance.loadMarkets();
  this.logger.info("✅ Binance conectado");
}

      // Configurar Bybit (NUEVO - reemplaza Kucoin)
      if (this.config.EXCHANGES.BYBIT.enabled) {
        this.exchanges.bybit = new ccxt.bybit({
          apiKey: this.config.EXCHANGES.BYBIT.apiKey,
          secret: this.config.EXCHANGES.BYBIT.apiSecret,
          sandbox: this.config.EXCHANGES.BYBIT.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.BYBIT.rateLimit,
        })

        await this.exchanges.bybit.loadMarkets()
        this.logger.info("✅ Bybit conectado")
      }

      this.isInitialized = true
      this.logger.info("🎉 RealPriceFetcher inicializado correctamente")
    } catch (error) {
      this.logger.error("❌ Error inicializando RealPriceFetcher:", error.message)
      throw error
    }
  }

  /**
   * Obtiene precios reales de todos los exchanges para un par específico
   */
  async fetchPricesForPair(pair) {
    if (!this.isInitialized) {
      throw new Error("RealPriceFetcher no está inicializado")
    }

    const prices = {}

    for (const [exchangeName, exchange] of Object.entries(this.exchanges)) {
      try {
        // Verificar si el par está disponible
        if (!exchange.markets[pair]) {
          this.logger.warn(`⚠️  Par ${pair} no disponible en ${exchangeName}`)
          continue
        }

        // Obtener ticker
        const ticker = await exchange.fetchTicker(pair)

        prices[exchangeName] = {
          price: ticker.last,
          bid: ticker.bid,
          ask: ticker.ask,
          volume: ticker.baseVolume,
          timestamp: ticker.timestamp,
          lastUpdate: Date.now(),
        }

        this.logger.debug(`📊 ${exchangeName}: ${pair} = $${ticker.last?.toFixed(4)}`)
      } catch (error) {
        this.logger.error(`❌ Error obteniendo precio de ${pair} en ${exchangeName}:`, error.message)
      }
    }

    // Guardar en caché
    this.lastPrices[pair] = prices

    return prices
  }

  /**
   * Obtiene precios de todos los pares configurados
   */
  async fetchAllPrices() {
    const allPrices = {}

    for (const pair of this.config.TRADING_PAIRS) {
      try {
        allPrices[pair] = await this.fetchPricesForPair(pair)

        // Pequeña pausa para evitar rate limits
        await new Promise((resolve) => setTimeout(resolve, 100))
      } catch (error) {
        this.logger.error(`❌ Error obteniendo precios para ${pair}:`, error.message)
      }
    }

    return allPrices
  }

  /**
   * Calcula oportunidades de arbitraje
   */
  calculateArbitrageOpportunities(prices) {
    const opportunities = {}

    for (const [pair, exchangePrices] of Object.entries(prices)) {
      const exchanges = Object.keys(exchangePrices)

      if (exchanges.length < 2) {
        continue
      }

      let bestBuy = null
      let bestSell = null
      let lowestAsk = Number.POSITIVE_INFINITY
      let highestBid = 0

      // Encontrar mejor compra (menor ask) y mejor venta (mayor bid)
      for (const [exchangeName, priceData] of Object.entries(exchangePrices)) {
        if (priceData.ask && priceData.ask < lowestAsk) {
          lowestAsk = priceData.ask
          bestBuy = { exchange: exchangeName, price: priceData.ask }
        }

        if (priceData.bid && priceData.bid > highestBid) {
          highestBid = priceData.bid
          bestSell = { exchange: exchangeName, price: priceData.bid }
        }
      }

      if (bestBuy && bestSell && bestBuy.exchange !== bestSell.exchange) {
        const profitPercentage = ((bestSell.price - bestBuy.price) / bestBuy.price) * 100

        opportunities[pair] = {
          exchanges: exchangePrices,
          bestBuy,
          bestSell,
          profitPercentage,
          isOpportunity: profitPercentage >= this.config.STRATEGIES.BASIC.minProfitPercentage,
          minProfitThreshold: this.config.STRATEGIES.BASIC.minProfitPercentage,
        }
      }
    }

    return opportunities
  }

  /**
   * Obtiene los últimos precios del caché
   */
  getLastPrices() {
    return this.lastPrices
  }

  /**
   * Verifica el estado de las conexiones
   */
  async checkConnections() {
    const status = {}

    for (const [exchangeName, exchange] of Object.entries(this.exchanges)) {
      try {
        const exchangeStatus = await exchange.fetchStatus()
        status[exchangeName] = {
          connected: true,
          status: exchangeStatus.status || "active",
          updated: exchangeStatus.updated,
        }
      } catch (error) {
        status[exchangeName] = {
          connected: false,
          error: error.message,
        }
      }
    }

    return status
  }
}

module.exports = RealPriceFetcher

--------------------------------------------------------------------------------------------------------------

MOBILE

// Versión simplificada sin dependencias
class MobileAPI {
  constructor(config) {
    this.enabled = false;
    console.log('📱 Mobile API disabled (firebase-admin no instalado)');
  }
  
  start() {
    // No hacer nada
    return;
  }
  
  stop() {
    // No hacer nada
    return;
  }
  
  sendNotification() {
    // No hacer nada
    return;
  }
}

module.exports = MobileAPI;

-----------------------------------------------------------------------------------------------------------

const express = require('express');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const admin = require('firebase-admin');

/**
 * API Móvil para el Bot de Arbitraje
 * Proporciona endpoints para la aplicación móvil
 */
class MobileAPI {
    constructor(config) {
        this.config = config;
        this.enabled = config.MOBILE_API.ENABLED;
        this.port = config.MOBILE_API.PORT;
        this.jwtSecret = config.MOBILE_API.JWT_SECRET;
        this.jwtExpiry = config.MOBILE_API.JWT_EXPIRY;
        this.rateLimitConfig = config.MOBILE_API.RATE_LIMIT;
        this.corsConfig = config.MOBILE_API.CORS;
        this.endpoints = config.MOBILE_API.ENDPOINTS;
        this.pushNotifications = config.MOBILE_API.PUSH_NOTIFICATIONS;
        
        this.app = express();
        this.server = null;
        this.bot = null;
        this.authenticatedUsers = new Map();
        
        this.logger = console;
    }
    
    /**
     * Inicializa la API móvil
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('Mobile API deshabilitada');
            return;
        }
        
        this.logger.info('Inicializando Mobile API...');
        
        try {
            // Configurar middleware
            this.setupMiddleware();
            
            // Configurar rutas
            this.setupRoutes();
            
            // Inicializar Firebase para notificaciones push
            if (this.pushNotifications.enabled) {
                await this.initializeFirebase();
            }
            
            // Iniciar servidor
            await this.startServer();
            
            this.logger.info(`Mobile API inicializada en puerto ${this.port}`);
        } catch (error) {
            this.logger.error('Error inicializando Mobile API:', error);
            throw error;
        }
    }
    
    /**
     * Configura el middleware de Express
     */
    setupMiddleware() {
        // CORS
        this.app.use(cors(this.corsConfig));
        
        // Rate limiting
        const limiter = rateLimit(this.rateLimitConfig);
        this.app.use(limiter);
        
        // Body parser
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true }));
        
        // Logging middleware
        this.app.use((req, res, next) => {
            this.logger.info(`${req.method} ${req.path} - ${req.ip}`);
            next();
        });
        
        // Error handling middleware
        this.app.use((error, req, res, next) => {
            this.logger.error('API Error:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        });
    }
    
    /**
     * Configura las rutas de la API
     */
    setupRoutes() {
        // Ruta de autenticación
        this.app.post('/api/mobile/auth/login', this.handleLogin.bind(this));
        this.app.post('/api/mobile/auth/logout', this.authenticateToken.bind(this), this.handleLogout.bind(this));
        this.app.post('/api/mobile/auth/refresh', this.handleRefreshToken.bind(this));
        
        // Rutas protegidas
        this.app.use('/api/mobile/*', this.authenticateToken.bind(this));
        
        // Estado del bot
        this.app.get(this.endpoints.STATUS, this.handleGetStatus.bind(this));
        
        // Operaciones
        this.app.get(this.endpoints.TRADES, this.handleGetTrades.bind(this));
        this.app.get('/api/mobile/trades/:id', this.handleGetTradeDetails.bind(this));
        
        // Portfolio
        this.app.get(this.endpoints.PORTFOLIO, this.handleGetPortfolio.bind(this));
        this.app.get('/api/mobile/portfolio/history', this.handleGetPortfolioHistory.bind(this));
        
        // Alertas
        this.app.get(this.endpoints.ALERTS, this.handleGetAlerts.bind(this));
        this.app.post('/api/mobile/alerts/mark-read', this.handleMarkAlertsRead.bind(this));
        
        // Configuración
        this.app.get(this.endpoints.SETTINGS, this.handleGetSettings.bind(this));
        this.app.put(this.endpoints.SETTINGS, this.handleUpdateSettings.bind(this));
        
        // Control del bot
        this.app.post('/api/mobile/bot/start', this.handleStartBot.bind(this));
        this.app.post('/api/mobile/bot/stop', this.handleStopBot.bind(this));
        this.app.post('/api/mobile/bot/strategy', this.handleChangeStrategy.bind(this));
        
        // Estadísticas
        this.app.get('/api/mobile/stats/summary', this.handleGetStatsSummary.bind(this));
        this.app.get('/api/mobile/stats/performance', this.handleGetPerformanceStats.bind(this));
        
        // Notificaciones push
        this.app.post('/api/mobile/notifications/register', this.handleRegisterDevice.bind(this));
        this.app.post('/api/mobile/notifications/unregister', this.handleUnregisterDevice.bind(this));
        
        // Health check
        this.app.get('/api/mobile/health', (req, res) => {
            res.json({ status: 'ok', timestamp: new Date().toISOString() });
        });
    }
    
    /**
     * Inicializa Firebase para notificaciones push
     */
    async initializeFirebase() {
        try {
            if (!this.pushNotifications.fcmServerKey) {
                throw new Error('FCM Server Key no configurado');
            }
            
            // En una implementación real, aquí inicializaríamos Firebase Admin SDK
            this.logger.info('Firebase inicializado para notificaciones push');
        } catch (error) {
            this.logger.error('Error inicializando Firebase:', error);
            this.pushNotifications.enabled = false;
        }
    }
    
    /**
     * Inicia el servidor
     */
    async startServer() {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, (error) => {
                if (error) {
                    reject(error);
                } else {
                    resolve();
                }
            });
        });
    }
    
    /**
     * Middleware de autenticación
     */
    authenticateToken(req, res, next) {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];
        
        if (!token) {
            return res.status(401).json({
                success: false,
                error: 'Token de acceso requerido'
            });
        }
        
        jwt.verify(token, this.jwtSecret, (error, user) => {
            if (error) {
                return res.status(403).json({
                    success: false,
                    error: 'Token inválido'
                });
            }
            
            req.user = user;
            next();
        });
    }
    
    /**
     * Maneja el login
     */
    async handleLogin(req, res) {
        try {
            const { username, password } = req.body;
            
            // En una implementación real, aquí verificaríamos las credenciales
            // Para esta implementación, usaremos credenciales hardcodeadas
            if (username === 'admin' && password === 'admin123') {
                const user = {
                    id: 1,
                    username: 'admin',
                    role: 'admin'
                };
                
                const token = jwt.sign(user, this.jwtSecret, { expiresIn: this.jwtExpiry });
                const refreshToken = jwt.sign(user, this.jwtSecret + '_refresh', { expiresIn: '7d' });
                
                // Guardar usuario autenticado
                this.authenticatedUsers.set(user.id, {
                    ...user,
                    token,
                    refreshToken,
                    loginTime: new Date()
                });
                
                res.json({
                    success: true,
                    data: {
                        user,
                        token,
                        refreshToken
                    }
                });
            } else {
                res.status(401).json({
                    success: false,
                    error: 'Credenciales inválidas'
                });
            }
        } catch (error) {
            this.logger.error('Error en login:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Maneja el logout
     */
    async handleLogout(req, res) {
        try {
            const userId = req.user.id;
            
            // Remover usuario autenticado
            this.authenticatedUsers.delete(userId);
            
            res.json({
                success: true,
                message: 'Logout exitoso'
            });
        } catch (error) {
            this.logger.error('Error en logout:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Maneja la renovación de token
     */
    async handleRefreshToken(req, res) {
        try {
            const { refreshToken } = req.body;
            
            if (!refreshToken) {
                return res.status(401).json({
                    success: false,
                    error: 'Refresh token requerido'
                });
            }
            
            jwt.verify(refreshToken, this.jwtSecret + '_refresh', (error, user) => {
                if (error) {
                    return res.status(403).json({
                        success: false,
                        error: 'Refresh token inválido'
                    });
                }
                
                const newToken = jwt.sign(
                    { id: user.id, username: user.username, role: user.role },
                    this.jwtSecret,
                    { expiresIn: this.jwtExpiry }
                );
                
                res.json({
                    success: true,
                    data: { token: newToken }
                });
            });
        } catch (error) {
            this.logger.error('Error renovando token:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene el estado del bot
     */
    async handleGetStatus(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const status = this.bot.getStatus();
            const riskAnalysis = this.bot.getRiskAnalysis();
            
            res.json({
                success: true,
                data: {
                    ...status,
                    riskAnalysis
                }
            });
        } catch (error) {
            this.logger.error('Error obteniendo estado:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene las operaciones
     */
    async handleGetTrades(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { page = 1, limit = 20, type, status } = req.query;
            const offset = (page - 1) * limit;
            
            let trades = this.bot.getTradeHistory();
            
            // Filtrar por tipo si se especifica
            if (type) {
                trades = trades.filter(trade => trade.type === type);
            }
            
            // Filtrar por estado si se especifica
            if (status) {
                trades = trades.filter(trade => 
                    status === 'success' ? trade.success : !trade.success
                );
            }
            
            // Paginar
            const total = trades.length;
            const paginatedTrades = trades.slice(offset, offset + parseInt(limit));
            
            res.json({
                success: true,
                data: {
                    trades: paginatedTrades,
                    pagination: {
                        page: parseInt(page),
                        limit: parseInt(limit),
                        total,
                        pages: Math.ceil(total / limit)
                    }
                }
            });
        } catch (error) {
            this.logger.error('Error obteniendo operaciones:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene detalles de una operación específica
     */
    async handleGetTradeDetails(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { id } = req.params;
            const trades = this.bot.getTradeHistory();
            const trade = trades.find(t => t.id === id);
            
            if (!trade) {
                return res.status(404).json({
                    success: false,
                    error: 'Operación no encontrada'
                });
            }
            
            res.json({
                success: true,
                data: trade
            });
        } catch (error) {
            this.logger.error('Error obteniendo detalles de operación:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene información del portfolio
     */
    async handleGetPortfolio(req, res) {
        try {
            // En una implementación real, obtendríamos datos del portfolio manager
            const portfolioData = {
                totalValue: 10500.75,
                totalProfit: 500.75,
                totalProfitPercentage: 5.01,
                balances: {
                    'Binance': 2625.19,
                    'Coinbase': 2631.25,
                    'Kraken': 2622.15,
                    'Kucoin': 2622.16
                },
                allocation: {
                    'Binance': 25.0,
                    'Coinbase': 25.1,
                    'Kraken': 24.9,
                    'Kucoin': 25.0
                },
                lastUpdate: new Date().toISOString()
            };
            
            res.json({
                success: true,
                data: portfolioData
            });
        } catch (error) {
            this.logger.error('Error obteniendo portfolio:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene historial del portfolio
     */
    async handleGetPortfolioHistory(req, res) {
        try {
            const { period = '7d' } = req.query;
            
            // Simular datos históricos
            const history = [];
            const now = new Date();
            let days;
            
            switch (period) {
                case '1d':
                    days = 1;
                    break;
                case '7d':
                    days = 7;
                    break;
                case '30d':
                    days = 30;
                    break;
                default:
                    days = 7;
            }
            
            for (let i = days; i >= 0; i--) {
                const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);
                history.push({
                    timestamp: date.toISOString(),
                    value: 10000 + Math.random() * 1000,
                    profit: Math.random() * 100 - 50
                });
            }
            
            res.json({
                success: true,
                data: history
            });
        } catch (error) {
            this.logger.error('Error obteniendo historial de portfolio:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene alertas
     */
    async handleGetAlerts(req, res) {
        try {
            // En una implementación real, obtendríamos alertas del alert manager
            const alerts = [
                {
                    id: 'alert_1',
                    type: 'trade_executed',
                    message: 'Arbitraje ejecutado: BTC/USDT - Ganancia: 0.5%',
                    timestamp: new Date().toISOString(),
                    priority: 'medium',
                    read: false
                },
                {
                    id: 'alert_2',
                    type: 'risk_warning',
                    message: 'Volatilidad alta detectada en el mercado',
                    timestamp: new Date(Date.now() - 3600000).toISOString(),
                    priority: 'high',
                    read: true
                }
            ];
            
            res.json({
                success: true,
                data: alerts
            });
        } catch (error) {
            this.logger.error('Error obteniendo alertas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Marca alertas como leídas
     */
    async handleMarkAlertsRead(req, res) {
        try {
            const { alertIds } = req.body;
            
            // En una implementación real, marcaríamos las alertas como leídas
            this.logger.info(`Marcando alertas como leídas: ${alertIds.join(', ')}`);
            
            res.json({
                success: true,
                message: 'Alertas marcadas como leídas'
            });
        } catch (error) {
            this.logger.error('Error marcando alertas como leídas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene configuración
     */
    async handleGetSettings(req, res) {
        try {
            const settings = {
                riskLevel: 'medium',
                maxExposure: 20,
                strategies: ['basic', 'triangular'],
                notifications: {
                    trades: true,
                    alerts: true,
                    dailySummary: false
                },
                autoRebalance: true
            };
            
            res.json({
                success: true,
                data: settings
            });
        } catch (error) {
            this.logger.error('Error obteniendo configuración:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Actualiza configuración
     */
    async handleUpdateSettings(req, res) {
        try {
            const settings = req.body;
            
            // En una implementación real, actualizaríamos la configuración del bot
            this.logger.info('Actualizando configuración:', settings);
            
            res.json({
                success: true,
                message: 'Configuración actualizada correctamente'
            });
        } catch (error) {
            this.logger.error('Error actualizando configuración:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Inicia el bot
     */
    async handleStartBot(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { mode = 'simulation' } = req.body;
            
            await this.bot.start(mode);
            
            // Enviar notificación push
            if (this.pushNotifications.enabled) {
                await this.sendPushNotification(req.user.id, {
                    title: 'Bot Iniciado',
                    body: `Bot iniciado en modo ${mode}`,
                    data: { type: 'bot_started', mode }
                });
            }
            
            res.json({
                success: true,
                message: 'Bot iniciado correctamente'
            });
        } catch (error) {
            this.logger.error('Error iniciando bot:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Detiene el bot
     */
    async handleStopBot(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            await this.bot.stop();
            
            // Enviar notificación push
            if (this.pushNotifications.enabled) {
                await this.sendPushNotification(req.user.id, {
                    title: 'Bot Detenido',
                    body: 'Bot detenido correctamente',
                    data: { type: 'bot_stopped' }
                });
            }
            
            res.json({
                success: true,
                message: 'Bot detenido correctamente'
            });
        } catch (error) {
            this.logger.error('Error deteniendo bot:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Cambia la estrategia del bot
     */
    async handleChangeStrategy(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { strategy } = req.body;
            
            this.bot.changeStrategy(strategy);
            
            res.json({
                success: true,
                message: `Estrategia cambiada a ${strategy}`
            });
        } catch (error) {
            this.logger.error('Error cambiando estrategia:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Obtiene resumen de estadísticas
     */
    async handleGetStatsSummary(req, res) {
        try {
            const stats = {
                totalTrades: 156,
                successfulTrades: 142,
                failedTrades: 14,
                winRate: 91.03,
                totalProfit: 1250.75,
                averageProfit: 8.79,
                bestTrade: 45.20,
                worstTrade: -12.30,
                sharpeRatio: 1.85,
                maxDrawdown: 3.2
            };
            
            res.json({
                success: true,
                data: stats
            });
        } catch (error) {
            this.logger.error('Error obteniendo estadísticas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene estadísticas de rendimiento
     */
    async handleGetPerformanceStats(req, res) {
        try {
            const { period = '30d' } = req.query;
            
            // Simular datos de rendimiento
            const performance = {
                period,
                totalReturn: 12.5,
                annualizedReturn: 156.2,
                volatility: 8.3,
                sharpeRatio: 1.85,
                maxDrawdown: 3.2,
                calmarRatio: 48.8,
                winRate: 91.03,
                profitFactor: 6.45,
                averageTrade: 8.79,
                tradesPerDay: 5.2
            };
            
            res.json({
                success: true,
                data: performance
            });
        } catch (error) {
            this.logger.error('Error obteniendo estadísticas de rendimiento:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Registra dispositivo para notificaciones push
     */
    async handleRegisterDevice(req, res) {
        try {
            const { deviceToken, platform } = req.body;
            const userId = req.user.id;
            
            // En una implementación real, guardaríamos el token del dispositivo
            this.logger.info(`Registrando dispositivo para usuario ${userId}: ${platform}`);
            
            res.json({
                success: true,
                message: 'Dispositivo registrado para notificaciones'
            });
        } catch (error) {
            this.logger.error('Error registrando dispositivo:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Desregistra dispositivo para notificaciones push
     */
    async handleUnregisterDevice(req, res) {
        try {
            const { deviceToken } = req.body;
            const userId = req.user.id;
            
            // En una implementación real, removeríamos el token del dispositivo
            this.logger.info(`Desregistrando dispositivo para usuario ${userId}`);
            
            res.json({
                success: true,
                message: 'Dispositivo desregistrado de notificaciones'
            });
        } catch (error) {
            this.logger.error('Error desregistrando dispositivo:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Envía notificación push a un usuario
     * @param {number} userId - ID del usuario
     * @param {Object} notification - Datos de la notificación
     */
    async sendPushNotification(userId, notification) {
        try {
            if (!this.pushNotifications.enabled) {
                return;
            }
            
            // En una implementación real, enviaríamos la notificación usando Firebase
            this.logger.info(`Enviando notificación push a usuario ${userId}:`, notification);
        } catch (error) {
            this.logger.error('Error enviando notificación push:', error);
        }
    }
    
    /**
     * Establece la referencia al bot
     * @param {Object} bot - Instancia del bot
     */
    setBot(bot) {
        this.bot = bot;
    }
    
    /**
     * Detiene la API móvil
     */
    async stop() {
        if (this.server) {
            return new Promise((resolve) => {
                this.server.close(() => {
                    this.logger.info('Mobile API detenida');
                    resolve();
                });
            });
        }
    }
}

module.exports = MobileAPI;

----------------------------------------------------------------------------------------------------------------

PORTAFOLIO

const EventEmitter = require('events');

/**
 * Gestor de Portfolio
 * Maneja la distribución y rebalanceo de fondos entre exchanges
 */
class PortfolioManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.initialBalance = config.PORTFOLIO.INITIAL_BALANCE;
        this.rebalanceFrequency = config.PORTFOLIO.REBALANCE_FREQUENCY;
        this.targetAllocation = config.PORTFOLIO.TARGET_ALLOCATION;
        this.minBalancePerExchange = config.PORTFOLIO.MIN_BALANCE_PER_EXCHANGE;
        this.reservePercentage = config.PORTFOLIO.RESERVE_PERCENTAGE;
        this.autoCompound = config.PORTFOLIO.AUTO_COMPOUND;
        this.compoundThreshold = config.PORTFOLIO.COMPOUND_THRESHOLD;
        
        this.currentBalances = {};
        this.balanceHistory = [];
        this.allocationHistory = [];
        this.rebalanceHistory = [];
        this.totalValue = 0;
        this.totalProfit = 0;
        this.totalProfitPercentage = 0;
        this.lastRebalance = null;
        this.rebalanceInterval = null;
        
        this.logger = console;

        // ======= AGREGADO DASHBOARD =======
        this._autoRebalanceEnabled = false; // Estado del auto rebalanceo
        // ======= FIN AGREGADO DASHBOARD =======
    }
    
    /**
     * Inicializa el gestor de portfolio
     * @param {Object} initialBalances - Balances iniciales por exchange
     */
    async initialize(initialBalances = {}) {
        this.logger.info('Inicializando Portfolio Manager...');
        
        try {
            // Establecer balances iniciales
            this.currentBalances = { ...initialBalances };
            
            // Si no hay balances iniciales, distribuir el balance inicial
            if (Object.keys(this.currentBalances).length === 0) {
                await this.distributeInitialBalance();
            }
            
            // Calcular valor total inicial
            this.calculateTotalValue();
            
            // Registrar estado inicial
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            // Programar rebalanceo automático
            if (this.rebalanceFrequency > 0) {
                this.scheduleAutoRebalance();
            }
            
            this.logger.info('Portfolio Manager inicializado correctamente');
            this.logger.info(`Valor total del portfolio: $${this.totalValue.toFixed(2)}`);
        } catch (error) {
            this.logger.error('Error inicializando Portfolio Manager:', error);
            throw error;
        }
    }
    
    /**
     * Distribuye el balance inicial según la asignación objetivo
     */
    async distributeInitialBalance() {
        const exchanges = Object.keys(this.targetAllocation);
        const balancePerExchange = this.initialBalance / exchanges.length;
        
        for (const exchange of exchanges) {
            const targetPercentage = this.targetAllocation[exchange];
            this.currentBalances[exchange] = this.initialBalance * targetPercentage;
        }
        
        this.logger.info('Balance inicial distribuido entre exchanges');
    }
    
    /**
     * Calcula el valor total del portfolio
     */
    calculateTotalValue() {
        this.totalValue = Object.values(this.currentBalances).reduce((sum, balance) => sum + balance, 0);
        this.totalProfit = this.totalValue - this.initialBalance;
        this.totalProfitPercentage = ((this.totalProfit / this.initialBalance) * 100);
    }
    
    /**
     * Registra un snapshot del balance actual
     */
    recordBalanceSnapshot() {
        this.balanceHistory.push({
            timestamp: new Date(),
            balances: { ...this.currentBalances },
            totalValue: this.totalValue,
            totalProfit: this.totalProfit,
            totalProfitPercentage: this.totalProfitPercentage
        });
        
        // Mantener solo los últimos 1000 registros
        if (this.balanceHistory.length > 1000) {
            this.balanceHistory.shift();
        }
    }
    
    /**
     * Registra un snapshot de la asignación actual
     */
    recordAllocationSnapshot() {
        const allocation = {};
        
        for (const exchange in this.currentBalances) {
            allocation[exchange] = (this.currentBalances[exchange] / this.totalValue) * 100;
        }
        
        this.allocationHistory.push({
            timestamp: new Date(),
            allocation,
            totalValue: this.totalValue
        });
        
        // Mantener solo los últimos 500 registros
        if (this.allocationHistory.length > 500) {
            this.allocationHistory.shift();
        }
    }
    
    /**
     * Programa el rebalanceo automático
     */
    scheduleAutoRebalance() {
        this._autoRebalanceEnabled = true; // AGREGADO DASHBOARD: marcar como habilitado
        this.rebalanceInterval = setInterval(async () => {
            try {
                await this.checkAndRebalance();
            } catch (error) {
                this.logger.error('Error en rebalanceo automático:', error);
            }
        }, this.rebalanceFrequency);
    }
    
    /**
     * Actualiza los balances del portfolio
     * @param {Object} newBalances - Nuevos balances por exchange
     */
    async updateBalances(newBalances) {
        // Actualizar balances
        this.currentBalances = { ...newBalances };
        
        // Recalcular valor total
        this.calculateTotalValue();
        
        // Registrar snapshot
        this.recordBalanceSnapshot();
        this.recordAllocationSnapshot();
        
        // Verificar si se necesita rebalanceo
        if (await this.shouldRebalance()) {
            this.emit('rebalanceNeeded', {
                balances: this.currentBalances,
                reason: 'Desviación de asignación objetivo'
            });
        }
        
        // Verificar si se debe reinvertir ganancias
        if (this.autoCompound && this.totalProfit >= this.compoundThreshold) {
            await this.compoundProfits();
        }
    }
    
    /**
     * Verifica si se necesita rebalanceo
     * @returns {boolean} - True si se necesita rebalanceo
     */
    async shouldRebalance() {
        const currentAllocation = this.getCurrentAllocation();
        const rebalanceThreshold = this.config.RISK_MANAGEMENT.REBALANCE_THRESHOLD || 0.15;
        
        for (const exchange in this.targetAllocation) {
            const targetPercentage = this.targetAllocation[exchange];
            const currentPercentage = currentAllocation[exchange] || 0;
            const deviation = Math.abs(targetPercentage - currentPercentage);
            
            if (deviation > rebalanceThreshold) {
                this.logger.info(`Rebalanceo necesario: ${exchange} - Objetivo: ${targetPercentage}%, Actual: ${currentPercentage.toFixed(2)}%`);
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Obtiene la asignación actual del portfolio
     * @returns {Object} - Asignación actual por exchange
     */
    getCurrentAllocation() {
        const allocation = {};
        
        for (const exchange in this.currentBalances) {
            allocation[exchange] = (this.currentBalances[exchange] / this.totalValue) * 100;
        }
        
        return allocation;
    }
    
    /**
     * Verifica y ejecuta rebalanceo si es necesario
     */
    async checkAndRebalance() {
        if (await this.shouldRebalance()) {
            await this.rebalancePortfolio();
        }
    }
    
    /**
     * Ejecuta el rebalanceo del portfolio
     */
    async rebalancePortfolio() {
        this.logger.info('Iniciando rebalanceo del portfolio...');
        
        try {
            const rebalanceId = this.generateRebalanceId();
            const startTime = new Date();
            const initialBalances = { ...this.currentBalances };
            
            // Calcular nuevos balances objetivo
            const targetBalances = this.calculateTargetBalances();
            
            // Calcular transferencias necesarias
            const transfers = this.calculateRequiredTransfers(targetBalances);
            
            // Ejecutar transferencias (simulado)
            const executedTransfers = await this.executeTransfers(transfers);
            
            // Actualizar balances
            this.applyTransfers(executedTransfers);
            
            // Registrar rebalanceo
            const rebalanceRecord = {
                id: rebalanceId,
                timestamp: startTime,
                endTime: new Date(),
                initialBalances,
                finalBalances: { ...this.currentBalances },
                targetBalances,
                transfers: executedTransfers,
                totalTransferred: executedTransfers.reduce((sum, t) => sum + t.amount, 0),
                success: true
            };
            
            this.rebalanceHistory.push(rebalanceRecord);
            this.lastRebalance = startTime;
            
            // Mantener solo los últimos 100 rebalanceos
            if (this.rebalanceHistory.length > 100) {
                this.rebalanceHistory.shift();
            }
            
            // Registrar nuevo estado
            this.calculateTotalValue();
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            this.emit('rebalanceCompleted', rebalanceRecord);
            this.logger.info(`Rebalanceo completado: $${rebalanceRecord.totalTransferred.toFixed(2)} transferidos`);
            
        } catch (error) {
            this.logger.error('Error ejecutando rebalanceo:', error);
            
            // Registrar rebalanceo fallido
            this.rebalanceHistory.push({
                id: this.generateRebalanceId(),
                timestamp: new Date(),
                success: false,
                error: error.message
            });
            
            this.emit('rebalanceError', { error: error.message });
        }
    }

    /**
 * Rebalancea solo una cantidad específica del exchange con más saldo al que tiene menos.
 * @param {number} amount - Cantidad a rebalancear.
 */
async rebalanceSpecificAmount(amount) {
    this.logger.info(`Iniciando rebalanceo MANUAL de cantidad específica: $${amount.toFixed(2)}`);

    // Encuentra el exchange con más saldo y el que tiene menos
    let maxEx = null, minEx = null;
    let maxVal = -Infinity, minVal = Infinity;
    for (const ex in this.currentBalances) {
        if (this.currentBalances[ex] > maxVal) {
            maxEx = ex;
            maxVal = this.currentBalances[ex];
        }
        if (this.currentBalances[ex] < minVal) {
            minEx = ex;
            minVal = this.currentBalances[ex];
        }
    }

    if (!maxEx || !minEx || maxEx === minEx) {
        throw new Error("No es posible rebalancear con los balances actuales.");
    }
    if (this.currentBalances[maxEx] < amount) {
        throw new Error(`El exchange ${maxEx} no tiene suficiente saldo para transferir $${amount}.`);
    }

    // Simula la transferencia (descuenta del origen, suma al destino)
    this.currentBalances[maxEx] -= amount;
    this.currentBalances[minEx] += amount;

    // Registrar el rebalanceo manual
    this.rebalanceHistory.push({
        id: this.generateRebalanceId(),
        timestamp: new Date(),
        manual: true,
        from: maxEx,
        to: minEx,
        amount,
        balancesAfter: { ...this.currentBalances },
        success: true
    });

    this.lastRebalance = new Date();
    this.calculateTotalValue();
    this.recordBalanceSnapshot();
    this.recordAllocationSnapshot();

    this.logger.info(`Rebalanceo manual: $${amount.toFixed(2)} transferidos de ${maxEx} a ${minEx}.`);
    this.emit('rebalanceCompleted', { manual: true, from: maxEx, to: minEx, amount });
}

/**
 * Rebalancea una cantidad específica entre dos exchanges y para un token (si aplica).
 * @param {Object} params - { amount, fromExchange, toExchange, token }
 */
async rebalanceCustom({ amount, fromExchange, toExchange, token = "USDT" }) {
    this.logger.info(`Rebalanceo manual: $${amount} de ${fromExchange} a ${toExchange} para token ${token}`);

    // Si tienes balances por token y exchange, ajusta aquí:
    // this.currentBalances[exchange][token]
    // Si solo por exchange: this.currentBalances[exchange]

    // --- Si balances por exchange y token ---
    if (typeof this.currentBalances[fromExchange] === "object" && token in this.currentBalances[fromExchange]) {
        // Verifica saldo suficiente
        if (this.currentBalances[fromExchange][token] < amount) {
            throw new Error(`El exchange ${fromExchange} no tiene suficiente saldo de ${token} para transferir $${amount}.`);
        }
        // Realiza transferencia
        this.currentBalances[fromExchange][token] -= amount;
        this.currentBalances[toExchange][token] += amount;
    } else {
        // --- Si balances simples por exchange ---
        if (this.currentBalances[fromExchange] < amount) {
            throw new Error(`El exchange ${fromExchange} no tiene suficiente saldo para transferir $${amount}.`);
        }
        this.currentBalances[fromExchange] -= amount;
        this.currentBalances[toExchange] += amount;
    }

    // Registrar rebalanceo
    this.rebalanceHistory.push({
        id: this.generateRebalanceId(),
        timestamp: new Date(),
        manual: true,
        from: fromExchange,
        to: toExchange,
        amount,
        token,
        balancesAfter: JSON.parse(JSON.stringify(this.currentBalances)),
        success: true
    });

    this.lastRebalance = new Date();
    this.calculateTotalValue();
    this.recordBalanceSnapshot();
    this.recordAllocationSnapshot();

    this.logger.info(`Rebalanceo manual: $${amount} ${token} transferidos de ${fromExchange} a ${toExchange}.`);
    this.emit('rebalanceCompleted', { manual: true, from: fromExchange, to: toExchange, amount, token });
}
    
    /**
     * Calcula los balances objetivo según la asignación
     * @returns {Object} - Balances objetivo por exchange
     */
    calculateTargetBalances() {
        const targetBalances = {};
        const availableBalance = this.totalValue * (1 - this.reservePercentage);
        
        for (const exchange in this.targetAllocation) {
            const targetPercentage = this.targetAllocation[exchange];
            targetBalances[exchange] = availableBalance * targetPercentage;
            
            // Asegurar balance mínimo
            if (targetBalances[exchange] < this.minBalancePerExchange) {
                targetBalances[exchange] = this.minBalancePerExchange;
            }
        }
        
        return targetBalances;
    }
    
    /**
     * Calcula las transferencias necesarias para el rebalanceo
     * @param {Object} targetBalances - Balances objetivo
     * @returns {Array} - Lista de transferencias necesarias
     */
    calculateRequiredTransfers(targetBalances) {
        const transfers = [];
        const surplusExchanges = [];
        const deficitExchanges = [];
        
        // Identificar exchanges con exceso y déficit
        for (const exchange in this.currentBalances) {
            const currentBalance = this.currentBalances[exchange];
            const targetBalance = targetBalances[exchange] || 0;
            const difference = currentBalance - targetBalance;
            
            if (difference > 1) { // Margen de $1 para evitar transferencias mínimas
                surplusExchanges.push({
                    exchange,
                    surplus: difference
                });
            } else if (difference < -1) {
                deficitExchanges.push({
                    exchange,
                    deficit: -difference
                });
            }
        }
        
        // Ordenar por cantidad (mayor primero)
        surplusExchanges.sort((a, b) => b.surplus - a.surplus);
        deficitExchanges.sort((a, b) => b.deficit - a.deficit);
        
        // Calcular transferencias
        for (const deficitExchange of deficitExchanges) {
            let remainingDeficit = deficitExchange.deficit;
            
            for (let i = 0; i < surplusExchanges.length && remainingDeficit > 0; i++) {
                const surplusExchange = surplusExchanges[i];
                
                if (surplusExchange.surplus <= 0) continue;
                
                const transferAmount = Math.min(surplusExchange.surplus, remainingDeficit);
                
                if (transferAmount > 1) { // Transferir solo si es mayor a $1
                    transfers.push({
                        from: surplusExchange.exchange,
                        to: deficitExchange.exchange,
                        amount: transferAmount
                    });
                    
                    surplusExchange.surplus -= transferAmount;
                    remainingDeficit -= transferAmount;
                }
            }
        }
        
        return transfers;
    }
    
    /**
     * Ejecuta las transferencias (simulado)
     * @param {Array} transfers - Lista de transferencias
     * @returns {Array} - Transferencias ejecutadas
     */
    async executeTransfers(transfers) {
        const executedTransfers = [];
        
        for (const transfer of transfers) {
            try {
                // Simular latencia de transferencia
                await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
                
                // Simular éxito/fallo (98% éxito)
                const success = Math.random() > 0.02;
                
                if (success) {
                    // Simular fee de transferencia (0.1%)
                    const fee = transfer.amount * 0.001;
                    const netAmount = transfer.amount - fee;
                    
                    executedTransfers.push({
                        ...transfer,
                        netAmount,
                        fee,
                        success: true,
                        timestamp: new Date()
                    });
                    
                    this.logger.info(`Transferencia ejecutada: $${transfer.amount.toFixed(2)} de ${transfer.from} a ${transfer.to}`);
                } else {
                    throw new Error('Transferencia fallida');
                }
            } catch (error) {
                this.logger.error(`Error en transferencia de ${transfer.from} a ${transfer.to}:`, error);
                
                executedTransfers.push({
                    ...transfer,
                    success: false,
                    error: error.message,
                    timestamp: new Date()
                });
            }
        }
        
        return executedTransfers;
    }
    
    /**
     * Aplica las transferencias a los balances
     * @param {Array} transfers - Transferencias ejecutadas
     */
    applyTransfers(transfers) {
        for (const transfer of transfers) {
            if (transfer.success) {
                // Restar del exchange origen
                this.currentBalances[transfer.from] -= transfer.amount;
                
                // Sumar al exchange destino (menos fee)
                this.currentBalances[transfer.to] += transfer.netAmount;
            }
        }
    }
    
    /**
     * Reinvierte las ganancias en el portfolio
     */
    async compoundProfits() {
        if (this.totalProfit < this.compoundThreshold) {
            return;
        }
        
        this.logger.info(`Reinvirtiendo ganancias: $${this.totalProfit.toFixed(2)}`);
        
        try {
            // Distribuir ganancias según asignación objetivo
            for (const exchange in this.targetAllocation) {
                const allocationPercentage = this.targetAllocation[exchange];
                const additionalAmount = this.totalProfit * allocationPercentage;
                
                this.currentBalances[exchange] += additionalAmount;
            }
            
            // Actualizar balance inicial para reflejar la reinversión
            this.initialBalance = this.totalValue;
            
            // Recalcular métricas
            this.calculateTotalValue();
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            this.emit('profitsCompounded', {
                amount: this.totalProfit,
                newInitialBalance: this.initialBalance
            });
            
            this.logger.info('Ganancias reinvertidas correctamente');
        } catch (error) {
            this.logger.error('Error reinvirtiendo ganancias:', error);
        }
    }
    
    /**
     * Genera un ID único para el rebalanceo
     * @returns {string} - ID del rebalanceo
     */
    generateRebalanceId() {
        return `rebalance_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * Obtiene el estado actual del portfolio
     * @returns {Object} - Estado del portfolio
     */
    getPortfolioStatus() {
        return {
            totalValue: this.totalValue,
            totalProfit: this.totalProfit,
            totalProfitPercentage: this.totalProfitPercentage,
            currentBalances: { ...this.currentBalances },
            currentAllocation: this.getCurrentAllocation(),
            targetAllocation: { ...this.targetAllocation },
            lastRebalance: this.lastRebalance,
            nextRebalanceCheck: this.lastRebalance ? 
                new Date(this.lastRebalance.getTime() + this.rebalanceFrequency) : 
                new Date()
        };
    }

    // ======= AGREGADO DASHBOARD: API paneles de rebalanceo y balances =======
    getBalances() {
        // Devuelve balances actuales
        return { ...this.currentBalances }
    }
    isAutoRebalanceEnabled() {
        return !!this._autoRebalanceEnabled
    }
    enableAutoRebalance() {
        if (!this._autoRebalanceEnabled) {
            this._autoRebalanceEnabled = true;
            if (!this.rebalanceInterval && this.rebalanceFrequency > 0) {
                this.scheduleAutoRebalance();
            }
        }
    }
    disableAutoRebalance() {
        if (this._autoRebalanceEnabled) {
            this._autoRebalanceEnabled = false;
            if (this.rebalanceInterval) {
                clearInterval(this.rebalanceInterval);
                this.rebalanceInterval = null;
            }
        }
    }
    // ======= FIN AGREGADO DASHBOARD =======
    
    /**
     * Obtiene el historial de balances
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de balances
     */
    getBalanceHistory(limit = 100) {
        return this.balanceHistory.slice(-limit);
    }
    
    /**
     * Obtiene el historial de asignaciones
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de asignaciones
     */
    getAllocationHistory(limit = 100) {
        return this.allocationHistory.slice(-limit);
    }
    
    /**
     * Obtiene el historial de rebalanceos
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de rebalanceos
     */
    getRebalanceHistory(limit = 50) {
        return this.rebalanceHistory.slice(-limit);
    }
    
    /**
     * Actualiza la asignación objetivo
     * @param {Object} newAllocation - Nueva asignación objetivo
     */
    updateTargetAllocation(newAllocation) {
        // Validar que las asignaciones sumen 100%
        const totalAllocation = Object.values(newAllocation).reduce((sum, allocation) => sum + allocation, 0);
        
        if (Math.abs(totalAllocation - 1.0) > 0.01) {
            throw new Error('La asignación total debe sumar 100%');
        }
        
        this.targetAllocation = { ...newAllocation };
        this.logger.info('Asignación objetivo actualizada:', this.targetAllocation);
        
        // Verificar si se necesita rebalanceo inmediato
        this.checkAndRebalance();
    }
    
    /**
     * Detiene el gestor de portfolio
     */
    stop() {
        if (this.rebalanceInterval) {
            clearInterval(this.rebalanceInterval);
            this.rebalanceInterval = null;
        }
        
        this._autoRebalanceEnabled = false; // AGREGADO DASHBOARD: marcar como deshabilitado
        this.logger.info('Portfolio Manager detenido');
    }
}

module.exports = PortfolioManager;

-------------------------------------------------------------------------------------------------------

RISK

// ========== GESTIÓN AVANZADA DE RIESGO ==========
const config = require("../strategies/config")

class AdvancedRiskManager {
  constructor() {
    this.exposureMap = new Map()
    this.totalExposure = 0
    this.riskMetrics = new Map()
    this.correlationMatrix = new Map()
    this.volatilityHistory = new Map()
    this.anomalyDetector = new AnomalyDetector()
    this.stressTestResults = []
    this.riskLimits = this.initializeRiskLimits()
    
    // ======= AGREGADO PARA DASHBOARD =======
    this.riskSettings = {
      maxPorOperacion: 100,
      maxTotal: 1000,
    }
    // ======= FIN AGREGADO DASHBOARD =======

    console.log('🛡️ Gestor de Riesgo Avanzado inicializado')
  }

  // ======= AGREGADO PARA DASHBOARD =======
  getRiskSettings() {
    return this.riskSettings
  }
  setRiskSettings(settings) {
    this.riskSettings = { ...this.riskSettings, ...settings }
  }
  // ======= FIN AGREGADO DASHBOARD =======
  
  initializeRiskLimits() {
    return {
      maxDailyLoss: config.BOT.MAX_DAILY_LOSS || -5.0, // -5%
      maxSingleTradeRisk: 2.0, // 2% del portfolio por trade
      maxCorrelatedExposure: 30.0, // 30% en activos correlacionados
      maxVolatilityThreshold: 50.0, // 50% volatilidad anualizada
      maxDrawdown: 10.0, // 10% drawdown máximo
      minLiquidityRatio: 0.2, // 20% mínimo en activos líquidos
      maxConcentrationRisk: 40.0, // 40% máximo en un solo activo
    }
  }

  async assessTradeRisk(opportunity, marketData, portfolioValue) {
    const riskAssessment = {
      riskScore: 0,
      riskLevel: 'LOW',
      riskFactors: [],
      recommendations: [],
      approved: true,
      maxPositionSize: opportunity.tradeAmount,
    }

    try {
      // 1. Riesgo de volatilidad
      const volatilityRisk = this.assessVolatilityRisk(opportunity.pair, marketData)
      riskAssessment.riskScore += volatilityRisk.score
      if (volatilityRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...volatilityRisk.factors)
      }

      // 2. Riesgo de liquidez
      const liquidityRisk = this.assessLiquidityRisk(opportunity, marketData)
      riskAssessment.riskScore += liquidityRisk.score
      if (liquidityRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...liquidityRisk.factors)
      }

      // 3. Riesgo de concentración
      const concentrationRisk = this.assessConcentrationRisk(opportunity, portfolioValue)
      riskAssessment.riskScore += concentrationRisk.score
      if (concentrationRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...concentrationRisk.factors)
      }

      // 4. Riesgo de correlación
      const correlationRisk = this.assessCorrelationRisk(opportunity.pair)
      riskAssessment.riskScore += correlationRisk.score
      if (correlationRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...correlationRisk.factors)
      }

      // 5. Riesgo temporal
      const temporalRisk = this.assessTemporalRisk()
      riskAssessment.riskScore += temporalRisk.score
      if (temporalRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...temporalRisk.factors)
      }

      // Determinar nivel de riesgo
      if (riskAssessment.riskScore < 0.3) {
        riskAssessment.riskLevel = 'LOW'
      } else if (riskAssessment.riskScore < 0.7) {
        riskAssessment.riskLevel = 'MEDIUM'
      } else {
        riskAssessment.riskLevel = 'HIGH'
      }

      // Ajustar tamaño de posición basado en riesgo
      riskAssessment.maxPositionSize = this.calculateOptimalPositionSize(
        opportunity,
        riskAssessment.riskScore,
        portfolioValue
      )

      // Generar recomendaciones
      riskAssessment.recommendations = this.generateRiskRecommendations(riskAssessment)

      // Decidir aprobación
      riskAssessment.approved = this.shouldApproveTradeRisk(riskAssessment)

      return riskAssessment
    } catch (error) {
      console.error('❌ Error en evaluación de riesgo:', error)
      return {
        ...riskAssessment,
        riskLevel: 'HIGH',
        approved: false,
        riskFactors: ['Error en evaluación de riesgo'],
      }
    }
  }

  assessVolatilityRisk(pair, marketData) {
    const assessment = { score: 0, factors: [] }
    
    const currentVolatility = marketData.volatility || 0
    const historicalVolatility = this.getHistoricalVolatility(pair)
    
    // Volatilidad actual vs histórica
    if (currentVolatility > historicalVolatility * 1.5) {
      assessment.score += 0.3
      assessment.factors.push(`Volatilidad elevada: ${(currentVolatility * 100).toFixed(1)}%`)
    }

    // Volatilidad absoluta
    if (currentVolatility > this.riskLimits.maxVolatilityThreshold / 100) {
      assessment.score += 0.4
      assessment.factors.push(`Volatilidad excesiva: ${(currentVolatility * 100).toFixed(1)}%`)
    }

    // Cambios súbitos de volatilidad
    const volatilityChange = this.getVolatilityChange(pair)
    if (Math.abs(volatilityChange) > 0.1) {
      assessment.score += 0.2
      assessment.factors.push(`Cambio súbito de volatilidad: ${(volatilityChange * 100).toFixed(1)}%`)
    }

    return assessment
  }

  assessLiquidityRisk(opportunity, marketData) {
    const assessment = { score: 0, factors: [] }
    
    const volume24h = marketData.volume24h || 0
    const avgVolume = marketData.avgVolume || volume24h
    const volumeRatio = avgVolume > 0 ? volume24h / avgVolume : 1

    // Volumen bajo
    if (volumeRatio < 0.5) {
      assessment.score += 0.3
      assessment.factors.push(`Volumen bajo: ${(volumeRatio * 100).toFixed(1)}% del promedio`)
    }

    // Spread amplio (indicador de baja liquidez)
    if (opportunity.spread > 2.0) {
      assessment.score += 0.2
      assessment.factors.push(`Spread amplio: ${opportunity.spread.toFixed(2)}%`)
    }

    // Profundidad del order book
    const orderBookDepth = marketData.orderBookDepth || 0
    if (orderBookDepth < opportunity.tradeAmount * 2) {
      assessment.score += 0.4
      assessment.factors.push('Profundidad insuficiente del order book')
    }

    return assessment
  }

  assessConcentrationRisk(opportunity, portfolioValue) {
    const assessment = { score: 0, factors: [] }
    
    const currentExposure = this.exposureMap.get(opportunity.pair) || 0
    const newExposure = currentExposure + opportunity.tradeAmount
    const concentrationPercent = (newExposure / portfolioValue) * 100

    // Concentración por par
    if (concentrationPercent > this.riskLimits.maxConcentrationRisk) {
      assessment.score += 0.5
      assessment.factors.push(`Concentración excesiva en ${opportunity.pair}: ${concentrationPercent.toFixed(1)}%`)
    }

    // Exposición total
    const newTotalExposure = this.totalExposure + opportunity.tradeAmount
    const totalExposurePercent = (newTotalExposure / portfolioValue) * 100
    
    if (totalExposurePercent > 80) {
      assessment.score += 0.3
      assessment.factors.push(`Exposición total alta: ${totalExposurePercent.toFixed(1)}%`)
    }

    return assessment
  }

  assessCorrelationRisk(pair) {
    const assessment = { score: 0, factors: [] }
    
    const correlatedPairs = this.getCorrelatedPairs(pair)
    let correlatedExposure = 0

    for (const correlatedPair of correlatedPairs) {
      correlatedExposure += this.exposureMap.get(correlatedPair) || 0
    }

    const correlationPercent = (correlatedExposure / this.totalExposure) * 100

    if (correlationPercent > this.riskLimits.maxCorrelatedExposure) {
      assessment.score += 0.4
      assessment.factors.push(`Alta exposición correlacionada: ${correlationPercent.toFixed(1)}%`)
    }

    return assessment
  }

  assessTemporalRisk() {
    const assessment = { score: 0, factors: [] }
    
    const now = new Date()
    const hour = now.getHours()
    const day = now.getDay()

    // Horarios de baja liquidez
    if (hour >= 22 || hour <= 6) {
      assessment.score += 0.1
      assessment.factors.push('Horario de baja liquidez')
    }

    // Fines de semana
    if (day === 0 || day === 6) {
      assessment.score += 0.1
      assessment.factors.push('Trading en fin de semana')
    }

    // Eventos de mercado (simplificado)
    if (this.isHighVolatilityPeriod()) {
      assessment.score += 0.2
      assessment.factors.push('Período de alta volatilidad del mercado')
    }

    return assessment
  }

  calculateOptimalPositionSize(opportunity, riskScore, portfolioValue) {
    const baseSize = opportunity.tradeAmount
    const maxRiskPerTrade = portfolioValue * (this.riskLimits.maxSingleTradeRisk / 100)
    
    // Ajustar por score de riesgo
    const riskAdjustment = Math.max(0.1, 1 - riskScore)
    const adjustedSize = baseSize * riskAdjustment
    
    // Aplicar límites
    return Math.min(adjustedSize, maxRiskPerTrade, baseSize)
  }

  generateRiskRecommendations(riskAssessment) {
    const recommendations = []

    if (riskAssessment.riskLevel === 'HIGH') {
      recommendations.push('Considere reducir el tamaño de la posición')
      recommendations.push('Monitoree de cerca la ejecución')
      recommendations.push('Prepare stop-loss más estricto')
    }

    if (riskAssessment.riskFactors.includes('Volatilidad elevada')) {
      recommendations.push('Espere a que la volatilidad se normalice')
    }

    if (riskAssessment.riskFactors.some(f => f.includes('Concentración'))) {
      recommendations.push('Diversifique la exposición')
    }

    if (riskAssessment.riskFactors.some(f => f.includes('liquidez'))) {
      recommendations.push('Verifique la profundidad del order book')
    }

    return recommendations
  }

  shouldApproveTradeRisk(riskAssessment) {
    // No aprobar si el riesgo es muy alto
    if (riskAssessment.riskScore > 0.8) return false
    
    // No aprobar si hay factores críticos
    const criticalFactors = [
      'Volatilidad excesiva',
      'Concentración excesiva',
      'Profundidad insuficiente'
    ]
    
    for (const factor of riskAssessment.riskFactors) {
      if (criticalFactors.some(critical => factor.includes(critical))) {
        return false
      }
    }

    return true
  }

  async runStressTest(scenarios = []) {
    console.log('🧪 Ejecutando stress test...')
    
    const defaultScenarios = [
      { name: 'Crash 20%', priceChange: -0.20, volumeChange: -0.50 },
      { name: 'Volatilidad Extrema', volatilityMultiplier: 3, spreadMultiplier: 2 },
      { name: 'Liquidez Baja', volumeChange: -0.80, spreadMultiplier: 5 },
      { name: 'Correlación Alta', correlationIncrease: 0.5 },
    ]

    const testScenarios = scenarios.length > 0 ? scenarios : defaultScenarios
    const results = []

    for (const scenario of testScenarios) {
      const result = await this.simulateScenario(scenario)
      results.push(result)
    }

    this.stressTestResults = results
    return results
  }

  async simulateScenario(scenario) {
    const simulation = {
      name: scenario.name,
      parameters: scenario,
      results: {
        portfolioLoss: 0,
        maxDrawdown: 0,
        tradesAffected: 0,
        liquidityImpact: 0,
        riskScore: 0,
      },
      recommendations: [],
    }

    // Simular impacto en portfolio
    if (scenario.priceChange) {
      simulation.results.portfolioLoss = this.totalExposure * Math.abs(scenario.priceChange)
    }

    // Simular impacto en liquidez
    if (scenario.volumeChange) {
      simulation.results.liquidityImpact = Math.abs(scenario.volumeChange)
    }

    // Calcular score de riesgo del escenario
    simulation.results.riskScore = this.calculateScenarioRisk(scenario)

    // Generar recomendaciones
    simulation.recommendations = this.generateStressTestRecommendations(simulation)

    return simulation
  }

  calculateScenarioRisk(scenario) {
    let riskScore = 0

    if (scenario.priceChange && Math.abs(scenario.priceChange) > 0.1) {
      riskScore += 0.4
    }

    if (scenario.volatilityMultiplier && scenario.volatilityMultiplier > 2) {
      riskScore += 0.3
    }

    if (scenario.volumeChange && scenario.volumeChange < -0.5) {
      riskScore += 0.3
    }

    return Math.min(1.0, riskScore)
  }

  generateStressTestRecommendations(simulation) {
    const recommendations = []

    if (simulation.results.portfolioLoss > this.totalExposure * 0.1) {
      recommendations.push('Reducir exposición total')
      recommendations.push('Implementar hedging')
    }

    if (simulation.results.liquidityImpact > 0.5) {
      recommendations.push('Diversificar exchanges')
      recommendations.push('Monitorear volúmenes más de cerca')
    }

    if (simulation.results.riskScore > 0.7) {
      recommendations.push('Pausar trading automático')
      recommendations.push('Revisar límites de riesgo')
    }

    return recommendations
  }

  // Métodos auxiliares
  getHistoricalVolatility(pair) {
    const history = this.volatilityHistory.get(pair) || []
    if (history.length === 0) return 0.02 // 2% por defecto
    
    return history.reduce((sum, vol) => sum + vol, 0) / history.length
  }

  getVolatilityChange(pair) {
    const history = this.volatilityHistory.get(pair) || []
    if (history.length < 2) return 0
    
    return history[history.length - 1] - history[history.length - 2]
  }

  getCorrelatedPairs(pair) {
    // Simplificado - en producción usar matriz de correlación real
    const correlations = {
      'POL/USDT': ['MATIC/USDT'],
      'BTC/USDT': ['ETH/USDT'],
      'ETH/USDT': ['BTC/USDT'],
    }
    
    return correlations[pair] || []
  }

  isHighVolatilityPeriod() {
    // Simplificado - en producción usar indicadores de mercado reales
    return Math.random() < 0.1 // 10% probabilidad
  }

  updateExposure(pair, amount, isClosing = false) {
    const currentExposure = this.exposureMap.get(pair) || 0
    
    if (isClosing) {
      const newExposure = Math.max(0, currentExposure - amount)
      this.exposureMap.set(pair, newExposure)
      this.totalExposure = Math.max(0, this.totalExposure - amount)
    } else {
      this.exposureMap.set(pair, currentExposure + amount)
      this.totalExposure += amount
    }
  }

  trackVolatility(pair, volatility) {
    if (!this.volatilityHistory.has(pair)) {
      this.volatilityHistory.set(pair, [])
    }
    
    const history = this.volatilityHistory.get(pair)
    history.push(volatility)
    
    // Mantener solo los últimos 100 puntos
    if (history.length > 100) {
      history.shift()
    }
  }

  getRiskReport() {
    return {
      totalExposure: this.totalExposure,
      exposureByPair: Object.fromEntries(this.exposureMap),
      riskLimits: this.riskLimits,
      stressTestResults: this.stressTestResults.slice(-5), // Últimos 5 tests
      riskMetrics: Object.fromEntries(this.riskMetrics),
      recommendations: this.generatePortfolioRiskRecommendations(),
    }
  }

  generatePortfolioRiskRecommendations() {
    const recommendations = []
    
    // Verificar exposición total
    if (this.totalExposure > 1000) { // Ejemplo: $1000
      recommendations.push({
        type: 'EXPOSURE',
        message: 'Exposición total elevada',
        priority: 'MEDIUM',
      })
    }

    // Verificar concentración
    for (const [pair, exposure] of this.exposureMap.entries()) {
      if (exposure > this.totalExposure * 0.4) {
        recommendations.push({
          type: 'CONCENTRATION',
          message: `Alta concentración en ${pair}`,
          priority: 'HIGH',
        })
      }
    }

    return recommendations
  }
}

// Detector de anomalías auxiliar
class AnomalyDetector {
  constructor() {
    this.priceHistory = new Map()
    this.volumeHistory = new Map()
    this.spreadHistory = new Map()
  }

  detectAnomalies(pair, price, volume, spread) {
    const anomalies = []
    
    // Detectar anomalías de precio
    const priceAnomaly = this.detectPriceAnomaly(pair, price)
    if (priceAnomaly) anomalies.push(priceAnomaly)
    
    // Detectar anomalías de volumen
    const volumeAnomaly = this.detectVolumeAnomaly(pair, volume)
    if (volumeAnomaly) anomalies.push(volumeAnomaly)
    
    // Detectar anomalías de spread
    const spreadAnomaly = this.detectSpreadAnomaly(pair, spread)
    if (spreadAnomaly) anomalies.push(spreadAnomaly)
    
    // Actualizar historiales
    this.updateHistory(pair, price, volume, spread)
    
    return anomalies
  }

  detectPriceAnomaly(pair, price) {
    const history = this.priceHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const deviation = Math.abs(price - avg) / avg
    
    if (deviation > 0.05) { // 5% desviación
      return {
        type: 'PRICE_ANOMALY',
        severity: deviation > 0.1 ? 'HIGH' : 'MEDIUM',
        message: `Precio anómalo: ${(deviation * 100).toFixed(1)}% desviación`,
      }
    }
    
    return null
  }

  detectVolumeAnomaly(pair, volume) {
    const history = this.volumeHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const ratio = volume / avg
    
    if (ratio < 0.1 || ratio > 10) {
      return {
        type: 'VOLUME_ANOMALY',
        severity: ratio < 0.05 || ratio > 20 ? 'HIGH' : 'MEDIUM',
        message: `Volumen anómalo: ${ratio.toFixed(1)}x del promedio`,
      }
    }
    
    return null
  }

  detectSpreadAnomaly(pair, spread) {
    const history = this.spreadHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const ratio = spread / avg
    
    if (ratio > 3) {
      return {
        type: 'SPREAD_ANOMALY',
        severity: ratio > 5 ? 'HIGH' : 'MEDIUM',
        message: `Spread anómalo: ${ratio.toFixed(1)}x del promedio`,
      }
    }
    
    return null
  }

  updateHistory(pair, price, volume, spread) {
    // Actualizar historial de precios
    if (!this.priceHistory.has(pair)) {
      this.priceHistory.set(pair, [])
    }
    const priceHist = this.priceHistory.get(pair)
    priceHist.push(price)
    if (priceHist.length > 50) priceHist.shift()
    
    // Actualizar historial de volumen
    if (!this.volumeHistory.has(pair)) {
      this.volumeHistory.set(pair, [])
    }
    const volumeHist = this.volumeHistory.get(pair)
    volumeHist.push(volume)
    if (volumeHist.length > 50) volumeHist.shift()
    
    // Actualizar historial de spread
    if (!this.spreadHistory.has(pair)) {
      this.spreadHistory.set(pair, [])
    }
    const spreadHist = this.spreadHistory.get(pair)
    spreadHist.push(spread)
    if (spreadHist.length > 50) spreadHist.shift()
  }
}

module.exports = {
  AdvancedRiskManager
}

------------------------------------------------------------------------------------------------------

SCRIPTS

// Nuevo script para ejecutar el backtesting
const { Backtester } = require("../backtesting/backtester")
const { HistoricalDataManager } = require("../backtesting/historical-data-manager")
const config = require("../config")

async function main() {
  if (!config.BACKTESTING.ENABLED) {
    console.log("El backtesting está desactivado en la configuración.")
    return
  }

  const startDateStr = process.argv[2] || "2024-01-01" // Ejemplo: YYYY-MM-DD
  const endDateStr = process.argv[3] || "2024-01-02" // Ejemplo: YYYY-MM-DD

  console.log(`Preparando datos históricos para el backtest (${startDateStr} a ${endDateStr})...`)
  const dataManager = new HistoricalDataManager()

  // Descargar/verificar datos para el rango especificado
  // Esto es un ejemplo, necesitarías una lógica más robusta para manejar los días
  const currentDate = new Date(startDateStr)
  const finalDate = new Date(endDateStr)

  while (currentDate <= finalDate) {
    for (const pairConfig of config.TRADING_PAIRS) {
      for (const exchangeName of Object.keys(config.EXCHANGES)) {
        // El método fetchAndStoreCandlestickData ahora guarda los datos si no existen.
        // Para un backtest, primero nos aseguraríamos que los datos existen.
        // Si no, se podrían descargar aquí o el backtester podría hacerlo.
        // Por simplicidad, asumimos que fetchAndStore los obtiene y guarda si es necesario.
        await dataManager.fetchAndStoreCandlestickData(
          exchangeName,
          pairConfig.symbol,
          "1m", // intervalo
          currentDate.getTime(), // startTime del día
          currentDate.getTime() + (24 * 60 * 60 * 1000 - 1), // endTime del día
        )
      }
    }
    currentDate.setDate(currentDate.getDate() + 1)
  }
  console.log("Datos históricos listos.")

  const backtester = new Backtester(startDateStr, endDateStr)

  try {
    const report = await backtester.run()
    console.log("\n--- Reporte Final del Backtest ---")
    console.log(`Periodo: ${report.startDate.toDateString()} - ${report.endDate.toDateString()}`)
    console.log(`Balance Inicial: ${report.initialBalance.toFixed(2)} USDT`)
    console.log(`Balance Final: ${report.finalBalance.toFixed(2)} USDT`)
    console.log(`Profit: ${report.profit.toFixed(2)} USDT (${report.profitPercentage.toFixed(2)}%)`)
    console.log(`Total Trades: ${report.totalTrades}`)

    // Enviar alerta con el resumen del backtest
    if (config.ALERTS.ALERT_ON_BACKTEST_COMPLETION && backtester.simulatedBot) {
      const alertMessage =
        `Backtest completado (${startDateStr} a ${endDateStr}):\n` +
        `Profit: ${report.profit.toFixed(2)} USDT (${report.profitPercentage.toFixed(2)}%)\n` +
        `Trades: ${report.totalTrades}`
      await backtester.simulatedBot.logAndAlert(alertMessage, { type: "BACKTEST_RESULT", priority: "normal" })
    }
  } catch (error) {
    console.error("Error durante el backtesting:", error)
  }
}

main()

#----------run-backtest----------------

--------------------------------------------------------------------------------------
SERVICES

import axios from "axios";
const API = axios.create({ baseURL: "/api" });
export default API;

--------------------------------------------------------------------------------------

const express = require("express");
const config = require("../strategies/config");
const fs = require("fs");
const path = require("path");

const router = express.Router();

/* ===========================
   CONFIGURACIÓN GENERAL
   =========================== */
router.get("/config", (req, res) => {
  res.json(config);
});

router.post("/config", (req, res) => {
  // Actualizar config.js en disco. (Requiere reinicio del bot para efectos completos.)
  const newConfig = req.body;
  const configPath = path.join(__dirname, "../strategies/config.js");
  fs.writeFileSync(
    configPath,
    "module.exports = " + JSON.stringify(newConfig, null, 2)
  );
  res.json({ ok: true });
});

/* ===========================
   ENDPOINTS MÍNIMOS PARA DASHBOARD
   =========================== */
router.get("/metrics", (req, res) => {
  const metrics = {
    totalTrades: 123,
    totalProfit: 456.78,
    uptime: "24h 13m",
    winRate: "67%",
    openPositions: 4,
    closedPositions: 119,
    currentBalance: 15234.56,
    startTime: "2025-06-12 12:00:00"
  };
  res.json(metrics);
});

router.get("/commissions", (req, res) => {
  const commissions = [
    { exchange: "Binance", type: "maker", fee: 0.1 },
    { exchange: "Binance", type: "taker", fee: 0.2 },
    { exchange: "Kraken", type: "maker", fee: 0.16 },
    { exchange: "Kraken", type: "taker", fee: 0.26 },
    { exchange: "Bitfinex", type: "maker", fee: 0.1 }
  ];
  res.json(commissions);
});

router.get("/alerts", (req, res) => {
  res.json(config.ALERTS || [
    { id: 1, type: "info", message: "Bot iniciado correctamente.", timestamp: "2025-06-13 07:00:00" },
    { id: 2, type: "warning", message: "Balance bajo en Binance.", timestamp: "2025-06-13 06:50:00" }
  ]);
});

/* ===========================
   EXCHANGES
   =========================== */
router.get("/exchanges", (req, res) => {
  res.json(config.EXCHANGES);
});

router.post("/exchanges", (req, res) => {
  config.EXCHANGES = req.body;
  res.json({ ok: true });
});

/* ===========================
   ESTRATEGIAS
   =========================== */
router.get("/strategies", (req, res) => {
  res.json(config.STRATEGIES);
});

router.post("/strategies", (req, res) => {
  config.STRATEGIES = req.body;
  res.json({ ok: true });
});

/* ===========================
   RISK MANAGEMENT
   =========================== */
router.get("/risk", (req, res) => {
  res.json(config.RISK_MANAGEMENT);
});

router.post("/risk", (req, res) => {
  config.RISK_MANAGEMENT = req.body;
  res.json({ ok: true });
});

/* ===========================
   PORTFOLIO
   =========================== */
router.get("/portfolio", (req, res) => {
  res.json(config.PORTFOLIO);
});

router.post("/portfolio", (req, res) => {
  config.PORTFOLIO = req.body;
  res.json({ ok: true });
});

/* ===========================
   AI
   =========================== */
router.get("/ai", (req, res) => {
  res.json(config.AI_TRADING);
});

router.post("/ai", (req, res) => {
  config.AI_TRADING = req.body;
  res.json({ ok: true });
});

/* ===========================
   BACKTESTING
   =========================== */
router.get("/backtesting", (req, res) => {
  res.json(config.BACKTESTING);
});

router.post("/backtesting", (req, res) => {
  config.BACKTESTING = req.body;
  res.json({ ok: true });
});

/* ===========================
   MOBILE API
   =========================== */
router.get("/mobile-api", (req, res) => {
  res.json(config.MOBILE_API);
});

router.post("/mobile-api", (req, res) => {
  config.MOBILE_API = req.body;
  res.json({ ok: true });
});

/* ===========================
   DASHBOARD
   =========================== */
router.get("/dashboard", (req, res) => {
  res.json(config.DASHBOARD);
});

router.post("/dashboard", (req, res) => {
  config.DASHBOARD = req.body;
  res.json({ ok: true });
});

/* ===========================
   LOGS
   =========================== */
router.get("/logging", (req, res) => {
  res.json(config.LOGGING);
});

router.post("/logging", (req, res) => {
  config.LOGGING = req.body;
  res.json({ ok: true });
});

/* ===========================
   MONITORING
   =========================== */
router.get("/monitoring", (req, res) => {
  res.json(config.MONITORING);
});

router.post("/monitoring", (req, res) => {
  config.MONITORING = req.body;
  res.json({ ok: true });
});

/* ===========================
   SECURITY
   =========================== */
router.get("/security", (req, res) => {
  res.json(config.SECURITY);
});

router.post("/security", (req, res) => {
  config.SECURITY = req.body;
  res.json({ ok: true });
});

/* ===========================
   TROUBLESHOOTING
   =========================== */
router.get("/troubleshooting", (req, res) => {
  const manualPath = path.join(__dirname, "../../Manual_Completo_del_Bot_La_Biblia.txt");
  let content = "";
  try {
    content = fs.readFileSync(manualPath, "utf8");
  } catch (e) {
    content = "Manual no encontrado.";
  }
  res.json({ manual: content });
});

module.exports = router;

---------------------------------------------------------------------------------------------------------

STRATEGIES

/**
 * Configuración completa del Bot de YageCoin Exchange CEX con IA
 */


module.exports = {
  // Configuración general
  CHECK_INTERVAL: 5000, // Intervalo de verificación en ms
  TRADING_PAIRS: ["LTC/USDT", "BNB/USDT", "XRP/USDT"], // SOLO los tres pares indicados

  // Configuración de Exchanges - SOLO BINANCE Y BYBIT HABILITADOS
  EXCHANGES: {
    BINANCE: {
      name: "Binance",
      apiKey: process.env.BINANCE_API_KEY || "",
      apiSecret: process.env.BINANCE_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.1,
        taker: 0.1,
      },
      enabled: true, // ✅ HABILITADO
    },
    COINBASE: {
      name: "Coinbase",
      apiKey: process.env.COINBASE_API_KEY || "",
      apiSecret: process.env.COINBASE_API_SECRET || "",
      passphrase: process.env.COINBASE_PASSPHRASE || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.005,
        taker: 0.005,
      },
      enabled: false, // ❌ DESHABILITADO
    },
    KRAKEN: {
      name: "Kraken",
      apiKey: process.env.KRAKEN_API_KEY || "",
      apiSecret: process.env.KRAKEN_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.0016,
        taker: 0.0026,
      },
      enabled: false, // ❌ DESHABILITADO
    },
    KUCOIN: {
      name: "Kucoin",
      apiKey: process.env.KUCOIN_API_KEY || "",
      apiSecret: process.env.KUCOIN_API_SECRET || "",
      passphrase: process.env.KUCOIN_PASSPHRASE || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.001,
        taker: 0.001,
      },
      enabled: false, // ❌ DESHABILITADO - CAMBIADO A BYBIT
    },
    BYBIT: {
      name: "Bybit",
      apiKey: process.env.BYBIT_API_KEY || "",
      apiSecret: process.env.BYBIT_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.1,
        taker: 0.1,
      },
      enabled: true, // ✅ HABILITADO - NUEVO
    },
  },

  // === NUEVO BLOQUE PARA REDES, DIRECCIONES Y MINIMOS DE DEPOSITO/RETIRO ===
  TOKEN_NETWORKS: {
    BINANCE: {
      USDT: {
        address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb",
        memo: "163771801",
        network: "TON",
        minDeposit: 0.002,
        minWithdraw: 10,
        withdrawFee: 0.20,
        withdrawToken: "USDC", // Confirmar si es USDT o USDC en TON
        note: "Depósito mínimo en TON: 0.002 USDT"
      },
      LTC: {
        address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4",
        network: "Litecoin",
        minDeposit: 0.002,
        minWithdraw: 0.002,
        withdrawFee: 0.0001,
        withdrawToken: "LTC"
      },
      BNB: {
        address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
        network: "BEP20",
        minDeposit: 0.000003,
        minWithdraw: 0.0005,
        withdrawFee: 0.00001,
        withdrawToken: "BNB"
      },
      XRP: {
        address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV",
        tag: "466152795",
        network: "XRP",
        minDeposit: 0.001,
        minWithdraw: 2,
        withdrawFee: 0.2,
        withdrawToken: "XRP"
      }
    },
    BYBIT: {
      USDT: {
        address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
        network: "TON",
        minDeposit: 0.001,
        minWithdraw: 1,
        withdrawFee: 0.3,
        withdrawToken: "USDT"
      },
      LTC: {
        address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ",
        network: "Litecoin",
        minDeposit: 0.00000001,
        minWithdraw: 0.001,
        withdrawFee: 0.0001,
        withdrawToken: "LTC"
      },
      BNB: {
        address: "0x4231d188a91481a8c3d39d444b7451436babee94",
        network: "BEP20",
        minDeposit: 0.000,
        minWithdraw: 0.0002,
        withdrawFee: 0.0002,
        withdrawToken: "BNB"
      },
      XRP: {
        address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh",
        tag: "501350199",
        network: "XRP",
        minDeposit: 0.01,
        minWithdraw: 1.2,
        withdrawFee: 0.2,
        withdrawToken: "XRP"
      }
    }
  },

// Configuración de Gestión de Riesgos
  RISK_MANAGEMENT: {
    RISK_LEVEL: "medium",
    MAX_DRAWDOWN: 0.05,
    MAX_EXPOSURE: 0.2,
    STOP_LOSS_PERCENTAGE: 0.02,
    VOLATILITY_THRESHOLD: 0.1,
    MAX_DAILY_TRADES: 100,
    MAX_CONCURRENT_TRADES: 5,
    MIN_PROFIT_THRESHOLD: 0.1,
    REBALANCE_THRESHOLD: 0.15,
    EMERGENCY_STOP_LOSS: 0.1,
    MIN_TRADE_AMOUNT: 10, // Mínimo por operación
    MAX_TRADE_AMOUNT: 10, // Máximo por operación
    MAX_SLIPPAGE: 0.1, // 0.5% de slippage máximo tolerado
    MIN_SPREAD: 0.2, // 0.2% spread mínimo para arbitrar
    EXCHANGE_RISK_SCORES: {
      Binance: 1.0,
      Bybit: 1.3,
    },
  },

  // Configuración de Portfolio
  PORTFOLIO: {
    INITIAL_BALANCE: 15, // 15 USDT por exchange
    REBALANCE_FREQUENCY: 3600000,
    TARGET_ALLOCATION: {
      Binance: 0.5,
      Bybit: 0.5,
    },
    MIN_BALANCE_PER_EXCHANGE: 15,
    RESERVE_PERCENTAGE: 0.1,
    AUTO_COMPOUND: true,
    COMPOUND_THRESHOLD: 100,
  },

  // Límites y reglas del exchange
  EXCHANGE_LIMITS: {
    BINANCE: {
      dailyWithdrawLimit: null,
      tradingLimit: null,
      countryRestrictions: null
    },
    BYBIT: {
      dailyWithdrawLimit: null,
      tradingLimit: null,
      countryRestrictions: null
    }
  },

  // Configuración de Estrategias
  STRATEGIES: {
    BASIC: {
      name: "Arbitraje Básico",
      enabled: true,
      minProfitPercentage: 0.2,
      maxInvestmentPercentage: 0.1,
      timeoutMs: 30000,
    },
    TRIANGULAR: {
      name: "Arbitraje Triangular",
      enabled: true,
      minProfitPercentage: 0.15,
      maxInvestmentPercentage: 0.08,
      timeoutMs: 45000,
      maxHops: 3,
    },
    STATISTICAL: {
      name: "Arbitraje Estadístico",
      enabled: true,
      lookbackPeriod: 100,
      zScoreThreshold: 2.0,
      meanReversionTime: 300000,
      minProfitPercentage: 0.1,
    },
    ML: {
      name: "Machine Learning",
      enabled: true,
      modelType: "random_forest",
      features: ["price_spread", "volume_ratio", "volatility", "time_of_day", "market_sentiment"],
      retrainInterval: 86400000,
      confidenceThreshold: 0.7,
    },
    COMBINED: {
      name: "Estrategia Combinada",
      enabled: true,
      strategies: ["BASIC", "TRIANGULAR", "STATISTICAL"],
      votingThreshold: 2,
      weightings: {
        BASIC: 0.4,
        TRIANGULAR: 0.3,
        STATISTICAL: 0.3,
      },
    },
  },

  // Configuración de IA y Machine Learning
  AI_TRADING: {
    ENABLED: true,
    MODEL_PATH: "./models/",
    TRAINING_DATA_DAYS: 30,
    PREDICTION_HORIZON: 300000,
    FEATURES: {
      TECHNICAL_INDICATORS: true,
      MARKET_SENTIMENT: true,
      ORDER_BOOK_ANALYSIS: true,
      VOLUME_ANALYSIS: true,
      CORRELATION_ANALYSIS: true,
    },
    MODELS: {
      PRICE_PREDICTION: {
        type: "lstm",
        layers: [50, 50, 25],
        epochs: 100,
        batchSize: 32,
      },
      OPPORTUNITY_SCORING: {
        type: "random_forest",
        nEstimators: 100,
        maxDepth: 10,
      },
      RISK_ASSESSMENT: {
        type: "gradient_boosting",
        nEstimators: 50,
        learningRate: 0.1,
      },
      AI_TRADING: {
        ENABLED: false,
        MODE: "ml", // O "heuristic"
        MODEL_PATH: "./models", // Debe existir esta carpeta y el modelo .json/.bin
    // otros parámetros...
      },
      AI_TRADING: {
      ENABLED: true,
      MODE: "heuristic", // <<< SOLO HEURÍSTICO
      MODEL_PATH: "./models"
      },
    },
    AUTO_RETRAIN: true,
    RETRAIN_THRESHOLD: 0.05,
    SENTIMENT_SOURCES: ["twitter", "reddit", "news", "fear_greed_index"],
  },
  

  // Configuración de Backtesting
  BACKTESTING: {
    ENABLED: true,
    DATA_SOURCE: "historical_api",
    DEFAULT_PERIOD: 30,
    COMMISSION_RATE: 0.001,
    SLIPPAGE_RATE: 0.0005,
    INITIAL_CAPITAL: 10000,
    BENCHMARK: "BTC",
    METRICS: ["total_return", "sharpe_ratio", "max_drawdown", "win_rate", "profit_factor", "calmar_ratio"],
    MONTE_CARLO_SIMULATIONS: 1000,
    CONFIDENCE_INTERVALS: [0.95, 0.99],
  },

  // *** CONFIGURACIÓN DE ALERTAS COMPLETAS ***
  ALERTS: {
    ENABLED: true,
    CHANNELS: {
      EMAIL: {
        enabled: process.env.EMAIL_ENABLED === "true",
        smtp: {
          host: process.env.EMAIL_SERVICE === "gmail" ? "smtp.gmail.com" : "smtp.gmail.com",
          port: 587,
          secure: false,
          auth: {
            user: process.env.EMAIL_USER || "",
            pass: process.env.EMAIL_PASS || "",
          },
        },
        from: process.env.EMAIL_USER || "bot@arbitrage.com",
        to: process.env.EMAIL_TO || "admin@arbitrage.com",
      },
      TELEGRAM: {
        enabled: true,
        botToken: process.env.TELEGRAM_BOT_TOKEN || "",
        chatId: process.env.TELEGRAM_CHAT_ID || "",
        parseMode: "HTML",
      },
      DISCORD: {
        enabled: false,
        webhookUrl: process.env.DISCORD_WEBHOOK_URL || "",
      },
      SLACK: {
        enabled: false,
        webhookUrl: process.env.SLACK_WEBHOOK_URL || "",
      },
    },
    ALERT_TYPES: {
      // *** ALERTAS DE SISTEMA ***
      BOT_STARTED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "medium",
      },
      BOT_STOPPED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      SYSTEM_ERROR: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "critical",
      },
      CONNECTION_ERROR: {
        enabled: true,
        channels: ["telegram"],
        priority: "high",
      },

      // *** ALERTAS DE TRADING ***
      TRADE_EXECUTED: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      TRADE_FAILED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      OPPORTUNITY_FOUND: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      PAIR_ANALYSIS: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },

      // *** ALERTAS DE BALANCE ***
      BALANCE_UPDATE: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      LOW_BALANCE: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      BALANCE_REBALANCED: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },

      // *** ALERTAS DE GANANCIAS ***
      PROFIT_MILESTONE: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
        milestones: [50, 100, 250, 500, 1000], // USD
      },
      DAILY_PROFIT: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },

      // *** ALERTAS DE RIESGO ***
      RISK_WARNING: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      HIGH_VOLATILITY: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      STOP_LOSS_TRIGGERED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "critical",
      },

      // *** ALERTAS PERIÓDICAS ***
      HOURLY_SUMMARY: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      DAILY_SUMMARY: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "medium",
        time: "23:59",
      },
      WEEKLY_SUMMARY: {
        enabled: true,
        channels: ["email"],
        priority: "medium",
      },

      // *** ALERTAS GENERALES ***
      INFO: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      WARNING: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      ERROR: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
    },
  },

  // Configuración de API Móvil
  MOBILE_API: {
    ENABLED: false,
    PORT: process.env.MOBILE_API_PORT || 8426,
    JWT_SECRET: process.env.JWT_SECRET || "your-secret-key",
    JWT_EXPIRY: "24h",
    RATE_LIMIT: {
      windowMs: 15 * 60 * 1000,
      max: 100,
    },
    CORS: {
      origin: process.env.MOBILE_APP_URL || "*",
      credentials: true,
    },
    ENDPOINTS: {
      STATUS: "/api/mobile/status",
      TRADES: "/api/mobile/trades",
      PORTFOLIO: "/api/mobile/portfolio",
      ALERTS: "/api/mobile/alerts",
      SETTINGS: "/api/mobile/settings",
    },
    PUSH_NOTIFICATIONS: {
      enabled: true,
      fcmServerKey: process.env.FCM_SERVER_KEY || "",
      topics: ["trades", "alerts", "system"],
    },
  },

  // Configuración de Base de Datos
  DATABASE: {
    TYPE: "mongodb",
    URL: process.env.DATABASE_URL || "mongodb://localhost:27017/arbitrage_bot",
    OPTIONS: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    },
    COLLECTIONS: {
      TRADES: "trades",
      BALANCES: "balances",
      PRICES: "prices",
      ALERTS: "alerts",
      SETTINGS: "settings",
      ML_MODELS: "ml_models",
    },
  },

  // Configuración de Logging
  LOGGING: {
    LEVEL: process.env.LOG_LEVEL || "info",
    FILE: {
      enabled: true,
      path: "./logs/",
      maxSize: "10m",
      maxFiles: 5,
      datePattern: "YYYY-MM-DD",
    },
    CONSOLE: {
      enabled: true,
      colorize: true,
      timestamp: true,
    },
    REMOTE: {
      enabled: false,
      endpoint: process.env.LOG_ENDPOINT || "",
      apiKey: process.env.LOG_API_KEY || "",
    },
  },

  // Configuración de Seguridad
  SECURITY: {
    API_ENCRYPTION: true,
    ENCRYPTION_KEY: process.env.ENCRYPTION_KEY || "your-encryption-key",
    TWO_FACTOR_AUTH: {
      enabled: false,
      secret: process.env.TOTP_SECRET || "",
    },
    IP_WHITELIST: process.env.IP_WHITELIST ? process.env.IP_WHITELIST.split(",") : [],
    MAX_LOGIN_ATTEMPTS: 5,
    LOCKOUT_DURATION: 300000,
    SESSION_TIMEOUT: 3600000,
  },

  // Configuración de Performance
  PERFORMANCE: {
    MAX_MEMORY_USAGE: 512,
    CPU_THRESHOLD: 80,
    GARBAGE_COLLECTION: {
      enabled: true,
      interval: 300000,
    },
    CACHE: {
      enabled: true,
      ttl: 60000,
      maxSize: 1000,
    },
    COMPRESSION: {
      enabled: true,
      level: 6,
    },
  },

  // Configuración de Desarrollo
  DEVELOPMENT: {
    DEBUG_MODE: process.env.NODE_ENV === "development",
    MOCK_EXCHANGES: process.env.MOCK_EXCHANGES === "true",
    SIMULATION_ONLY: process.env.SIMULATION_ONLY === "true",
    HOT_RELOAD: true,
    PROFILING: {
      enabled: false,
      interval: 60000,
    },
  },
}
// Config.js

---------------------------------------------------------------------------------------------------------

/**
 * Módulo de gestión avanzada de riesgos para el bot de arbitraje
 */
const EventEmitter = require('events')

class AdvancedRiskManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.riskLevel = config.RISK_MANAGEMENT.RISK_LEVEL || 'medium';
        this.maxDrawdown = config.RISK_MANAGEMENT.MAX_DRAWDOWN || 0.05;
        this.maxExposure = config.RISK_MANAGEMENT.MAX_EXPOSURE || 0.2;
        this.stopLossPercentage = config.RISK_MANAGEMENT.STOP_LOSS_PERCENTAGE || 0.02;
        this.volatilityThreshold = config.RISK_MANAGEMENT.VOLATILITY_THRESHOLD || 0.1;
        this.exchangeRiskScores = config.RISK_MANAGEMENT.EXCHANGE_RISK_SCORES || {
            'Binance': 1,
            'Coinbase': 1,
            'Kraken': 1.2,
            'Kucoin': 1.5
        };
        
        this.portfolioValue = 0;
        this.initialPortfolioValue = 0;
        this.maxPortfolioValue = 0;
        this.currentDrawdown = 0;
        this.riskAnalysis = {
            marketVolatility: 0,
            exchangeRisk: 0,
            liquidityRisk: 0,
            overallRisk: 0
        };
        
        this.logger = console;
    }
    
    /**
     * Inicializa el gestor de riesgos con los balances actuales
     * @param {Object} balances - Balances por exchange
     */
    initialize(balances) {
        this.portfolioValue = this.calculatePortfolioValue(balances);
        this.initialPortfolioValue = this.portfolioValue;
        this.maxPortfolioValue = this.portfolioValue;
        this.logger.info(`Risk Manager inicializado con portfolio: $${this.portfolioValue.toFixed(2)}`);
    }
    
    /**
     * Calcula el valor total del portfolio
     * @param {Object} balances - Balances por exchange
     * @returns {number} - Valor total del portfolio
     */
    calculatePortfolioValue(balances) {
        let total = 0;
        for (const exchange in balances) {
            total += balances[exchange];
        }
        return total;
    }
    
    /**
     * Actualiza el análisis de riesgo basado en las condiciones actuales
     * @param {Object} marketData - Datos del mercado
     * @param {Object} balances - Balances por exchange
     */
    updateRiskAnalysis(marketData, balances) {
        // Actualizar valor del portfolio
        this.portfolioValue = this.calculatePortfolioValue(balances);
        
        // Actualizar máximo valor del portfolio
        if (this.portfolioValue > this.maxPortfolioValue) {
            this.maxPortfolioValue = this.portfolioValue;
        }
        
        // Calcular drawdown actual
        this.currentDrawdown = (this.maxPortfolioValue - this.portfolioValue) / this.maxPortfolioValue;
        
        // Calcular volatilidad del mercado (simulado)
        const marketVolatility = this.calculateMarketVolatility(marketData);
        
        // Calcular riesgo de exchange
        const exchangeRisk = this.calculateExchangeRisk(balances);
        
        // Calcular riesgo de liquidez
        const liquidityRisk = this.calculateLiquidityRisk(marketData);
        
        // Calcular riesgo total
        const overallRisk = (marketVolatility + exchangeRisk + liquidityRisk) / 3;
        
        this.riskAnalysis = {
            marketVolatility,
            exchangeRisk,
            liquidityRisk,
            overallRisk
        };
        
        return this.riskAnalysis;
    }
    
    /**
     * Calcula la volatilidad del mercado
     * @param {Object} marketData - Datos del mercado
     * @returns {number} - Porcentaje de volatilidad (0-100)
     */
    calculateMarketVolatility(marketData) {
        // Simulación de cálculo de volatilidad
        // En una implementación real, se calcularía la desviación estándar de los precios
        if (!marketData || !marketData.volatility) {
            return Math.random() * 30 + 10; // Valor aleatorio entre 10 y 40
        }
        
        return marketData.volatility * 100;
    }
    
    /**
     * Calcula el riesgo asociado a los exchanges
     * @param {Object} balances - Balances por exchange
     * @returns {number} - Porcentaje de riesgo (0-100)
     */
    calculateExchangeRisk(balances) {
        if (!balances) return 30; // Valor por defecto
        
        let totalRisk = 0;
        let totalBalance = 0;
        
        for (const exchange in balances) {
            const balance = balances[exchange];
            const riskScore = this.exchangeRiskScores[exchange] || 1;
            
            totalRisk += balance * riskScore;
            totalBalance += balance;
        }
        
        // Normalizar a un porcentaje (0-100)
        return totalBalance > 0 ? (totalRisk / totalBalance) * 25 : 30;
    }
    
    /**
     * Calcula el riesgo de liquidez
     * @param {Object} marketData - Datos del mercado
     * @returns {number} - Porcentaje de riesgo (0-100)
     */
    calculateLiquidityRisk(marketData) {
        // Simulación de cálculo de riesgo de liquidez
        // En una implementación real, se analizarían los libros de órdenes
        if (!marketData || !marketData.liquidityScore) {
            return Math.random() * 40 + 20; // Valor aleatorio entre 20 y 60
        }
        
        return (1 - marketData.liquidityScore) * 100;
    }
    
    /**
     * Evalúa si una oportunidad de arbitraje cumple con los criterios de riesgo
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {Object} balances - Balances por exchange
     * @returns {boolean} - True si la oportunidad es aceptable
     */
    evaluateOpportunity(opportunity, balances) {
        // Verificar si estamos en drawdown máximo
        if (this.currentDrawdown >= this.maxDrawdown) {
            this.logger.warn(`Oportunidad rechazada: Drawdown máximo alcanzado (${(this.currentDrawdown * 100).toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si la exposición es demasiado alta
        const exposureAmount = opportunity.investmentAmount;
        const exposurePercentage = exposureAmount / this.portfolioValue;
        
        if (exposurePercentage > this.maxExposure) {
            this.logger.warn(`Oportunidad rechazada: Exposición demasiado alta (${(exposurePercentage * 100).toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si la volatilidad del mercado es demasiado alta
        if (this.riskAnalysis.marketVolatility > this.volatilityThreshold * 100) {
            this.logger.warn(`Oportunidad rechazada: Volatilidad del mercado demasiado alta (${this.riskAnalysis.marketVolatility.toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si el riesgo total es aceptable según el nivel de riesgo configurado
        const riskThreshold = this.getRiskThreshold();
        if (this.riskAnalysis.overallRisk > riskThreshold) {
            this.logger.warn(`Oportunidad rechazada: Riesgo total demasiado alto (${this.riskAnalysis.overallRisk.toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si hay suficiente balance en los exchanges involucrados
        for (const exchange of opportunity.exchanges) {
            if (!balances[exchange] || balances[exchange] < opportunity.minRequiredBalance) {
                this.logger.warn(`Oportunidad rechazada: Balance insuficiente en ${exchange}`);
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Obtiene el umbral de riesgo según el nivel configurado
     * @returns {number} - Umbral de riesgo (0-100)
     */
    getRiskThreshold() {
        switch (this.riskLevel) {
            case 'low':
                return 30;
            case 'medium':
                return 50;
            case 'high':
                return 70;
            default:
                return 50;
        }
    }
    
    /**
     * Actualiza la configuración de riesgo
     * @param {Object} settings - Nuevas configuraciones
     */
    updateSettings(settings) {
        if (settings.riskLevel) {
            this.riskLevel = settings.riskLevel;
        }
        
        if (settings.maxDrawdown) {
            this.maxDrawdown = settings.maxDrawdown;
        }
        
        if (settings.maxExposure) {
            this.maxExposure = settings.maxExposure;
        }
        
        if (settings.stopLossPercentage) {
            this.stopLossPercentage = settings.stopLossPercentage;
        }
        
        if (settings.volatilityThreshold) {
            this.volatilityThreshold = settings.volatilityThreshold;
        }
        
        this.logger.info(`Configuración de riesgo actualizada: ${JSON.stringify({
            riskLevel: this.riskLevel,
            maxDrawdown: this.maxDrawdown,
            maxExposure: this.maxExposure,
            stopLossPercentage: this.stopLossPercentage,
            volatilityThreshold: this.volatilityThreshold
        })}`);
    }
    
    /**
     * Implementa un sistema de reequilibrio de fondos entre exchanges
     * @param {Object} balances - Balances actuales por exchange
     * @param {Object} exchangeManager - Gestor de exchanges para realizar transferencias
     * @returns {Object} - Resultado del reequilibrio
     */
    rebalanceFunds(balances, exchangeManager) {
        this.logger.info('Iniciando reequilibrio de fondos entre exchanges...');
        
        // Calcular el balance total y el balance promedio objetivo
        const totalBalance = this.calculatePortfolioValue(balances);
        const exchangeCount = Object.keys(balances).length;
        const targetBalance = totalBalance / exchangeCount;
        
        this.logger.info(`Balance total: $${totalBalance.toFixed(2)}, Balance objetivo por exchange: $${targetBalance.toFixed(2)}`);
        
        // Identificar exchanges con exceso y déficit de fondos
        const excessExchanges = [];
        const deficitExchanges = [];
        
        for (const exchange in balances) {
            const balance = balances[exchange];
            const difference = balance - targetBalance;
            
            // Usar un margen del 5% para evitar transferencias innecesarias
            if (difference > targetBalance * 0.05) {
                excessExchanges.push({
                    exchange,
                    balance,
                    excess: difference
                });
            } else if (difference < -targetBalance * 0.05) {
                deficitExchanges.push({
                    exchange,
                    balance,
                    deficit: -difference
                });
            }
        }
        
        // Ordenar por exceso/déficit (de mayor a menor)
        excessExchanges.sort((a, b) => b.excess - a.excess);
        deficitExchanges.sort((a, b) => b.deficit - a.deficit);
        
        // Realizar transferencias
        const transfers = [];
        let totalTransferred = 0;
        
        for (const deficitExchange of deficitExchanges) {
            let remainingDeficit = deficitExchange.deficit;
            
            for (let i = 0; i < excessExchanges.length && remainingDeficit > 0; i++) {
                const excessExchange = excessExchanges[i];
                
                if (excessExchange.excess <= 0) continue;
                
                const transferAmount = Math.min(excessExchange.excess, remainingDeficit);
                
                if (transferAmount > 0) {
                    // En una implementación real, aquí se llamaría a exchangeManager.transfer()
                    this.logger.info(`Transfiriendo $${transferAmount.toFixed(2)} de ${excessExchange.exchange} a ${deficitExchange.exchange}`);
                    
                    // Registrar la transferencia
                    transfers.push({
                        from: excessExchange.exchange,
                        to: deficitExchange.exchange,
                        amount: transferAmount
                    });
                    
                    // Actualizar los balances simulados
                    excessExchange.excess -= transferAmount;
                    remainingDeficit -= transferAmount;
                    totalTransferred += transferAmount;
                }
            }
        }
        
        this.logger.info(`Reequilibrio completado. Total transferido: $${totalTransferred.toFixed(2)}`);
        
        return {
            success: true,
            transfers,
            totalTransferred
        };
    }
    
    /**
     * Obtiene el análisis de riesgo actual
     * @returns {Object} - Análisis de riesgo
     */
    getRiskAnalysis() {
        return this.riskAnalysis;
    }
}

module.exports = AdvancedRiskManager;

--------------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');

/**
 * Gestor de Estrategias
 * Maneja múltiples estrategias de arbitraje y su selección
 */
class StrategyManager {
  constructor() {
    this.config = config;
    this.activeStrategy = 'BASIC';
        this.strategyInstances = {};
        this.strategyPerformance = {};
        this.strategyHistory = [];
        
        this.logger = console;
    }
    
    /**
     * Inicializa el gestor de estrategias
     */
    initialize() {
        this.logger.info('Inicializando Strategy Manager...');
        
        try {
            // Inicializar instancias de estrategias
            this.initializeStrategies();
            
            // Inicializar métricas de rendimiento
            this.initializePerformanceMetrics();
            
            this.logger.info('Strategy Manager inicializado correctamente');
            this.logger.info(`Estrategia activa: ${this.activeStrategy}`);
        } catch (error) {
            this.logger.error('Error inicializando Strategy Manager:', error);
            throw error;
        }
    }
    
    /**
     * Inicializa las instancias de estrategias
     */
    initializeStrategies() {
        for (const strategyName in this.strategies) {
            const strategyConfig = this.strategies[strategyName];
            
            if (strategyConfig.enabled) {
                this.strategyInstances[strategyName] = new Strategy(strategyName, strategyConfig);
                this.logger.info(`Estrategia ${strategyName} inicializada`);
            }
        }
    }
    
    /**
     * Inicializa las métricas de rendimiento
     */
    initializePerformanceMetrics() {
        for (const strategyName in this.strategyInstances) {
            this.strategyPerformance[strategyName] = {
                totalOpportunities: 0,
                executedTrades: 0,
                successfulTrades: 0,
                failedTrades: 0,
                totalProfit: 0,
                averageProfit: 0,
                winRate: 0,
                averageExecutionTime: 0,
                lastUsed: null,
                score: 0
            };
        }
    }
    
    /**
     * Busca oportunidades de arbitraje básico
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findBasicArbitrage(prices, pair) {
        const strategy = this.strategyInstances['BASIC'];
        if (!strategy) return [];
        
        const opportunities = [];
        const exchanges = Object.keys(prices);
        
        if (exchanges.length < 2) return opportunities;
        
        // Encontrar el precio más bajo y más alto
        let lowestPrice = Infinity;
        let highestPrice = -Infinity;
        let buyExchange = null;
        let sellExchange = null;
        
        for (const exchange of exchanges) {
            const price = prices[exchange];
            
            if (price < lowestPrice) {
                lowestPrice = price;
                buyExchange = exchange;
            }
            
            if (price > highestPrice) {
                highestPrice = price;
                sellExchange = exchange;
            }
        }
        
        // Calcular ganancia potencial
        const profitPercentage = ((highestPrice - lowestPrice) / lowestPrice) * 100;
        
        // Verificar si cumple con el mínimo requerido
        if (profitPercentage >= strategy.config.minProfitPercentage && buyExchange !== sellExchange) {
            opportunities.push({
                type: 'basic',
                strategy: 'BASIC',
                pair,
                exchanges: [buyExchange, sellExchange],
                buyExchange,
                sellExchange,
                buyPrice: lowestPrice,
                sellPrice: highestPrice,
                profitPercentage,
                investmentAmount: this.calculateInvestmentAmount('BASIC', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('BASIC', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['BASIC'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje triangular
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findTriangularArbitrage(prices, pair) {
        const strategy = this.strategyInstances['TRIANGULAR'];
        if (!strategy) return [];
        
        const opportunities = [];
        
        // En una implementación real, aquí buscaríamos oportunidades triangulares
        // Para esta implementación, simularemos algunas oportunidades
        
        if (Math.random() < 0.03) { // 3% de probabilidad
            const exchanges = Object.keys(prices);
            if (exchanges.length === 0) return opportunities;
            
            const exchange = exchanges[Math.floor(Math.random() * exchanges.length)];
            const profitPercentage = strategy.config.minProfitPercentage + Math.random() * 0.5;
            
            // Simular ruta triangular
            const baseCurrency = pair.split('/')[1]; // USDT
            const quoteCurrency = pair.split('/')[0]; // BTC
            const intermediateCurrency = 'ETH'; // Moneda intermedia
            
            opportunities.push({
                type: 'triangular',
                strategy: 'TRIANGULAR',
                pair,
                exchange,
                route: [
                    { pair: `${baseCurrency}/${intermediateCurrency}`, action: 'buy' },
                    { pair: `${quoteCurrency}/${intermediateCurrency}`, action: 'sell' },
                    { pair: pair, action: 'sell' }
                ],
                profitPercentage,
                investmentAmount: this.calculateInvestmentAmount('TRIANGULAR', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('TRIANGULAR', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['TRIANGULAR'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje estadístico
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findStatisticalArbitrage(prices, pair) {
        const strategy = this.strategyInstances['STATISTICAL'];
        if (!strategy) return [];
        
        const opportunities = [];
        
        // En una implementación real, aquí analizaríamos patrones estadísticos
        // Para esta implementación, simularemos algunas oportunidades
        
        if (Math.random() < 0.02) { // 2% de probabilidad
            const exchanges = Object.keys(prices);
            if (exchanges.length < 2) return opportunities;
            
            const exchange1 = exchanges[Math.floor(Math.random() * exchanges.length)];
            let exchange2 = exchanges[Math.floor(Math.random() * exchanges.length)];
            while (exchange2 === exchange1 && exchanges.length > 1) {
                exchange2 = exchanges[Math.floor(Math.random() * exchanges.length)];
            }
            
            const profitPercentage = strategy.config.minProfitPercentage + Math.random() * 0.3;
            const zScore = strategy.config.zScoreThreshold + Math.random();
            
            opportunities.push({
                type: 'statistical',
                strategy: 'STATISTICAL',
                pair,
                exchanges: [exchange1, exchange2],
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[exchange1],
                sellPrice: prices[exchange2],
                profitPercentage,
                zScore,
                meanReversion: true,
                investmentAmount: this.calculateInvestmentAmount('STATISTICAL', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('STATISTICAL', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['STATISTICAL'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Calcula la cantidad de inversión para una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {number} profitPercentage - Porcentaje de ganancia esperada
     * @returns {number} - Cantidad de inversión
     */
    calculateInvestmentAmount(strategyName, profitPercentage) {
        const strategy = this.strategies[strategyName];
        if (!strategy) return 100; // Valor por defecto
        
        const maxInvestmentPercentage = strategy.maxInvestmentPercentage || 0.1;
        const baseAmount = 1000; // Balance base simulado
        
        // Ajustar inversión según la ganancia esperada
        let investmentMultiplier = 1;
        if (profitPercentage > 1.0) {
            investmentMultiplier = 1.5;
        } else if (profitPercentage > 0.5) {
            investmentMultiplier = 1.2;
        }
        
        return baseAmount * maxInvestmentPercentage * investmentMultiplier;
    }
    
    /**
     * Calcula la confianza en una oportunidad
     * @param {string} strategyName - Nombre de la estrategia
     * @param {number} profitPercentage - Porcentaje de ganancia esperada
     * @returns {number} - Nivel de confianza (0-1)
     */
    calculateConfidence(strategyName, profitPercentage) {
        const strategy = this.strategies[strategyName];
        if (!strategy) return 0.5;
        
        const minProfit = strategy.minProfitPercentage || 0.1;
        
        // Confianza base según la estrategia
        let baseConfidence;
        switch (strategyName) {
            case 'BASIC':
                baseConfidence = 0.8;
                break;
            case 'TRIANGULAR':
                baseConfidence = 0.7;
                break;
            case 'STATISTICAL':
                baseConfidence = 0.6;
                break;
            case 'ML':
                baseConfidence = 0.9;
                break;
            default:
                baseConfidence = 0.5;
        }
        
        // Ajustar confianza según la ganancia
        const profitMultiplier = Math.min(profitPercentage / minProfit, 3);
        const confidence = Math.min(baseConfidence * profitMultiplier, 1.0);
        
        return confidence;
    }
    
    /**
     * Establece la estrategia activa
     * @param {string} strategyName - Nombre de la estrategia
     */
    setActiveStrategy(strategyName) {
        if (!this.strategyInstances[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no disponible`);
        }
        
        const previousStrategy = this.activeStrategy;
        this.activeStrategy = strategyName;
        
        // Registrar cambio de estrategia
        this.strategyHistory.push({
            timestamp: new Date(),
            previousStrategy,
            newStrategy: strategyName,
            reason: 'Manual'
        });
        
        // Mantener solo los últimos 100 cambios
        if (this.strategyHistory.length > 100) {
            this.strategyHistory.shift();
        }
        
        this.emit('strategyChanged', {
            previousStrategy,
            newStrategy: strategyName
        });
        
        this.logger.info(`Estrategia cambiada de ${previousStrategy} a ${strategyName}`);
    }
    
    /**
     * Actualiza las métricas de rendimiento de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} tradeResult - Resultado de la operación
     */
    updateStrategyPerformance(strategyName, tradeResult) {
        if (!this.strategyPerformance[strategyName]) {
            return;
        }
        
        const performance = this.strategyPerformance[strategyName];
        
        performance.executedTrades++;
        performance.lastUsed = new Date();
        
        if (tradeResult.success) {
            performance.successfulTrades++;
            performance.totalProfit += tradeResult.profit;
        } else {
            performance.failedTrades++;
        }
        
        // Calcular métricas derivadas
        performance.winRate = performance.successfulTrades / performance.executedTrades;
        performance.averageProfit = performance.totalProfit / performance.executedTrades;
        
        // Calcular puntuación de la estrategia
        performance.score = this.calculateStrategyScore(strategyName);
        
        this.logger.info(`Rendimiento actualizado para ${strategyName}: Win Rate: ${(performance.winRate * 100).toFixed(2)}%`);
    }
    
    /**
     * Calcula la puntuación de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @returns {number} - Puntuación de la estrategia (0-100)
     */
    calculateStrategyScore(strategyName) {
        const performance = this.strategyPerformance[strategyName];
        if (!performance || performance.executedTrades === 0) {
            return 50; // Puntuación neutral
        }
        
        // Factores para la puntuación
        const winRateWeight = 0.4;
        const profitWeight = 0.3;
        const opportunityWeight = 0.2;
        const recentUsageWeight = 0.1;
        
        // Normalizar win rate (0-100)
        const winRateScore = performance.winRate * 100;
        
        // Normalizar ganancia promedio (0-100)
        const profitScore = Math.min(Math.max(performance.averageProfit * 10, 0), 100);
        
        // Normalizar oportunidades (0-100)
        const maxOpportunities = Math.max(...Object.values(this.strategyPerformance).map(p => p.totalOpportunities));
        const opportunityScore = maxOpportunities > 0 ? (performance.totalOpportunities / maxOpportunities) * 100 : 50;
        
        // Puntuación por uso reciente (0-100)
        const daysSinceLastUse = performance.lastUsed ? 
            (Date.now() - performance.lastUsed.getTime()) / (1000 * 60 * 60 * 24) : 30;
        const recentUsageScore = Math.max(100 - daysSinceLastUse * 3, 0);
        
        // Calcular puntuación final
        const score = (
            winRateScore * winRateWeight +
            profitScore * profitWeight +
            opportunityScore * opportunityWeight +
            recentUsageScore * recentUsageWeight
        );
        
        return Math.round(score);
    }
    
    /**
     * Recomienda la mejor estrategia basada en el rendimiento
     * @returns {string} - Nombre de la estrategia recomendada
     */
    recommendBestStrategy() {
        let bestStrategy = this.activeStrategy;
        let bestScore = 0;
        
        for (const strategyName in this.strategyPerformance) {
            const score = this.strategyPerformance[strategyName].score;
            
            if (score > bestScore) {
                bestScore = score;
                bestStrategy = strategyName;
            }
        }
        
        return bestStrategy;
    }
    
    /**
     * Obtiene estadísticas de todas las estrategias
     * @returns {Object} - Estadísticas de estrategias
     */
    getStrategyStatistics() {
        const stats = {
            activeStrategy: this.activeStrategy,
            totalStrategies: Object.keys(this.strategyInstances).length,
            performance: { ...this.strategyPerformance },
            recommendations: {
                bestStrategy: this.recommendBestStrategy(),
                worstStrategy: this.getWorstStrategy()
            },
            recentChanges: this.strategyHistory.slice(-10)
        };
        
        return stats;
    }
    
    /**
     * Obtiene la estrategia con peor rendimiento
     * @returns {string} - Nombre de la estrategia con peor rendimiento
     */
    getWorstStrategy() {
        let worstStrategy = this.activeStrategy;
        let worstScore = 100;
        
        for (const strategyName in this.strategyPerformance) {
            const score = this.strategyPerformance[strategyName].score;
            
            if (score < worstScore) {
                worstScore = score;
                worstStrategy = strategyName;
            }
        }
        
        return worstStrategy;
    }
    
    /**
     * Habilita o deshabilita una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {boolean} enabled - Estado de habilitación
     */
    setStrategyEnabled(strategyName, enabled) {
        if (!this.strategies[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no existe`);
        }
        
        this.strategies[strategyName].enabled = enabled;
        
        if (enabled && !this.strategyInstances[strategyName]) {
            // Inicializar estrategia si se habilita
            this.strategyInstances[strategyName] = new Strategy(strategyName, this.strategies[strategyName]);
            this.initializePerformanceMetrics();
        } else if (!enabled && this.strategyInstances[strategyName]) {
            // Remover estrategia si se deshabilita
            delete this.strategyInstances[strategyName];
            
            // Si era la estrategia activa, cambiar a otra
            if (this.activeStrategy === strategyName) {
                const availableStrategies = Object.keys(this.strategyInstances);
                if (availableStrategies.length > 0) {
                    this.setActiveStrategy(availableStrategies[0]);
                }
            }
        }
        
        this.logger.info(`Estrategia ${strategyName} ${enabled ? 'habilitada' : 'deshabilitada'}`);
    }
    
    /**
     * Obtiene la configuración de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @returns {Object} - Configuración de la estrategia
     */
    getStrategyConfig(strategyName) {
        return this.strategies[strategyName] || null;
    }
    
    /**
     * Actualiza la configuración de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} newConfig - Nueva configuración
     */
    updateStrategyConfig(strategyName, newConfig) {
        if (!this.strategies[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no existe`);
        }
        
        this.strategies[strategyName] = { ...this.strategies[strategyName], ...newConfig };
        
        // Actualizar instancia si existe
        if (this.strategyInstances[strategyName]) {
            this.strategyInstances[strategyName].updateConfig(newConfig);
        }
        
        this.logger.info(`Configuración de estrategia ${strategyName} actualizada`);
    }
}

/**
 * Clase Strategy
 * Representa una estrategia individual
 */
class Strategy {
    constructor(name, config) {
        this.name = name;
        this.config = config;
        this.isActive = false;
        this.lastExecution = null;
    }
    
    /**
     * Actualiza la configuración de la estrategia
     * @param {Object} newConfig - Nueva configuración
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    
    /**
     * Ejecuta la estrategia
     * @param {Object} marketData - Datos del mercado
     * @returns {Array} - Oportunidades encontradas
     */
    execute(marketData) {
        this.lastExecution = new Date();
        // Implementación específica de cada estrategia
        return [];
    }
}
module.exports = StrategyManager

---------------------------------------------------------------------------------------------------------

UTILS

/*
  Lógica avanzada del bot:

  1. Para cada par/token:
      - Verifica si está habilitado y si la red está activa.
      - Solo opera si hay suficiente volumen (min_trade, max_trade).
      - Calcula el spread actual y compara con min_spread configurado.
      - Calcula el slippage estimado y compara con max_slippage.
      - Suma todos los fees (trading + retiro en ambos exchanges).
      - Solo ejecuta la operación si la ganancia neta (spread - fees - slippage) es positiva.
      - Si algún parámetro está fuera del rango recomendado, loguea advertencia.
      - Revisa cada 12h la configuración y el estado de cada token (puede ser con un cron que actualice el estado y muestre en frontend).
*/

#----------botlogic-------------

------------------------------------------------------------------------------------------------------

async function getPairVolume(pair, exchange) {
  let url;
  let symbol;

  // Formato de símbolo según exchange
  if (exchange === "BINANCE") {
    symbol = pair.replace("/", "");
    url = `https://api.binance.com/api/v3/ticker/24hr?symbol=${symbol}`;
  } else if (exchange === "BYBIT") {
    // Bybit usa guión bajo y mayúsculas para spot, y símbolo especial para derivados
    symbol = pair.replace("/", "");
    // API spot Bybit (https://api.bybit.com/v5/market/tickers?category=spot&symbol=BTCUSDT)
    url = `https://api.bybit.com/v5/market/tickers?category=spot&symbol=${symbol}`;
  } else {
    throw new Error("Exchange no soportado");
  }

  const res = await fetch(url);
  if (!res.ok) throw new Error(`Error consultando ${exchange}: ${res.statusText}`);
  const data = await res.json();

  if (exchange === "BINANCE") {
    return parseFloat(data.quoteVolume); // en USDT
  }

  if (exchange === "BYBIT") {
    // Bybit responde en: data.result.list[0].quoteVolume
    if (
      data &&
      data.result &&
      Array.isArray(data.result.list) &&
      data.result.list.length > 0
    ) {
      return parseFloat(data.result.list[0].quoteVolume);
    } else {
      throw new Error("No se pudo obtener el volumen para " + pair + " en Bybit");
    }
  }
}

// Ejemplo de uso:
// const volBinance = await getPairVolume("BTC/USDT", "BINANCE");
// const volBybit = await getPairVolume("BTC/USDT", "BYBIT");

#------utils-------------------

---------------------------------------------------------------------------------------------------
const axios = require("axios");

async function getBinanceSpotPairsUSDT() {
  const url = "https://api.binance.com/api/v3/exchangeInfo";
  const res = await axios.get(url);
  return res.data.symbols
    .filter(s => s.quoteAsset === "USDT" && s.status === "TRADING" && s.isSpotTradingAllowed)
    .map(s => s.symbol);
}

async function getBybitSpotPairsUSDT() {
  const url = "https://api.bybit.com/v5/market/instruments-info?category=spot";
  const res = await axios.get(url);
  return res.data.result.list
    .filter(s => s.quoteCoin === "USDT" && s.status === "Trading")
    .map(s => s.symbol);
}

async function main() {
  const [binancePairs, bybitPairs] = await Promise.all([
    getBinanceSpotPairsUSDT(),
    getBybitSpotPairsUSDT()
  ]);

  // Solo los pares que existen en ambos exchanges
  const binanceSet = new Set(binancePairs);
  const bybitSet = new Set(bybitPairs);

  const arbitrable = [...binanceSet].filter(pair => bybitSet.has(pair));

  console.log("Pares arbitrables entre Binance y Bybit con USDT:");
  arbitrable.sort().forEach(pair => console.log(pair));
}

main().catch(console.error);
-------------------------------------------------------------------------------------------------------
const EventEmitter = require("events")
const ExchangeManager = require("./src/exchanges/exchange-manager")
const AlertManager = require("./src/alerts/alert-manager")

/**
 * Bot de Arbitraje para Exchanges CEX
 */
class ArbitrageBot extends EventEmitter {
  constructor(config) {
    super()
    this.config = config
    this.isRunning = false
    this.mode = "simulation" // "simulation" o "production"
    this.strategy = "basic"
    this.riskLevel = config.RISK_MANAGEMENT.RISK_LEVEL
    this.tradingPairs = config.TRADING_PAIRS
    this.checkInterval = config.CHECK_INTERVAL
    this.totalProfit = 0
    this.totalTrades = 0
    this.successfulTrades = 0
    this.failedTrades = 0
    this.lastOpportunities = {}
    this.checkIntervalId = null
    this.logger = console

    // Inicializar gestores
    this.exchangeManager = new ExchangeManager(config)
    this.alertManager = new AlertManager(config)

    // ====== AGREGADO PARA DASHBOARD ======
    this.simulation = true
  }

  /**
   * Inicia el bot
   */
  async start(mode = "simulation") {
    try {
      if (this.isRunning) {
        this.logger.warn("⚠️ El bot ya está en ejecución")
        return
      }

      this.mode = mode
      this.simulation = mode === "simulation"
      this.logger.info(`🚀 Iniciando bot en modo: ${this.mode}`)

      // Inicializar componentes
      await this.initialize()

      // Enviar alerta de inicio
      await this.alertManager.sendAlert(
        "BOT_STARTED",
        `🤖 Bot de Arbitraje iniciado en modo ${this.mode.toUpperCase()}`,
      )

      // Iniciar verificación periódica
      this.startPeriodicCheck()

      this.isRunning = true
      this.emit("started", { mode: this.mode })

      return true
    } catch (error) {
      this.logger.error("❌ Error al iniciar bot:", error.message)

      // Enviar alerta de error
      await this.alertManager.sendAlert("ERROR", `Error al iniciar bot: ${error.message}`)

      throw error
    }
  }

  /**
   * Detiene el bot
   */
  async stop() {
    try {
      if (!this.isRunning) {
        this.logger.warn("⚠️ El bot no está en ejecución")
        return
      }

      this.logger.info("🛑 Deteniendo bot...")

      // Detener verificación periódica
      this.stopPeriodicCheck()

      // Enviar alerta de detención
      await this.alertManager.sendAlert("BOT_STOPPED", "🛑 Bot de Arbitraje detenido")

      this.isRunning = false
      this.emit("stopped")

      return true
    } catch (error) {
      this.logger.error("❌ Error al detener bot:", error.message)
      throw error
    }
  }

  /**
   * Cambia la estrategia del bot
   */
  changeStrategy(strategy) {
    if (!this.config.STRATEGIES[strategy.toUpperCase()]) {
      throw new Error(`Estrategia ${strategy} no válida`)
    }

    this.strategy = strategy
    this.logger.info(`🔄 Estrategia cambiada a: ${strategy}`)
    this.emit("strategyChanged", { strategy })

    return true
  }

  /**
   * Actualiza la configuración de riesgo
   */
  updateRiskSettings(settings) {
    if (settings.riskLevel) {
      this.riskLevel = settings.riskLevel
      this.logger.info(`🔄 Nivel de riesgo cambiado a: ${settings.riskLevel}`)
    }

    this.emit("riskSettingsUpdated", settings)
    return true
  }

  /**
   * Inicializa los componentes del bot
   */
  async initialize() {
    try {
      // Inicializar AlertManager
      await this.alertManager.initialize()

      // Inicializar ExchangeManager
      await this.exchangeManager.initialize()

      return true
    } catch (error) {
      this.logger.error("❌ Error inicializando componentes:", error.message)
      throw error
    }
  }

  /**
   * Inicia la verificación periódica de oportunidades
   */
  startPeriodicCheck() {
    if (this.checkIntervalId) {
      clearInterval(this.checkIntervalId)
    }

    this.checkIntervalId = setInterval(() => {
      this.checkOpportunities().catch((error) => {
        this.logger.error("❌ Error en verificación periódica:", error.message)
      })
    }, this.checkInterval)

    this.logger.info(`🔄 Verificación periódica iniciada (cada ${this.checkInterval}ms)`)
  }

  /**
   * Detiene la verificación periódica
   */
  stopPeriodicCheck() {
    if (this.checkIntervalId) {
      clearInterval(this.checkIntervalId)
      this.checkIntervalId = null
      this.logger.info("🛑 Verificación periódica detenida")
    }
  }

  /**
   * Verifica oportunidades de arbitraje
   */
  async checkOpportunities() {
    try {
      this.logger.debug("🔍 Verificando oportunidades de arbitraje...")

      // Obtener precios de todos los pares
      const prices = await this.fetchPrices()

      // Calcular oportunidades
      const opportunities = this.calculateArbitrageOpportunities(prices)

      // Actualizar últimas oportunidades
      this.lastOpportunities = opportunities

      // Verificar si hay oportunidades viables
      const viableOpportunities = this.filterViableOpportunities(opportunities)

      if (viableOpportunities.length > 0) {
        this.logger.info(`🎯 Encontradas ${viableOpportunities.length} oportunidades viables`)

        // Enviar alerta para cada oportunidad
        for (const opportunity of viableOpportunities) {
          await this.alertManager.sendAlert(
            "OPPORTUNITY_FOUND",
            `🎯 Oportunidad: ${opportunity.pair}\n💰 Ganancia: ${opportunity.profitPercentage.toFixed(2)}%\n📈 Comprar en: ${opportunity.buyExchange}\n📉 Vender en: ${opportunity.sellExchange}`,
          )
        }

        // Ejecutar arbitraje si está en modo producción y está configurado para auto-ejecutar
        if (this.mode === "production" && this.config.STRATEGIES[this.strategy.toUpperCase()].autoExecute) {
          for (const opportunity of viableOpportunities) {
            await this.executeArbitrage(opportunity)
          }
        }
      }

      return opportunities
    } catch (error) {
      this.logger.error("❌ Error verificando oportunidades:", error.message)
      throw error
    }
  }

  /**
   * Obtiene precios de todos los exchanges
   */
  async fetchPrices() {
    const prices = {}

    for (const pair of this.tradingPairs) {
      prices[pair] = {}

      for (const exchangeName of this.exchangeManager.getEnabledExchangeNames()) {
        try {
          const ticker = await this.exchangeManager.getTicker(exchangeName, pair)

          prices[pair][exchangeName] = {
            bid: ticker.bid,
            ask: ticker.ask,
            last: ticker.last,
            volume: ticker.baseVolume,
            timestamp: ticker.timestamp,
          }
        } catch (error) {
          this.logger.warn(`⚠️ Error obteniendo precio de ${pair} en ${exchangeName}: ${error.message}`)
        }
      }
    }

    return prices
  }

  /**
   * Calcula oportunidades de arbitraje
   */
  calculateArbitrageOpportunities(prices) {
    const opportunities = []

    for (const [pair, exchangePrices] of Object.entries(prices)) {
      const exchanges = Object.keys(exchangePrices)

      if (exchanges.length < 2) {
        continue
      }

      // Encontrar mejor compra (menor ask) y mejor venta (mayor bid)
      let bestBuy = { exchange: null, price: Number.POSITIVE_INFINITY }
      let bestSell = { exchange: null, price: 0 }

      for (const [exchange, priceData] of Object.entries(exchangePrices)) {
        if (priceData.ask && priceData.ask < bestBuy.price) {
          bestBuy = { exchange, price: priceData.ask }
        }

        if (priceData.bid && priceData.bid > bestSell.price) {
          bestSell = { exchange, price: priceData.bid }
        }
      }

      // Verificar si hay oportunidad
      if (bestBuy.exchange && bestSell.exchange && bestBuy.exchange !== bestSell.exchange) {
        const profitPercentage = ((bestSell.price - bestBuy.price) / bestBuy.price) * 100
        const fees = this.calculateFees(bestBuy.exchange, bestSell.exchange, bestBuy.price, bestSell.price)
        const netProfitPercentage = profitPercentage - fees.totalFeePercentage

        opportunities.push({
          pair,
          buyExchange: bestBuy.exchange,
          sellExchange: bestSell.exchange,
          buyPrice: bestBuy.price,
          sellPrice: bestSell.price,
          profitPercentage,
          fees,
          netProfitPercentage,
          timestamp: Date.now(),
        })
      }
    }

    return opportunities
  }

  /**
   * Filtra oportunidades viables según la estrategia actual
   */
  filterViableOpportunities(opportunities) {
    const strategy = this.config.STRATEGIES[this.strategy.toUpperCase()]
    const minProfitPercentage = strategy.minProfitPercentage

    return opportunities.filter((opportunity) => {
      // Verificar si la ganancia neta supera el mínimo
      return opportunity.netProfitPercentage >= minProfitPercentage
    })
  }

  /**
   * Calcula las comisiones para una operación de arbitraje
   */
  calculateFees(buyExchange, sellExchange, buyPrice, sellPrice) {
    const buyFeeRate = this.config.EXCHANGES[buyExchange.toUpperCase()]?.fees?.taker || 0.001
    const sellFeeRate = this.config.EXCHANGES[sellExchange.toUpperCase()]?.fees?.taker || 0.001

    const buyFee = buyPrice * buyFeeRate
    const sellFee = sellPrice * sellFeeRate
    const totalFee = buyFee + sellFee
    const totalFeePercentage = (buyFeeRate + sellFeeRate) * 100

    return {
      buyFee,
      sellFee,
      totalFee,
      totalFeePercentage,
      buyFeeRate,
      sellFeeRate,
    }
  }

  /**
   * Ejecuta una operación de arbitraje
   */
  async executeArbitrage(opportunity) {
    try {
      this.logger.info(`🚀 Ejecutando arbitraje: ${opportunity.pair}`)

      // Calcular cantidad a comprar según la configuración
      const strategy = this.config.STRATEGIES[this.strategy.toUpperCase()]
      const maxInvestmentPercentage = strategy.maxInvestmentPercentage

      // Obtener balance disponible
      const balance = await this.exchangeManager.getBalance(opportunity.buyExchange, "USDT")
      const availableBalance = balance.free

      // Calcular cantidad a invertir
      const investmentAmount = availableBalance * maxInvestmentPercentage
      const buyAmount = investmentAmount / opportunity.buyPrice

      // Ejecutar compra
      let buyOrder
      if (this.mode === "production") {
        buyOrder = await this.exchangeManager.buy(opportunity.buyExchange, opportunity.pair, buyAmount)
      } else {
        // Simular compra
        buyOrder = {
          id: `sim_${Date.now()}`,
          amount: buyAmount,
          price: opportunity.buyPrice,
          cost: buyAmount * opportunity.buyPrice,
          status: "closed",
        }
      }

      // Antes de arbitrar...
async function checkOpportunity(pair, amount) {
  // 1. Revisa volumen del par (¡clave para que no muevas el precio!)
  const volume = await getPairVolume(pair);
  if (volume < amount * 10) return false; // Ejemplo: solo arbitra si hay 10x más volumen que tu operación

  // 2. Calcula fees por token y exchange (usa FEES_AND_LIMITS[exchange][token])
  const binanceFees = config.FEES_AND_LIMITS.BINANCE[pair.split('/')[0]];
  const bybitFees = config.FEES_AND_LIMITS.BYBIT[pair.split('/')[0]];
  // Aplica la lógica específica por token/fee

  // 3. Calcula si el spread - fees - slippage te deja ganancia neta positiva
  // Si no, ignora la oportunidad

  // 4. Si la red/token está suspendido o en mantenimiento (revisa cada 12h llamando a la API del exchange)
  //   - Si está suspendida, ignora el par y márcalo como inactivo
  //   - Puedes guardar un timestamp y solo volver a intentarlo después de 12h

  // 5. Si todo está OK, agrega la oportunidad a la lista de oportunidades y ejecuta
}

      this.logger.info(`✅ Compra ejecutada en ${opportunity.buyExchange}: ${buyAmount} a $${opportunity.buyPrice}`)

      // Ejecutar venta
      let sellOrder
      if (this.mode === "production") {
        sellOrder = await this.exchangeManager.sell(opportunity.sellExchange, opportunity.pair, buyAmount)
      } else {
        // Simular venta
        sellOrder = {
          id: `sim_${Date.now() + 1}`,
          amount: buyAmount,
          price: opportunity.sellPrice,
          cost: buyAmount * opportunity.sellPrice,
          status: "closed",
        }
      }

      this.logger.info(`✅ Venta ejecutada en ${opportunity.sellExchange}: ${buyAmount} a $${opportunity.sellPrice}`)

      // Calcular ganancia
      const profit = (sellOrder.price - buyOrder.price) * buyAmount
      this.totalProfit += profit
      this.totalTrades++
      this.successfulTrades++

      // Enviar alerta de operación exitosa
      await this.alertManager.sendAlert(
        "TRADE_EXECUTED",
        `💰 Arbitraje ejecutado: ${opportunity.pair}\n📈 Compra: ${buyAmount} a $${opportunity.buyPrice} en ${opportunity.buyExchange}\n📉 Venta: ${buyAmount} a $${opportunity.sellPrice} en ${opportunity.sellExchange}\n💵 Ganancia: $${profit.toFixed(2)}`,
      )

      this.emit("arbitrageExecuted", {
        opportunity,
        buyOrder,
        sellOrder,
        profit,
      })

      return {
        success: true,
        profit,
        buyOrder,
        sellOrder,
      }
    } catch (error) {
      this.logger.error(`❌ Error ejecutando arbitraje: ${error.message}`)

      this.totalTrades++
      this.failedTrades++

      // Enviar alerta de error
      await this.alertManager.sendAlert(
        "TRADE_FAILED",
        `❌ Error en arbitraje: ${opportunity.pair}\n💰 Ganancia esperada: ${opportunity.netProfitPercentage.toFixed(2)}%\n⚠️ Error: ${error.message}`,
      )

      this.emit("arbitrageFailed", {
        opportunity,
        error: error.message,
      })

      throw error
    }
  }

  /**
   * Obtiene el estado actual del bot
   */
  getStatus() {
    return {
      isRunning: this.isRunning,
      mode: this.mode,
      strategy: this.strategy,
      riskLevel: this.riskLevel,
      totalProfit: this.totalProfit,
      totalTrades: this.totalTrades,
      successfulTrades: this.successfulTrades,
      failedTrades: this.failedTrades,
      tradingPairs: this.tradingPairs,
      checkInterval: this.checkInterval,
      lastCheck: Date.now(),
      // ====== AGREGADO PARA DASHBOARD ======
      simulation: this.simulation
    }
  }

  // ====== AGREGADO PARA DASHBOARD Y API ======
  setSimulationMode(sim) {
    this.simulation = !!sim
    this.mode = this.simulation ? "simulation" : "production"
  }
  isSimulation() {
    return this.simulation
  }
  getLiveOpportunities() {
    // Devuelve las últimas oportunidades encontradas
    if (Array.isArray(this.lastOpportunities)) {
      return this.lastOpportunities
    }
    // Si está en formato objeto, convertir a array
    return Object.values(this.lastOpportunities)
  }
  isRunningBot() {
    return this.isRunning
  }
}

module.exports = ArbitrageBot;

----------------------------------------------------------------------------------------------------
async function isOpportunityProfitable(pair, amount, prices, config) {
  // 1. Revisa volumen real
  const volume = await getPairVolume(pair);
  if (volume < amount * 10) return false; // Solo arbitra si hay volumen suficiente
  
  // 2. Obtiene parámetros específicos del par o toma globales
  const parRisk = config.PAIR_RISK[pair] || config.GLOBAL_RISK;
  const feeA = config.FEES_AND_LIMITS.BINANCE[pair.split('/')[0]].withdrawal.fee;
  const feeB = config.FEES_AND_LIMITS.BYBIT[pair.split('/')[0]].withdrawal.fee;
  const spread = (prices.BYBIT - prices.BINANCE) / prices.BINANCE;
  
  // 3. Calcula la ganancia neta real (spread - fees - slippage)
  const cost = feeA + feeB + (parRisk.maxSlippage * 2) + config.TRADING_FEES.BINANCE + config.TRADING_FEES.BYBIT;
  if (spread < parRisk.minSpread + cost) return false;
  
  // 4. Revisa si la red/token está activa (llama a la API del exchange cada 12h)
  if (!await isTokenActive(pair.split('/')[0], "BINANCE") || !await isTokenActive(pair.split('/')[0], "BYBIT")) {
    return false;
  }
  // 5. Si todo OK, la oportunidad es válida
  return true;
}

------------------------------------------------------------------------------------------------------------

const { Spot } = require('@binance/connector');

const apiKey = 'qQ9F6OyRjH7uzeiThURx722WLB5LD080DS7JDG4QpAPYZLeTGjgnn1vucNqcwmm0';
const apiSecret = 'PP0l9KKVa30To898958itxWPU99auRIWxzpcrgptZ1NXURENvb8f0nCaY8JI0qQx';

const client = new Spot(apiKey, apiSecret);

async function test() {
  try {
    const resp = await client.tickerPrice();
    console.log("RESULTADO DE BINANCE:", resp.data);
    if (Array.isArray(resp.data)) {
      console.log("Primer elemento:", resp.data[0]);
    } else {
      console.log("NO ES UN ARRAY:", resp.data);
    }
  } catch (err) {
    console.error("ERROR:", err);
  }
}

test();

-----------------------------------------------------------------------------------------------------

const { RestClientV5 } = require('bybit-api');

const bybit = new RestClientV5({
  // Puedes dejar vacío para spot público
  // key: 'TU_API_KEY',
  // secret: 'TU_API_SECRET',
});

async function main() {
  try {
    // Pide TODOS los tickers spot
    const res = await bybit.getTickers({ category: "spot" });
    console.log(JSON.stringify(res, null, 2));
  } catch (err) {
    console.error("ERROR:", err);
  }
}

main();

---------------------------------------------------------------------------------------------------------

module.exports = {
  // 1. PAIRS TO MONITOR
  PAIRS: [
    "LTC/USDT", "BNB/USDT", "XRP/USDT", "ALGO/USDT", "ANIME/USDT", "APT/USDT", "ARB/USDT", "ATOM/USDT", "AVAX/USDT",
    "AXL/USDT", "BB/USDT", "BEL/USDT", "BERA/USDT", "BOME/USDT", "BONK/USDT", "C98/USDT", "CAKE/USDT", "CATI/USDT", 
    "CELO/USDT", "CGPT/USDT", "CHZ/USDT", "CYBER/USDT", "DOGS/USDT", "DOT/USDT", "DYDX/USDT", "EGLD/USDT", "ENJ/USDT",
    "FIDA/USDT", "FLOKI/USDT", "FLOW/USDT", "GMT/USDT", "GMX/USDT", "HAEDAL/USDT", "HBAR/USDT", "HMSTR/USDT", "HOME/USDT",
    "HYPER/USDT", "ICP/USDT", "ICX/USDT", "INJ/USDT", "IO/USDT", "JUP/USDT", "KAIA/USDT", "KMNO/USDT", "KSM/USDT",
    "LUNA/USDT", "MAGIC/USDT", "MANTA/USDT", "MBOX/USDT", "MINA/USDT", "NEAR/USDT", "NOT/USDT", "ONE/USDT", "OP/USDT",
    "PSG/USDT", "PYTH/USDT", "RDNT/USDT", "ROSE/USDT", "SCRT/USDT", "SEI/USDT", "SHIB/USDT", "SIGN/USDT", "STX/USDT",
    "SUI/USDT", "TIA/USDT", "TNSR/USDT", "TON/USDT", "TRUMP/USDT", "TRX/USDT", "WAXP/USDT", "WCT/USDT", "WIF/USDT",
    "WLD/USDT", "XAI/USDT", "XLM/USDT", "ZIL/USDT", "ZRO/USDT"
  ],

  BASE_ASSET: "USDT",

  // 2. DEPOSIT ADDRESSES AND NETWORKS
  DEPOSIT_ADDRESSES: {
    BINANCE: {
      USDT: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      LTC:  { address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4", network: "Litecoin" },
      BNB:  { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      XRP:  { address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV", memo: "466152795", network: "XRP" },
      ALGO: { address: "L43SHHRVHAIYHGFGXFBKM7IMZNYT7WSLSMXPHGNH4D5NPYOBIJSK35X5OE", network: "ALGO" },
      ANIME: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      APT: { address: "0x0b69478291cb55e808a716a046cc0d1ab2981e85778957da3fd519c6061ccb9e", network: "APT" },
      ARB: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      ATOM: { address: "cosmos1j8pp7zvcu9z8vd882m284j29fn2dszh05cqvf9", memo: "100738176", network: "ATOM" },
      AVAX: { address: "X-avax1j2suzh09083n9cyd80dk3lsr0c3e8ry3skk27q", network: "AVAX" },
      AXL: { address: "axelar17ewha7y7fr0xsej6xfep88rq30rse9hgynll78", memo: "101408734", network: "AXL" },
      BB: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BounceBit" },
      BEL: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      BERA: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BERA" },
      BOME: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      BONK: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      C98: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      CAKE: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      CATI: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      CELO: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "CELO" },
      CGPT: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      CHZ: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "CHZ2" },
      CYBER: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "OPTIMISM" },
      DOGS: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      DOT: { address: "12zByesGXudgBh4C6ZRbF82SkEAwxC6viaTZwg6BbkWABuT5", network: "DOT" },
      DYDX: { address: "dydx1vvl7htcnzc3g0hsrysxf3vvrk6tpx70822ef6g", memo: "100903728", network: "DYDX" },
      EGLD: { address: "erd1ecw70t7jjw77c6sdmesz2quzlxwv87tv983970wlr8gchy0sqv8sp8ef3k", network: "EGLD" },
      ENJ: { address: "enExKScymYYPkj9tzvgs4UFDCEVCyWuJi7zVAdwuAsF5jokn5", network: "ENJ" },
      FIDA: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      FLOKI: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      FLOW: { address: "0x94ad1c8825ca243d", network: "FLOW" },
      GMT: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      GMX: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      HAEDAL: { address: "0xd03819773837ad71e19c3903561d61a5ae7cb7035ade1c841d84f23040ea79f4", network: "SUI" },
      HBAR: { address: "0.0.1873771", memo: "103878176", network: "HBAR" },
      HMSTR: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      HOME: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      HYPER: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      ICP: { address: "3cb40b0fb786925bc5e4f5cf4e4d7c5d617a70fdefa8e483487d076b65c50151", network: "ICP" },
      ICX: { address: "hx5ff80447faff8dfb5193ff420c35b72535282f3d", network: "ICX" },
      INJ: { address: "inj1u2rajhqtptzvu23leheta9yg99k3hazf4waf43", memo: "105901031", network: "INJ" },
      IO: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      JUP: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      KAIA: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "KAIA" },
      KMNO: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      KSM: { address: "G8AjQrZs9CfPYiTCjkS75r2tHQPqxK1bNagLefLa4QvHGCQ", network: "KSM" },
      LUNA: { address: "terra1frh79vmtur5fmrghz6gfjvfhpa3u2c0uemv4af", memo: "103811345", network: "LUNA" },
      MAGIC: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      MANTA: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "MANTA" },
      MBOX: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      MINA: { address: "B62qkTezzMtbX71ZnR74N4JAs1LT4jvacx2aLJR9yPFzdtDqA3dGLQD", network: "MINA" },
      NEAR: { address: "836da29a0b7172bf48cb1cb5466d29adc0aac38904a091e64b71e66539ab984b", network: "NEAR" },
      NOT: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      ONE: { address: "one1hwlkh335c6k6w8eugsj9f2qkjvxuk5q59z0m8s", network: "ONE" },
      OP: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "OPTIMISM" },
      PSG: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "CHZ2" },
      PYTH: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      RDNT: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      ROSE: { address: "oasis1qz0f26wkrt5852xcghrnr52rwgk30jwxcq3lwcee", network: "ROSE" },
      SCRT: { address: "secret13fh085csr7w7e866r402cqa9xp42trsch7w269", memo: "101301675", network: "SCRT" },
      SEI: { address: "sei1zrqryvr8m40yqej95lcqzw7y0sf0662cxh0kcv", memo: "100286985", network: "SEI" },
      SHIB: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      SIGN: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BSC" },
      STX: { address: "SP2TA4FGB43WVAS8MVS6YCWTSN2BZNQ1ASGEAKSDD", memo: "103289850", network: "STX" },
      SUI: { address: "0xd03819773837ad71e19c3903561d61a5ae7cb7035ade1c841d84f23040ea79f4", network: "SUI" },
      TIA: { address: "celestia1fd3mclxp4e2fh0wpau3eg55x2fsm7yjxzg29j2", memo: "105643806", network: "TIA" },
      TON: { address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON" },
      TRUMP: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      TRX: { address: "TNZx9MUo2Db4xLT9zVe17NqwconpaaWwDq", network: "TRX" },
      WAXP: { address: "waxonbinance", memo: "106691034", network: "WAX" },
      WIF: { address: "9EjbLHoyqH9SzVJZhvFSPFfmoY38C4DJ78WdJtr46RKa", network: "SOL" },
      WCT: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "OPTIMISM" },
      WLD: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "OPTIMISM" },
      XAI: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" },
      XLM: { address: "GABFQIK63R2NETJM7T673EAMZN4RJLLGP3OFUEJU5SZVTGWUKULZJNL6", memo: "380362871", network: "XLM" },
      ZIL: { address: "zil1ldwp360uz36800cr5n73gtm0fjxmrn8sr4r3uq", network: "ZIL" },
      ZRO: { address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "ARBITRUM" }
    },
    BYBIT: {
  USDT: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  LTC: { address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ", network: "Litecoin" },
  BNB: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  XRP: { address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh", memo: "501350199", network: "XRP" },
  ALGO: { address: "U5EPBBGTH4ZHEJMSYWRRBEOTOORYTSTSTYZITGDYM2KUQPDXWTHFDJPFVY", network: "ALGO" },
  ANIME: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "ARBI" },
  APT: { address: "0x9f5ade930d03eb3fd1f0906f4e7edaddc458ac71260bf985bb61cfb61ac09191", network: "APTOS" },
  ARB: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Arbitrum One" },
  ATOM: { address: "cosmos1c8dskmuz2wj29tg3rygt8mzg92f09gwcqqyexa", network: "ATOM" },
  AVAX: { address: "X-avax1unlvn8ef6lpjsac0t37t9za6astc8a55pugnm2", network: "AVAX" },
  AXL: { address: "axelar1yzsury9fldydgk425gmphy2zyehh3emc43ds6x", memo: "10048670", network: "AXL" },
  BB: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BounceBit" },
  BEL: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  BERA: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BERA" },
  BOME: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  BONK: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  C98: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  CAKE: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  CATI: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  CELO: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "CELO" },
  CGPT: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  CHZ: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Chiliz Chain" },
  CYBER: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "OP Mainnet" },
  DOGS: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  DOT: { address: "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm", network: "DOT" },
  DYDX: { address: "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq", memo: "10178277", network: "DYDX" },
  EGLD: { address: "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4", network: "EGLD" },
  ENJ: { address: "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i", network: "Enjin" },
  FIDA: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  FLOKI: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  FLOW: { address: "0xdbb61e402a382eb3", network: "FLOW" },
  GMT: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  GMX: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "AVAXC" },
  HAEDAL: { address: "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c", network: "SUI" },
  HBAR: { address: "0.0.615422", memo: "10067078", network: "HBAR" },
  HMSTR: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  HOME: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  HYPER: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  ICP: { address: "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a", network: "ICP" },
  ICX: { address: "hx8c278a658331a569b640e925ac55a70a8e5534b6", network: "ICX" },
  INJ: { address: "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n", memo: "10014232", network: "INJ" },
  IO: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  JUP: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  KAIA: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "KAIA" },
  KMNO: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  KSM: { address: "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV", network: "KSM" },
  LUNA: { address: "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s", network: "Terra" },
  MAGIC: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Arbitrum One" },
  MANTA: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Manta Pacific Mainnet" },
  MBOX: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  MINA: { address: "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW", network: "MINA" },
  NEAR: { address: "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef", network: "NEAR" },
  NOT: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  ONE: { address: "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3", network: "ONE" },
  OP: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "OP Mainnet" },
  PSG: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Chiliz Chain" },
  PYTH: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  RDNT: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Arbitrum One" },
  ROSE: { address: "oasis1qqgk0fmqlmcr5k0d0rgknw7e6a7hlc0t3qljrnhe", network: "ROSE" },
  SCRT: { address: "secret1tsz8v9k75jeqtl4exnf0qye5nme840h5n0pldk", memo: "10120271", network: "SCRT" },
  SEI: { address: "sei10czwjwhcjdjexgz9ecn2xma5at9t04dfaxsf4t", memo: "10124250", network: "SEI" },
  SHIB: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  SIGN: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BSC" },
  STX: { address: "SP27ANV45PCAG98PGFA2GVN9K7QYY1KWWS1V6RFSX", memo: "10167021", network: "STX" },
  SUI: { address: "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c", network: "SUI" },
  TIA: { address: "celestia12stggm53c5wzqdz6w5xn6tkrj56phnzktj7d5w", network: "Celestia" },
  TON: { address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
  TRUMP: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  TRX: { address: "TAF6zJUsa3yja8p5XQTWhMaY3QXxZmZdGN", network: "TRX" },
  WAXP: { address: "bybitwaxonly", memo: "10068817", network: "WAX" },
  WIF: { address: "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8", network: "Solana" },
  WCT: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "OP Mainnet" },
  WLD: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "OP Mainnet" },
  XAI: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "Arbitrum One" },
  XLM: { address: "GDT7ARDYZRBXXYOCSQ3MUMISTITSSRWZI6KR2A5L5Q3KB4QIZHGYMTIH", memo: "11088858", network: "XLM" },
  ZIL: { address: "zil1f5xpvwltm6uheftrlrhjtxcv392uuxtejekpjs", network: "ZIL" },
  ZRO: { address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "AVAXC" }
}
  },

  // ... (AQUÍ VA TU CÓDIGO ANTERIOR: PAIRS, BASE_ASSET, DEPOSIT_ADDRESSES)

FEES_AND_LIMITS: {
  BINANCE: {
    USDT: { withdrawal: { fee: 0.3, min: 5 }, deposit: { min: 0.002 } },
    LTC: { withdrawal: { fee: 0.0001, min: 0.002 }, deposit: { min: 0.002 } },
    BNB: { withdrawal: { fee: 0.00001, min: 0.0005 }, deposit: { min: 0.000003 } },
    XRP: { withdrawal: { fee: 0.2, min: 2 }, deposit: { min: 0.001 } },
    ALGO: { withdrawal: { fee: 0.008, min: 10 }, deposit: { min: 0.007 } },
    ANIME: { withdrawal: { fee: 7.74, min: 16 }, deposit: { min: 0.00000001 } },
    APT: { withdrawal: { fee: 0.016, min: 0.06 }, deposit: { min: 0.00015 } },
    ARB: { withdrawal: { fee: 0.56, min: 1.12 }, deposit: { min: 0.01 } },
    ATOM: { withdrawal: { fee: 0.02, min: 0.04 }, deposit: { min: 0.00016 } },
    AVAX: { withdrawal: { fee: 0.008, min: 0.1 }, deposit: { min: 0.00005 } },
    AXL: { withdrawal: { fee: 0.02, min: 1 }, deposit: { min: 0.0015 } },
    BB: { withdrawal: { fee: 0.05, min: 1 }, deposit: { min: 0.06 } },
    BEL: { withdrawal: { fee: 0.051, min: 0.1 }, deposit: { min: 0.002 } },
    BERA: { withdrawal: { fee: 0.001, min: 0.1 }, deposit: { min: 0.00000002 } },
    BOME: { withdrawal: { fee: 380, min: 760 }, deposit: { min: 0.02 } },
    BONK: { withdrawal: { fee: 41657, min: 83314 }, deposit: { min: 0.02 } },
    C98: { withdrawal: { fee: 0.26, min: 0.52 }, deposit: { min: 0.007 } },
    CAKE: { withdrawal: { fee: 0.0057, min: 0.011 }, deposit: { min: 0.0006 } },
    CATI: { withdrawal: { fee: 1.08, min: 2.16 }, deposit: { min: 0.00000002 } },
    CELO: { withdrawal: { fee: 0.003, min: 0.018 }, deposit: { min: 0.02 } },
    CGPT: { withdrawal: { fee: 0.14, min: 0.28 }, deposit: { min: 0.00000002 } },
    CHZ: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0.0001 } },
    CYBER: { withdrawal: { fee: 0.019, min: 0.038 }, deposit: { min: 0.0003 } },
    DOGS: { withdrawal: { fee: 100, min: 1000 }, deposit: { min: 0.02 } },
    DOT: { withdrawal: { fee: 0.08, min: 1.3 }, deposit: { min: 1.05 } },
    DYDX: { withdrawal: { fee: 0.01, min: 0.1 }, deposit: { min: 0.0009 } },
    EGLD: { withdrawal: { fee: 8.99, min: 0.0015 }, deposit: { min: 0.00004 } },
    ENJ: { withdrawal: { fee: 0.0003, min: 1 }, deposit: { min: 0.006 } },
    FIDA: { withdrawal: { fee: 0.0003, min: 17 }, deposit: { min: 0.005 } },
    FLOKI: { withdrawal: { fee: 175, min: 350 }, deposit: { min: 0.01 } },
    FLOW: { withdrawal: { fee: 0.0001, min: 2.7 }, deposit: { min: 0.0018 } },
    GMT: { withdrawal: { fee: 0.29, min: 0.58 }, deposit: { min: 0.008 } },
    GMX: { withdrawal: { fee: 0.005, min: 0.01 }, deposit: { min: 0.00005 } },
    HAEDAL: { withdrawal: { fee: 1.44, min: 2.88 }, deposit: { min: 0.00000002 } },
    HBAR: { withdrawal: { fee: 0.06, min: 2 }, deposit: { min: 0.013 } },
    HMSTR: { withdrawal: { fee: 108, min: 216 }, deposit: { min: 0.02 } },
    HOME: { withdrawal: { fee: 0.55, min: 1.1 }, deposit: { min: 0.000002 } },
    HYPER: { withdrawal: { fee: 0.12, min: 0.24 }, deposit: { min: 0.00000002 } },
    ICP: { withdrawal: { fee: 0.0003, min: 0.001 }, deposit: { min: 0.0002 } },
    ICX: { withdrawal: { fee: 0.02, min: 0.04 }, deposit: { min: 0.008 } },
    INJ: { withdrawal: { fee: 0.01, min: 0.1 }, deposit: { min: 0.00005 } },
    IO: { withdrawal: { fee: 0.81, min: 1.62 }, deposit: { min: 0.0005 } },
    JUP: { withdrawal: { fee: 1.48, min: 2.96 }, deposit: { min: 0.0013 } },
    KAIA: { withdrawal: { fee: 0.005, min: 100 }, deposit: { min: 0.008 } },
    KMNO: { withdrawal: { fee: 8.85, min: 17 }, deposit: { min: 0.000002 } },
    KSM: { withdrawal: { fee: 0.01, min: 0.4 }, deposit: { min: 0.001 } },
    LUNA: { withdrawal: { fee: 0.01, min: 1 }, deposit: { min: 0.0026 } },
    MAGIC: { withdrawal: { fee: 1.15, min: 2.3 }, deposit: { min: 0.003 } },
    MANTA: { withdrawal: { fee: 0.15, min: 0.42 }, deposit: { min: 0.0012 } },
    MBOX: { withdrawal: { fee: 0.29, min: 0.58 }, deposit: { min: 0.0046 } },
    MINA: { withdrawal: { fee: 0.9, min: 5 }, deposit: { min: 0.004 } },
    NEAR: { withdrawal: { fee: 0.018, min: 6 }, deposit: { min: 0.0002 } },
    NOT: { withdrawal: { fee: 44, min: 88 }, deposit: { min: 0.01 } },
    ONE: { withdrawal: { fee: 0.1, min: 60 }, deposit: { min: 0.07 } },
    OP: { withdrawal: { fee: 0.045, min: 0.09 }, deposit: { min: 0.0006 } },
    PSG: { withdrawal: { fee: 0, min: 1 }, deposit: { min: 0.00000002 } },
    PYTH: { withdrawal: { fee: 0, min: 1 }, deposit: { min: 0.004 } },
    RDNT: { withdrawal: { fee: 8.26, min: 16 }, deposit: { min: 0.03 } },
    ROSE: { withdrawal: { fee: 0.1, min: 1 }, deposit: { min: 0.013 } },
    SCRT: { withdrawal: { fee: 0.1, min: 5 }, deposit: { min: 0.005 } },
    SEI: { withdrawal: { fee: 0.4, min: 5 }, deposit: { min: 0.004 } },
    SHIB: { withdrawal: { fee: 1112, min: 2224 }, deposit: { min: 1.1 } },
    SIGN: { withdrawal: { fee: 0.19, min: 0.38 }, deposit: { min: 0.00000003 } },
    STX: { withdrawal: { fee: 1, min: 5 }, deposit: { min: 0.0006 } },
    SUI: { withdrawal: { fee: 0.06, min: 1 }, deposit: { min: 0.0013 } },
    TIA: { withdrawal: { fee: 0.1, min: 0.4 }, deposit: { min: 0.00015 } },
    TON: { withdrawal: { fee: 0.02, min: 0.4 }, deposit: { min: 0.00000001 } },
    TRUMP: { withdrawal: { fee: 0.062, min: 0.12 }, deposit: { min: 0.000002 } },
    TRX: { withdrawal: { fee: 1, min: 30 }, deposit: { min: 1 } },
    WAXP: { withdrawal: { fee: 0.2, min: 7 }, deposit: { min: 2 } },
    WIF: { withdrawal: { fee: 0.76, min: 1.52 }, deposit: { min: 0.0006 } },
    WCT: { withdrawal: { fee: 0.069, min: 0.14 }, deposit: { min: 0.00000002 } },
    WLD: { withdrawal: { fee: 0.028, min: 0.056 }, deposit: { min: 0.0004 } },
    XAI: { withdrawal: { fee: 3.25, min: 6.5 }, deposit: { min: 0.0029 } },
    XLM: { withdrawal: { fee: 0.01, min: 25 }, deposit: { min: 0.02 } },
    ZIL: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0.07 } },
    ZRO: { withdrawal: { fee: 0.04, min: 0.08 }, deposit: { min: 0.00026 } }
  },

  BYBIT: {
    USDT: { withdrawal: { fee: 0.3, min: 1 }, deposit: { min: 0.001 } },
    LTC: { withdrawal: { fee: 0.0001, min: 0.001 }, deposit: { min: 0.00000001 } },
    BNB: { withdrawal: { fee: 0.0002, min: 0.0002 }, deposit: { min: 0.0 } },
    XRP: { withdrawal: { fee: 0.2, min: 1.2 }, deposit: { min: 0.01 } },
    ALGO: { withdrawal: { fee: 0.01, min: 10 }, deposit: { min: 1 } },
    ANIME: { withdrawal: { fee: 16, min: 30 }, deposit: { min: 1 } },
    APT: { withdrawal: { fee: 0.01, min: 0.01 }, deposit: { min: 1 } },
    ARB: { withdrawal: { fee: 0.4, min: 0.4 }, deposit: { min: 0.00000001 } },
    ATOM: { withdrawal: { fee: 0.005, min: 0.015 }, deposit: { min: 0.0001 } },
    AVAX: { withdrawal: { fee: 0.008, min: 0.008 }, deposit: { min: 0 } },
    AXL: { withdrawal: { fee: 0.005, min: 0.005 }, deposit: { min: 0 } },
    BB: { withdrawal: { fee: 1, min: 1 }, deposit: { min: 0 } },
    BEL: { withdrawal: { fee: 0.12, min: 0.12 }, deposit: { min: 0 } },
    BERA: { withdrawal: { fee: 0.000001, min: 0.00001 }, deposit: { min: 0 } },
    BOME: { withdrawal: { fee: 400, min: 200 }, deposit: { min: 0 } },
    BONK: { withdrawal: { fee: 40000, min: 50000 }, deposit: { min: 0 } },
    C98: { withdrawal: { fee: 0.3, min: 0.3 }, deposit: { min: 0 } },
    CAKE: { withdrawal: { fee: 0.023, min: 0.023 }, deposit: { min: 0 } },
    CATI: { withdrawal: { fee: 0.3, min: 0.3 }, deposit: { min: 0 } },
    CELO: { withdrawal: { fee: 0.001, min: 0.002 }, deposit: { min: 0 } },
    CGPT: { withdrawal: { fee: 2, min: 2 }, deposit: { min: 0 } },
    CHZ: { withdrawal: { fee: 0, min: 0.0002 }, deposit: { min: 0 } },
    CYBER: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    DOGS: { withdrawal: { fee: 50, min: 50 }, deposit: { min: 0 } },
    DOT: { withdrawal: { fee: 0.08, min: 2 }, deposit: { min: 1.05 } },
    DYDX: { withdrawal: { fee: 0.2, min: 0.2 }, deposit: { min: 0.000000000000000001 } },
    EGLD: { withdrawal: { fee: 0.001, min: 0.01 }, deposit: { min: 0 } },
    ENJ: { withdrawal: { fee: 0.001, min: 0.1 }, deposit: { min: 0 } },
    FIDA: { withdrawal: { fee: 7, min: 1.5 }, deposit: { min: 0 } },
    FLOKI: { withdrawal: { fee: 2.617, min: 2.617 }, deposit: { min: 0 } },
    FLOW: { withdrawal: { fee: 0.01, min: 0.01 }, deposit: { min: 0 } },
    GMT: { withdrawal: { fee: 0.25, min: 0.25 }, deposit: { min: 0 } },
    GMX: { withdrawal: { fee: 0.006, min: 0.006 }, deposit: { min: 0 } },
    HAEDAL: { withdrawal: { fee: 1, min: 1 }, deposit: { min: 0 } },
    HBAR: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0 } },
    HMSTR: { withdrawal: { fee: 80, min: 80 }, deposit: { min: 0 } },
    HOME: { withdrawal: { fee: 20, min: 40 }, deposit: { min: 0 } },
    HYPER: { withdrawal: { fee: 5, min: 10 }, deposit: { min: 0 } },
    ICP: { withdrawal: { fee: 0.0003, min: 0.0003 }, deposit: { min: 0 } },
    ICX: { withdrawal: { fee: 0.02, min: 0.02 }, deposit: { min: 0 } },
    INJ: { withdrawal: { fee: 0.008, min: 0.008 }, deposit: { min: 0.000000000000000001 } },
    IO: { withdrawal: { fee: 1, min: 0.02 }, deposit: { min: 0 } },
    JUP: { withdrawal: { fee: 0.8, min: 0.5 }, deposit: { min: 0 } },
    KAIA: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    KMNO: { withdrawal: { fee: 10, min: 10 }, deposit: { min: 0 } },
    KSM: { withdrawal: { fee: 0.01, min: 0.01 }, deposit: { min: 0 } },
    LUNA: { withdrawal: { fee: 0.01, min: 0.01 }, deposit: { min: 0 } },
    MAGIC: { withdrawal: { fee: 0.3, min: 0.3 }, deposit: { min: 12 } },
    MANTA: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0 } },
    MBOX: { withdrawal: { fee: 1, min: 1 }, deposit: { min: 0 } },
    MINA: { withdrawal: { fee: 0.5, min: 2.5 }, deposit: { min: 0 } },
    NEAR: { withdrawal: { fee: 0.01, min: 0.2 }, deposit: { min: 0 } },
    NOT: { withdrawal: { fee: 30, min: 30 }, deposit: { min: 0 } },
    ONE: { withdrawal: { fee: 0.1, min: 60 }, deposit: { min: 0 } },
    OP: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    PSG: { withdrawal: { fee: 0, min: 0 }, deposit: { min: 0 } },
    PYTH: { withdrawal: { fee: 3, min: 2 }, deposit: { min: 0 } },
    RDNT: { withdrawal: { fee: 0.3, min: 0.3 }, deposit: { min: 0 } },
    ROSE: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    SCRT: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    SEI: { withdrawal: { fee: 0.2, min: 0.2 }, deposit: { min: 0 } },
    SHIB: { withdrawal: { fee: 7000, min: 7000 }, deposit: { min: 0 } },
    SIGN: { withdrawal: { fee: 1, min: 1 }, deposit: { min: 0 } },
    STX: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0 } },
    SUI: { withdrawal: { fee: 0.02, min: 0.02 }, deposit: { min: 0 } },
    TIA: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } },
    TON: { withdrawal: { fee: 0.02, min: 0.02 }, deposit: { min: 0.00000001 } },
    TRUMP: { withdrawal: { fee: 0.05, min: 0.1 }, deposit: { min: 0 } },
    TRX: { withdrawal: { fee: 1, min: 1 }, deposit: { min: 1 } },
    WAXP: { withdrawal: { fee: 2, min: 2 }, deposit: { min: 0 } },
    WIF: { withdrawal: { fee: 0.6, min: 0.6 }, deposit: { min: 0 } },
    WCT: { withdrawal: { fee: 1, min: 2 }, deposit: { min: 0 } },
    WLD: { withdrawal: { fee: 0.2, min: 0.2 }, deposit: { min: 0 } },
    XAI: { withdrawal: { fee: 0.1, min: 0.2 }, deposit: { min: 0 } },
    XLM: { withdrawal: { fee: 0.02, min: 8 }, deposit: { min: 0 } },
    ZIL: { withdrawal: { fee: 0.2, min: 0.4 }, deposit: { min: 0 } },
    ZRO: { withdrawal: { fee: 0.1, min: 0.1 }, deposit: { min: 0 } }
  },


 // 4. TRADING FEES
  TRADING_FEES: {
    BINANCE: 0.001, // 0.1%
    BYBIT:   0.001  // 0.1%
  },

  // 5. DEPOSIT FEES
  DEPOSIT_FEES: {
    BINANCE: 0,
    BYBIT: 0
  },

  // 6. INITIAL BALANCES
  INITIAL_BALANCE: {
    BINANCE: { USDT: 20 },
    BYBIT:   { USDT: 20 }
  },

  // 7. RISK CONTROL (global y por par)
  GLOBAL_RISK: {
    MIN_TRADE_AMOUNT: 10,
    MAX_TRADE_AMOUNT: 10,
    MIN_SPREAD: 0.002,    // 0.2% spread mínimo recomendable
    MAX_SLIPPAGE: 0.001   // 0.1% slippage máximo recomendable
  },

  // 8. EXCHANGE LIMITS
  EXCHANGE_LIMITS: {
    BINANCE: { withdrawal: "NONE", trading: "NONE", regional: "NONE" },
    BYBIT:   { withdrawal: "NONE", trading: "NONE", regional: "NONE" }
  },

  PAIR_SETTINGS: {
  "LTC/USDT":    { minTrade: 10, maxTrade: 50, minSpread: 0.0015, maxSlippage: 0.0005, fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BNB/USDT":    { minTrade: 10, maxTrade: 30, minSpread: 0.002,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "XRP/USDT":    { minTrade: 10, maxTrade: 40, minSpread: 0.0018, maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ALGO/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ANIME/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "APT/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ARB/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ATOM/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "AVAX/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "AXL/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BB/USDT":     { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BEL/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BERA/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BOME/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "BONK/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "C98/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CAKE/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CATI/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CELO/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CGPT/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CHZ/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "CYBER/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "DOGS/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "DOT/USDT":    { minTrade: 10, maxTrade: 40, minSpread: 0.0018, maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "DYDX/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "EGLD/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ENJ/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "FIDA/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "FLOKI/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "FLOW/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "GMT/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "GMX/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "HAEDAL/USDT": { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "HBAR/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "HMSTR/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "HOME/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "HYPER/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ICP/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ICX/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "INJ/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "IO/USDT":     { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "JUP/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "KAIA/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "KMNO/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "KSM/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "LUNA/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "MAGIC/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "MANTA/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "MBOX/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "MINA/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "NEAR/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "NOT/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ONE/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "OP/USDT":     { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "PSG/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "PYTH/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "RDNT/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ROSE/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "SCRT/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "SEI/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "SHIB/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "SIGN/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "STX/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "SUI/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "TIA/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "TNSR/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "TON/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "TRUMP/USDT":  { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "TRX/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "WAXP/USDT":   { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "WCT/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "WIF/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "WLD/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "XAI/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "XLM/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ZIL/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } },
  "ZRO/USDT":    { minTrade: 10, maxTrade: 20, minSpread: 0.001,  maxSlippage: 0.001,  fee: { BINANCE: 0.001, BYBIT: 0.001 } }
    
    },
    
  "STRATEGIES": {
    "SIMPLE": {
      "name": "Simple Arbitrage",
      "enabled": true,
      "minProfitPercentage": 0.2,
      "maxInvestmentPercentage": 0.5,
      "timeoutMs": 3000
    },
    "ADVANCED": {
      "name": "Advanced Arbitrage",
      "enabled": false,
      "minProfitPercentage": 0.3,
      "maxInvestmentPercentage": 0.3,
      "timeoutMs": 4000
    }
  },
  "AI_TRADING": {
    "ENABLED": false,
    "PREDICTION_HORIZON": 3000
  }













}
}

--------------------------------------------------------------------------------------------------------

require("dotenv").config()

console.log("=== DIAGNÓSTICO DEL ALERT MANAGER ===")

// Cargar configuración
const config = require("./src/strategies/config")

console.log("Configuración de alertas:")
console.log("ALERTS.ENABLED:", config.ALERTS.ENABLED)
console.log("EMAIL.enabled:", config.ALERTS.CHANNELS.EMAIL.enabled)
console.log("TELEGRAM.enabled:", config.ALERTS.CHANNELS.TELEGRAM.enabled)

console.log("\nConfiguración de BOT_STARTED:")
console.log("BOT_STARTED:", config.ALERTS.ALERT_TYPES.BOT_STARTED)

// Probar AlertManager
async function testAlertManager() {
  try {
    console.log("\n=== INICIALIZANDO ALERT MANAGER ===")

    const AlertManager = require("./src/alerts/alert-manager")
    const alertManager = new AlertManager(config)

    console.log("AlertManager creado")

    await alertManager.initialize()
    console.log("AlertManager inicializado")

    console.log("\n=== ENVIANDO ALERTA DE PRUEBA ===")

    // Enviar alerta que debería ir tanto a Telegram como Email
    await alertManager.sendAlert("BOT_STARTED", "🤖 Test manual - Bot iniciado")

    console.log("✅ Alerta enviada")

    // Esperar un poco para que se procese
    setTimeout(() => {
      console.log("\n=== ENVIANDO ALERTA DE ERROR (DEBE IR A EMAIL) ===")
      alertManager.sendAlert("ERROR", "❌ Test de error - Debe llegar a email y telegram")

      setTimeout(() => {
        console.log("✅ Proceso completado")
        process.exit(0)
      }, 3000)
    }, 2000)
  } catch (error) {
    console.error("❌ Error:", error)
  }
}

testAlertManager()

----------------------------------------------------------------------------------------------------------

require("dotenv").config()

console.log("=== DIAGNÓSTICO DE TELEGRAM ===")
console.log("Variables de entorno:")
console.log("TELEGRAM_BOT_TOKEN:", process.env.TELEGRAM_BOT_TOKEN ? "✅ CONFIGURADO" : "❌ NO CONFIGURADO")
console.log("TELEGRAM_CHAT_ID:", process.env.TELEGRAM_CHAT_ID ? "✅ CONFIGURADO" : "❌ NO CONFIGURADO")

if (process.env.TELEGRAM_BOT_TOKEN) {
  console.log("Token (primeros 10 caracteres):", process.env.TELEGRAM_BOT_TOKEN.substring(0, 10) + "...")
}

if (process.env.TELEGRAM_CHAT_ID) {
  console.log("Chat ID:", process.env.TELEGRAM_CHAT_ID)
}

// Probar la configuración del bot
const config = require("./src/strategies/config")
console.log("\n=== CONFIGURACIÓN DEL BOT ===")
console.log("Alertas habilitadas:", config.ALERTS.ENABLED)
console.log("Telegram habilitado:", config.ALERTS.CHANNELS.TELEGRAM.enabled)
console.log("Bot Token en config:", config.ALERTS.CHANNELS.TELEGRAM.botToken ? "✅ CONFIGURADO" : "❌ NO CONFIGURADO")
console.log("Chat ID en config:", config.ALERTS.CHANNELS.TELEGRAM.chatId ? "✅ CONFIGURADO" : "❌ NO CONFIGURADO")

// Probar envío directo
async function testDirectTelegram() {
  const https = require("https")

  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  if (!botToken || !chatId) {
    console.log("\n❌ No se puede probar: faltan credenciales")
    return
  }

  console.log("\n=== PROBANDO ENVÍO DIRECTO ===")

  const message = `🔧 Test directo: ${new Date().toLocaleString()}`

  const data = JSON.stringify({
    chat_id: chatId,
    text: message,
    parse_mode: "HTML",
  })

  const options = {
    hostname: "api.telegram.org",
    port: 443,
    path: `/bot${botToken}/sendMessage`,
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": data.length,
    },
  }

  const req = https.request(options, (res) => {
    let responseData = ""

    res.on("data", (chunk) => {
      responseData += chunk
    })

    res.on("end", () => {
      try {
        const response = JSON.parse(responseData)
        if (response.ok) {
          console.log("✅ ÉXITO: Mensaje enviado a Telegram")
          console.log("Detalles:", response.result)
        } else {
          console.log("❌ ERROR de Telegram:", response.description)
        }
      } catch (error) {
        console.log("❌ Error parseando respuesta:", error.message)
        console.log("Respuesta cruda:", responseData)
      }
    })
  })

  req.on("error", (error) => {
    console.log("❌ Error de conexión:", error.message)
  })

  req.write(data)
  req.end()
}

// Ejecutar prueba
testDirectTelegram()

// Probar AlertManager
setTimeout(async () => {
  console.log("\n=== PROBANDO ALERT MANAGER ===")
  try {
    const AlertManager = require("./src/alerts/alert-manager")
    const alertManager = new AlertManager(config)

    await alertManager.initialize()
    await alertManager.sendAlert("info", "🧪 Test desde AlertManager")

    console.log("✅ AlertManager ejecutado sin errores")
  } catch (error) {
    console.log("❌ Error en AlertManager:", error.message)
  }
}, 2000)

-----------------------------------------------------------------------------------------------------------

# 🚀 GUÍA DE INICIO RÁPIDO

## 1. Instalación

```bash
# Clonar repositorio
git clone <tu-repositorio>
cd arbitrage-bot

# Instalar dependencias
npm install

# Configuración rápida
node setup.js
```

## 2. Configuración Mínima

### Opción A: Configuración Automática
```bash
node setup.js
```

### Opción B: Configuración Manual
1. Copiar `.env.example` a `.env`
2. Editar `src/strategies/config.js`
3. Configurar API keys de exchanges

## 3. Primer Uso

```bash
# Iniciar en modo simulación
npm start

# Ver dashboard
http://localhost:3000
```

## 4. Configuraciones Importantes

### Cambiar a Trading Real
```javascript
// En config.js
TRADING_MODE: "live"
```

### Ajustar Ganancia Mínima
```javascript
// En config.js
BASIC: {
    minProfitPercentage: 0.5 // 0.5% mínimo
}
```

### Configurar Alertas
```javascript
// En config.js
ALERTS: {
    CHANNELS: {
        EMAIL: { enabled: true },
        TELEGRAM: { enabled: true }
    }
}
```

## 5. Monitoreo

- **Dashboard**: http://localhost:3000
- **API**: http://localhost:3001
- **Logs**: `tail -f logs/combined.log`

## 6. Comandos Útiles

```bash
# Parar bot
Ctrl+C

# Ver logs en tiempo real
npm run logs

# Ejecutar backtest
npm run backtest

# Verificar configuración
npm run check
```

-------------------------------------------------------------------------------------------------------

// ========== CONFIGURACIÓN INICIAL ==========
require('dotenv').config();

// Chequeo de módulos requeridos
function requireSafe(modulePath, label) {
  try {
    return require(modulePath);
  } catch (e) {
    console.error(`❌ Error: No se pudo cargar el módulo "${label}" (${modulePath})`);
    process.exit(1);
  }
}

// Cargar módulo principal
let CEXArbitrageBot;
try {
  const cexModule = require('./src/core/cex-arbitrage-bot');
  CEXArbitrageBot = cexModule.CEXArbitrageBot || cexModule.default || cexModule;
  if (!CEXArbitrageBot) throw new Error("No se encontró la clase CEXArbitrageBot");
} catch (error) {
  console.error("❌ Error cargando el módulo principal:", error);
  process.exit(1);
}

// Configuración completa
const config = {
  GENERAL: {
    PORT: process.env.PORT || 8888,
    DRY_RUN: process.env.DRY_RUN === 'true'
  },
  MOBILE_API: {
    PORT: process.env.MOBILE_API_PORT || 8426
  },
  AI_TRADING: {
    ENABLED: process.env.AI_TRADING_ENABLED === 'true'
  },
  BACKTESTING: {
    ENABLED: process.env.BACKTESTING_ENABLED === 'true'
  },
  ALERTS: {
    ENABLED: true,
    CHANNELS: {
      EMAIL: false,
      TELEGRAM: false,
      DISCORD: false
    }
  },
  EXCHANGES: {
    BINANCE: {
      API_KEY: process.env.BINANCE_API_KEY,
      API_SECRET: process.env.BINANCE_API_SECRET
    },
    BYBIT: {
      API_KEY: process.env.BYBIT_API_KEY,
      API_SECRET: process.env.BYBIT_API_SECRET
    }
  },
  TRADING_PAIRS: [
    { symbol: 'LTCUSDT', minProfit: 0.002 },
    { symbol: 'BNBUSDT', minProfit: 0.003 },
    { symbol: 'XRPUSDT', minProfit: 0.005 }
  ]
};

// Cargar otros módulos con la configuración
const StrategyManager = requireSafe("./src/strategies/strategy-manager", "StrategyManager");
const { PortfolioManager } = requireSafe("./src/portfolio/portfolio-manager", "PortfolioManager");
const { MLEngine } = requireSafe("./src/ai/ml-engine", "MLEngine");
const { BacktestEngine } = requireSafe("./src/backtesting/backtest-engine", "BacktestEngine");
const AlertManager = requireSafe("./src/alerts/alert-manager", "AlertManager").AlertManager;
const { AdvancedRiskManager } = requireSafe("./src/risk/advanced-risk-manager", "AdvancedRiskManager");
const { MobileAPI } = requireSafe("./src/mobile/mobile-api", "MobileAPI");
const express = requireSafe("express", "Express");

// ========== CLASE MEJORADA DEL BOT ==========
class EnhancedArbitrageBot extends CEXArbitrageBot {
  constructor() {
    super(config);

    // Inicializar componentes con configuración
    this.strategyManager = new StrategyManager(config);
    this.portfolioManager = new PortfolioManager(config);
    this.mlEngine = new MLEngine(config);
    this.backtestEngine = new BacktestEngine(this.strategyManager, config);
    this.alertManager = new AlertManager(config);
    this.advancedRiskManager = new AdvancedRiskManager(config);
    this.mobileAPI = new MobileAPI(config);

    this.setupMobileAPI();
    this.connectAlertManager();

    console.log("🚀 Bot inicializado correctamente");
  }

  setupMobileAPI() {
    const app = express();
    app.use(express.json());
    app.use("/api/mobile", this.mobileAPI.getRouter());
    
    const port = config.MOBILE_API.PORT;
    app.listen(port, () => {
      console.log(`📱 API Móvil en puerto ${port}`);
    });
  }

  connectAlertManager() {
    this.alertManager.getBotStatus = async () => ({
      isRunning: true,
      totalProfit: 0,
      dailyTrades: 0,
      successRate: 0,
      strategy: "default"
    });
  }

  async start() {
    if (config.AI_TRADING.ENABLED) {
      await this.mlEngine.loadModels();
    }
    console.log("🤖 Bot iniciado correctamente");
  }

  async stop() {
    console.log("🛑 Bot detenido correctamente");
  }
}

// ========== INICIAR EL BOT ==========
if (require.main === module) {

  const bot = new CEXArbitrageBot(config)

  process.on("SIGINT", async () => {
    await bot.stop();
    process.exit(0);
  });

  process.on("uncaughtException", (error) => {
    console.error("💥 Error crítico:", error);
    process.exit(1);
  });

  bot.start().catch(error => {
    console.error("❌ Error al iniciar:", error);
    process.exit(1);
  });
}

module.exports = { EnhancedArbitrageBot };

-----------------------------------------------------------------------------------------------------------

Manual Completo del Bot - "La Biblia del Bot"


# 📚 MANUAL COMPLETO DEL BOT DE ARBITRAJE CEX - "LA BIBLIA DEL BOT"

## 📋 ÍNDICE

1. [Configuración General](#configuración-general)
2. [Configuración de Exchanges](#configuración-de-exchanges)
3. [Estrategias de Trading](#estrategias-de-trading)
4. [Gestión de Riesgos](#gestión-de-riesgos)
5. [Portfolio y Balances](#portfolio-y-balances)
6. [Alertas y Notificaciones](#alertas-y-notificaciones)
7. [Inteligencia Artificial](#inteligencia-artificial)
8. [Backtesting](#backtesting)
9. [API Móvil](#api-móvil)
10. [Dashboard Web](#dashboard-web)
11. [Logs y Monitoreo](#logs-y-monitoreo)
12. [Seguridad](#seguridad)
13. [Troubleshooting](#troubleshooting)

---

## 🔧 CONFIGURACIÓN GENERAL

### Archivo Principal: `/src/strategies/config.js`

```javascript
// CONFIGURACIÓN BÁSICA DEL BOT
const config = {
    // ===== CONFIGURACIÓN GENERAL =====
    BOT_NAME: "CEX Arbitrage Bot IA",
    VERSION: "2.0.0",
    ENVIRONMENT: "production", // "development" | "production" | "testing"
    
    // ===== MODO DE OPERACIÓN =====
    TRADING_MODE: "simulation", // "simulation" | "live"
    
    // ===== PARES DE TRADING =====
    TRADING_PAIRS: [
        "BTC/USDT",
        "ETH/USDT", 
        "XRP/USDT",
        "ADA/USDT",
        "DOT/USDT"
    ],
    
    // ===== INTERVALOS DE TIEMPO =====
    SCAN_INTERVAL: 5000,        // Cada 5 segundos
    PRICE_UPDATE_INTERVAL: 2000, // Cada 2 segundos
    BALANCE_CHECK_INTERVAL: 30000, // Cada 30 segundos
}
```

### ⚙️ Cómo Modificar la Configuración General

1. **Cambiar Modo de Trading**:
   ```javascript
   TRADING_MODE: "live" // Para trading real
   TRADING_MODE: "simulation" // Para simulación
   ```

2. **Añadir Nuevos Pares**:
   ```javascript
   TRADING_PAIRS: [
       "BTC/USDT",
       "ETH/USDT",
       "MATIC/USDT", // ← Nuevo par
       "LINK/USDT"   // ← Nuevo par
   ]
   ```

3. **Ajustar Velocidad del Bot**:
   ```javascript
   SCAN_INTERVAL: 3000, // Más rápido (cada 3 segundos)
   SCAN_INTERVAL: 10000, // Más lento (cada 10 segundos)
   ```

---

## 🏦 CONFIGURACIÓN DE EXCHANGES

### Configuración de APIs

```javascript
EXCHANGES: {
    BINANCE: {
        enabled: true,
        name: "Binance",
        apiKey: "TU_API_KEY_BINANCE",
        apiSecret: "TU_API_SECRET_BINANCE",
        sandbox: false, // true para testnet
        rateLimit: 1200,
        fees: {
            maker: 0.001, // 0.1%
            taker: 0.001  // 0.1%
        }
    },
    COINBASE: {
        enabled: true,
        name: "Coinbase",
        apiKey: "TU_API_KEY_COINBASE",
        apiSecret: "TU_API_SECRET_COINBASE",
        passphrase: "TU_PASSPHRASE_COINBASE",
        sandbox: false,
        rateLimit: 10,
        fees: {
            maker: 0.005, // 0.5%
            taker: 0.005  // 0.5%
        }
    }
}
```

### 🔑 Cómo Configurar APIs de Exchange

1. **Obtener API Keys**:
   - **Binance**: Spot Trading + Read Info permissions
   - **Coinbase**: View + Trade permissions
   - **Kraken**: Query Funds + Create & Modify Orders
   - **KuCoin**: General + Trade permissions

2. **Configurar Permisos Mínimos**:
   ```
   ✅ Leer información de cuenta
   ✅ Leer balances
   ✅ Crear órdenes spot
   ✅ Cancelar órdenes
   ❌ Retirar fondos (NO necesario)
   ❌ Transferir a otras cuentas (NO necesario)
   ```

3. **Habilitar/Deshabilitar Exchanges**:
   ```javascript
   BINANCE: {
       enabled: false, // ← Deshabilitar Binance
   }
   ```

### 💰 Gestión de Balances por Exchange

```javascript
PORTFOLIO: {
    INITIAL_BALANCE: 10000, // $10,000 USD total
    TARGET_ALLOCATION: {
        "Binance": 0.25,    // 25%
        "Coinbase": 0.25,   // 25%
        "Kraken": 0.25,     // 25%
        "Kucoin": 0.25      // 25%
    },
    MIN_BALANCE_PER_EXCHANGE: 100, // Mínimo $100 por exchange
    RESERVE_PERCENTAGE: 0.05 // 5% de reserva
}
```

---

## 🎯 ESTRATEGIAS DE TRADING

### Configuración de Estrategias

```javascript
STRATEGIES: {
    // ===== ARBITRAJE BÁSICO =====
    BASIC: {
        enabled: true,
        minProfitPercentage: 0.2,     // Mínimo 0.2% ganancia
        maxInvestmentPercentage: 0.1,  // Máximo 10% del balance
        maxSlippage: 0.05,            // Máximo 0.05% slippage
        executionTimeout: 30000       // 30 segundos timeout
    },
    
    // ===== ARBITRAJE TRIANGULAR =====
    TRIANGULAR: {
        enabled: true,
        minProfitPercentage: 0.15,    // Mínimo 0.15% ganancia
        maxInvestmentPercentage: 0.08, // Máximo 8% del balance
        intermediateCurrencies: ["ETH", "BNB", "USDC"],
        maxHops: 3                    // Máximo 3 saltos
    },
    
    // ===== ARBITRAJE ESTADÍSTICO =====
    STATISTICAL: {
        enabled: false,               // Deshabilitado por defecto
        minProfitPercentage: 0.1,
        lookbackPeriod: 100,          // 100 períodos históricos
        zScoreThreshold: 2.0,         // Umbral Z-Score
        meanReversionTime: 3600       // 1 hora
    },
    
    // ===== MACHINE LEARNING =====
    ML: {
        enabled: true,
        minProfitPercentage: 0.25,
        confidenceThreshold: 0.7,     // 70% confianza mínima
        modelUpdateFrequency: 86400,  // Actualizar cada 24 horas
        features: ["price", "volume", "volatility", "spread"]
    }
}
```

### 🎮 Cómo Cambiar Estrategias

1. **Habilitar/Deshabilitar Estrategias**:
   ```javascript
   BASIC: {
       enabled: false, // ← Deshabilitar arbitraje básico
   }
   ```

2. **Ajustar Rentabilidad Mínima**:
   ```javascript
   BASIC: {
       minProfitPercentage: 0.5, // ← Aumentar a 0.5% mínimo
   }
   ```

3. **Cambiar Tamaño de Inversión**:
   ```javascript
   BASIC: {
       maxInvestmentPercentage: 0.05, // ← Reducir a 5% máximo
   }
   ```

---

## ⚠️ GESTIÓN DE RIESGOS

### Configuración de Risk Management

```javascript
RISK_MANAGEMENT: {
    // ===== LÍMITES GENERALES =====
    MAX_DAILY_LOSS: 500,           // Máximo $500 pérdida diaria
    MAX_DRAWDOWN: 0.1,             // Máximo 10% drawdown
    MAX_EXPOSURE_PER_PAIR: 0.2,    // Máximo 20% por par
    MAX_EXPOSURE_PER_EXCHANGE: 0.3, // Máximo 30% por exchange
    
    // ===== STOP LOSS =====
    STOP_LOSS: {
        enabled: true,
        percentage: 0.02,           // 2% stop loss
        trailingStop: true,         // Stop loss dinámico
        trailingDistance: 0.01      // 1% distancia trailing
    },
    
    // ===== VOLATILIDAD =====
    VOLATILITY_LIMITS: {
        maxVolatility: 0.05,        // Máximo 5% volatilidad
        volatilityWindow: 24,       // Ventana de 24 horas
        pauseOnHighVolatility: true // Pausar si volatilidad alta
    },
    
    // ===== REBALANCEO =====
    REBALANCE_THRESHOLD: 0.15,     // Rebalancear si desviación > 15%
    AUTO_REBALANCE: true,          // Rebalanceo automático
    REBALANCE_FREQUENCY: 3600000   // Cada hora
}
```

### 🛡️ Cómo Ajustar el Risk Management

1. **Cambiar Límites de Pérdida**:
   ```javascript
   MAX_DAILY_LOSS: 200,    // ← Reducir a $200
   MAX_DRAWDOWN: 0.05,     // ← Reducir a 5%
   ```

2. **Configurar Stop Loss**:
   ```javascript
   STOP_LOSS: {
       enabled: true,
       percentage: 0.01,    // ← 1% stop loss más estricto
       trailingStop: false  // ← Deshabilitar trailing stop
   }
   ```

3. **Ajustar Límites de Exposición**:
   ```javascript
   MAX_EXPOSURE_PER_PAIR: 0.1,     // ← Máximo 10% por par
   MAX_EXPOSURE_PER_EXCHANGE: 0.2  // ← Máximo 20% por exchange
   ```

---

## 💼 PORTFOLIO Y BALANCES

### Configuración del Portfolio

```javascript
PORTFOLIO: {
    // ===== BALANCE INICIAL =====
    INITIAL_BALANCE: 10000,        // $10,000 USD
    
    // ===== DISTRIBUCIÓN OBJETIVO =====
    TARGET_ALLOCATION: {
        "Binance": 0.30,           // 30%
        "Coinbase": 0.25,          // 25%
        "Kraken": 0.25,            // 25%
        "Kucoin": 0.20             // 20%
    },
    
    // ===== REBALANCEO =====
    REBALANCE_FREQUENCY: 3600000,  // Cada hora
    MIN_BALANCE_PER_EXCHANGE: 100, // Mínimo $100
    RESERVE_PERCENTAGE: 0.05,      // 5% reserva
    
    // ===== AUTO-COMPOUND =====
    AUTO_COMPOUND: true,           // Reinvertir ganancias
    COMPOUND_THRESHOLD: 100        // Reinvertir cada $100 ganancia
}
```

### 💰 Cómo Gestionar el Portfolio

1. **Cambiar Balance Inicial**:
   ```javascript
   INITIAL_BALANCE: 5000, // ← Cambiar a $5,000
   ```

2. **Modificar Distribución**:
   ```javascript
   TARGET_ALLOCATION: {
       "Binance": 0.50,    // ← 50% en Binance
       "Coinbase": 0.30,   // ← 30% en Coinbase
       "Kraken": 0.20      // ← 20% en Kraken
   }
   ```

3. **Configurar Auto-Compound**:
   ```javascript
   AUTO_COMPOUND: false,        // ← Deshabilitar reinversión
   COMPOUND_THRESHOLD: 50       // ← Reinvertir cada $50
   ```

---

## 🔔 ALERTAS Y NOTIFICACIONES

### Configuración de Alertas

```javascript
ALERTS: {
    ENABLED: true,
    
    // ===== CANALES DE NOTIFICACIÓN =====
    CHANNELS: {
        EMAIL: {
            enabled: true,
            smtp: {
                host: "smtp.gmail.com",
                port: 587,
                secure: false,
                auth: {
                    user: "tu-email@gmail.com",
                    pass: "tu-app-password"
                }
            },
            from: "bot@tudominio.com",
            to: ["tu-email@gmail.com"]
        },
        
        TELEGRAM: {
            enabled: true,
            botToken: "TU_BOT_TOKEN_TELEGRAM",
            chatId: "TU_CHAT_ID",
            parseMode: "HTML"
        },
        
        DISCORD: {
            enabled: false,
            webhookUrl: "TU_WEBHOOK_DISCORD"
        },
        
        SLACK: {
            enabled: false,
            webhookUrl: "TU_WEBHOOK_SLACK"
        }
    },
    
    // ===== TIPOS DE ALERTAS =====
    ALERT_TYPES: {
        TRADE_EXECUTED: {
            enabled: true,
            priority: "medium",
            channels: ["email", "telegram"]
        },
        PROFIT_TARGET: {
            enabled: true,
            priority: "high",
            channels: ["email", "telegram"],
            threshold: 100 // Alertar cada $100 ganancia
        },
        RISK_WARNING: {
            enabled: true,
            priority: "high",
            channels: ["email", "telegram"]
        },
        DAILY_SUMMARY: {
            enabled: true,
            priority: "low",
            channels: ["email"],
            time: "23:59"
        }
    }
}
```

### 📱 Cómo Configurar Notificaciones

1. **Configurar Email**:
   ```javascript
   EMAIL: {
       enabled: true,
       smtp: {
           host: "smtp.gmail.com",
           auth: {
               user: "tu-email@gmail.com",
               pass: "tu-app-password" // ← Usar App Password de Gmail
           }
       },
       to: ["email1@gmail.com", "email2@gmail.com"] // ← Múltiples emails
   }
   ```

2. **Configurar Telegram**:
   - Crear bot con @BotFather
   - Obtener token del bot
   - Obtener chat ID enviando mensaje al bot
   ```javascript
   TELEGRAM: {
       enabled: true,
       botToken: "123456789:ABCdefGHIjklMNOpqrsTUVwxyz", // ← Token del bot
       chatId: "123456789" // ← Tu chat ID
   }
   ```

3. **Personalizar Alertas**:
   ```javascript
   PROFIT_TARGET: {
       enabled: true,
       threshold: 50, // ← Alertar cada $50 en lugar de $100
       channels: ["telegram"] // ← Solo por Telegram
   }
   ```

---

## 🤖 INTELIGENCIA ARTIFICIAL

### Configuración de IA

```javascript
AI_TRADING: {
    ENABLED: true,
    
    // ===== RUTAS DE MODELOS =====
    MODEL_PATH: "./models",
    
    // ===== DATOS DE ENTRENAMIENTO =====
    TRAINING_DATA_DAYS: 30,        // 30 días de datos
    PREDICTION_HORIZON: 3600,      // Predecir 1 hora adelante
    
    // ===== CARACTERÍSTICAS =====
    FEATURES: [
        "price",
        "volume", 
        "volatility",
        "spread",
        "momentum",
        "rsi",
        "macd"
    ],
    
    // ===== MODELOS =====
    MODELS: {
        PRICE_PREDICTION: {
            type: "lstm",
            epochs: 100,
            batchSize: 32,
            learningRate: 0.001
        },
        OPPORTUNITY_SCORING: {
            type: "random_forest",
            nEstimators: 100,
            maxDepth: 10
        },
        RISK_ASSESSMENT: {
            type: "gradient_boosting",
            nEstimators: 50,
            learningRate: 0.1
        }
    },
    
    // ===== AUTO-REENTRENAMIENTO =====
    AUTO_RETRAIN: true,
    RETRAIN_THRESHOLD: 0.1         // Reentrenar si precisión < 90%
}
```

### 🧠 Cómo Configurar la IA

1. **Habilitar/Deshabilitar IA**:
   ```javascript
   AI_TRADING: {
       ENABLED: false, // ← Deshabilitar IA completamente
   }
   ```

2. **Ajustar Datos de Entrenamiento**:
   ```javascript
   TRAINING_DATA_DAYS: 60,    // ← Usar 60 días de datos
   PREDICTION_HORIZON: 1800   // ← Predecir 30 minutos
   ```

3. **Modificar Características**:
   ```javascript
   FEATURES: [
       "price",
       "volume",
       "spread"  // ← Solo usar estas 3 características
   ]
   ```

---

## 📊 BACKTESTING

### Configuración de Backtesting

```javascript
BACKTESTING: {
    ENABLED: true,
    
    // ===== FUENTE DE DATOS =====
    DATA_SOURCE: "historical", // "historical" | "simulation"
    DEFAULT_PERIOD: 30,        // 30 días por defecto
    
    // ===== COSTOS DE TRADING =====
    COMMISSION_RATE: 0.001,    // 0.1% comisión
    SLIPPAGE_RATE: 0.0005,     // 0.05% slippage
    
    // ===== CAPITAL INICIAL =====
    INITIAL_CAPITAL: 10000,    // $10,000
    
    // ===== BENCHMARK =====
    BENCHMARK: "BTC",          // Comparar con BTC
    
    // ===== MÉTRICAS =====
    METRICS: [
        "total_return",
        "sharpe_ratio",
        "max_drawdown",
        "win_rate",
        "profit_factor"
    ],
    
    // ===== MONTE CARLO =====
    MONTE_CARLO_SIMULATIONS: 1000,
    CONFIDENCE_INTERVALS: [0.95, 0.99]
}
```

### 📈 Cómo Usar el Backtesting

1. **Ejecutar Backtest Básico**:
   ```javascript
   // En el código del bot
   const backtester = new BacktestEngine(config);
   
   const results = await backtester.runBacktest({
       strategy: 'basic',
       pairs: ['BTC/USDT', 'ETH/USDT'],
       startDate: new Date('2024-01-01'),
       endDate: new Date('2024-01-31')
   });
   ```

2. **Cambiar Período de Prueba**:
   ```javascript
   DEFAULT_PERIOD: 90, // ← Probar con 90 días
   ```

3. **Ajustar Costos**:
   ```javascript
   COMMISSION_RATE: 0.0005, // ← Reducir comisión a 0.05%
   SLIPPAGE_RATE: 0.001     // ← Aumentar slippage a 0.1%
   ```

---

## 📱 API MÓVIL

### Configuración de API Móvil

```javascript
MOBILE_API: {
    ENABLED: true,
    PORT: 3001,
    
    // ===== AUTENTICACIÓN =====
    JWT_SECRET: "tu-jwt-secret-muy-seguro",
    JWT_EXPIRY: "24h",
    
    // ===== RATE LIMITING =====
    RATE_LIMIT: {
        windowMs: 15 * 60 * 1000, // 15 minutos
        max: 100                   // 100 requests por ventana
    },
    
    // ===== CORS =====
    CORS: {
        origin: ["http://localhost:3000", "https://tu-app.com"],
        credentials: true
    },
    
    // ===== ENDPOINTS =====
    ENDPOINTS: {
        STATUS: "/api/mobile/status",
        TRADES: "/api/mobile/trades",
        PORTFOLIO: "/api/mobile/portfolio",
        ALERTS: "/api/mobile/alerts",
        SETTINGS: "/api/mobile/settings"
    },
    
    // ===== NOTIFICACIONES PUSH =====
    PUSH_NOTIFICATIONS: {
        enabled: true,
        fcmServerKey: "TU_FCM_SERVER_KEY"
    }
}
```

### 📲 Cómo Configurar la API Móvil

1. **Cambiar Puerto**:
   ```javascript
   PORT: 8080, // ← Cambiar a puerto 8080
   ```

2. **Configurar CORS**:
   ```javascript
   CORS: {
       origin: ["https://mi-app.com"], // ← Solo tu dominio
       credentials: true
   }
   ```

3. **Ajustar Rate Limiting**:
   ```javascript
   RATE_LIMIT: {
       windowMs: 5 * 60 * 1000, // ← 5 minutos
       max: 50                   // ← 50 requests máximo
   }
   ```

---

## 🖥️ DASHBOARD WEB

### Configuración del Dashboard

```javascript
DASHBOARD: {
    ENABLED: true,
    PORT: 3000,
    
    // ===== AUTENTICACIÓN =====
    AUTH: {
        enabled: true,
        username: "admin",
        password: "admin123" // ← CAMBIAR ESTO
    },
    
    // ===== ACTUALIZACIÓN =====
    UPDATE_INTERVAL: 5000,     // Actualizar cada 5 segundos
    
    // ===== GRÁFICOS =====
    CHARTS: {
        maxDataPoints: 100,    // Máximo 100 puntos en gráficos
        timeframe: "1h"        // Timeframe por defecto
    },
    
    // ===== TEMA =====
    THEME: {
        darkMode: true,        // Modo oscuro por defecto
        primaryColor: "#007bff"
    }
}
```

### 🎨 Cómo Personalizar el Dashboard

1. **Cambiar Credenciales**:
   ```javascript
   AUTH: {
       enabled: true,
       username: "mi-usuario",     // ← Tu usuario
       password: "mi-password-seguro" // ← Tu password
   }
   ```

2. **Ajustar Actualización**:
   ```javascript
   UPDATE_INTERVAL: 2000, // ← Actualizar cada 2 segundos
   ```

3. **Personalizar Tema**:
   ```javascript
   THEME: {
       darkMode: false,           // ← Modo claro
       primaryColor: "#28a745"    // ← Color verde
   }
   ```

---

## 📝 LOGS Y MONITOREO

### Configuración de Logs

```javascript
LOGGING: {
    ENABLED: true,
    LEVEL: "info", // "error" | "warn" | "info" | "debug"
    
    // ===== ARCHIVOS DE LOG =====
    FILES: {
        error: "./logs/error.log",
        combined: "./logs/combined.log",
        trades: "./logs/trades.log"
    },
    
    // ===== ROTACIÓN =====
    ROTATION: {
        maxSize: "20m",        // Máximo 20MB por archivo
        maxFiles: "14d"        // Mantener 14 días
    },
    
    // ===== FORMATO =====
    FORMAT: "json" // "json" | "simple"
}
```

### 📊 Monitoreo y Métricas

```javascript
MONITORING: {
    ENABLED: true,
    
    // ===== MÉTRICAS =====
    METRICS: {
        trades_per_hour: true,
        profit_per_hour: true,
        error_rate: true,
        latency: true
    },
    
    // ===== HEALTH CHECKS =====
    HEALTH_CHECKS: {
        interval: 60000,       // Cada minuto
        endpoints: [
            "exchanges",
            "database",
            "ai_models"
        ]
    }
}
```

---

## 🔒 SEGURIDAD

### Configuración de Seguridad

```javascript
SECURITY: {
    // ===== ENCRIPTACIÓN =====
    ENCRYPTION: {
        algorithm: "aes-256-gcm",
        keyLength: 32
    },
    
    // ===== API KEYS =====
    API_SECURITY: {
        encryptKeys: true,     // Encriptar API keys
        rotateKeys: false,     // Rotar keys automáticamente
        keyExpiry: 2592000     // 30 días
    },
    
    // ===== RATE LIMITING =====
    RATE_LIMITING: {
        enabled: true,
        requests_per_minute: 60
    },
    
    // ===== IP WHITELIST =====
    IP_WHITELIST: {
        enabled: false,
        allowed_ips: [
            "192.168.1.100",
            "10.0.0.50"
        ]
    }
}
```

### 🛡️ Mejores Prácticas de Seguridad

1. **Cambiar Passwords por Defecto**:
   ```javascript
   AUTH: {
       username: "tu-usuario-unico",
       password: "Password-Muy-Seguro-123!"
   }
   ```

2. **Usar Variables de Entorno**:
   ```bash
   # .env
   BINANCE_API_KEY=tu_api_key_real
   BINANCE_API_SECRET=tu_api_secret_real
   JWT_SECRET=tu_jwt_secret_muy_largo_y_seguro
   ```

3. **Habilitar IP Whitelist**:
   ```javascript
   IP_WHITELIST: {
       enabled: true,
       allowed_ips: ["tu.ip.publica.aqui"]
   }
   ```

---

## 🚀 COMANDOS DE EJECUCIÓN

### Iniciar el Bot

```bash
# Modo desarrollo
npm run dev

# Modo producción
npm start

# Con configuración específica
node src/server.js --config=production

# Solo simulación
node src/server.js --mode=simulation

# Con estrategia específica
node src/server.js --strategy=basic
```

### Scripts Útiles

```bash
# Ejecutar backtest
npm run backtest

# Limpiar logs
npm run clean-logs

# Verificar configuración
npm run check-config

# Actualizar modelos de IA
npm run update-models
```

---

## 🔧 TROUBLESHOOTING

### Problemas Comunes

1. **Error de API Keys**:
   ```
   Error: Invalid API key
   Solución: Verificar que las API keys sean correctas y tengan permisos
   ```

2. **Conexión a Exchange**:
   ```
   Error: Connection timeout
   Solución: Verificar conexión a internet y status del exchange
   ```

3. **Insuficientes Fondos**:
   ```
   Error: Insufficient balance
   Solución: Verificar balances en exchanges y ajustar INITIAL_BALANCE
   ```

4. **Modelo de IA No Carga**:
   ```
   Error: Model not found
   Solución: Ejecutar npm run update-models
   ```

### Logs de Debug

```javascript
// Habilitar logs detallados
LOGGING: {
    LEVEL: "debug", // ← Cambiar a debug
}

// Ver logs en tiempo real
tail -f logs/combined.log
```

### Verificar Estado

```bash
# Verificar que todo funcione
curl http://localhost:3001/api/mobile/health

# Verificar dashboard
curl http://localhost:3000/api/status
```

---

## 📞 SOPORTE Y CONTACTO

### Archivos Importantes

- **Configuración**: `/src/strategies/config.js`
- **Bot Principal**: `/src/strategies/arbitrage-bot.js`
- **Logs**: `/logs/`
- **Modelos IA**: `/models/`
- **Dashboard**: `/public/`

### Comandos de Emergencia

```bash
# Parar el bot inmediatamente
pkill -f "node src/server.js"

# Backup de configuración
cp src/strategies/config.js config.backup.js

# Restaurar configuración
cp config.backup.js src/strategies/config.js
```

---

## 📋 CHECKLIST DE CONFIGURACIÓN

### Antes de Iniciar

- [ ] Configurar API keys de exchanges
- [ ] Establecer balance inicial
- [ ] Configurar alertas (email/telegram)
- [ ] Verificar estrategias habilitadas
- [ ] Ajustar límites de riesgo
- [ ] Probar en modo simulación
- [ ] Configurar monitoreo

### Configuración Mínima

```javascript
// Configuración básica para empezar
const config = {
    TRADING_MODE: "simulation",
    TRADING_PAIRS: ["BTC/USDT"],
    EXCHANGES: {
        BINANCE: {
            enabled: true,
            apiKey: "TU_API_KEY",
            apiSecret: "TU_API_SECRET"
        }
    },
    STRATEGIES: {
        BASIC: {
            enabled: true,
            minProfitPercentage: 0.2
        }
    },
    RISK_MANAGEMENT: {
        MAX_DAILY_LOSS: 100,
        STOP_LOSS: { enabled: true, percentage: 0.02 }
    }
}
```

---

**¡IMPORTANTE!** 

- Siempre probar en modo `simulation` antes de usar `live`
- Nunca compartir tus API keys
- Hacer backup de la configuración antes de cambios importantes
- Monitorear los logs regularmente
- Empezar con cantidades pequeñas

---

*Este manual cubre todas las configuraciones posibles del bot. Guárdalo como referencia y modifica según tus necesidades.*
```

## 3. Archivo de Variables de Entorno

---------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-bot-ia",
  "version": "1.0.0",
  "description": "Bot de arbitraje CEX con IA avanzada",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "bot": "node main-bot-updated.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "arbitrage",
    "cryptocurrency",
    "trading",
    "bot",
    "ai",
    "machine-learning"
  ],
  "author": "Tu Nombre",
  "license": "MIT",
  "dependencies": {
    "@binance/connector": "^3.6.1",
    "axios": "^1.9.0",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.3",
    "bootstrap": "^5.3.6",
    "bootstrap-icons": "^1.13.1",
    "bybit-api": "^4.1.10",
    "ccxt": "^4.4.88",
    "chart.js": "^4.4.9",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.5.0",
    "express": "^4.21.2",
    "express-rate-limit": "^7.1.5",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "node-telegram-bot-api": "^0.64.0",
    "nodemailer": "^6.9.7",
    "path": "^0.12.7",
    "socket.io": "^4.7.4",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}

---------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-bot-ia",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cexs-arbitrage-bot-ia",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "@binance/connector": "^3.6.1",
        "axios": "^1.9.0",
        "bcryptjs": "^2.4.3",
        "body-parser": "^1.20.3",
        "bootstrap": "^5.3.6",
        "bootstrap-icons": "^1.13.1",
        "bybit-api": "^4.1.10",
        "ccxt": "^4.4.88",
        "chart.js": "^4.4.9",
        "cors": "^2.8.5",
        "crypto": "^1.0.1",
        "dotenv": "^16.5.0",
        "express": "^4.21.2",
        "express-rate-limit": "^7.1.5",
        "fs": "^0.0.1-security",
        "jsonwebtoken": "^9.0.2",
        "node-telegram-bot-api": "^0.64.0",
        "nodemailer": "^6.9.7",
        "path": "^0.12.7",
        "socket.io": "^4.7.4",
        "ws": "^8.14.2"
      },
      "devDependencies": {
        "nodemon": "^3.0.2"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/@binance/connector": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/@binance/connector/-/connector-3.6.1.tgz",
      "integrity": "sha512-qWswMYRywaYOzH3ISVsvk2V0nkcpJT91sRohln2isPryMtHqxXPqiJ4GU8G9fKVL0Pcz8CfctKvqQx4gB3DGHA==",
      "license": "MIT",
      "dependencies": {
        "axios": "^1.7.4",
        "ws": "^8.17.1"
      },
      "engines": {
        "node": ">=12.22.3",
        "npm": ">=6.14.13"
      }
    },
    "node_modules/@cypress/request": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/@cypress/request/-/request-3.0.8.tgz",
      "integrity": "sha512-h0NFgh1mJmm1nr4jCwkGHwKneVYKghUyWe6TMNrk0B9zsjAJxpg8C4/+BAcmLgCPa1vj1V8rNUaILl+zYRUWBQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~4.0.0",
        "http-signature": "~1.4.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "performance-now": "^2.1.0",
        "qs": "6.14.0",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "^5.0.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@cypress/request-promise": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@cypress/request-promise/-/request-promise-5.0.0.tgz",
      "integrity": "sha512-eKdYVpa9cBEw2kTBlHeu1PP16Blwtum6QHg/u9s/MoHkZfuo1pRGka1VlUHXF5kdew82BvOJVVGk0x8X0nbp+w==",
      "license": "ISC",
      "dependencies": {
        "bluebird": "^3.5.0",
        "request-promise-core": "1.1.3",
        "stealthy-require": "^1.1.1",
        "tough-cookie": "^4.1.3"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "@cypress/request": "^3.0.0"
      }
    },
    "node_modules/@cypress/request-promise/node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@cypress/request/node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/@discoveryjs/json-ext": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.5.7.tgz",
      "integrity": "sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz",
      "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@kurkle/color": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
      "integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
      "license": "MIT"
    },
    "node_modules/@polka/url": {
      "version": "1.0.0-next.29",
      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
      "integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.19",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/eslint": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz",
      "integrity": "sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.7",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz",
      "integrity": "sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/node": {
      "version": "24.0.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.1.tgz",
      "integrity": "sha512-MX4Zioh39chHlDJbKmEgydJDS3tspMP/lnQC67G3SWsTnb9NeYVWOjkxpOSy4oMfPs4StcWHwBrvUb4ybfnuaw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.8.0"
      }
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz",
      "integrity": "sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz",
      "integrity": "sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz",
      "integrity": "sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz",
      "integrity": "sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz",
      "integrity": "sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.13.2",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz",
      "integrity": "sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz",
      "integrity": "sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/wasm-gen": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz",
      "integrity": "sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz",
      "integrity": "sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz",
      "integrity": "sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz",
      "integrity": "sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/helper-wasm-section": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-opt": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1",
        "@webassemblyjs/wast-printer": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz",
      "integrity": "sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz",
      "integrity": "sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz",
      "integrity": "sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz",
      "integrity": "sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webpack-cli/configtest": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/configtest/-/configtest-1.2.0.tgz",
      "integrity": "sha512-4FB8Tj6xyVkyqjj1OaTqCjXYULB9FMkqQ8yGrZjRDrYh0nOE+7Lhs45WioWQQMV+ceFlE368Ukhe6xdvJM9Egg==",
      "license": "MIT",
      "optional": true,
      "peerDependencies": {
        "webpack": "4.x.x || 5.x.x",
        "webpack-cli": "4.x.x"
      }
    },
    "node_modules/@webpack-cli/info": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/info/-/info-1.5.0.tgz",
      "integrity": "sha512-e8tSXZpw2hPl2uMJY6fsMswaok5FdlGNRTktvFk2sD8RjH0hE2+XistawJx1vmKteh4NmGmNUrp+Tb2w+udPcQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "envinfo": "^7.7.3"
      },
      "peerDependencies": {
        "webpack-cli": "4.x.x"
      }
    },
    "node_modules/@webpack-cli/serve": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/serve/-/serve-1.7.0.tgz",
      "integrity": "sha512-oxnCNGj88fL+xzV+dacXs44HcDwf1ovs3AuEzvP7mqXw7fQntqIhQ1BRmynh4qEKQSSSRSWVyXRjmTbZIX9V2Q==",
      "license": "MIT",
      "optional": true,
      "peerDependencies": {
        "webpack-cli": "4.x.x"
      },
      "peerDependenciesMeta": {
        "webpack-dev-server": {
          "optional": true
        }
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/abab": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
      "integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
      "deprecated": "Use your platform's native atob() and btoa() methods instead",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array.prototype.findindex": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/array.prototype.findindex/-/array.prototype.findindex-2.2.4.tgz",
      "integrity": "sha512-LLm4mhxa9v8j0A/RPnpQAP4svXToJFh+Hp1pNYl5ZD5qpB4zdx/D4YjpVcETkhFbUKWO3iGMVLvrOnnmkAJT6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
      "integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
      "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
      "license": "MIT"
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bl": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/bl/-/bl-1.2.3.tgz",
      "integrity": "sha512-pvcNpa0UU69UT341rO6AYy4FVAIkUHuZXRIWbq+zHnsVcRzDDjIAhGuuYoi0d//cwIwtt4pkpKycWEfjdV+vww==",
      "license": "MIT",
      "dependencies": {
        "readable-stream": "^2.3.5",
        "safe-buffer": "^5.1.1"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bootstrap": {
      "version": "5.3.6",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-5.3.6.tgz",
      "integrity": "sha512-jX0GAcRzvdwISuvArXn3m7KZscWWFAf1MKBcnzaN02qWMb3jpMoUX4/qgeiGzqyIb4ojulRzs89UCUmGcFSzTA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "@popperjs/core": "^2.11.8"
      }
    },
    "node_modules/bootstrap-icons": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/bootstrap-icons/-/bootstrap-icons-1.13.1.tgz",
      "integrity": "sha512-ijombt4v6bv5CLeXvRWKy7CuM3TRTuPEuGaGKvTV5cz65rQSY8RQ2JcHt6b90cBBAC7s8fsf2EkQDldzCoXUjw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.0.tgz",
      "integrity": "sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001718",
        "electron-to-chromium": "^1.5.160",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/bybit-api": {
      "version": "4.1.10",
      "resolved": "https://registry.npmjs.org/bybit-api/-/bybit-api-4.1.10.tgz",
      "integrity": "sha512-Z0L2FJEKni6kL5gj9Ku2XssgtugTZ09h3Exb933HFvFvdLFA0quDiEHdVjWEEqZAR2VZFpIqFq1VsxAMmzUD5w==",
      "license": "MIT",
      "dependencies": {
        "axios": "^1.7.9",
        "isomorphic-ws": "^4.0.1",
        "ws": "^7.4.0"
      },
      "funding": {
        "type": "individual",
        "url": "https://github.com/sponsors/tiagosiebler"
      },
      "optionalDependencies": {
        "source-map-loader": "^2.0.0",
        "ts-loader": "^8.0.11",
        "webpack": "^5.4.0",
        "webpack-bundle-analyzer": "^4.1.0",
        "webpack-cli": "^4.2.0"
      }
    },
    "node_modules/bybit-api/node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001723",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001723.tgz",
      "integrity": "sha512-1R/elMjtehrFejxwmexeXAtae5UO9iSyFn6G/I806CYC/BLyyBk1EPhrKBkWhy6wM6Xnm47dSJQec+tLJ39WHw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0",
      "optional": true
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
      "license": "Apache-2.0"
    },
    "node_modules/ccxt": {
      "version": "4.4.89",
      "resolved": "https://registry.npmjs.org/ccxt/-/ccxt-4.4.89.tgz",
      "integrity": "sha512-5iX8BcbVFo/APqZpVD58F+aL8etJi8Rr60yGIcM8Eu0tm19HpUDy08uHo7tJOaUKEqlds78GCbTmF6BVp5ECLA==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "ws": "^8.8.1"
      },
      "engines": {
        "node": ">=15.0.0"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chalk/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chart.js": {
      "version": "4.4.9",
      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.9.tgz",
      "integrity": "sha512-EyZ9wWKgpAU0fLJ43YAEIF8sr5F2W3LqbS40ZJyHIner2lY14ufqv2VMp69MAiZ2rpwxEUxEhIH/0U3xyRynxg==",
      "license": "MIT",
      "dependencies": {
        "@kurkle/color": "^0.3.0"
      },
      "engines": {
        "pnpm": ">=8"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/clone-deep": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz",
      "integrity": "sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-plain-object": "^2.0.4",
        "kind-of": "^6.0.2",
        "shallow-clone": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz",
      "integrity": "sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==",
      "deprecated": "This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.",
      "license": "ISC"
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debounce": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
      "integrity": "sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dotenv": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
      "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
      "license": "MIT",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.167",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.167.tgz",
      "integrity": "sha512-LxcRvnYO5ez2bMOFpbuuVuAI5QNeY1ncVytE/KXaL6ZNfzX1yPlAO0nSOyIHx2fVAuUprMqPs/TdVhUFZy7SIQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/engine.io": {
      "version": "6.6.4",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.6.4.tgz",
      "integrity": "sha512-ZCkIjSYNDyGn0R6ewHDtXgns/Zre/NT6Agvq1/WobF7JXgFff4SeDroKiCO3fNJreU9YG429Sc81o4w5ok/W5g==",
      "license": "MIT",
      "dependencies": {
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.7.2",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/engine.io/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-4.5.0.tgz",
      "integrity": "sha512-Nv9m36S/vxpsI+Hc4/ZGRs0n9mXqSWGGq49zxb/cJfPAQMbUtttJAlNPS4AQzaBdw/pKskw5bMbekT/Y7W/Wlg==",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "memory-fs": "^0.5.0",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/envinfo": {
      "version": "7.14.0",
      "resolved": "https://registry.npmjs.org/envinfo/-/envinfo-7.14.0.tgz",
      "integrity": "sha512-CO40UI41xDQzhLB1hWyqUKgFhs250pNcGbyGKe1l/e4FSaI/+YE4IMG76GDt0In67WLPACIITC+sOi08x4wIvg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "envinfo": "dist/cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/errno": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/errno/-/errno-0.1.8.tgz",
      "integrity": "sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "prr": "~1.0.1"
      },
      "bin": {
        "errno": "cli.js"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esrecurse/node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-3.1.2.tgz",
      "integrity": "sha512-tvtQIeLVHjDkJYnzf2dgVMxfuSGJeM/7UCG17TT4EumTfNtF+0nebF/4zWOIkCreAbtNqhGEboB6BWrwqNaw4Q==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "7.5.0",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/express-rate-limit"
      },
      "peerDependencies": {
        "express": "^4.11 || 5 || ^5.0.0-beta.1"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/fast-uri": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/fastest-levenshtein": {
      "version": "1.0.16",
      "resolved": "https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz",
      "integrity": "sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4.9.1"
      }
    },
    "node_modules/file-type": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/file-type/-/file-type-3.9.0.tgz",
      "integrity": "sha512-RLoqTXE8/vPmMuTI88DAzhMYC99I8BWv7zYP4A1puo5HIjEJ5EX48ighy4ZyKMG9EDXxBgW6e++cn7d1xuFghA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/flat/-/flat-5.0.2.tgz",
      "integrity": "sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==",
      "license": "BSD-3-Clause",
      "optional": true,
      "bin": {
        "flat": "cli.js"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs": {
      "version": "0.0.1-security",
      "resolved": "https://registry.npmjs.org/fs/-/fs-0.0.1-security.tgz",
      "integrity": "sha512-3XY9e1pP0CVEUCdj5BmfIZxRBTSDycnbqhIOGec9QYtmVH2fbLpj86CFWkrNOkt/Fvty4KZG5lTglL9j/gJ87w==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause",
      "optional": true
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
      "license": "ISC",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-signature": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.4.0.tgz",
      "integrity": "sha512-G5akfn7eKbpDN+8nPS/cb57YeA1jLTVxjpCj7tmm3QKPdyDy7T+qSC40e9ptydSWvkwjSXw1VbkpyEm39ukeAg==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^2.0.2",
        "sshpk": "^1.18.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/interpret": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/interpret/-/interpret-2.2.0.tgz",
      "integrity": "sha512-Ju0Bz/cEia55xDwUWEa8+olFpCiQoypjnQySseKtmjNrnps3P+xfpUmGr90T7yjlVJmOtybRvPXhKMbHr+fWnw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-plain-object": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
      "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "isobject": "^3.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/isobject": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
      "integrity": "sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isomorphic-ws": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
      "license": "MIT"
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
      "license": "ISC"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jsprim": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-2.0.2.tgz",
      "integrity": "sha512-gqXddjPqQ6G40VdnI6T6yObEC+pDNvyP95wdQhkWkg7crHH3km5qP1FsOXEkzEQwnz6gz5qGTn1c2Y52wP3OyQ==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-fs": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/memory-fs/-/memory-fs-0.5.0.tgz",
      "integrity": "sha512-jA0rdU5KoQMC0e6ppoNRtpp6vjFq6+NY7r8hywnC7V+1Xj/MtHwGIbB1QaK/dunyjWteJzmkpd7ooeWg10T7GA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "errno": "^0.1.3",
        "readable-stream": "^2.0.1"
      },
      "engines": {
        "node": ">=4.3.0 <5.0.0 || >=5.10"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mrmime": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
      "integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/node-telegram-bot-api": {
      "version": "0.64.0",
      "resolved": "https://registry.npmjs.org/node-telegram-bot-api/-/node-telegram-bot-api-0.64.0.tgz",
      "integrity": "sha512-/gxCuaEDUyWMBiHInP0ufopUkaaKprXiv3lyP9MMZdPy2KPfYKNYNKfd1Ph7o9KhfURDtOYowPZCi4UCr+2caw==",
      "license": "MIT",
      "dependencies": {
        "@cypress/request": "^3.0.1",
        "@cypress/request-promise": "^5.0.0",
        "array.prototype.findindex": "^2.0.2",
        "bl": "^1.2.3",
        "debug": "^3.2.7",
        "eventemitter3": "^3.0.0",
        "file-type": "^3.9.0",
        "mime": "^1.6.0",
        "pump": "^2.0.0"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/node-telegram-bot-api/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/node-telegram-bot-api/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nodemailer": {
      "version": "6.10.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
      "license": "MIT-0",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "license": "Apache-2.0",
      "peer": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/opener": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/opener/-/opener-1.5.2.tgz",
      "integrity": "sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==",
      "license": "(WTFPL OR MIT)",
      "optional": true,
      "bin": {
        "opener": "bin/opener-bin.js"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path": {
      "version": "0.12.7",
      "resolved": "https://registry.npmjs.org/path/-/path-0.12.7.tgz",
      "integrity": "sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==",
      "license": "MIT",
      "dependencies": {
        "process": "^0.11.1",
        "util": "^0.10.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/prr": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/prr/-/prr-1.0.1.tgz",
      "integrity": "sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/psl": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/lupomontero"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pump": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pump/-/pump-2.0.1.tgz",
      "integrity": "sha512-ruPMNRkN3MHP1cWJc9OWr+T/xDP0jhXYCLfJcBuX54hhfIBnaQmAUMfDcG4DM5UMWByBbJY69QSphm3jtDKIkA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT"
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/rechoir": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.7.1.tgz",
      "integrity": "sha512-/njmZ8s1wVeR6pjTZ+0nCnv8SpZNRMT2D1RLOJQESlYFDBvwpTA4KWJpZ+sBJ4+vhjILRcK7JIFdGCdxEAAitg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "resolve": "^1.9.0"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request-promise-core": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/request-promise-core/-/request-promise-core-1.1.3.tgz",
      "integrity": "sha512-QIs2+ArIGQVp5ZYbWD5ZLCY29D5CfWizP8eWnm8FoGD1TX61veauETVQbrV60662V0oFBkrDOuaBI8XgtuyYAQ==",
      "license": "ISC",
      "dependencies": {
        "lodash": "^4.17.15"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "request": "^2.34"
      }
    },
    "node_modules/request/node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/request/node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/request/node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "license": "BSD-3-Clause",
      "peer": true,
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "license": "MIT",
      "peer": true,
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-array-concat/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-push-apply/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/schema-utils": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.2.tgz",
      "integrity": "sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/schema-utils/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/schema-utils/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/schema-utils/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shallow-clone": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz",
      "integrity": "sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "kind-of": "^6.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sirv": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/sirv/-/sirv-2.0.4.tgz",
      "integrity": "sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@polka/url": "^1.0.0-next.24",
        "mrmime": "^2.0.0",
        "totalist": "^3.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/socket.io": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.8.1.tgz",
      "integrity": "sha512-oZ7iUCxph8WYRHHcjBEc9unw3adt5CmSNlppj/5Q4k2RIrhl8Z5yY2Xr4j9zj0+wzVZ0bxmYoGSzKJnRl6A4yg==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.6.0",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/socket.io-adapter/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-0.6.2.tgz",
      "integrity": "sha512-/3GptzWzu0+0MBQFrDKzw/DvvMTUORvgY6k6jd/VS6iCR4RDTKWH6v6WPwQoUO8667uQEf9Oe38DxAYWY5F/Ug==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-loader": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/source-map-loader/-/source-map-loader-2.0.2.tgz",
      "integrity": "sha512-yIYkFOsKn+OdOirRJUPQpnZiMkF74raDVQjj5ni3SzbOiA57SabeX80R5zyMQAKpvKySA3Z4a85vFX3bvpC6KQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "abab": "^2.0.5",
        "iconv-lite": "^0.6.2",
        "source-map-js": "^0.6.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/source-map-loader/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sshpk": {
      "version": "1.18.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
      "license": "MIT",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stealthy-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/stealthy-require/-/stealthy-require-1.1.1.tgz",
      "integrity": "sha512-ZnWpYnYugiOVEY5GkcuJK1io5V8QmNYChG62gSit9pQVGErXtrKuPC55ITaVSukmMta5qpMU7vqLt2Lnni4f/g==",
      "license": "ISC",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/terser": {
      "version": "5.42.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.42.0.tgz",
      "integrity": "sha512-UYCvU9YQW2f/Vwl+P0GfhxJxbUGLwd+5QrrGgLajzWAtC/23AX0vcise32kkP7Eu0Wu9VlzzHAXkLObgjQfFlQ==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.14.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.14",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "jest-worker": "^27.4.5",
        "schema-utils": "^4.3.0",
        "serialize-javascript": "^6.0.2",
        "terser": "^5.31.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/tldts": {
      "version": "6.1.86",
      "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.86.tgz",
      "integrity": "sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==",
      "license": "MIT",
      "dependencies": {
        "tldts-core": "^6.1.86"
      },
      "bin": {
        "tldts": "bin/cli.js"
      }
    },
    "node_modules/tldts-core": {
      "version": "6.1.86",
      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.86.tgz",
      "integrity": "sha512-Je6p7pkk+KMzMv2XXKmAE3McmolOQFdxkKw0R8EYNr7sELW46JqnNeTX8ybPiQgvg1ymCoF8LXs5fzFaZvJPTA==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/totalist": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
      "integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tough-cookie": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-5.1.2.tgz",
      "integrity": "sha512-FVDYdxtnj0G6Qm/DhNPSb8Ju59ULcup3tuJxkFb5K8Bv2pUXILbf0xZWU8PX8Ov19OXljbUyveOFwRMwkXzO+A==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tldts": "^6.1.32"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/ts-loader": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/ts-loader/-/ts-loader-8.4.0.tgz",
      "integrity": "sha512-6nFY3IZ2//mrPc+ImY3hNWx1vCHyEhl6V+wLmL4CZcm6g1CqX7UKrkc6y0i4FwcfOhxyMPCfaEvh20f4r9GNpw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "chalk": "^4.1.0",
        "enhanced-resolve": "^4.0.0",
        "loader-utils": "^2.0.0",
        "micromatch": "^4.0.0",
        "semver": "^7.3.4"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "typescript": "*",
        "webpack": "*"
      }
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==",
      "license": "Unlicense"
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "license": "Apache-2.0",
      "optional": true,
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
      "license": "MIT"
    },
    "node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "peer": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util": {
      "version": "0.10.4",
      "resolved": "https://registry.npmjs.org/util/-/util-0.10.4.tgz",
      "integrity": "sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==",
      "license": "MIT",
      "dependencies": {
        "inherits": "2.0.3"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/util/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
      "license": "ISC"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/verror/node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
      "license": "MIT"
    },
    "node_modules/watchpack": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.4.tgz",
      "integrity": "sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack": {
      "version": "5.99.9",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.99.9.tgz",
      "integrity": "sha512-brOPwM3JnmOa+7kd3NsmOUOwbDAj8FT9xDsG3IW0MgbN9yZV7Oi/s/+MNQ/EcSMqw7qfoRyXPoeEWT8zLVdVGg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/eslint-scope": "^3.7.7",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "@webassemblyjs/ast": "^1.14.1",
        "@webassemblyjs/wasm-edit": "^1.14.1",
        "@webassemblyjs/wasm-parser": "^1.14.1",
        "acorn": "^8.14.0",
        "browserslist": "^4.24.0",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.1",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^4.3.2",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.3.11",
        "watchpack": "^2.4.1",
        "webpack-sources": "^3.2.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-bundle-analyzer": {
      "version": "4.10.2",
      "resolved": "https://registry.npmjs.org/webpack-bundle-analyzer/-/webpack-bundle-analyzer-4.10.2.tgz",
      "integrity": "sha512-vJptkMm9pk5si4Bv922ZbKLV8UTT4zib4FPgXMhgzUny0bfDDkLXAVQs3ly3fS4/TN9ROFtb0NFrm04UXFE/Vw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@discoveryjs/json-ext": "0.5.7",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "commander": "^7.2.0",
        "debounce": "^1.2.1",
        "escape-string-regexp": "^4.0.0",
        "gzip-size": "^6.0.0",
        "html-escaper": "^2.0.2",
        "opener": "^1.5.2",
        "picocolors": "^1.0.0",
        "sirv": "^2.0.3",
        "ws": "^7.3.1"
      },
      "bin": {
        "webpack-bundle-analyzer": "lib/bin/analyzer.js"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/webpack-bundle-analyzer/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/webpack-bundle-analyzer/node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-cli": {
      "version": "4.10.0",
      "resolved": "https://registry.npmjs.org/webpack-cli/-/webpack-cli-4.10.0.tgz",
      "integrity": "sha512-NLhDfH/h4O6UOy+0LSso42xvYypClINuMNBVVzX4vX98TmTaTUxwRbXdhucbFMd2qLaCTcLq/PdYrvi8onw90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@discoveryjs/json-ext": "^0.5.0",
        "@webpack-cli/configtest": "^1.2.0",
        "@webpack-cli/info": "^1.5.0",
        "@webpack-cli/serve": "^1.7.0",
        "colorette": "^2.0.14",
        "commander": "^7.0.0",
        "cross-spawn": "^7.0.3",
        "fastest-levenshtein": "^1.0.12",
        "import-local": "^3.0.2",
        "interpret": "^2.2.0",
        "rechoir": "^0.7.0",
        "webpack-merge": "^5.7.3"
      },
      "bin": {
        "webpack-cli": "bin/cli.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "4.x.x || 5.x.x"
      },
      "peerDependenciesMeta": {
        "@webpack-cli/generators": {
          "optional": true
        },
        "@webpack-cli/migrate": {
          "optional": true
        },
        "webpack-bundle-analyzer": {
          "optional": true
        },
        "webpack-dev-server": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-cli/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/webpack-merge": {
      "version": "5.10.0",
      "resolved": "https://registry.npmjs.org/webpack-merge/-/webpack-merge-5.10.0.tgz",
      "integrity": "sha512-+4zXKdx7UnO+1jaN4l2lHVD+mFvnlZQP/6ljaJVb4SZiwIKeUnrT5l0gkT8z+n4hKpC+jpOv6O9R+gLtag7pSA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "clone-deep": "^4.0.1",
        "flat": "^5.0.2",
        "wildcard": "^2.0.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.3.2.tgz",
      "integrity": "sha512-ykKKus8lqlgXX/1WjudpIEjqsafjOTcOJqxnAbMLAu/KCsDCJ6GBtvscewvTkrn24HsnvFwrSCbenFrhtcCsAA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/enhanced-resolve": {
      "version": "5.18.1",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.1.tgz",
      "integrity": "sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/tapable": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wildcard": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/wildcard/-/wildcard-2.0.1.tgz",
      "integrity": "sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.2",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.2.tgz",
      "integrity": "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}

-------------------------------------------------------------------------------------------------------------

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('🤖 CONFIGURACIÓN RÁPIDA DEL BOT DE ARBITRAJE CEX\n');

async function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setupBot() {
    try {
        console.log('=== CONFIGURACIÓN BÁSICA ===');
        
        const mode = await question('¿Modo de trading? (simulation/live) [simulation]: ') || 'simulation';
        const balance = await question('¿Balance inicial en USD? [10000]: ') || '10000';
        const minProfit = await question('¿Ganancia mínima %? [0.2]: ') || '0.2';
        
        console.log('\n=== EXCHANGES ===');
        
        const binanceKey = await question('Binance API Key (opcional): ');
        const binanceSecret = await question('Binance API Secret (opcional): ');
        
        const coinbaseKey = await question('Coinbase API Key (opcional): ');
        const coinbaseSecret = await question('Coinbase API Secret (opcional): ');
        const coinbasePassphrase = await question('Coinbase Passphrase (opcional): ');
        
        console.log('\n=== NOTIFICACIONES ===');
        
        const email = await question('Tu email para alertas (opcional): ');
        const emailPassword = await question('App Password de Gmail (opcional): ');
        
        const telegramToken = await question('Telegram Bot Token (opcional): ');
        const telegramChat = await question('Telegram Chat ID (opcional): ');
        
        console.log('\n=== ESTRATEGIAS ===');
        
        const basicEnabled = await question('¿Habilitar arbitraje básico? (y/n) [y]: ') || 'y';
        const triangularEnabled = await question('¿Habilitar arbitraje triangular? (y/n) [n]: ') || 'n';
        const mlEnabled = await question('¿Habilitar IA/ML? (y/n) [y]: ') || 'y';
        
        // Crear archivo .env
        const envContent = `# Configuración generada automáticamente
NODE_ENV=production
BOT_MODE=${mode}

# Exchanges
BINANCE_API_KEY=${binanceKey}
BINANCE_API_SECRET=${binanceSecret}
COINBASE_API_KEY=${coinbaseKey}
COINBASE_API_SECRET=${coinbaseSecret}
COINBASE_PASSPHRASE=${coinbasePassphrase}

# Seguridad
JWT_SECRET=${generateRandomString(64)}
ENCRYPTION_KEY=${generateRandomString(32)}

# Notificaciones
EMAIL_USER=${email}
EMAIL_PASS=${emailPassword}
TELEGRAM_BOT_TOKEN=${telegramToken}
TELEGRAM_CHAT_ID=${telegramChat}
`;

        fs.writeFileSync('.env', envContent);
        
        // Actualizar configuración
        const configPath = './src/strategies/config.js';
        let configContent = fs.readFileSync(configPath, 'utf8');
        
        // Reemplazar valores
        configContent = configContent.replace(/TRADING_MODE: ".*"/, `TRADING_MODE: "${mode}"`);
        configContent = configContent.replace(/INITIAL_BALANCE: \d+/, `INITIAL_BALANCE: ${balance}`);
        configContent = configContent.replace(/minProfitPercentage: [\d.]+/, `minProfitPercentage: ${minProfit}`);
        
        // Habilitar/deshabilitar estrategias
        configContent = configContent.replace(/BASIC: {\s*enabled: \w+/, `BASIC: {\n        enabled: ${basicEnabled === 'y'}`);
        configContent = configContent.replace(/TRIANGULAR: {\s*enabled: \w+/, `TRIANGULAR: {\n        enabled: ${triangularEnabled === 'y'}`);
        configContent = configContent.replace(/ML: {\s*enabled: \w+/, `ML: {\n        enabled: ${mlEnabled === 'y'}`);
        
        fs.writeFileSync(configPath, configContent);
        
        console.log('\n✅ CONFIGURACIÓN COMPLETADA');
        console.log('\n📁 Archivos creados/actualizados:');
        console.log('   - .env');
        console.log('   - src/strategies/config.js');
        
        console.log('\n🚀 Para iniciar el bot:');
        console.log('   npm start');
        
        console.log('\n📊 Para ver el dashboard:');
        console.log('   http://localhost:3000');
        
        console.log('\n📱 API móvil disponible en:');
        console.log('   http://localhost:3001');
        
        if (mode === 'simulation') {
            console.log('\n⚠️  IMPORTANTE: El bot está en modo SIMULACIÓN');
            console.log('   No se ejecutarán trades reales');
            console.log('   Para trading real, cambiar BOT_MODE=live en .env');
        }
        
    } catch (error) {
        console.error('Error durante la configuración:', error);
    } finally {
        rl.close();
    }
}

function generateRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

setupBot();

-------------------------------------------------------------------------------------------------------

const express = require("express");
const cors = require("cors");
require("dotenv").config();
const { Spot } = require('@binance/connector');
const { RestClientV5 } = require('bybit-api');
const riskRoutes = require('./routes/risk');


const app = express();
app.use(cors());
app.use(express.json());

app.use('/api', require('./routes/config'));
app.use('/api/risk', riskRoutes);

// === GLOBAL BOT MODE STATE ===
let botMode = process.env.TRADING_MODE || "simulation"; // "simulation" or "production"
let botIsRunning = true; // Puedes ajustar esta bandera según lógica real del bot

// === BINANCE SETUP ===
const binance = new Spot(process.env.BINANCE_API_KEY, process.env.BINANCE_API_SECRET);

// === BYBIT SETUP ===
const bybit = new RestClientV5({
  key: process.env.BYBIT_API_KEY,
  secret: process.env.BYBIT_API_SECRET,
  testnet: false
});

// === ENDPOINT: BALANCES ===
app.get("/api/balances", async (req, res) => {
  const tokens = ["USDT", "XRP", "BNB", "LTC"];

  // Binance
  let binanceList = [];
  try {
    const binanceAccount = await binance.accountInfo();
    binanceList = tokens.map(token => {
      const balance = binanceAccount.balances.find(b => b.asset === token) || { free: "0", locked: "0" };
      return {
        token,
        available: parseFloat(balance.free),
        total: parseFloat(balance.free) + parseFloat(balance.locked)
      };
    });
  } catch (e) {
    binanceList = tokens.map(token => ({ token, available: 0, total: 0 }));
  }

  // Bybit
  let bybitList = [];
  try {
    const bybitAccount = await bybit.getWalletBalance({ accountType: "SPOT" });
    const coins = (bybitAccount.result && bybitAccount.result.list && bybitAccount.result.list[0].coins) ? bybitAccount.result.list[0].coins : [];
    bybitList = tokens.map(token => {
      const coin = coins.find(c => c.coin === token) || { availableToWithdraw: "0", walletBalance: "0" };
      return {
        token,
        available: parseFloat(coin.availableToWithdraw),
        total: parseFloat(coin.walletBalance)
      };
    });
  } catch (e) {
    bybitList = tokens.map(token => ({ token, available: 0, total: 0 }));
  }

  res.json({
    binance: binanceList,
    bybit: bybitList
  });
});

// === ENDPOINT: OPORTUNIDADES DE ARBITRAJE ===
app.get("/api/opportunities", async (req, res) => {
  try {
    // 1. Lista de símbolos a comparar
    const symbolList = ["LTCUSDT", "BNBUSDT", "XRPUSDT"];

    // 2. --- BINANCE ---
    const binTickersResponse = await binance.tickerPrice();
    const binTickers = binTickersResponse.data;
    const binancePrices = {};
    binTickers.forEach(t => {
      if (symbolList.includes(t.symbol)) {
        binancePrices[t.symbol] = parseFloat(t.price);
      }
    });

    // 3. --- BYBIT ---
    const bybitPrices = {};
    const bybTickersObj = await bybit.getTickers({ category: "spot" });
    const bybTickers = (bybTickersObj.result && bybTickersObj.result.list) ? bybTickersObj.result.list : [];
    bybTickers.forEach(t => {
      if (symbolList.includes(t.symbol)) {
        bybitPrices[t.symbol] = parseFloat(t.lastPrice);
      }
    });

    // 4. Logs para depurar antes del cálculo de oportunidades
    console.log("Binance prices:", binancePrices);
    console.log("Bybit prices:", bybitPrices);

    // 5. --- LÓGICA DE ARBITRAJE ---
    const opps = [];
    symbolList.forEach(symbol => {
      const binPrice = binancePrices[symbol];
      const bybPrice = bybitPrices[symbol];

      if (binPrice && bybPrice) {
        // Oportunidad: Comprar en Binance, vender en Bybit
        const spreadBybit = ((bybPrice - binPrice) / binPrice) * 100;
        if (spreadBybit > 0.2) {
          opps.push({
            pair: symbol.replace("USDT", "/USDT"),
            buyExchange: "Binance",
            sellExchange: "Bybit",
            profit: spreadBybit.toFixed(2),
            direction: "Binance -> Bybit",
            time: new Date().toLocaleTimeString()
          });
        }
        // Oportunidad: Comprar en Bybit, vender en Binance
        const spreadBinance = ((binPrice - bybPrice) / bybPrice) * 100;
        if (spreadBinance > 0.2) {
          opps.push({
            pair: symbol.replace("USDT", "/USDT"),
            buyExchange: "Bybit",
            sellExchange: "Binance",
            profit: spreadBinance.toFixed(2),
            direction: "Bybit -> Binance",
            time: new Date().toLocaleTimeString()
          });
        }
      }
    });

    console.log("Oportunidades encontradas:", opps);
    res.json(opps);
  } catch (err) {
    console.log("ERROR REAL EN /api/opportunities:", err);
    res.status(500).json({ error: err.toString() });
  }
});

// === ENDPOINT: STATUS (para frontend) ===
app.get("/api/status", (req, res) => {
  res.json({
    mode: botMode,
    isRunning: botIsRunning
  });
});

// === ENDPOINT: SET MODE (activar/desactivar modo producción/simulación) ===
app.post("/api/set-mode", (req, res) => {
  const { mode } = req.body;
  if (mode !== "simulation" && mode !== "production") {
    return res.status(400).json({ ok: false, error: "Modo inválido" });
  }
  botMode = mode;
  // Aquí podrías agregar lógica para pausar/reanudar el bot real si es necesario
  res.json({ ok: true, mode: botMode });
});

// === ENDPOINT ALIAS EN ESPAÑOL (opcional, para compatibilidad) ===
app.get("/api/oportunidades", async (req, res) => {
  // Simplemente llama al endpoint inglés
  req.url = "/api/opportunities";
  app._router.handle(req, res);
});

// === ENDPOINTS SIMPLES (puedes expandir a APIs reales según tus necesidades) ===
app.get("/api/logs", (req, res) => {
  res.json(["Bot iniciado", "Trade ejecutado: LTC/USDT", "Balance actualizado"]);
});

  
// === ENDPOINT: COMMISSIONS (TRADING Y DEPÓSITO) ===
app.get("/api/commissions", (req, res) => {
  res.json([
    { exchange: "BINANCE", trading_fee: 0.1, deposit_fee: 0 },
    { exchange: "BYBIT", trading_fee: 0.1, deposit_fee: 0 }
  ]);
}),
   
// === ENDPOINT: RISK CONTROL (UMBRAL OPERACIÓN) ===
app.get("/api/risk", (req, res) => {
  res.json([
    { exchange: "BINANCE", min_trade: 10, max_trade: null },
    { exchange: "BYBIT", min_trade: 10, max_trade: null }
  ]);
});

// === ENDPOINT: ADDRESSES (DIRECCIONES) ===
app.get("/api/addresses", (req, res) => {
  res.json([
    // BINANCE
    { exchange: "BINANCE", token: "USDT", address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", network: "TON", memo: "163771801" },
    { exchange: "BINANCE", token: "LTC", address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4", network: "Litecoin" },
    { exchange: "BINANCE", token: "BNB", address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BEP20 (BSC)" },
    { exchange: "BINANCE", token: "XRP", address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV", tag: "466152795", network: "XRP" },
    // BYBIT
    { exchange: "BYBIT", token: "USDT", address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
    { exchange: "BYBIT", token: "LTC", address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ", network: "Litecoin" },
    { exchange: "BYBIT", token: "BNB", address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BEP20 (BSC)" },
    { exchange: "BYBIT", token: "XRP", address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh", tag: "501350199", network: "XRP" }
  ]);
});
// === ENDPOINT: FEES (COMISIONES Y MÍNIMOS) ===
app.get("/api/fees", (req, res) => {
  res.json([
    // BINANCE
    { exchange: "BINANCE", token: "USDT", withdraw_fee: 0.20, withdraw_min: 10, deposit_min: 0.002, network: "TON" },
    { exchange: "BINANCE", token: "LTC", withdraw_fee: 0.0001, withdraw_min: 0.002, deposit_min: 0.002, network: "Litecoin" },
    { exchange: "BINANCE", token: "BNB", withdraw_fee: 0.00001, withdraw_min: 0.0005, deposit_min: 0.000003, network: "BEP20 (BSC)" },
    { exchange: "BINANCE", token: "XRP", withdraw_fee: 0.2, withdraw_min: 2, deposit_min: 0.001, network: "XRP" },
    // BYBIT
    { exchange: "BYBIT", token: "USDT", withdraw_fee: 0.3, withdraw_min: 1, deposit_min: 0.001, network: "TON" },
    { exchange: "BYBIT", token: "LTC", withdraw_fee: 0.0001, withdraw_min: 0.001, deposit_min: 0.00000001, network: "Litecoin" },
    { exchange: "BYBIT", token: "BNB", withdraw_fee: 0.0002, withdraw_min: 0.0002, deposit_min: 0, network: "BEP20 (BSC)" },
    { exchange: "BYBIT", token: "XRP", withdraw_fee: 0.2, withdraw_min: 1.2, deposit_min: 0.01, network: "XRP" }
  ]);
});
// === ENDPOINT: MÉTRICAS (BALANCES INICIALES, ETC.) ===
app.get("/api/metrics", (req, res) => {
  res.json({
    binance: { initial_balance_usdt: 20 },
    bybit: { initial_balance_usdt: 20 },
    trades: 150,
    profit: 32.7,
    winRate: 78.5
  });
});
// === ENDPOINT: INICIAR EL BOT ===
app.post("/api/start", (req, res) => {
  botIsRunning = true;
  res.json({ ok: true, isRunning: true });
});

// === ENDPOINT: DETENER EL BOT ===
app.post("/api/stop", (req, res) => {
  botIsRunning = false;
  res.json({ ok: true, isRunning: false });
});

app.listen(8888, () => {
  console.log("Backend API listening on http://localhost:8888/");
});

-----------------------------------------------------------------------------------------------------------

require("dotenv").config()
const nodemailer = require("nodemailer")

console.log("=== DIAGNÓSTICO DE EMAIL ===")
console.log("EMAIL_ENABLED:", process.env.EMAIL_ENABLED)
console.log("EMAIL_SERVICE:", process.env.EMAIL_SERVICE)
console.log("EMAIL_USER:", process.env.EMAIL_USER)
console.log("EMAIL_PASS:", process.env.EMAIL_PASS ? "CONFIGURADO" : "NO CONFIGURADO")
console.log("EMAIL_TO:", process.env.EMAIL_TO)

async function testEmail() {
  try {
    console.log("\n=== CREANDO TRANSPORTADOR ===")

    // CORREGIDO: createTransport (sin la "r")
    const transporter = nodemailer.createTransport({
      host: "smtp.gmail.com",
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    })

    console.log("✅ Transportador creado")

    console.log("\n=== VERIFICANDO CONFIGURACIÓN ===")
    await transporter.verify()
    console.log("✅ Configuración verificada")

    console.log("\n=== ENVIANDO EMAIL DE PRUEBA ===")
    const info = await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_TO,
      subject: "🤖 Test de Email - Bot de Arbitraje",
      html: `
        <h2>Test de Email</h2>
        <p>Este es un email de prueba del Bot de Arbitraje CEX.</p>
        <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
        <p>Si recibes este email, la configuración está funcionando correctamente.</p>
      `,
    })

    console.log("✅ EMAIL ENVIADO EXITOSAMENTE")
    console.log("Message ID:", info.messageId)
    console.log("Response:", info.response)
  } catch (error) {
    console.error("❌ ERROR:", error.message)

    if (error.code === "EAUTH") {
      console.error("\n🔑 PROBLEMA DE AUTENTICACIÓN:")
      console.error("- Verifica que EMAIL_USER sea correcto")
      console.error("- Verifica que EMAIL_PASS sea una contraseña de aplicación (no tu contraseña normal)")
      console.error("- Asegúrate de que la verificación en 2 pasos esté activada en Google")
    }

    if (error.code === "ENOTFOUND") {
      console.error("\n🌐 PROBLEMA DE CONEXIÓN:")
      console.error("- Verifica tu conexión a internet")
      console.error("- Verifica que el host SMTP sea correcto")
    }

    if (error.code === "ETIMEDOUT") {
      console.error("\n⏰ PROBLEMA DE TIMEOUT:")
      console.error("- El servidor SMTP no responde")
      console.error("- Verifica tu firewall o antivirus")
    }

    console.error("\nCódigo de error:", error.code)
    console.error("Detalles completos:", error)
  }
}

testEmail()

---------------------------------------------------------------------------------------------------------------

// Este script prueba la conexión a Telegram directamente
require("dotenv").config() // Cargar variables de entorno desde .env

const axios = require("axios")

// Obtener las variables de entorno
const botToken = process.env.TELEGRAM_BOT_TOKEN
const chatId = process.env.TELEGRAM_CHAT_ID

console.log("=== TEST DE CONEXIÓN A TELEGRAM ===")
console.log("TELEGRAM_BOT_TOKEN:", botToken ? "CONFIGURADO" : "NO CONFIGURADO")
console.log("TELEGRAM_CHAT_ID:", chatId ? "CONFIGURADO" : "NO CONFIGURADO")

if (!botToken || !chatId) {
  console.error("ERROR: Variables de entorno no configuradas correctamente")
  console.error("Por favor, crea un archivo .env con TELEGRAM_BOT_TOKEN y TELEGRAM_CHAT_ID")
  process.exit(1)
}

// Función para enviar un mensaje de prueba
async function sendTestMessage() {
  try {
    console.log("Enviando mensaje de prueba a Telegram...")

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`
    const message = `🤖 Test de conexión: ${new Date().toLocaleString()}`

    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: "HTML",
    })

    if (response.data.ok) {
      console.log("✅ ÉXITO: Mensaje enviado correctamente a Telegram")
      console.log("Detalles:", response.data.result)
    } else {
      console.error("❌ ERROR: La API de Telegram respondió con un error")
      console.error("Respuesta:", response.data)
    }
  } catch (error) {
    console.error("❌ ERROR al enviar mensaje a Telegram:")

    if (error.response) {
      // Error de la API de Telegram
      console.error("Código de estado:", error.response.status)
      console.error("Respuesta:", error.response.data)
    } else if (error.request) {
      // Error de red
      console.error("Error de red - No se pudo conectar a la API de Telegram")
    } else {
      // Otro tipo de error
      console.error("Error:", error.message)
    }
  }
}

// Ejecutar la prueba
sendTestMessage()

----------------------------------------------------------------------------------------------------------

const checkedTokens = {}; // token: timestamp último chequeo

async function checkTokenStatus(token, exchange) {
  const now = Date.now();
  if (checkedTokens[token + exchange] && now - checkedTokens[token + exchange] < 12 * 3600 * 1000) {
    return; // Ya fue chequeado en las últimas 12 horas
  }
  // Llama a la API del exchange y revisa si el token/red está activo
  // Si no está activo: márcalo como inactivo en la config temporal
  checkedTokens[token + exchange] = now;
}

--------------------------------------------------------------------------------------------------------------

FRONTEND

PUBLIC

COMPPONENTS

"use client"

const AIPanel = ({ aiConfig, botStatus, onToggleAI, aiRecommendations = [] }) => {
  const handleToggleAI = (e) => {
    onToggleAI(e.target.checked)
  }

  const getDirectionIcon = (direction) => {
    return direction === "up" ? (
      <i className="bi bi-arrow-up-circle-fill text-success me-1"></i>
    ) : (
      <i className="bi bi-arrow-down-circle-fill text-danger me-1"></i>
    )
  }

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return "success"
    if (confidence >= 0.6) return "warning"
    return "danger"
  }

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">
          <i className="bi bi-robot me-2"></i>
          Inteligencia Artificial
        </h5>
        <div className="form-check form-switch">
          <input
            className="form-check-input"
            type="checkbox"
            id="aiSwitch"
            checked={aiConfig.enabled}
            onChange={handleToggleAI}
          />
          <label className="form-check-label" htmlFor="aiSwitch">
            {aiConfig.enabled ? "Activado" : "Desactivado"}
          </label>
        </div>
      </div>
      <div className="card-body">
        {!aiConfig.enabled ? (
          <div className="text-center py-4">
            <i className="bi bi-robot text-muted" style={{ fontSize: "3rem" }}></i>
            <p className="mt-3">La IA está desactivada. Actívala para obtener predicciones y recomendaciones.</p>
          </div>
        ) : (
          <>
            <div className="mb-3">
              <div className="d-flex justify-content-between align-items-center mb-2">
                <span>
                  Modelo: <strong>{aiConfig.model}</strong>
                </span>
                <span className="badge bg-info">Confianza: {(aiConfig.confidence * 100).toFixed(0)}%</span>
              </div>

              <div className="mb-4">
                <small className="text-muted d-block mb-1">
                  Último entrenamiento: {new Date(aiConfig.lastTraining).toLocaleString()}
                </small>
                <small className="text-muted d-block">
                  Próximo entrenamiento: {new Date(aiConfig.nextTraining).toLocaleString()}
                </small>
              </div>
            </div>

            <h6 className="mb-3">Predicciones de Mercado</h6>

            {Object.entries(aiConfig.predictions).map(([pair, prediction]) => (
              <div key={pair} className="mb-3">
                <div className="d-flex justify-content-between align-items-center mb-1">
                  <div>
                    <strong>{pair}</strong>
                    <span className="ms-2 text-muted small">({prediction.timeframe})</span>
                  </div>
                  <div className={`ai-prediction-${prediction.direction}`}>
                    {getDirectionIcon(prediction.direction)}
                    {prediction.direction === "up" ? "Subida" : "Bajada"}
                  </div>
                </div>
                <div className="d-flex justify-content-between align-items-center small text-muted mb-1">
                  <span>Confianza</span>
                  <span>{(prediction.confidence * 100).toFixed(0)}%</span>
                </div>
                <div className="ai-confidence">
                  <div
                    className={`ai-confidence-level bg-${getConfidenceColor(prediction.confidence)}`}
                    style={{ width: `${prediction.confidence * 100}%` }}
                  ></div>
                </div>
              </div>
            ))}

            <div className="mt-4">
              <h6 className="mb-2">Recomendaciones de IA</h6>
              <ul className="small">
                {/* AGREGADO: Mostrar recomendaciones reales si están disponibles */}
                {aiRecommendations.length > 0
                  ? aiRecommendations.map((rec, idx) => (
                      <li key={idx}>
                        {rec.texto}
                        {rec.probabilidad ? (
                          <span className="ms-2 text-muted">({rec.probabilidad}%)</span>
                        ) : null}
                      </li>
                    ))
                  : (
                    <>
                      <li>Enfocarse en el par USDC/XRP (92% confianza)</li>
                      <li>Evitar operaciones en USDC/BNB por tendencia bajista</li>
                      <li>Considerar aumentar exposición en USDC/LTC</li>
                    </>
                  )}
              </ul>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

export default AIPanel

------------------------------------------------------------------------------------------------------------

"use client"

import React from "react"
import axios from "axios"
import Header from "./Header"
import StatusCard from "./StatusCard"
import ProfitChart from "./ProfitChart"
import Controls from "./Controls"
import SpecificPairs from "./SpecificPairs"
import AIPanel from "./AIPanel"
import BalanceChart from "./BalanceChart"
import AutoRebalance from "./AutoRebalance"
import ArbitrageOpportunities from "./ArbitrageOpportunities"
import RiskAnalysis from "./RiskAnalysis"

const App = () => {
  const [botStatus, setBotStatus] = React.useState({
    isRunning: false,
    mode: "simulation",
    totalProfit: 0,
    totalTrades: 0,
    successfulTrades: 0,
    failedTrades: 0,
    currentStrategy: "basic",
    riskLevel: "medium",
    tradingPairs: [],
    checkInterval: 5000,
    averageLatency: "45ms",
    aiEnabled: true,
    autoRebalanceEnabled: false,
    usingRealPrices: false, // Nuevo estado para precios reales
    balances: {
      Binance: 0,
      Kucoin: 0,
    },
  })

  const [profitHistory, setProfitHistory] = React.useState([])
  const [balanceHistory, setBalanceHistory] = React.useState({
    timestamps: [],
    balances: {
      Binance: [],
      Kucoin: [],
    },
  })

  const [opportunities, setOpportunities] = React.useState([])
  const [riskAnalysis, setRiskAnalysis] = React.useState({
    marketVolatility: 0,
    exchangeRisk: 0,
    liquidityRisk: 0,
    overallRisk: 0,
  })

  const [specificPairs, setSpecificPairs] = React.useState({})
  const [aiConfig, setAiConfig] = React.useState({
    enabled: true,
    model: "",
    confidence: 0,
    predictions: {},
    lastTraining: new Date(),
    nextTraining: new Date(),
  })

  // AGREGADO: Estado para recomendaciones IA y anomalías
  const [aiRecommendations, setAiRecommendations] = React.useState([])
  const [anomalies, setAnomalies] = React.useState([])

  // Cargar datos iniciales
  React.useEffect(() => {
    fetchData()

    // Actualizar datos cada 5 segundos
    const interval = setInterval(fetchData, 5000)

    return () => clearInterval(interval)
  }, [])

  const fetchData = async () => {
    try {
      const [
        statusResponse,
        profitHistoryResponse,
        balanceHistoryResponse,
        opportunitiesResponse,
        riskAnalysisResponse,
        specificPairsResponse,
        aiConfigResponse,
        aiRecommendationsResponse,
        anomaliesResponse,
      ] = await Promise.all([
        axios.get("/api/status"),
        axios.get("/api/profit-history"),
        axios.get("/api/balance-history"),
        axios.get("/api/opportunities"),
        axios.get("/api/risk-analysis"),
        axios.get("/api/specific-pairs"),
        axios.get("/api/ai-config"),
        axios.get("/api/ia/recomendaciones"),
        axios.get("/api/anomalias"),
      ])

      setBotStatus(statusResponse.data)
      setProfitHistory(profitHistoryResponse.data)
      setBalanceHistory(balanceHistoryResponse.data)
      setOpportunities(opportunitiesResponse.data)
      setRiskAnalysis(riskAnalysisResponse.data)
      setSpecificPairs(specificPairsResponse.data)
      setAiConfig(aiConfigResponse.data)
      setAiRecommendations(aiRecommendationsResponse.data.recomendaciones || [])
      setAnomalies(anomaliesResponse.data.anomalias || [])
    } catch (error) {
      console.error("Error fetching data:", error)
    }
  }

  const handleStartBot = async () => {
    try {
      await axios.post("/api/start-bot", { mode: botStatus.mode })
      fetchData()
    } catch (error) {
      console.error("Error starting bot:", error)
    }
  }

  const handleStopBot = async () => {
    try {
      await axios.post("/api/stop-bot")
      fetchData()
    } catch (error) {
      console.error("Error stopping bot:", error)
    }
  }

  const handleChangeStrategy = async (strategy) => {
    try {
      await axios.post("/api/change-strategy", { strategy })
      fetchData()
    } catch (error) {
      console.error("Error changing strategy:", error)
    }
  }

  const handleUpdateRiskSettings = async (riskLevel) => {
    try {
      await axios.post("/api/update-risk-settings", { riskLevel })
      fetchData()
    } catch (error) {
      console.error("Error updating risk settings:", error)
    }
  }

  const handleToggleMode = async (mode) => {
    try {
      await axios.post("/api/toggle-mode", { mode })
      fetchData()
    } catch (error) {
      console.error("Error toggling mode:", error)
    }
  }

  const handleToggleAI = async (enabled) => {
    try {
      await axios.post("/api/toggle-ai", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling AI:", error)
    }
  }

  // NUEVO: Manejar toggle de precios reales
  const handleToggleRealPrices = async (enabled) => {
    try {
      await axios.post("/api/toggle-real-prices", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling real prices:", error)
    }
  }

  const handleToggleAutoRebalance = async (enabled) => {
    try {
      await axios.post("/api/toggle-auto-rebalance", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling auto-rebalance:", error)
    }
  }

  const handleRebalanceFunds = async () => {
    try {
      await axios.post("/api/rebalance-funds")
      fetchData()
    } catch (error) {
      console.error("Error rebalancing funds:", error)
    }
  }

  const handleExecuteArbitrage = async (pair, buyExchange, sellExchange, amount) => {
    try {
      await axios.post("/api/execute-arbitrage", {
        pair,
        buyExchange,
        sellExchange,
        amount,
      })
      fetchData()
    } catch (error) {
      console.error("Error executing arbitrage:", error)
    }
  }

  return (
    <div>
      <Header botStatus={botStatus} />

      <div className="container-fluid">
        <div className="row mb-4">
          <StatusCard
            title="Ganancia Total"
            value={`$${botStatus.totalProfit.toFixed(2)}`}
            icon="bi-graph-up-arrow"
            color="success"
          />
          <StatusCard
            title="Operaciones Totales"
            value={botStatus.totalTrades}
            icon="bi-arrow-left-right"
            color="primary"
          />
          <StatusCard
            title="Tasa de Éxito"
            value={`${
              botStatus.totalTrades > 0 ? ((botStatus.successfulTrades / botStatus.totalTrades) * 100).toFixed(1) : 0
            }%`}
            icon="bi-check-circle"
            color="info"
          />
          <StatusCard
            title="Latencia Promedio"
            value={botStatus.averageLatency}
            icon="bi-speedometer"
            color="warning"
          />
        </div>

        <div className="row mb-4">
          <div className="col-md-8">
            <ProfitChart profitHistory={profitHistory} />
          </div>
          <div className="col-md-4">
            <Controls
              botStatus={botStatus}
              onStartBot={handleStartBot}
              onStopBot={handleStopBot}
              onChangeStrategy={handleChangeStrategy}
              onUpdateRiskSettings={handleUpdateRiskSettings}
              onToggleMode={handleToggleMode}
              onToggleRealPrices={handleToggleRealPrices} // Nuevo prop
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-6">
            <SpecificPairs
              specificPairs={specificPairs}
              botStatus={botStatus}
              onExecuteArbitrage={handleExecuteArbitrage}
            />
          </div>
          <div className="col-md-6">
            <AIPanel
              aiConfig={aiConfig}
              botStatus={botStatus}
              onToggleAI={handleToggleAI}
              aiRecommendations={aiRecommendations}
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-6">
            <BalanceChart balanceHistory={balanceHistory} />
          </div>
          <div className="col-md-6">
            <AutoRebalance
              botStatus={botStatus}
              onToggleAutoRebalance={handleToggleAutoRebalance}
              onRebalanceFunds={handleRebalanceFunds}
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-8">
            <ArbitrageOpportunities opportunities={opportunities} />
          </div>
          <div className="col-md-4">
            <RiskAnalysis riskAnalysis={riskAnalysis} anomalies={anomalies} />
          </div>
        </div>
      </div>
    </div>
  )
}

export default App

-----------------------------------------------------------------------------------------------------------

const ArbitrageOpportunities = ({ opportunities }) => {
  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">Oportunidades de Arbitraje</h5>
      </div>
      <div className="card-body">
        {opportunities.length === 0 ? (
          <p className="text-center text-muted">No hay oportunidades disponibles</p>
        ) : (
          <div className="table-responsive">
            <table className="table table-hover">
              <thead>
                <tr>
                  <th>Par</th>
                  <th>Exchanges</th>
                  <th>Ganancia</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody>
                {opportunities.map((opportunity, index) => (
                  <tr key={index} className={opportunity.isOpportunity ? "table-success" : ""}>
                    <td>{opportunity.pair}</td>
                    <td>
                      {opportunity.exchanges.map((exchange, i) => (
                        <span key={i} className={`badge exchange-badge bg-${getExchangeColor(exchange)} me-1`}>
                          {exchange}
                        </span>
                      ))}
                    </td>
                    <td className={opportunity.profitPercentage >= 0.3 ? "text-success fw-bold" : ""}>
                      {opportunity.profitPercentage.toFixed(2)}%
                    </td>
                    <td>
                      {opportunity.isOpportunity ? (
                        <span className="badge bg-success">Viable</span>
                      ) : (
                        <span className="badge bg-secondary">No viable</span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  )
}

function getExchangeColor(exchange) {
  // AGREGADO: Bybit y lowercase fallback
  const colors = {
    Binance: "warning",
    Bybit: "danger",
    Coinbase: "primary",
    Kraken: "info",
    Kucoin: "success",
    binance: "warning",
    bybit: "danger",
    coinbase: "primary",
    kraken: "info",
    kucoin: "success",
  }

  return colors[exchange] || "secondary"
}

export default ArbitrageOpportunities

-----------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const AutoRebalance = ({ botStatus, onToggleAutoRebalance, onRebalanceFunds }) => {
  const [loading, setLoading] = React.useState(false)

  const handleToggleAutoRebalance = (e) => {
    onToggleAutoRebalance(e.target.checked)
  }

  const handleManualRebalance = async () => {
    setLoading(true)
    await onRebalanceFunds()
    setLoading(false)
  }

  // Calcular porcentajes para la visualización
  const totalBalance = Object.values(botStatus.balances || {}).reduce((sum, balance) => sum + balance, 0)
  const balancePercentages = {}

  Object.entries(botStatus.balances || {}).forEach(([exchange, balance]) => {
    balancePercentages[exchange] = totalBalance > 0 ? (balance / totalBalance) * 100 : 0
  })

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">
          <i className="bi bi-arrow-repeat me-2"></i>
          Emparejamiento Automático
        </h5>
        <div className="form-check form-switch">
          <input
            className="form-check-input"
            type="checkbox"
            id="rebalanceSwitch"
            checked={botStatus.autoRebalanceEnabled}
            onChange={handleToggleAutoRebalance}
          />
          <label className="form-check-label" htmlFor="rebalanceSwitch">
            {botStatus.autoRebalanceEnabled ? "Activado" : "Desactivado"}
          </label>
        </div>
      </div>
      <div className="card-body">
        <div className="mb-3">
          <h6>Distribución Actual de Fondos</h6>
          <div className="balance-distribution">
            <div className="balance-bar" style={{ display: "flex", height: 22 }}>
              {Object.entries(balancePercentages).map(([exchange, percentage]) => (
                <div
                  key={exchange}
                  className={`balance-segment balance-${exchange.toLowerCase()}`}
                  style={{
                    width: `${percentage}%`,
                    minWidth: percentage > 0 && percentage < 8 ? "15px" : undefined,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontWeight: 500,
                    fontSize: "0.95em",
                    color: "#fff",
                  }}
                  title={`${exchange}: $${(botStatus.balances[exchange] || 0).toFixed(2)} (${percentage.toFixed(1)}%)`}
                >
                  {percentage > 10 ? `${percentage.toFixed(0)}%` : ""}
                </div>
              ))}
            </div>
          </div>

          <div className="balance-legend d-flex flex-wrap mt-2">
            {Object.keys(botStatus.balances || {}).map((exchange) => (
              <div key={exchange} className="legend-item d-flex align-items-center me-3 mb-1">
                <div
                  className={`legend-color balance-${exchange.toLowerCase()}`}
                  style={{
                    width: 16,
                    height: 16,
                    borderRadius: 3,
                    marginRight: 6,
                  }}
                ></div>
                <span>{exchange}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-4">
          <h6>Balances por Exchange</h6>
          {Object.entries(botStatus.balances || {}).map(([exchange, balance]) => (
            <div key={exchange} className="exchange-balance d-flex justify-content-between">
              <div className="exchange-balance-name">{exchange}</div>
              <div className="exchange-balance-value">${balance.toFixed(2)}</div>
            </div>
          ))}
        </div>

        <div className="d-grid">
          <button className="btn btn-primary" onClick={handleManualRebalance} disabled={loading}>
            {loading ? (
              <>
                <span className="loading-spinner me-2"></span>
                Reequilibrando...
              </>
            ) : (
              <>
                <i className="bi bi-arrow-repeat me-2"></i>
                Reequilibrar Fondos Manualmente
              </>
            )}
          </button>
        </div>

        <div className="mt-3 small text-muted">
          <p>
            <i className="bi bi-info-circle me-1"></i>
            El emparejamiento automático distribuye los fondos equitativamente entre los exchanges para maximizar las
            oportunidades de arbitraje.
          </p>
        </div>
      </div>
    </div>
  )
}

export default AutoRebalance

---------------------------------------------------------------------------------------------------------

import React from "react"

const titleStyle = {
  color: "#FFD700", // amarillo
  fontWeight: "bold",
  fontSize: "1.1em",
  letterSpacing: "1px"
}

const cellStyle = {
  color: "#fff", // blanco para cifras
  fontWeight: "bold"
}

const BalancesTable = ({ balances }) => (
  <div>
    <div style={{marginBottom: 24}}>
      <div style={titleStyle}>Binance</div>
      <table style={{width: "100%"}}>
        <thead>
          <tr>
            <th style={titleStyle}>Token</th>
            <th style={titleStyle}>Disponible</th>
            <th style={titleStyle}>Total</th>
          </tr>
        </thead>
        <tbody>
          {balances?.binance?.map(b => (
            <tr key={b.token}>
              <td style={cellStyle}>{b.token}</td>
              <td style={cellStyle}>{b.available}</td>
              <td style={cellStyle}>{b.total}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
    <div>
      <div style={titleStyle}>Bybit</div>
      <table style={{width: "100%"}}>
        <thead>
          <tr>
            <th style={titleStyle}>Token</th>
            <th style={titleStyle}>Disponible</th>
            <th style={titleStyle}>Total</th>
          </tr>
        </thead>
        <tbody>
          {balances?.bybit?.map(b => (
            <tr key={b.token}>
              <td style={cellStyle}>{b.token}</td>
              <td style={cellStyle}>{b.available}</td>
              <td style={cellStyle}>{b.total}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
)

export default BalancesTable

---------------------------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const Controls = ({
  botStatus,
  onStartBot,
  onStopBot,
  onChangeStrategy,
  onUpdateRiskSettings,
  onToggleMode,
  onToggleRealPrices,
}) => {
  const [loading, setLoading] = React.useState(false)

  const handleStartBot = async () => {
    setLoading(true)
    await onStartBot()
    setLoading(false)
  }

  const handleStopBot = async () => {
    setLoading(true)
    await onStopBot()
    setLoading(false)
  }

  const handleModeToggle = (e) => {
    const mode = e.target.checked ? "production" : "simulation"
    onToggleMode(mode)
  }

  const handleRealPricesToggle = (e) => {
    onToggleRealPrices(e.target.checked)
  }

  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">Control del Bot</h5>
      </div>
      <div className="card-body">
        <div className="mode-switch mb-4">
          <div className="form-check form-switch">
            <input
              className="form-check-input"
              type="checkbox"
              id="modeSwitch"
              checked={botStatus.mode === "production"}
              onChange={handleModeToggle}
            />
            <label className="form-check-label" htmlFor="modeSwitch">
              <span className={botStatus.mode === "simulation" ? "simulation-mode" : "production-mode"}>
                Modo: {botStatus.mode === "simulation" ? "Simulación" : "Producción"}
              </span>
            </label>
          </div>
        </div>

        {/* NUEVO: Toggle para precios reales */}
        <div className="mode-switch mb-4">
          <div className="form-check form-switch">
            <input
              className="form-check-input"
              type="checkbox"
              id="realPricesSwitch"
              checked={botStatus.usingRealPrices}
              onChange={handleRealPricesToggle}
            />
            <label className="form-check-label" htmlFor="realPricesSwitch">
              <span className={botStatus.usingRealPrices ? "text-success" : "text-secondary"}>
                Precios: {botStatus.usingRealPrices ? "Reales" : "Simulados"}
              </span>
            </label>
          </div>
        </div>

        <div className="d-grid gap-2 mb-4">
          {!botStatus.isRunning ? (
            <button className="btn btn-success" onClick={handleStartBot} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner me-2"></span>
                  Iniciando...
                </>
              ) : (
                <>
                  <i className="bi bi-play-fill me-2"></i>
                  Iniciar Bot
                </>
              )}
            </button>
          ) : (
            <button className="btn btn-danger" onClick={handleStopBot} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner me-2"></span>
                  Deteniendo...
                </>
              ) : (
                <>
                  <i className="bi bi-stop-fill me-2"></i>
                  Detener Bot
                </>
              )}
            </button>
          )}
        </div>

        <div className="mb-3">
          <label className="form-label">Estrategia</label>
          <select
            className="form-select"
            value={botStatus.currentStrategy}
            onChange={(e) => onChangeStrategy(e.target.value)}
          >
            <option value="basic">Arbitraje Básico</option>
            <option value="triangular">Arbitraje Triangular</option>
            <option value="statistical">Arbitraje Estadístico</option>
            <option value="ml">Machine Learning</option>
            <option value="combined">Estrategia Combinada</option>
          </select>
        </div>

        <div className="mb-3">
          <label className="form-label">Nivel de Riesgo</label>
          <select
            className="form-select"
            value={botStatus.riskLevel}
            onChange={(e) => onUpdateRiskSettings(e.target.value)}
          >
            <option value="low">Bajo</option>
            <option value="medium">Medio</option>
            <option value="high">Alto</option>
          </select>
        </div>

        <div className="mb-3">
          <label className="form-label">Intervalo de Verificación</label>
          <div className="input-group">
            <input type="number" className="form-control" value={botStatus.checkInterval} readOnly />
            <span className="input-group-text">ms</span>
          </div>
          <div className="form-text">Tiempo entre verificaciones de oportunidades</div>
        </div>
      </div>
    </div>
  )
}

export default Controls


---------------------------------------------------------------------------------------------------------------

const Header = ({ botStatus }) => {
  return (
    <nav className="navbar navbar-expand-lg navbar-dark mb-4">
      <div className="container-fluid">
        <a className="navbar-brand" href="#">
          <i className="bi bi-currency-exchange me-2"></i>
          TageCoin Exchange CEX
        </a>
        <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav me-auto">
            <li className="nav-item">
              <a className="nav-link active" href="#">
                Dashboard
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Configuración
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Historial
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Ayuda
              </a>
            </li>
          </ul>
          <div className="d-flex align-items-center">
            <span className={`badge me-3 ${botStatus.isRunning ? "bg-success" : "bg-danger"}`}>
              {botStatus.isRunning ? "Activo" : "Inactivo"}
            </span>
            <span className={`badge me-3 ${botStatus.mode === "simulation" ? "bg-info" : "bg-danger"}`}>
              {botStatus.mode === "simulation" ? "Simulación" : "Producción"}
            </span>
            {/* NUEVO: Badge para precios reales */}
            <span className={`badge me-3 ${botStatus.usingRealPrices ? "bg-success" : "bg-secondary"}`}>
              Precios: {botStatus.usingRealPrices ? "Reales" : "Simulados"}
            </span>
            <div className="dropdown">
              <button className="btn btn-dark position-relative" type="button" data-bs-toggle="dropdown">
                <i className="bi bi-bell"></i>
                <span className="notification-badge">3</span>
              </button>
              <ul className="dropdown-menu dropdown-menu-end notification-dropdown">
                <li className="notification-item">
                  <div className="notification-icon notification-success">
                    <i className="bi bi-check-circle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 5 minutos</div>
                    <div className="notification-message">Operación exitosa: USDC/LTC</div>
                  </div>
                </li>
                <li className="notification-item">
                  <div className="notification-icon notification-info">
                    <i className="bi bi-info-circle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 15 minutos</div>
                    <div className="notification-message">Nueva oportunidad detectada</div>
                  </div>
                </li>
                <li className="notification-item">
                  <div className="notification-icon notification-warning">
                    <i className="bi bi-exclamation-triangle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 30 minutos</div>
                    <div className="notification-message">Alta volatilidad detectada</div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </nav>
  )
}

export default Header

---------------------------------------------------------------------------------------------------------

"use client"

import { Chart } from "@/components/ui/chart"
import React from "react"

const ProfitChart = ({ profitHistory }) => {
  const chartRef = React.useRef(null)
  const [chart, setChart] = React.useState(null)
  const [range, setRange] = React.useState("24h")

  // Filtrar profitHistory según el rango seleccionado
  const getFilteredHistory = () => {
    if (!profitHistory || profitHistory.length === 0) return []
    let cutoff = 0
    const now = new Date()
    if (range === "24h") {
      cutoff = now.getTime() - 24 * 60 * 60 * 1000
    } else if (range === "7d") {
      cutoff = now.getTime() - 7 * 24 * 60 * 60 * 1000
    } else if (range === "30d") {
      cutoff = now.getTime() - 30 * 24 * 60 * 60 * 1000
    }
    return profitHistory.filter((item) => {
      if (!item.timestamp) return false
      const ts = typeof item.timestamp === "string" ? Date.parse(item.timestamp) : item.timestamp
      return ts >= cutoff
    })
  }

  React.useEffect(() => {
    const filtered = getFilteredHistory()
    if (chartRef.current && filtered.length > 0) {
      const ctx = chartRef.current.getContext("2d")

      if (chart) {
        chart.destroy()
      }

      const labels = filtered.map((item) => {
        const date = new Date(item.timestamp)
        if (range === "24h") {
          return `${date.getHours()}:${date.getMinutes().toString().padStart(2, "0")}`
        } else {
          return `${date.getDate()}/${date.getMonth() + 1}`
        }
      })

      const data = filtered.map((item) => item.profit)

      const newChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Ganancia ($)",
              data: data,
              borderColor: "#27ae60",
              backgroundColor: "rgba(39, 174, 96, 0.1)",
              borderWidth: 2,
              tension: 0.4,
              fill: true,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              mode: "index",
              intersect: false,
            },
          },
          scales: {
            y: {
              beginAtZero: false,
              grid: {
                color: "rgba(0, 0, 0, 0.05)",
              },
            },
            x: {
              grid: {
                display: false,
              },
            },
          },
        },
      })

      setChart(newChart)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [profitHistory, range])

  // Limpieza de chart al desmontar
  React.useEffect(() => {
    return () => {
      if (chart) chart.destroy()
    }
  }, [chart])

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">Historial de Ganancias</h5>
        <div className="btn-group">
          <button
            className={`btn btn-sm btn-outline-secondary${range === "24h" ? " active" : ""}`}
            onClick={() => setRange("24h")}
          >
            24h
          </button>
          <button
            className={`btn btn-sm btn-outline-secondary${range === "7d" ? " active" : ""}`}
            onClick={() => setRange("7d")}
          >
            7d
          </button>
          <button
            className={`btn btn-sm btn-outline-secondary${range === "30d" ? " active" : ""}`}
            onClick={() => setRange("30d")}
          >
            30d
          </button>
        </div>
      </div>
      <div className="card-body">
        <div style={{ height: "300px" }}>
          <canvas ref={chartRef}></canvas>
        </div>
      </div>
    </div>
  )
}

export default ProfitChart

--------------------------------------------------------------------------------------------------------------

const RiskAnalysis = ({ riskAnalysis }) => {
  const getRiskLevelClass = (value) => {
    if (value < 30) return "risk-low"
    if (value < 60) return "risk-medium"
    return "risk-high"
  }

  // AGREGADO: recomendaciones dinámicas si existen en el backend
  const recommendations =
    Array.isArray(riskAnalysis.recommendations) && riskAnalysis.recommendations.length > 0
      ? riskAnalysis.recommendations
      : [
          "Mantener exposición limitada en mercados volátiles",
          "Diversificar entre múltiples exchanges",
          "Considerar ajustar el nivel de riesgo si es superior al 60%",
        ]

  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">Análisis de Riesgo</h5>
      </div>
      <div className="card-body">
        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Volatilidad del Mercado</span>
            <span>{riskAnalysis.marketVolatility}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.marketVolatility)}`}
              style={{ width: `${riskAnalysis.marketVolatility}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Riesgo de Exchange</span>
            <span>{riskAnalysis.exchangeRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.exchangeRisk)}`}
              style={{ width: `${riskAnalysis.exchangeRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Riesgo de Liquidez</span>
            <span>{riskAnalysis.liquidityRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.liquidityRisk)}`}
              style={{ width: `${riskAnalysis.liquidityRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span className="fw-bold">Riesgo General</span>
            <span className="fw-bold">{riskAnalysis.overallRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.overallRisk)}`}
              style={{ width: `${riskAnalysis.overallRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mt-4">
          <h6>Recomendaciones</h6>
          <ul className="small">
            {recommendations.map((rec, idx) =>
              typeof rec === "string" ? (
                <li key={idx}>{rec}</li>
              ) : (
                <li key={idx}>
                  {rec.message || rec.text || JSON.stringify(rec)}
                  {rec.priority && (
                    <span className={`ms-2 badge bg-${rec.priority === "HIGH" ? "danger" : rec.priority === "MEDIUM" ? "warning" : "secondary"}`}>
                      {rec.priority}
                    </span>
                  )}
                </li>
              )
            )}
          </ul>
        </div>
      </div>
    </div>
  )
}

export default RiskAnalysis

-----------------------------------------------------------------------------------------------------------

import React from "react";
import { Link } from "react-router-dom";

const Sidebar = () => (
  <div className="sidebar">
    <ul>
      <li><Link to="/dashboard">Inicio</Link></li>
      <li><Link to="/general-config">Configuración General</Link></li>
      <li><Link to="/exchanges">Exchanges</Link></li>
      <li><Link to="/strategies">Estrategias de Trading</Link></li>
      <li><Link to="/risk">Gestión de Riesgos</Link></li>
      <li><Link to="/portfolio">Portfolio y Balances</Link></li>
      <li><Link to="/alerts">Alertas y Notificaciones</Link></li>
      <li><Link to="/ai">Inteligencia Artificial</Link></li>
      <li><Link to="/backtesting">Backtesting</Link></li>
      <li><Link to="/mobile-api">API Móvil</Link></li>
      <li><Link to="/logs">Logs y Monitoreo</Link></li>
      <li><Link to="/security">Seguridad</Link></li>
      <li><Link to="/troubleshooting">Troubleshooting</Link></li>
    </ul>
  </div>
);

export default Sidebar;

--------------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const SpecificPairs = ({ specificPairs, botStatus, onExecuteArbitrage }) => {
  const [selectedPair, setSelectedPair] = React.useState(null)
  const [showModal, setShowModal] = React.useState(false)
  const [amount, setAmount] = React.useState(100)

  const handleExecuteClick = (pair) => {
    setSelectedPair(pair)
    setShowModal(true)
  }

  const handleExecuteArbitrage = () => {
    if (selectedPair) {
      const pairData = specificPairs[selectedPair]
      onExecuteArbitrage(selectedPair, pairData.bestBuy.exchange, pairData.bestSell.exchange, amount)
      setShowModal(false)
    }
  }

  const getExchangeColor = (exchange) => {
    const colors = {
      Binance: "warning",
      Coinbase: "primary",
      Kraken: "info",
      Kucoin: "success",
    }
    return colors[exchange] || "secondary"
  }

  return (
    <>
      <div className="card h-100">
        <div className="card-header d-flex justify-content-between align-items-center">
          <h5 className="mb-0">🎯 Pares Específicos</h5>
          <span className="badge bg-primary">Tiempo Real</span>
        </div>
        <div className="card-body">
          {Object.entries(specificPairs).map(([pair, data]) => (
            <div key={pair} className={`pair-card ${data.isOpportunity ? "opportunity" : "no-opportunity"}`}>
              <div className="pair-header">
                <div className="pair-name">
                  <span className={`opportunity-indicator ${data.isOpportunity ? "yes" : "no"}`}></span>
                  {pair}
                </div>
                <div className={`profit-percentage ${data.profitPercentage >= 0.3 ? "positive" : "negative"}`}>
                  {data.profitPercentage.toFixed(2)}%
                </div>
              </div>

              <div className="exchange-prices">
                {Object.entries(data.exchanges).map(([exchange, exchangeData]) => (
                  <div
                    key={exchange}
                    className={`exchange-price ${
                      exchange === data.bestBuy.exchange
                        ? "best-buy"
                        : exchange === data.bestSell.exchange
                          ? "best-sell"
                          : ""
                    }`}
                  >
                    <div className="exchange-name">
                      <span className={`badge bg-${getExchangeColor(exchange)} me-2`}>{exchange}</span>
                      {exchange === data.bestBuy.exchange && <small>(Mejor compra)</small>}
                      {exchange === data.bestSell.exchange && <small>(Mejor venta)</small>}
                    </div>
                    <div className="exchange-price-value">${exchangeData.price.toFixed(4)}</div>
                  </div>
                ))}
              </div>

              <div className="action-buttons">
                <button
                  className="btn btn-sm btn-outline-primary"
                  onClick={() => handleExecuteClick(pair)}
                  disabled={!botStatus.isRunning || !data.isOpportunity}
                >
                  <i className="bi bi-lightning-charge-fill me-1"></i>
                  Ejecutar Arbitraje
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal de confirmación */}
      {showModal && (
        <div className="modal show" style={{ display: "block", backgroundColor: "rgba(0,0,0,0.5)" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Confirmar Arbitraje</h5>
                <button type="button" className="btn-close" onClick={() => setShowModal(false)}></button>
              </div>
              <div className="modal-body">
                <p>
                  Estás a punto de ejecutar un arbitraje para el par <strong>{selectedPair}</strong>.
                </p>
                <p>
                  <strong>Compra:</strong> {specificPairs[selectedPair]?.bestBuy.exchange} ($
                  {specificPairs[selectedPair]?.bestBuy.price.toFixed(4)})<br />
                  <strong>Venta:</strong> {specificPairs[selectedPair]?.bestSell.exchange} ($
                  {specificPairs[selectedPair]?.bestSell.price.toFixed(4)})<br />
                  <strong>Ganancia estimada:</strong> {specificPairs[selectedPair]?.profitPercentage.toFixed(2)}%
                </p>
                <div className="mb-3">
                  <label className="form-label">Cantidad a invertir (USDC)</label>
                  <input
                    type="number"
                    className="form-control"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    min="10"
                  />
                </div>
                <div className="alert alert-warning">
                  <i className="bi bi-exclamation-triangle me-2"></i>
                  {botStatus.mode === "simulation"
                    ? "Esto es una simulación. No se ejecutarán operaciones reales."
                    : "¡ATENCIÓN! Estás en modo PRODUCCIÓN. Se ejecutarán operaciones reales."}
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowModal(false)}>
                  Cancelar
                </button>
                <button
                  type="button"
                  className={`btn ${botStatus.mode === "simulation" ? "btn-primary" : "btn-danger"}`}
                  onClick={handleExecuteArbitrage}
                >
                  {botStatus.mode === "simulation" ? "Simular Arbitraje" : "Ejecutar Arbitraje Real"}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  )
}

--------------------------------------------------------------------------------------------------

const StatusCard = ({ title, value, icon, color }) => {
  return (
    <div className="col-md-3 mb-4">
      <div className="card status-card h-100">
        <div className="card-body">
          <div className={`status-icon text-${color}`}>
            <i className={`bi ${icon}`}></i>
          </div>
          <p>{title}</p>
          <h3>{value}</h3>
        </div>
      </div>
    </div>
  )
}

----------------------------------------------------------------------------------------------------

JS

import { Chart } from "@/components/ui/chart"
// ========== DASHBOARD AVANZADO CON FUNCIONALIDADES COMPLETAS ==========

class AdvancedArbitrageDashboard {
  constructor() {
    this.token = localStorage.getItem("token")
    this.user = JSON.parse(localStorage.getItem("user") || "{}")
    this.socket = null
    this.charts = {}
    this.refreshIntervals = {}
    this.notifications = []

    this.botData = {
      isRunning: false,
      totalTrades: 0,
      successfulTrades: 0,
      totalProfit: 0,
      dailyTrades: 0,
      dailyProfit: 0,
      exposure: { total: 0 },
      opportunities: [],
      balances: { BINANCE: {}, KUCOIN: {} },
      aiSuggestions: null,
    }

    this.init()
  }

  async init() {
    console.log("🚀 Inicializando dashboard avanzado...")

    // Ocultar pantalla de carga
    setTimeout(() => {
      document.getElementById("loading-screen").style.display = "none"

      if (this.token) {
        this.showDashboard()
        this.initializeSocket()
        this.loadAllData()
      } else {
        this.showLogin()
      }
    }, 1000)

    this.setupEventListeners()
    this.initializeCharts()
    this.startAutoRefresh()
  }

  setupEventListeners() {
    // Login
    const loginForm = document.getElementById("loginForm")
    if (loginForm) {
      loginForm.addEventListener("submit", (e) => this.handleLogin(e))
    }

    // Logout
    document.getElementById("logout-btn")?.addEventListener("click", () => this.logout())
    document.getElementById("logout-link")?.addEventListener("click", () => this.logout())

    // Sidebar
    document.getElementById("sidebar-toggle")?.addEventListener("click", () => this.toggleSidebar())

    // Navigation
    document.querySelectorAll(".nav-link[data-page]").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault()
        this.navigateToPage(link.dataset.page)
      })
    })

    // Bot controls
    document.getElementById("start-bot-btn")?.addEventListener("click", () => this.startBot())
    document.getElementById("stop-bot-btn")?.addEventListener("click", () => this.stopBot())

    // Refresh buttons
    document.getElementById("refresh-opportunities")?.addEventListener("click", () => this.loadOpportunities())
    document.getElementById("refresh-balances")?.addEventListener("click", () => this.loadBalances())
    document.getElementById("refresh-ai")?.addEventListener("click", () => this.loadAISuggestions())

    // Settings
    document.getElementById("save-settings")?.addEventListener("click", () => this.saveSettings())
    document.getElementById("reset-settings")?.addEventListener("click", () => this.resetSettings())

    // Manual trade execution
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("execute-trade-btn")) {
        const opportunityId = e.target.dataset.opportunityId
        this.executeManualTrade(opportunityId)
      }
    })
  }

  showLogin() {
    document.getElementById("login-form").style.display = "flex"
    document.getElementById("dashboard").style.display = "none"
  }

  showDashboard() {
    document.getElementById("login-form").style.display = "none"
    document.getElementById("dashboard").style.display = "block"

    if (this.user.username) {
      document.getElementById("user-name").textContent = this.user.username
    }
  }

  async handleLogin(e) {
    e.preventDefault()

    const username = document.getElementById("username").value
    const password = document.getElementById("password").value
    const loginBtn = document.getElementById("login-btn")
    const errorDiv = document.getElementById("login-error")

    loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando sesión...'
    loginBtn.disabled = true
    errorDiv.style.display = "none"

    try {
      const response = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      })

      const data = await response.json()

      if (response.ok) {
        this.token = data.token
        this.user = data.user
        localStorage.setItem("token", this.token)
        localStorage.setItem("user", JSON.stringify(this.user))

        this.showDashboard()
        this.initializeSocket()
        this.loadAllData()
        this.showNotification("Bienvenido al dashboard", "success")
      } else {
        errorDiv.textContent = data.message || "Error de autenticación"
        errorDiv.style.display = "block"
      }
    } catch (error) {
      errorDiv.textContent = "Error de conexión"
      errorDiv.style.display = "block"
    } finally {
      loginBtn.innerHTML = '<i class="bi bi-box-arrow-in-right me-2"></i>Iniciar Sesión'
      loginBtn.disabled = false
    }
  }

  logout() {
    localStorage.removeItem("token")
    localStorage.removeItem("user")
    this.token = null
    this.user = {}

    if (this.socket) this.socket.disconnect()
    this.clearRefreshIntervals()
    this.showLogin()
  }

  toggleSidebar() {
    const sidebar = document.getElementById("sidebar")
    const header = document.getElementById("header")
    const mainContent = document.getElementById("main-content")
    const toggleIcon = document.querySelector("#sidebar-toggle i")

    sidebar.classList.toggle("sidebar-collapsed")
    header.classList.toggle("header-expanded")
    mainContent.classList.toggle("main-content-expanded")

    if (sidebar.classList.contains("sidebar-collapsed")) {
      toggleIcon.className = "bi bi-chevron-right"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "none"
      })
    } else {
      toggleIcon.className = "bi bi-chevron-left"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "inline"
      })
    }
  }

  navigateToPage(page) {
    // Update navigation
    document.querySelectorAll(".nav-link").forEach((link) => {
      link.classList.remove("active")
    })
    document.querySelector(`[data-page="${page}"]`)?.classList.add("active")

    // Update page title
    const titles = {
      dashboard: "Dashboard Principal",
      opportunities: "Oportunidades de Arbitraje",
      "ai-advisor": "Asesor de IA",
      reports: "Reportes y Análisis",
      settings: "Configuración del Bot",
    }

    document.getElementById("page-title").textContent = titles[page] || "Dashboard"

    // Show/hide pages
    document.querySelectorAll(".page-content").forEach((pageEl) => {
      pageEl.style.display = "none"
    })

    const targetPage = document.getElementById(`page-${page}`)
    if (targetPage) {
      targetPage.style.display = "block"

      // Load page-specific data
      this.loadPageData(page)
    }
  }

  async loadPageData(page) {
    switch (page) {
      case "opportunities":
        await this.loadOpportunities()
        break
      case "ai-advisor":
        await this.loadAISuggestions()
        break
      case "reports":
        await this.loadReports()
        this.updateReportsCharts()
        break
      case "settings":
        this.loadSettings()
        break
    }
  }

  initializeSocket() {
    if (!this.token) return

    this.socket = io()

    this.socket.on("connect", () => {
      console.log("✅ Conectado al servidor")
      this.showNotification("Conectado al servidor", "success")
    })

    this.socket.on("status_update", (data) => {
      this.updateBotStatus(data)
    })

    this.socket.on("new_opportunity", (data) => {
      this.addNewOpportunity(data)
      this.showNotification(`Nueva oportunidad: ${data.pair} (${data.finalProfit.toFixed(2)}%)`, "info")
    })

    this.socket.on("balance_update", (data) => {
      this.updateBalances(data)
    })

    this.socket.on("trade_executed", (data) => {
      this.showNotification(
        `Trade ejecutado: ${data.profit > 0 ? "Ganancia" : "Pérdida"} de ${Math.abs(data.profit).toFixed(4)} USDT`,
        data.profit > 0 ? "success" : "warning",
      )
    })

    this.socket.on("disconnect", () => {
      console.log("❌ Desconectado del servidor")
      this.showNotification("Desconectado del servidor", "warning")
    })
  }

  async loadAllData() {
    try {
      await Promise.all([this.loadBotStatus(), this.loadOpportunities(), this.loadBalances(), this.loadAISuggestions()])
    } catch (error) {
      console.error("Error cargando datos:", error)
      this.showNotification("Error cargando datos", "danger")
    }
  }

  async apiCall(endpoint, options = {}) {
    const defaultOptions = {
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
    }

    try {
      const response = await fetch(endpoint, { ...defaultOptions, ...options })

      if (response.status === 401) {
        this.logout()
        throw new Error("No autorizado")
      }

      return await response.json()
    } catch (error) {
      console.error(`Error en API call ${endpoint}:`, error)
      throw error
    }
  }

  async loadBotStatus() {
    try {
      const data = await this.apiCall("/api/status")
      this.updateBotStatus(data)
    } catch (error) {
      console.error("Error cargando estado del bot:", error)
    }
  }

  updateBotStatus(data) {
    this.botData = { ...this.botData, ...data }
    const isRunning = data.botState?.isRunning || false

    // Update status indicators
    const statusBadge = document.getElementById("bot-status-badge")
    const statusText = document.getElementById("bot-status-text")
    const statusDescription = document.getElementById("bot-status-description")
    const runningIndicator = document.getElementById("bot-running-indicator")
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (isRunning) {
      statusBadge.className = "badge bg-success me-2"
      statusBadge.textContent = "Activo"
      statusText.textContent = "Bot en ejecución"
      statusDescription.innerHTML =
        '<span class="text-success"><i class="bi bi-play-circle me-1"></i>En ejecución</span>'
      runningIndicator.style.display = "block"
      startBtn.style.display = "none"
      stopBtn.style.display = "inline-block"
    } else {
      statusBadge.className = "badge bg-danger me-2"
      statusBadge.textContent = "Inactivo"
      statusText.textContent = "Bot detenido"
      statusDescription.innerHTML = '<span class="text-danger"><i class="bi bi-stop-circle me-1"></i>Detenido</span>'
      runningIndicator.style.display = "none"
      startBtn.style.display = "inline-block"
      stopBtn.style.display = "none"
    }

    // Update metrics
    if (data.botState) {
      this.updateElement("total-trades", data.botState.totalTrades || 0)
      this.updateElement("daily-trades", data.botState.dailyTrades || 0)
      this.updateElement("total-profit", `${(data.botState.totalProfit || 0).toFixed(4)} USDT`)
      this.updateElement("daily-profit", `${(data.botState.dailyProfit || 0).toFixed(4)} USDT`)
      this.updateElement("successful-trades", data.botState.successfulTrades || 0)

      const successRate =
        data.botState.totalTrades > 0
          ? ((data.botState.successfulTrades / data.botState.totalTrades) * 100).toFixed(1)
          : 0
      this.updateElement("success-rate", `${successRate}%`)
    }

    if (data.exposure) {
      this.updateElement("total-exposure", `$${(data.exposure.total || 0).toFixed(2)}`)
    }

    // Update charts if visible
    this.updateDashboardCharts(data)
  }

  updateElement(id, value) {
    const element = document.getElementById(id)
    if (element) element.textContent = value
  }

  async startBot() {
    const startBtn = document.getElementById("start-bot-btn")
    const originalText = startBtn.innerHTML

    startBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando...'
    startBtn.disabled = true

    try {
      const result = await this.apiCall("/api/bot/start", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot iniciado correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error iniciando el bot", "danger")
    } finally {
      startBtn.innerHTML = originalText
      startBtn.disabled = false
    }
  }

  async stopBot() {
    const stopBtn = document.getElementById("stop-bot-btn")
    const originalText = stopBtn.innerHTML

    stopBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Deteniendo...'
    stopBtn.disabled = true

    try {
      const result = await this.apiCall("/api/bot/stop", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot detenido correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error deteniendo el bot", "danger")
    } finally {
      stopBtn.innerHTML = originalText
      stopBtn.disabled = false
    }
  }

  async loadOpportunities() {
    try {
      const opportunities = await this.apiCall("/api/opportunities")
      this.botData.opportunities = opportunities
      this.updateOpportunitiesTable(opportunities)
    } catch (error) {
      console.error("Error cargando oportunidades:", error)
    }
  }

  updateOpportunitiesTable(opportunities) {
    const tbody = document.getElementById("opportunities-table")
    const detailedTbody = document.getElementById("detailed-opportunities-table")

    if (!opportunities || opportunities.length === 0) {
      const emptyRow = `
        <tr>
          <td colspan="7" class="text-center py-4">
            <i class="bi bi-search fs-4 text-muted"></i>
            <p class="mt-2 mb-0">No hay oportunidades disponibles</p>
          </td>
        </tr>
      `
      if (tbody) tbody.innerHTML = emptyRow
      if (detailedTbody) detailedTbody.innerHTML = emptyRow
      return
    }

    const createRow = (opp, detailed = false) => `
      <tr>
        <td>
          <strong>${opp.pair}</strong>
          ${detailed ? `<br><small class="text-muted">Riesgo: ${opp.riskLevel || "MEDIUM"}</small>` : ""}
        </td>
        <td>
          <span class="badge bg-primary me-1">${opp.buyExchange}</span>
          <i class="bi bi-arrow-right"></i>
          <span class="badge bg-secondary ms-1">${opp.sellExchange}</span>
        </td>
        <td class="text-success">
          <strong>${opp.finalProfit.toFixed(3)}%</strong>
          ${detailed ? `<br><small class="text-muted">Bruto: ${opp.grossProfit.toFixed(3)}%</small>` : ""}
        </td>
        <td>
          <div class="progress" style="height: 6px;">
            <div class="progress-bar ${opp.confidence > 0.7 ? "bg-success" : opp.confidence > 0.4 ? "bg-warning" : "bg-danger"}" 
                 style="width: ${opp.confidence * 100}%"></div>
          </div>
          <small>${(opp.confidence * 100).toFixed(1)}%</small>
        </td>
        <td>
          <strong>${opp.tradeAmount.toFixed(2)} USDT</strong>
          ${detailed ? `<br><small class="text-muted">Max: ${opp.pair.maxTradeAmount || "N/A"}</small>` : ""}
        </td>
        <td>
          <small>${new Date(opp.timestamp).toLocaleTimeString()}</small>
          ${detailed ? `<br><small class="text-muted">${new Date(opp.timestamp).toLocaleDateString()}</small>` : ""}
        </td>
        ${
          detailed
            ? `
          <td>
            <button class="btn btn-sm btn-success execute-trade-btn" data-opportunity-id="${opp.id || Date.now()}">
              <i class="bi bi-play-fill me-1"></i>
              Ejecutar
            </button>
          </td>
        `
            : ""
        }
      </tr>
    `

    if (tbody) {
      tbody.innerHTML = opportunities
        .slice(0, 5)
        .map((opp) => createRow(opp))
        .join("")
    }

    if (detailedTbody) {
      detailedTbody.innerHTML = opportunities.map((opp) => createRow(opp, true)).join("")
    }
  }

  addNewOpportunity(opportunity) {
    this.botData.opportunities.unshift(opportunity)
    this.botData.opportunities = this.botData.opportunities.slice(0, 20) // Keep only last 20
    this.updateOpportunitiesTable(this.botData.opportunities)
  }

  async executeManualTrade(opportunityId) {
    try {
      const result = await this.apiCall("/api/bot/execute", {
        method: "POST",
        body: JSON.stringify({ opportunityId }),
      })

      if (result.success) {
        this.showNotification(`Trade ejecutado exitosamente. Profit: ${result.profit?.toFixed(4)} USDT`, "success")
      } else {
        this.showNotification(`Error ejecutando trade: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error ejecutando trade manual", "danger")
    }
  }

  async loadBalances() {
    try {
      const balances = await this.apiCall("/api/balances")
      this.botData.balances = balances
      this.updateBalances(balances)
    } catch (error) {
      console.error("Error cargando balances:", error)
    }
  }

  updateBalances(balances) {
    this.updateExchangeBalances("binance-balances", balances.BINANCE || {})
    this.updateExchangeBalances("kucoin-balances", balances.KUCOIN || {})

    // Update balance charts
    this.updateBalanceCharts(balances)
  }

  updateExchangeBalances(tableId, balances) {
    const tbody = document.getElementById(tableId)
    if (!tbody) return

    const balanceEntries = Object.entries(balances).filter(([_, balance]) => balance.total > 0)

    if (balanceEntries.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="4" class="text-center py-4">
            <i class="bi bi-wallet2 fs-4 text-muted"></i>
            <p class="mt-2 mb-0">No hay balances disponibles</p>
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = balanceEntries
      .map(
        ([asset, balance]) => `
      <tr>
        <td>
          <strong>${asset}</strong>
          <small class="text-muted d-block">${this.getAssetName(asset)}</small>
        </td>
        <td>${balance.free.toFixed(6)}</td>
        <td>${balance.locked.toFixed(6)}</td>
        <td>
          <strong>${balance.total.toFixed(6)}</strong>
          <small class="text-muted d-block">≈ $${(balance.total * this.getAssetPrice(asset)).toFixed(2)}</small>
        </td>
      </tr>
    `,
      )
      .join("")
  }

  getAssetName(asset) {
    const names = {
      USDT: "Tether",
      POL: "Polygon",
      USDC: "USD Coin",
      BTC: "Bitcoin",
      ETH: "Ethereum",
    }
    return names[asset] || asset
  }

  getAssetPrice(asset) {
    // Simplified price lookup
    const prices = {
      USDT: 1,
      USDC: 1,
      POL: 0.45,
      BTC: 45000,
      ETH: 3000,
    }
    return prices[asset] || 1
  }

  async loadAISuggestions() {
    try {
      const suggestions = await this.apiCall("/api/ai/suggestions")
      this.botData.aiSuggestions = suggestions
      this.updateAISuggestions(suggestions)
    } catch (error) {
      console.error("Error cargando sugerencias de IA:", error)
    }
  }

  updateAISuggestions(suggestions) {
    // Update general recommendations
    const recommendationsContainer = document.getElementById("ai-recommendations")
    if (recommendationsContainer && suggestions.generalRecommendations) {
      recommendationsContainer.innerHTML = suggestions.generalRecommendations
        .map(
          (rec) => `
        <div class="ai-recommendation ${rec.importance.toLowerCase()}">
          <div class="d-flex align-items-center mb-2">
            <span class="badge bg-${rec.importance === "HIGH" ? "danger" : rec.importance === "MEDIUM" ? "warning" : "info"} me-2">
              ${rec.importance === "HIGH" ? "Alta Prioridad" : rec.importance === "MEDIUM" ? "Media Prioridad" : "Baja Prioridad"}
            </span>
            <strong>${rec.type.replace("_", " ")}</strong>
          </div>
          <p class="mb-0">${rec.message}</p>
        </div>
      `,
        )
        .join("")
    }

    // Update market insights
    const marketInsights = document.getElementById("market-insights")
    if (marketInsights && suggestions.marketInsights) {
      const insights = suggestions.marketInsights
      marketInsights.innerHTML = `
        <div class="row">
          <div class="col-md-6">
            <h6>Volatilidad del Mercado</h6>
            <div class="progress mb-3">
              <div class="progress-bar ${insights.marketVolatility > 4 ? "bg-danger" : insights.marketVolatility > 2 ? "bg-warning" : "bg-success"}" 
                   style="width: ${Math.min(insights.marketVolatility * 10, 100)}%"></div>
            </div>
            <small>${insights.marketVolatility.toFixed(2)}% - ${insights.marketVolatility > 4 ? "Alta" : insights.marketVolatility > 2 ? "Moderada" : "Baja"}</small>
          </div>
          <div class="col-md-6">
            <h6>Mejores Horas de Trading</h6>
            ${
              insights.bestTradingHours
                ?.slice(0, 3)
                .map(
                  (hour) => `
              <div class="d-flex justify-content-between">
                <span>${hour.formattedHour}</span>
                <span class="text-success">${(hour.successRate * 100).toFixed(1)}%</span>
              </div>
            `,
                )
                .join("") || '<p class="text-muted">No hay datos disponibles</p>'
            }
          </div>
        </div>
      `
    }
  }

  async loadReports() {
    try {
      const report = await this.apiCall("/api/report")
      this.updateReportsPage(report)
    } catch (error) {
      console.error("Error cargando reportes:", error)
    }
  }

  updateReportsPage(report) {
    // Update performance metrics
    const performanceMetrics = document.getElementById("performance-metrics")
    if (performanceMetrics && report.performance) {
      const perf = report.performance
      performanceMetrics.innerHTML = `
        <div class="row">
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-primary">${perf.totalTrades}</h4>
              <small>Total Trades</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-success">${perf.successRate.toFixed(1)}%</h4>
              <small>Tasa de Éxito</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-info">${perf.totalProfit.toFixed(4)}</h4>
              <small>Profit Total (USDT)</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-warning">${(perf.avgExecutionTime / 1000).toFixed(2)}s</h4>
              <small>Tiempo Promedio</small>
            </div>
          </div>
        </div>
      `
    }
  }

  initializeCharts() {
    // Initialize Chart.js charts
    this.initializeProfitChart()
    this.initializeBalanceChart()
    this.initializeOpportunityChart()
  }

  initializeProfitChart() {
    const ctx = document.getElementById("profit-chart")
    if (!ctx) return

    this.charts.profit = new Chart(ctx, {
      type: "line",
      data: {
        labels: [],
        datasets: [
          {
            label: "Profit Acumulado (USDT)",
            data: [],
            borderColor: "#06d6a0",
            backgroundColor: "rgba(6, 214, 160, 0.1)",
            tension: 0.4,
            fill: true,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: true, position: "top" },
        },
        scales: {
          y: { beginAtZero: true },
        },
      },
    })
  }

  initializeBalanceChart() {
    const ctx = document.getElementById("balance-chart")
    if (!ctx) return

    this.charts.balance = new Chart(ctx, {
      type: "doughnut",
      data: {
        labels: ["Binance", "KuCoin"],
        datasets: [
          {
            data: [0, 0],
            backgroundColor: ["#3a86ff", "#8338ec"],
            borderWidth: 2,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: "bottom" },
        },
      },
    })
  }

  initializeOpportunityChart() {
    const ctx = document.getElementById("opportunity-chart")
    if (!ctx) return

    this.charts.opportunity = new Chart(ctx, {
      type: "bar",
      data: {
        labels: [],
        datasets: [
          {
            label: "Oportunidades por Par",
            data: [],
            backgroundColor: "#ffd166",
            borderColor: "#ffb347",
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
        },
        scales: {
          y: { beginAtZero: true },
        },
      },
    })
  }

  updateDashboardCharts(data) {
    // Update profit chart with new data
    if (this.charts.profit && data.botState) {
      const now = new Date().toLocaleTimeString()
      this.charts.profit.data.labels.push(now)
      this.charts.profit.data.datasets[0].data.push(data.botState.totalProfit || 0)

      // Keep only last 20 points
      if (this.charts.profit.data.labels.length > 20) {
        this.charts.profit.data.labels.shift()
        this.charts.profit.data.datasets[0].data.shift()
      }

      this.charts.profit.update()
    }
  }

  updateBalanceCharts(balances) {
    if (this.charts.balance) {
      const binanceTotal = Object.values(balances.BINANCE || {}).reduce((sum, balance) => sum + (balance.total || 0), 0)
      const kucoinTotal = Object.values(balances.KUCOIN || {}).reduce((sum, balance) => sum + (balance.total || 0), 0)

      this.charts.balance.data.datasets[0].data = [binanceTotal, kucoinTotal]
      this.charts.balance.update()
    }
  }

  updateReportsCharts() {
    // Update opportunity chart
    if (this.charts.opportunity && this.botData.opportunities) {
      const pairCounts = {}
      this.botData.opportunities.forEach((opp) => {
        pairCounts[opp.pair] = (pairCounts[opp.pair] || 0) + 1
      })

      this.charts.opportunity.data.labels = Object.keys(pairCounts)
      this.charts.opportunity.data.datasets[0].data = Object.values(pairCounts)
      this.charts.opportunity.update()
    }
  }

  loadSettings() {
    // Load current settings
    const settings = {
      dryRun: true,
      checkInterval: 10,
      maxDailyTrades: 20,
      minProfit: 0.3,
      maxExposure: 200,
    }

    document.getElementById("dry-run").checked = settings.dryRun
    document.getElementById("check-interval").value = settings.checkInterval
    document.getElementById("max-daily-trades").value = settings.maxDailyTrades
    document.getElementById("min-profit").value = settings.minProfit
    document.getElementById("max-exposure").value = settings.maxExposure
  }

  async saveSettings() {
    const settings = {
      BOT: {
        DRY_RUN: document.getElementById("dry-run").checked,
        CHECK_INTERVAL: Number.parseInt(document.getElementById("check-interval").value),
        MAX_DAILY_TRADES: Number.parseInt(document.getElementById("max-daily-trades").value),
      },
      RISK_MANAGEMENT: {
        MAX_TOTAL_EXPOSURE: Number.parseFloat(document.getElementById("max-exposure").value),
      },
      TRADING_PAIRS: [
        {
          symbol: "POL/USDT",
          minProfit: Number.parseFloat(document.getElementById("min-profit").value),
        },
      ],
    }

    try {
      const result = await this.apiCall("/api/bot/settings", {
        method: "POST",
        body: JSON.stringify({ settings }),
      })

      if (result.success) {
        this.showNotification("Configuración guardada correctamente", "success")
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error guardando configuración", "danger")
    }
  }

  resetSettings() {
    if (confirm("¿Está seguro de que desea restablecer la configuración por defecto?")) {
      this.loadSettings()
      this.showNotification("Configuración restablecida", "info")
    }
  }

  startAutoRefresh() {
    // Auto-refresh data every 30 seconds
    this.refreshIntervals.status = setInterval(() => {
      if (this.token) this.loadBotStatus()
    }, 30000)

    // Auto-refresh opportunities every 15 seconds
    this.refreshIntervals.opportunities = setInterval(() => {
      if (this.token) this.loadOpportunities()
    }, 15000)

    // Auto-refresh balances every 60 seconds
    this.refreshIntervals.balances = setInterval(() => {
      if (this.token) this.loadBalances()
    }, 60000)
  }

  clearRefreshIntervals() {
    Object.values(this.refreshIntervals).forEach((interval) => {
      clearInterval(interval)
    })
    this.refreshIntervals = {}
  }

  showNotification(message, type = "info") {
    const notification = document.createElement("div")
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`
    notification.style.cssText = "top: 20px; right: 20px; z-index: 9999; min-width: 300px;"
    notification.innerHTML = `
      <i class="bi bi-${type === "success" ? "check-circle" : type === "danger" ? "exclamation-triangle" : type === "warning" ? "exclamation-circle" : "info-circle"} me-2"></i>
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `

    document.body.appendChild(notification)

    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove()
      }
    }, 5000)

    // Store notification
    this.notifications.unshift({ message, type, timestamp: Date.now() })
    this.notifications = this.notifications.slice(0, 50) // Keep only last 50
  }
}

// Initialize advanced dashboard
document.addEventListener("DOMContentLoaded", () => {
  console.log("🚀 Inicializando dashboard avanzado...")
  new AdvancedArbitrageDashboard()
})

----------------------------------------------------------------------------------------------------------------

// ========== APLICACIÓN PRINCIPAL DEL DASHBOARD ==========

class ArbitrageBotDashboard {
  constructor() {
    this.token = localStorage.getItem("token")
    this.user = JSON.parse(localStorage.getItem("user") || "{}")
    this.socket = null
    this.botData = {
      isRunning: false,
      totalTrades: 0,
      successfulTrades: 0,
      totalProfit: 0,
      dailyTrades: 0,
      dailyProfit: 0,
      exposure: { total: 0 },
    }

    this.init()
  }

  async init() {
    console.log("🚀 Inicializando dashboard...")

    // Ocultar loading screen después de un tiempo más corto
    setTimeout(() => {
      console.log("📱 Mostrando interfaz...")
      document.getElementById("loading-screen").style.display = "none"

      if (this.token) {
        console.log("✅ Token encontrado, mostrando dashboard")
        this.showDashboard()
        this.initializeSocket()
        this.loadInitialData()
      } else {
        console.log("🔑 No hay token, mostrando login")
        this.showLogin()
      }
    }, 500) // Reducido de 1000ms a 500ms

    this.setupEventListeners()
  }

  setupEventListeners() {
    console.log("🎯 Configurando event listeners...")

    // Login form
    const loginForm = document.getElementById("loginForm")
    if (loginForm) {
      loginForm.addEventListener("submit", (e) => this.handleLogin(e))
      console.log("✅ Login form listener configurado")
    }

    // Logout buttons
    const logoutBtn = document.getElementById("logout-btn")
    const logoutLink = document.getElementById("logout-link")

    if (logoutBtn) {
      logoutBtn.addEventListener("click", () => this.logout())
      console.log("✅ Logout button listener configurado")
    }

    if (logoutLink) {
      logoutLink.addEventListener("click", () => this.logout())
      console.log("✅ Logout link listener configurado")
    }

    // Sidebar toggle
    const sidebarToggle = document.getElementById("sidebar-toggle")
    if (sidebarToggle) {
      sidebarToggle.addEventListener("click", () => this.toggleSidebar())
      console.log("✅ Sidebar toggle listener configurado")
    }

    // Navigation
    document.querySelectorAll(".nav-link[data-page]").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault()
        this.navigateToPage(link.dataset.page)
      })
    })
    console.log("✅ Navigation listeners configurados")

    // Bot controls
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (startBtn) {
      startBtn.addEventListener("click", () => this.startBot())
      console.log("✅ Start bot listener configurado")
    }

    if (stopBtn) {
      stopBtn.addEventListener("click", () => this.stopBot())
      console.log("✅ Stop bot listener configurado")
    }

    // Refresh buttons
    const refreshBtn = document.getElementById("refresh-opportunities")
    if (refreshBtn) {
      refreshBtn.addEventListener("click", () => this.loadOpportunities())
      console.log("✅ Refresh opportunities listener configurado")
    }
  }

  showLogin() {
    console.log("🔑 Mostrando pantalla de login")
    const loginForm = document.getElementById("login-form")
    const dashboard = document.getElementById("dashboard")

    if (loginForm) loginForm.style.display = "flex"
    if (dashboard) dashboard.style.display = "none"
  }

  showDashboard() {
    console.log("📊 Mostrando dashboard")
    const loginForm = document.getElementById("login-form")
    const dashboard = document.getElementById("dashboard")

    if (loginForm) loginForm.style.display = "none"
    if (dashboard) dashboard.style.display = "block"

    if (this.user.username) {
      const userNameEl = document.getElementById("user-name")
      if (userNameEl) {
        userNameEl.textContent = this.user.username
      }
    }
  }

  async handleLogin(e) {
    e.preventDefault()
    console.log("🔐 Intentando login...")

    const username = document.getElementById("username").value
    const password = document.getElementById("password").value
    const loginBtn = document.getElementById("login-btn")
    const errorDiv = document.getElementById("login-error")

    // Show loading
    if (loginBtn) {
      loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando sesión...'
      loginBtn.disabled = true
    }

    if (errorDiv) {
      errorDiv.style.display = "none"
    }

    try {
      console.log("📡 Enviando credenciales al servidor...")
      const response = await fetch("/api/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username, password }),
      })

      const data = await response.json()
      console.log("📨 Respuesta del servidor:", response.status)

      if (response.ok) {
        console.log("✅ Login exitoso")
        this.token = data.token
        this.user = data.user
        localStorage.setItem("token", this.token)
        localStorage.setItem("user", JSON.stringify(this.user))

        this.showDashboard()
        this.initializeSocket()
        this.loadInitialData()
      } else {
        console.log("❌ Error en login:", data.message)
        if (errorDiv) {
          errorDiv.textContent = data.message || "Error de autenticación"
          errorDiv.style.display = "block"
        }
      }
    } catch (error) {
      console.error("❌ Error de conexión:", error)
      if (errorDiv) {
        errorDiv.textContent = "Error de conexión"
        errorDiv.style.display = "block"
      }
    } finally {
      if (loginBtn) {
        loginBtn.innerHTML = '<i class="bi bi-box-arrow-in-right me-2"></i>Iniciar Sesión'
        loginBtn.disabled = false
      }
    }
  }

  logout() {
    console.log("👋 Cerrando sesión...")
    localStorage.removeItem("token")
    localStorage.removeItem("user")
    this.token = null
    this.user = {}

    if (this.socket) {
      this.socket.disconnect()
    }

    this.showLogin()
  }

  toggleSidebar() {
    console.log("📱 Toggle sidebar")
    const sidebar = document.getElementById("sidebar")
    const header = document.getElementById("header")
    const mainContent = document.getElementById("main-content")
    const toggleIcon = document.querySelector("#sidebar-toggle i")

    if (sidebar) sidebar.classList.toggle("sidebar-collapsed")
    if (header) header.classList.toggle("header-expanded")
    if (mainContent) mainContent.classList.toggle("main-content-expanded")

    if (sidebar && sidebar.classList.contains("sidebar-collapsed")) {
      if (toggleIcon) toggleIcon.className = "bi bi-chevron-right"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "none"
      })
    } else {
      if (toggleIcon) toggleIcon.className = "bi bi-chevron-left"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "inline"
      })
    }
  }

  navigateToPage(page) {
    console.log("🧭 Navegando a:", page)

    // Update navigation
    document.querySelectorAll(".nav-link").forEach((link) => {
      link.classList.remove("active")
    })
    const activeLink = document.querySelector(`[data-page="${page}"]`)
    if (activeLink) {
      activeLink.classList.add("active")
    }

    // Update page title
    const titles = {
      dashboard: "Dashboard",
      opportunities: "Oportunidades de Arbitraje",
      "ai-advisor": "Asesor de IA",
      reports: "Reportes y Análisis",
      settings: "Configuración",
    }

    const pageTitle = document.getElementById("page-title")
    if (pageTitle) {
      pageTitle.textContent = titles[page] || "Dashboard"
    }

    // Show/hide pages
    document.querySelectorAll(".page-content").forEach((pageEl) => {
      pageEl.style.display = "none"
    })

    const targetPage = document.getElementById(`page-${page}`)
    if (targetPage) {
      targetPage.style.display = "block"
    }
  }

  initializeSocket() {
    console.log("🔌 Inicializando Socket.IO...")

    try {
      this.socket = io()

      this.socket.on("connect", () => {
        console.log("✅ Conectado al servidor via Socket.IO")
      })

      this.socket.on("status_update", (data) => {
        console.log("📊 Actualización de estado recibida")
        this.updateBotStatus(data)
      })

      this.socket.on("new_opportunity", (data) => {
        console.log("🎯 Nueva oportunidad:", data)
        this.loadOpportunities()
      })

      this.socket.on("balance_update", (data) => {
        console.log("💰 Actualización de balances")
        this.updateBalances(data)
      })

      this.socket.on("disconnect", () => {
        console.log("❌ Desconectado del servidor")
      })

      this.socket.on("connect_error", (error) => {
        console.error("❌ Error de conexión Socket.IO:", error)
      })
    } catch (error) {
      console.error("❌ Error inicializando Socket.IO:", error)
    }
  }

  async loadInitialData() {
    console.log("📡 Cargando datos iniciales...")

    try {
      await Promise.all([this.loadBotStatus(), this.loadOpportunities(), this.loadBalances()])
      console.log("✅ Datos iniciales cargados")
    } catch (error) {
      console.error("❌ Error cargando datos iniciales:", error)
    }
  }

  async apiCall(endpoint, options = {}) {
    const defaultOptions = {
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
    }

    try {
      const response = await fetch(endpoint, { ...defaultOptions, ...options })

      if (response.status === 401) {
        console.log("🔑 Token expirado, redirigiendo a login")
        this.logout()
        throw new Error("No autorizado")
      }

      return await response.json()
    } catch (error) {
      console.error(`❌ Error en API call ${endpoint}:`, error)
      throw error
    }
  }

  async loadBotStatus() {
    try {
      console.log("📊 Cargando estado del bot...")
      const data = await this.apiCall("/api/status")
      this.updateBotStatus(data)
    } catch (error) {
      console.error("❌ Error cargando estado del bot:", error)
    }
  }

  updateBotStatus(data) {
    console.log("🔄 Actualizando estado del bot")
    this.botData = { ...this.botData, ...data }

    // Update bot status indicators
    const isRunning = data.botState?.isRunning || false

    // Update sidebar status
    const statusBadge = document.getElementById("bot-status-badge")
    const statusText = document.getElementById("bot-status-text")
    const statusDescription = document.getElementById("bot-status-description")
    const runningIndicator = document.getElementById("bot-running-indicator")
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (isRunning) {
      if (statusBadge) {
        statusBadge.className = "badge bg-success me-2"
        statusBadge.textContent = "Activo"
      }
      if (statusText) statusText.textContent = "Bot en ejecución"
      if (statusDescription) {
        statusDescription.innerHTML =
          '<span class="text-success"><i class="bi bi-play-circle me-1"></i>En ejecución</span>'
      }
      if (runningIndicator) runningIndicator.style.display = "block"
      if (startBtn) startBtn.style.display = "none"
      if (stopBtn) stopBtn.style.display = "inline-block"
    } else {
      if (statusBadge) {
        statusBadge.className = "badge bg-danger me-2"
        statusBadge.textContent = "Inactivo"
      }
      if (statusText) statusText.textContent = "Bot detenido"
      if (statusDescription) {
        statusDescription.innerHTML = '<span class="text-danger"><i class="bi bi-stop-circle me-1"></i>Detenido</span>'
      }
      if (runningIndicator) runningIndicator.style.display = "none"
      if (startBtn) startBtn.style.display = "inline-block"
      if (stopBtn) stopBtn.style.display = "none"
    }

    // Update metrics
    if (data.botState) {
      this.updateElement("total-trades", data.botState.totalTrades || 0)
      this.updateElement("daily-trades", data.botState.dailyTrades || 0)
      this.updateElement("total-profit", `${(data.botState.totalProfit || 0).toFixed(4)} USDT`)
      this.updateElement("daily-profit", `${(data.botState.dailyProfit || 0).toFixed(4)} USDT`)
      this.updateElement("successful-trades", data.botState.successfulTrades || 0)

      const successRate =
        data.botState.totalTrades > 0
          ? ((data.botState.successfulTrades / data.botState.totalTrades) * 100).toFixed(1)
          : 0
      this.updateElement("success-rate", `${successRate}%`)
    }

    if (data.exposure) {
      this.updateElement("total-exposure", `$${(data.exposure.total || 0).toFixed(2)}`)
    }
  }

  updateElement(id, value) {
    const element = document.getElementById(id)
    if (element) {
      element.textContent = value
    }
  }

  async startBot() {
    console.log("▶ Iniciando bot...")
    const startBtn = document.getElementById("start-bot-btn")
    const originalText = startBtn ? startBtn.innerHTML : ""

    if (startBtn) {
      startBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando...'
      startBtn.disabled = true
    }

    try {
      const result = await this.apiCall("/api/bot/start", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot iniciado correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error iniciando el bot", "danger")
    } finally {
      if (startBtn) {
        startBtn.innerHTML = originalText
        startBtn.disabled = false
      }
    }
  }

  async stopBot() {
    console.log("⏹️ Deteniendo bot...")
    const stopBtn = document.getElementById("stop-bot-btn")
    const originalText = stopBtn ? stopBtn.innerHTML : ""

    if (stopBtn) {
      stopBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Deteniendo...'
      stopBtn.disabled = true
    }

    try {
      const result = await this.apiCall("/api/bot/stop", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot detenido correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error deteniendo el bot", "danger")
    } finally {
      if (stopBtn) {
        stopBtn.innerHTML = originalText
        stopBtn.disabled = false
      }
    }
  }

  async loadOpportunities() {
    try {
      console.log("🎯 Cargando oportunidades...")
      const opportunities = await this.apiCall("/api/opportunities")
      this.updateOpportunitiesTable(opportunities)
    } catch (error) {
      console.error("❌ Error cargando oportunidades:", error)
    }
  }

  updateOpportunitiesTable(opportunities) {
    const tbody = document.getElementById("opportunities-table")
    if (!tbody) return

    if (!opportunities || opportunities.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center py-4">
            No hay oportunidades recientes
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = opportunities
      .slice(0, 5)
      .map(
        (opp) => `
      <tr>
        <td>${opp.pair}</td>
        <td>${opp.buyExchange} → ${opp.sellExchange}</td>
        <td class="text-success">${opp.finalProfit.toFixed(2)}%</td>
        <td>
          <div class="progress" style="height: 6px;">
            <div class="progress-bar bg-success" role="progressbar" 
                 style="width: ${opp.confidence * 100}%" 
                 aria-valuenow="${opp.confidence * 100}" 
                 aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          <small>${(opp.confidence * 100).toFixed(1)}%</small>
        </td>
        <td>${opp.tradeAmount.toFixed(2)} USDT</td>
        <td>${new Date(opp.timestamp).toLocaleTimeString()}</td>
      </tr>
    `,
      )
      .join("")
  }

  async loadBalances() {
    try {
      console.log("💰 Cargando balances...")
      const balances = await this.apiCall("/api/balances")
      this.updateBalances(balances)
    } catch (error) {
      console.error("❌ Error cargando balances:", error)
    }
  }

  updateBalances(balances) {
    this.updateExchangeBalances("binance-balances", balances.BINANCE || {})
    this.updateExchangeBalances("kucoin-balances", balances.KUCOIN || {})
  }

  updateExchangeBalances(tableId, balances) {
    const tbody = document.getElementById(tableId)
    if (!tbody) return

    const balanceEntries = Object.entries(balances).filter(([_, balance]) => balance.total > 0)

    if (balanceEntries.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="4" class="text-center py-4">
            No hay balances disponibles
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = balanceEntries
      .map(
        ([asset, balance]) => `
      <tr>
        <td>${asset}</td>
        <td>${balance.free.toFixed(6)}</td>
        <td>${balance.locked.toFixed(6)}</td>
        <td>${balance.total.toFixed(6)}</td>
      </tr>
    `,
      )
      .join("")
  }

  showNotification(message, type = "info") {
    console.log(`📢 Notificación [${type}]: ${message}`)

    // Create notification element
    const notification = document.createElement("div")
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`
    notification.style.cssText = "top: 20px; right: 20px; z-index: 9999; min-width: 300px;"
    notification.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `

    document.body.appendChild(notification)

    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove()
      }
    }, 5000)
  }
}

// Initialize dashboard when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  console.log("🚀 DOM cargado, inicializando dashboard...")
  try {
    new ArbitrageBotDashboard()
  } catch (error) {
    console.error("❌ Error inicializando dashboard:", error)
  }
})

// Fallback para navegadores que no soporten DOMContentLoaded
if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", () => {
    console.log("🚀 Fallback: DOM cargado")
    new ArbitrageBotDashboard()
  })
} else {
  console.log("🚀 DOM ya estaba cargado")
  new ArbitrageBotDashboard()
}
const express = require('express');
const router = express.Router();
const config = require('../config');

router.get('/config', (req, res) => {
  res.json(config);
});

module.exports = router;


------------------------------------------------------------------------------------------------------

class Dashboard {
    constructor() {
        this.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
        
        this.profitChart = null;
        this.balanceChart = null;
        this.opportunitiesChart = null;
        this.riskChart = null;
        this.isSimulationMode = true; // Por defecto en modo simulación
        
        this.initCharts();
        this.initEventListeners();
        this.startDataPolling();
    }
    
    initEventListeners() {
        document.getElementById('start-bot').addEventListener('click', () => this.startBot());
        document.getElementById('stop-bot').addEventListener('click', () => this.stopBot());
        document.getElementById('toggle-mode').addEventListener('click', () => this.toggleMode());
        document.getElementById('rebalance-funds').addEventListener('click', () => this.rebalanceFunds());
        
        // Listeners para cambiar estrategias
        document.getElementById('strategy-selector').addEventListener('change', (e) => {
            this.changeStrategy(e.target.value);
        });
        
        // Listeners para ajustes de riesgo
        document.getElementById('risk-level').addEventListener('change', (e) => {
            this.updateRiskSettings({riskLevel: e.target.value});
        });

        // ============= AGREGADO PARA DASHBOARD (panel IA y auto-rebalance) =============
        const toggleIA = document.getElementById('toggle-ia');
        if (toggleIA) {
            toggleIA.addEventListener('click', () => this.toggleIA());
        }
        const toggleAutoRebalance = document.getElementById('toggle-auto-rebalance');
        if (toggleAutoRebalance) {
            toggleAutoRebalance.addEventListener('click', () => this.toggleAutoRebalance());
        }
        // ============= FIN AGREGADO =============
    }
    
    startDataPolling() {
        // Actualizar datos cada 5 segundos
        setInterval(() => {
            this.updateBotStatus();
            this.updateProfitChart();
            this.updateBalanceChart();
            this.updateOpportunitiesChart();
            this.updateRiskAnalysis();
            // ============= AGREGADO PARA DASHBOARD ============
            this.updateAIRecommendations();
            this.updateAnomaliesPanel();
            this.updateCommissionPanel();
            this.updateAutoRebalancePanel();
            // ============= FIN AGREGADO ============
        }, 5000);
        
        // Inicializar con datos actuales
        this.updateBotStatus();
        this.updateProfitChart();
        this.updateBalanceChart();
        this.updateOpportunitiesChart();
        this.updateRiskAnalysis();
        // ============= AGREGADO PARA DASHBOARD ============
        this.updateAIRecommendations();
        this.updateAnomaliesPanel();
        this.updateCommissionPanel();
        this.updateAutoRebalancePanel();
        // ============= FIN AGREGADO ============
    }
    
    async updateBotStatus() {
        try {
            const response = await fetch('/api/status');
            const data = await response.json();
            
            this.updateElement("bot-status", data.isRunning ? "Activo" : "Inactivo");
            this.updateElement("bot-status-indicator", data.isRunning ? "active" : "inactive");
            this.updateElement("total-profit", `$${data.totalProfit.toFixed(2)}`);
            this.updateElement("total-trades", data.totalTrades);
            this.updateElement("successful-trades", data.successfulTrades);
            this.updateElement("failed-trades", data.failedTrades);
            this.updateElement("current-strategy", data.currentStrategy);
            this.updateElement("risk-level", data.riskLevel);
            
            // Nuevas métricas añadidas
            this.updateElement("trading-pairs", data.tradingPairs.join(", ") || "Ninguno");
            this.updateElement("cycle-interval", (data.checkInterval / 1000).toFixed(1) || "0");
            this.updateElement("average-latency", data.averageLatency || "N/A");
            
            // Actualizar modo (simulación/producción)
            this.updateElement("current-mode", this.isSimulationMode ? "Simulación" : "Producción");
            
            // Actualizar balances con formato correcto
            if (data.balances) {
                const balanceContainer = document.getElementById("exchange-balances");
                balanceContainer.innerHTML = "";
                
                Object.entries(data.balances).forEach(([exchange, balance]) => {
                    const balanceItem = document.createElement("div");
                    balanceItem.className = "balance-item";
                    balanceItem.innerHTML = `
                        <span class="exchange-name">${exchange}:</span>
                        <span class="exchange-balance">$${parseFloat(balance).toLocaleString('es-ES', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        })}</span>
                    `;
                    balanceContainer.appendChild(balanceItem);
                });
            }
        } catch (error) {
            console.error("Error al actualizar el estado del bot:", error);
        }
    }
    
    async updateProfitChart() {
        try {
            const response = await fetch('/api/profit-history');
            const data = await response.json();
            
            const labels = data.map(item => new Date(item.timestamp).toLocaleTimeString());
            const profits = data.map(item => item.profit);
            
            if (this.profitChart) {
                this.profitChart.data.labels = labels;
                this.profitChart.data.datasets[0].data = profits;
                this.profitChart.update();
            } else {
                this.initProfitChart(labels, profits);
            }
        } catch (error) {
            console.error("Error al actualizar el gráfico de ganancias:", error);
        }
    }
    
    async updateBalanceChart() {
        try {
            const response = await fetch('/api/balance-history');
            const data = await response.json();
            
            const labels = data.timestamps.map(timestamp => new Date(timestamp).toLocaleDateString());
            const datasets = Object.entries(data.balances).map(([exchange, balances], index) => {
                const color = Object.values(this.chartColors)[index % Object.values(this.chartColors).length];
                return {
                    label: exchange,
                    data: balances,
                    borderColor: color,
                    backgroundColor: this.transparentize(color, 0.5),
                    fill: false,
                    tension: 0.4
                };
            });
            
            if (this.balanceChart) {
                this.balanceChart.data.labels = labels;
                this.balanceChart.data.datasets = datasets;
                this.balanceChart.update();
            } else {
                this.initBalanceChart(labels, datasets);
            }
        } catch (error) {
            console.error("Error al actualizar el gráfico de balances:", error);
        }
    }
    
    async updateOpportunitiesChart() {
        try {
            const response = await fetch('/api/opportunities');
            const data = await response.json();
            
            const labels = data.map(item => `${item.pair} (${item.exchanges.join(' → ')})`);
            const values = data.map(item => item.profitPercentage);
            
            if (this.opportunitiesChart) {
                this.opportunitiesChart.data.labels = labels;
                this.opportunitiesChart.data.datasets[0].data = values;
                this.opportunitiesChart.update();
            } else {
                this.initOpportunitiesChart(labels, values);
            }
        } catch (error) {
            console.error("Error al actualizar el gráfico de oportunidades:", error);
        }
    }
    
    async updateRiskAnalysis() {
        try {
            const response = await fetch('/api/risk-analysis');
            const data = await response.json();
            
            // Actualizar indicadores de riesgo
            this.updateElement("market-volatility", `${data.marketVolatility}%`);
            this.updateElement("exchange-risk", `${data.exchangeRisk}%`);
            this.updateElement("liquidity-risk", `${data.liquidityRisk}%`);
            this.updateElement("overall-risk", `${data.overallRisk}%`);
            
            // Actualizar barras de progreso
            this.updateProgressBar("market-volatility-bar", data.marketVolatility);
            this.updateProgressBar("exchange-risk-bar", data.exchangeRisk);
            this.updateProgressBar("liquidity-risk-bar", data.liquidityRisk);
            this.updateProgressBar("overall-risk-bar", data.overallRisk);
            
            // Actualizar gráfico de riesgo
            const labels = ['Volatilidad', 'Riesgo de Exchange', 'Riesgo de Liquidez', 'Riesgo Total'];
            const values = [data.marketVolatility, data.exchangeRisk, data.liquidityRisk, data.overallRisk];
            
            if (this.riskChart) {
                this.riskChart.data.datasets[0].data = values;
                this.riskChart.update();
            } else {
                this.initRiskChart(labels, values);
            }
        } catch (error) {
            console.error("Error al actualizar el análisis de riesgo:", error);
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL INTELIGENCIA ARTIFICIAL ==========
    async updateAIRecommendations() {
        try {
            const panel = document.getElementById("ai-recommendations-panel");
            if (!panel) return;
            const response = await fetch('/api/ia/recomendaciones');
            const data = await response.json();
            if (data && data.recomendaciones) {
                panel.innerHTML = data.recomendaciones.map(rec =>
                    `<div class="ai-recommendation">
                        <span class="icon">🤖</span>
                        <span class="ai-text">${rec.texto}</span>
                        <span class="ai-confidence">${rec.probabilidad ? `(${rec.probabilidad}%)` : ""}</span>
                    </div>`
                ).join("");
            }
        } catch (error) {
            // Silencioso, panel es opcional
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL DE ANOMALÍAS ==========
    async updateAnomaliesPanel() {
        try {
            const panel = document.getElementById("anomalies-panel");
            if (!panel) return;
            const response = await fetch('/api/anomalias');
            const data = await response.json();
            if (data && data.anomalias) {
                panel.innerHTML = data.anomalias.map(a =>
                    `<div class="anomaly">
                        <span class="anomaly-type">${a.tipo}</span>
                        <span class="anomaly-desc">${a.descripcion}</span>
                        <span class="anomaly-time">${a.timestamp}</span>
                    </div>`
                ).join("");
            }
        } catch (error) {
            // Silencioso, panel es opcional
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL DE COMISIONES ==========
    async updateCommissionPanel() {
        try {
            const panel = document.getElementById("commission-panel");
            if (!panel) return;
            const response = await fetch('/api/comisiones');
            const data = await response.json();
            if (data && data.comisiones) {
                panel.innerHTML = Object.entries(data.comisiones)
                    .map(([exchange, fees]) =>
                        `<div>
                            <strong>${exchange.toUpperCase()}:</strong>
                            <span>Taker: ${(fees.taker * 100).toFixed(2)}% | Maker: ${(fees.maker * 100).toFixed(2)}%</span>
                        </div>`
                    ).join("");
            }
        } catch (error) {
            // Silencioso
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL AUTO-REBALANCE ==========
    async updateAutoRebalancePanel() {
        try {
            const panel = document.getElementById("auto-rebalance-panel");
            if (!panel) return;
            const response = await fetch('/api/rebalanceo/estado');
            const data = await response.json();
            panel.innerHTML = `<span>Auto-rebalance: <strong>${data.enabled ? "Activado" : "Desactivado"}</strong></span>`;
        } catch (error) { }
    }

    // ========== AGREGADO DASHBOARD: TOGGLE IA Y AUTO-REBALANCE ==========
    async toggleIA() {
        try {
            const response = await fetch('/api/toggle-ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ enabled: !this.lastIAEnabled })
            });
            const data = await response.json();
            this.lastIAEnabled = data.aiEnabled;
            this.updateAIRecommendations();
        } catch (e) { }
    }
    async toggleAutoRebalance() {
        try {
            const panel = document.getElementById("auto-rebalance-panel");
            const enabled = panel && panel.textContent.includes("Activado");
            const response = await fetch('/api/toggle-auto-rebalance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ enabled: !enabled })
            });
            await response.json();
            this.updateAutoRebalancePanel();
        } catch (e) { }
    }
    // ========== FIN AGREGADOS DASHBOARD ==========

    initCharts() {
        // Los gráficos se inicializarán cuando lleguen los datos
    }
    
    initProfitChart(labels, data) {
        const ctx = document.getElementById('profit-chart').getContext('2d');
        this.profitChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Ganancia ($)',
                    data: data,
                    borderColor: this.chartColors.green,
                    backgroundColor: this.transparentize(this.chartColors.green, 0.5),
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Historial de Ganancias'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `Ganancia: $${context.raw.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Tiempo'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Ganancia ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    }
    
    initBalanceChart(labels, datasets) {
        const ctx = document.getElementById('balance-chart').getContext('2d');
        this.balanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Balances por Exchange'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: $${context.raw.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Fecha'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Balance ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    }
    
    initOpportunitiesChart(labels, data) {
        const ctx = document.getElementById('opportunities-chart').getContext('2d');
        this.opportunitiesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Oportunidades de Arbitraje (%)',
                    data: data,
                    backgroundColor: this.transparentize(this.chartColors.blue, 0.5),
                    borderColor: this.chartColors.blue,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Oportunidades de Arbitraje'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Ganancia: ${context.raw.toFixed(2)}%`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Par / Exchanges'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Ganancia Potencial (%)'
                        },
                        ticks: {
                            callback: function(value) {
                                return value.toFixed(2) + '%';
                            }
                        }
                    }
                }
            }
        });
    }
    
    initRiskChart(labels, data) {
        const ctx = document.getElementById('risk-chart').getContext('2d');
        this.riskChart = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nivel de Riesgo',
                    data: data,
                    backgroundColor: this.transparentize(this.chartColors.red, 0.5),
                    borderColor: this.chartColors.red,
                    pointBackgroundColor: this.chartColors.red,
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: this.chartColors.red
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Análisis de Riesgo'
                    }
                },
                scales: {
                    r: {
                        angleLines: {
                            display: true
                        },
                        suggestedMin: 0,
                        suggestedMax: 100,
                        ticks: {
                            stepSize: 20,
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                }
            }
        });
    }
    
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }
    
    updateProgressBar(id, value) {
        const progressBar = document.getElementById(id);
        if (progressBar) {
            progressBar.style.width = `${value}%`;
            
            // Cambiar color según el nivel de riesgo
            if (value < 30) {
                progressBar.className = "progress-bar bg-success";
            } else if (value < 70) {
                progressBar.className = "progress-bar bg-warning";
            } else {
                progressBar.className = "progress-bar bg-danger";
            }
        }
    }
    
    transparentize(color, alpha) {
        const rgbColor = color.replace('rgb(', '').replace(')', '').split(',');
        return `rgba(${rgbColor[0]}, ${rgbColor[1]}, ${rgbColor[2]}, ${alpha})`;
    }
    
    async startBot() {
        try {
            const response = await fetch('/api/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    mode: this.isSimulationMode ? 'simulation' : 'production'
                })
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Bot iniciado correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al iniciar el bot: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al iniciar el bot:", error);
            alert("Error al iniciar el bot. Consulta la consola para más detalles.");
        }
    }
    
    async stopBot() {
        try {
            const response = await fetch('/api/stop-bot', {
                method: 'POST'
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Bot detenido correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al detener el bot: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al detener el bot:", error);
            alert("Error al detener el bot. Consulta la consola para más detalles.");
        }
    }
    
    async changeStrategy(strategy) {
        try {
            const response = await fetch('/api/change-strategy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ strategy })
            });
            
            const data = await response.json();
            if (data.success) {
                alert(`Estrategia cambiada a: ${strategy}`);
                this.updateBotStatus();
            } else {
                alert(`Error al cambiar la estrategia: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al cambiar la estrategia:", error);
            alert("Error al cambiar la estrategia. Consulta la consola para más detalles.");
        }
    }
    
    async updateRiskSettings(settings) {
        try {
            const response = await fetch('/api/update-risk-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(settings)
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Configuración de riesgo actualizada correctamente");
                this.updateRiskAnalysis();
            } else {
                alert(`Error al actualizar la configuración de riesgo: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al actualizar la configuración de riesgo:", error);
            alert("Error al actualizar la configuración de riesgo. Consulta la consola para más detalles.");
        }
    }
    
    // Nueva función para alternar entre modo simulación y producción
    toggleMode() {
        this.isSimulationMode = !this.isSimulationMode;
        this.updateElement("current-mode", this.isSimulationMode ? "Simulación" : "Producción");
        
        // Cambiar el estilo del botón según el modo
        const toggleButton = document.getElementById("toggle-mode");
        if (toggleButton) {
            if (this.isSimulationMode) {
                toggleButton.classList.remove("btn-danger");
                toggleButton.classList.add("btn-warning");
                toggleButton.textContent = "Cambiar a Producción";
            } else {
                toggleButton.classList.remove("btn-warning");
                toggleButton.classList.add("btn-danger");
                toggleButton.textContent = "Cambiar a Simulación";
            }
        }
        
        // Si el bot está corriendo, reiniciarlo con el nuevo modo
        const botStatus = document.getElementById("bot-status");
        if (botStatus && botStatus.textContent === "Activo") {
            this.stopBot().then(() => {
                setTimeout(() => {
                    this.startBot();
                }, 1000);
            });
        }
    }
    
    // Nueva función para reequilibrar fondos entre exchanges
    async rebalanceFunds() {
        try {
            const response = await fetch('/api/rebalance-funds', {
                method: 'POST'
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Reequilibrio de fondos iniciado correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al reequilibrar fondos: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al reequilibrar fondos:", error);
            alert("Error al reequilibrar fondos. Consulta la consola para más detalles.");
        }
    }
}

// Inicializar el dashboard cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new Dashboard();
});

-------------------------------------------------------------------------------------------------------------

// ========== CLIENTE API MÓVIL ==========
class MobileAPIClient {
  constructor() {
    this.baseURL = window.location.origin
    this.token = localStorage.getItem("authToken")
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}/api${endpoint}`
    const config = {
      headers: {
        "Content-Type": "application/json",
        ...(this.token && { Authorization: `Bearer ${this.token}` }),
      },
      ...options,
    }

    try {
      const response = await fetch(url, config)
      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.message || "Error en la solicitud")
      }

      return data
    } catch (error) {
      console.error("API Error:", error)
      throw error
    }
  }

  // Métodos específicos
  async getStatus() {
    return this.request("/status")
  }

  async getOpportunities() {
    return this.request("/opportunities")
  }

  async getBalances() {
    return this.request("/balances")
  }

  async startBot() {
    return this.request("/start", { method: "POST" })
  }

  async stopBot() {
    return this.request("/stop", { method: "POST" })
  }

  async executeOpportunity(opportunityId) {
    return this.request("/execute-opportunity", {
      method: "POST",
      body: JSON.stringify({ opportunityId }),
    })
  }

  async getReport() {
    return this.request("/report")
  }

  // Método para actualizar token
  setToken(token) {
    this.token = token
    localStorage.setItem("authToken", token)
  }

  // Método para limpiar token
  clearToken() {
    this.token = null
    localStorage.removeItem("authToken")
  }
}

// Exportar para uso global
window.MobileAPIClient = MobileAPIClient


---------------------------------------------------------------------------------------------------------

// ========== GRÁFICO DE RIESGO ==========
class RiskChart {
  constructor(containerId) {
    this.container = document.getElementById(containerId)
    this.data = []
    this.init()
  }

  init() {
    if (!this.container) {
      console.warn("Contenedor de gráfico de riesgo no encontrado")
      return
    }

    this.container.innerHTML = `
      <div class="risk-chart-container">
        <h3>Análisis de Riesgo</h3>
        <div class="risk-metrics">
          <div class="metric">
            <span class="label">Exposición Total:</span>
            <span class="value" id="total-exposure">$0</span>
          </div>
          <div class="metric">
            <span class="label">Riesgo por Par:</span>
            <span class="value" id="pair-risk">Bajo</span>
          </div>
          <div class="metric">
            <span class="label">Volatilidad:</span>
            <span class="value" id="volatility">2.5%</span>
          </div>
        </div>
        <canvas id="risk-canvas" width="400" height="200"></canvas>
      </div>
    `

    this.canvas = document.getElementById("risk-canvas")
    this.ctx = this.canvas.getContext("2d")
    this.drawChart()
  }

  updateData(riskData) {
    this.data = riskData
    this.updateMetrics()
    this.drawChart()
  }

  updateMetrics() {
    const totalExposureEl = document.getElementById("total-exposure")
    const pairRiskEl = document.getElementById("pair-risk")
    const volatilityEl = document.getElementById("volatility")

    if (totalExposureEl) totalExposureEl.textContent = `$${this.data.totalExposure || 0}`
    if (pairRiskEl) pairRiskEl.textContent = this.data.riskLevel || "Bajo"
    if (volatilityEl) volatilityEl.textContent = `${this.data.volatility || 2.5}%`
  }

  drawChart() {
    if (!this.ctx) return

    // Limpiar canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)

    // Dibujar gráfico simple
    this.ctx.fillStyle = "#4CAF50"
    this.ctx.fillRect(50, 50, 100, 100)

    this.ctx.fillStyle = "#FF9800"
    this.ctx.fillRect(170, 75, 80, 75)

    this.ctx.fillStyle = "#F44336"
    this.ctx.fillRect(270, 100, 60, 50)

    // Etiquetas
    this.ctx.fillStyle = "#333"
    this.ctx.font = "12px Arial"
    this.ctx.fillText("Bajo", 75, 170)
    this.ctx.fillText("Medio", 190, 170)
    this.ctx.fillText("Alto", 285, 170)
  }
}

// Exportar para uso global
window.RiskChart = RiskChart


--------------------------------------------------------------------------------------------------------------

// ========== GESTOR DE ESTRATEGIAS ==========
class StrategiesManager {
  constructor() {
    this.currentStrategy = "BALANCED"
    this.strategies = {
      CONSERVATIVE: {
        name: "Conservadora",
        minProfit: 0.5,
        maxExposure: 50,
        riskLevel: "Bajo",
      },
      BALANCED: {
        name: "Balanceada",
        minProfit: 0.3,
        maxExposure: 100,
        riskLevel: "Medio",
      },
      AGGRESSIVE: {
        name: "Agresiva",
        minProfit: 0.2,
        maxExposure: 150,
        riskLevel: "Alto",
      },
    }
  }

  init(containerId) {
    this.container = document.getElementById(containerId)
    if (!this.container) {
      console.warn("Contenedor de estrategias no encontrado")
      return
    }

    this.render()
    this.attachEventListeners()
  }

  render() {
    this.container.innerHTML = `
      <div class="strategies-container">
        <h3>Estrategias de Trading</h3>
        <div class="current-strategy">
          <span class="label">Estrategia Actual:</span>
          <span class="value" id="current-strategy-name">${this.strategies[this.currentStrategy].name}</span>
        </div>
        <div class="strategy-selector">
          ${Object.entries(this.strategies)
            .map(
              ([key, strategy]) => `
            <div class="strategy-option ${key === this.currentStrategy ? "active" : ""}" data-strategy="${key}">
              <h4>${strategy.name}</h4>
              <p>Min. Profit: ${strategy.minProfit}%</p>
              <p>Max. Exposure: $${strategy.maxExposure}</p>
              <p>Riesgo: ${strategy.riskLevel}</p>
            </div>
          `,
            )
            .join("")}
        </div>
        <button id="apply-strategy" class="btn btn-primary">Aplicar Estrategia</button>
      </div>
    `
  }

  attachEventListeners() {
    const strategyOptions = this.container.querySelectorAll(".strategy-option")
    const applyButton = document.getElementById("apply-strategy")

    strategyOptions.forEach((option) => {
      option.addEventListener("click", () => {
        strategyOptions.forEach((opt) => opt.classList.remove("active"))
        option.classList.add("active")
        this.currentStrategy = option.dataset.strategy
        document.getElementById("current-strategy-name").textContent = this.strategies[this.currentStrategy].name
      })
    })

    if (applyButton) {
      applyButton.addEventListener("click", () => {
        this.applyStrategy()
      })
    }
  }

  async applyStrategy() {
    try {
      const token = localStorage.getItem("authToken")
      const response = await fetch("/api/change-strategy", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ strategy: this.currentStrategy }),
      })

      const result = await response.json()

      if (response.ok) {
        this.showNotification("Estrategia aplicada exitosamente", "success")
      } else {
        this.showNotification(result.error || "Error aplicando estrategia", "error")
      }
    } catch (error) {
      this.showNotification("Error de conexión", "error")
    }
  }

  showNotification(message, type) {
    // Crear notificación simple
    const notification = document.createElement("div")
    notification.className = `notification ${type}`
    notification.textContent = message
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      border-radius: 4px;
      color: white;
      background: ${type === "success" ? "#4CAF50" : "#F44336"};
      z-index: 1000;
    `

    document.body.appendChild(notification)

    setTimeout(() => {
      notification.remove()
    }, 3000)
  }

  // ========== AGREGADO PARA DASHBOARD (panel dinámico con API backend) ==========
  getAvailableStrategies() {
    return Object.entries(this.strategies).map(([key, strategy]) => ({
      key,
      ...strategy,
    }))
  }

  getCurrentStrategy() {
    return this.currentStrategy
  }

  setStrategy(strategyKey) {
    if (this.strategies[strategyKey]) {
      this.currentStrategy = strategyKey
      this.render()
      this.attachEventListeners()
    }
  }
  // ========== FIN AGREGADO ==========
}

// Exportar para uso global
window.StrategiesManager = StrategiesManager

--------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>YageCoin Exchange - Bot de Arbitraje</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  </head>
  <body>
    <noscript>Necesitas habilitar JavaScript para ver este dashboard.</noscript>
    <div id="root"></div>
  </body>
</html>
----------------------------------------------------------------------------------------------------------------------------

:root {
  --primary: #3498db;
  --secondary: #2ecc71;
  --danger: #e74c3c;
  --warning: #f39c12;
  --dark: #2c3e50;
  --light: #ecf0f1;
  --gray: #95a5a6;
  --success: #27ae60;
  --info: #3498db;
}

body {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f8f9fa;
  color: #333;
  margin: 0;
  padding: 0;
}

.navbar {
  background-color: var(--dark);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.navbar-brand {
  font-weight: bold;
  color: white !important;
}

.card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  margin-bottom: 20px;
  border: none;
  transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

.card-header {
  border-radius: 10px 10px 0 0 !important;
  font-weight: 600;
  background-color: white;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  padding: 15px 20px;
}

.card-body {
  padding: 20px;
}

.btn-primary {
  background-color: var(--primary);
  border-color: var(--primary);
}

.btn-success {
  background-color: var(--success);
  border-color: var(--success);
}

.btn-danger {
  background-color: var(--danger);
  border-color: var(--danger);
}

.btn-warning {
  background-color: var(--warning);
  border-color: var(--warning);
}

.status-card {
  text-align: center;
  padding: 15px;
}

.status-card h3 {
  font-size: 2rem;
  margin: 10px 0;
  font-weight: bold;
}

.status-card p {
  color: var(--gray);
  margin-bottom: 0;
}

.status-icon {
  font-size: 2rem;
  margin-bottom: 10px;
}

.opportunity-card {
  border-left: 5px solid var(--success);
}

.opportunity-card.no-opportunity {
  border-left: 5px solid var(--gray);
}

.risk-meter {
  height: 10px;
  border-radius: 5px;
  margin: 10px 0;
  background-color: #ecf0f1;
  overflow: hidden;
}

.risk-level {
  height: 100%;
  transition: width 0.5s;
}

.risk-low {
  background-color: var(--success);
}

.risk-medium {
  background-color: var(--warning);
}

.risk-high {
  background-color: var(--danger);
}

.badge-success {
  background-color: var(--success);
  color: white;
}

.badge-danger {
  background-color: var(--danger);
  color: white;
}

.badge-warning {
  background-color: var(--warning);
  color: white;
}

.badge-info {
  background-color: var(--info);
  color: white;
}

.badge-secondary {
  background-color: var(--secondary);
  color: white;
}

.badge-dark {
  background-color: var(--dark);
  color: white;
}

.badge-light {
  background-color: var(--light);
  color: var(--dark);
}

.badge-gray {
  background-color: var(--gray);
  color: white;
}

.exchange-badge {
  font-size: 0.8rem;
  padding: 5px 10px;
  border-radius: 15px;
  margin-right: 5px;
}

.price-table {
  width: 100%;
  border-collapse: collapse;
}

.price-table th,
.price-table td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.price-table th {
  font-weight: 600;
  color: #666;
}

.price-table tr:last-child td {
  border-bottom: none;
}

.price-table .best-price {
  font-weight: bold;
  color: var(--success);
}

.price-table .worst-price {
  color: var(--danger);
}

.opportunity-indicator {
  display: inline-block;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  margin-right: 5px;
}

.opportunity-indicator.yes {
  background-color: var(--success);
}

.opportunity-indicator.no {
  background-color: var(--danger);
}

.mode-switch {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.mode-switch .form-check-input {
  width: 50px;
  height: 24px;
}

.mode-label {
  margin-left: 10px;
  font-weight: 600;
}

.simulation-mode {
  color: var(--info);
}

.production-mode {
  color: var(--danger);
}

.ai-prediction {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.ai-prediction-up {
  color: var(--success);
}

.ai-prediction-down {
  color: var(--danger);
}

.ai-confidence {
  height: 6px;
  width: 100%;
  background-color: #eee;
  border-radius: 3px;
  margin-top: 5px;
}

.ai-confidence-level {
  height: 100%;
  border-radius: 3px;
  background-color: var(--primary);
}

.pair-card {
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  border: 1px solid #eee;
  transition: all 0.3s ease;
}

.pair-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.pair-card.opportunity {
  border-left: 4px solid var(--success);
}

.pair-card.no-opportunity {
  border-left: 4px solid #ddd;
}

.pair-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.pair-name {
  font-weight: bold;
  font-size: 1.2rem;
}

.profit-percentage {
  font-weight: bold;
}

.profit-percentage.positive {
  color: var(--success);
}

.profit-percentage.negative {
  color: var(--danger);
}

.exchange-prices {
  margin-top: 10px;
}

.exchange-price {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px solid #f5f5f5;
}

.exchange-price:last-child {
  border-bottom: none;
}

.exchange-name {
  display: flex;
  align-items: center;
}

.best-buy {
  color: var(--success);
  font-weight: bold;
}

.best-sell {
  color: var(--danger);
  font-weight: bold;
}

.action-buttons {
  margin-top: 15px;
  display: flex;
  justify-content: flex-end;
}

.action-buttons button {
  margin-left: 10px;
}

.auto-rebalance-card {
  background-color: #f8f9fa;
  border-radius: 10px;
  padding: 15px;
}

.balance-distribution {
  display: flex;
  margin: 15px 0;
}

.balance-bar {
  height: 30px;
  border-radius: 15px;
  overflow: hidden;
  display: flex;
  flex: 1;
}

.balance-segment {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 0.8rem;
  font-weight: bold;
  transition: width 0.5s;
}

.balance-binance {
  background-color: #f3ba2f;
}

.balance-coinbase {
  background-color: #0052ff;
}

.balance-kraken {
  background-color: #5741d9;
}

.balance-kucoin {
  background-color: #24ae8f;
}

.balance-legend {
  display: flex;
  flex-wrap: wrap;
  margin-top: 10px;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-right: 15px;
  margin-bottom: 5px;
}

.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 3px;
  margin-right: 5px;
}

.exchange-balance {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px solid #f5f5f5;
}

.exchange-balance:last-child {
  border-bottom: none;
}

.exchange-balance-name {
  font-weight: 500;
}

.exchange-balance-value {
  font-weight: bold;
}

.loading-spinner {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: var(--primary);
  border-radius: 50%;
  animation: spinner 1s linear infinite;
}

@keyframes spinner {
  to {
    transform: rotate(360deg);
  }
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: var(--danger);
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  font-size: 0.7rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.notification-dropdown {
  min-width: 300px;
  max-height: 400px;
  overflow-y: auto;
}

.notification-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.notification-item:last-child {
  border-bottom: none;
}

.notification-time {
  font-size: 0.8rem;
  color: #999;
}

.notification-message {
  margin-top: 5px;
}

.notification-icon {
  margin-right: 10px;
}

.notification-info {
  color: var(--info);
}

.notification-success {
  color: var(--success);
}

.notification-warning {
  color: var(--warning);
}

.notification-danger {
  color: var(--danger);
}


----------------------------------------------------------------------------------------------------------------------

AI

// ========== MÓDULO DE ASESOR DE TRADING CON IA ==========
// const tf = require("@tensorflow/tfjs-node")
const config = require('../strategies/config')
const EventEmitter = require('events');

class AITradingAdvisor extends EventEmitter {
  constructor() {
    super();
    this.model = null
    this.initialized = false
    this.marketData = {
      priceHistory: new Map(),
      volatilityHistory: new Map(),
      spreadHistory: new Map(),
      profitHistory: [],
    }

    this.initialize()
  }

  async initialize() {
    try {
      // Cargar modelo pre-entrenado o crear uno nuevo
      this.model = await this.createModel()
      this.initialized = true
      console.log("✅ Módulo de IA inicializado correctamente")
    } catch (error) {
      console.error("❌ Error inicializando módulo de IA:", error.message)
    }
  }

  async createModel() {
    // Modelo simplificado sin TensorFlow - usando heurísticas
    console.log("🤖 Usando modelo heurístico simplificado (sin TensorFlow)")
    return {
      predict: (inputData) => {
        // Lógica heurística simple
        const [spread, volatility, hour, dayOfWeek, lastProfit, marketTrend] = inputData.dataSync
          ? inputData.dataSync()
          : inputData[0]

        let probability = 0.5 // Base

        // Ajustar por spread
        if (spread > 0.5) probability += 0.2
        if (spread > 1.0) probability += 0.1

        // Ajustar por volatilidad
        if (volatility < 2.0) probability += 0.1
        if (volatility > 5.0) probability -= 0.2

        // Ajustar por hora del día
        if (hour >= 8 && hour <= 16) probability += 0.1 // Horario activo

        // Ajustar por tendencia de mercado
        if (marketTrend > 0) probability += 0.1

        return { dataSync: () => [Math.min(0.95, Math.max(0.05, probability))] }
      },
    }
  }

  // Registrar datos de mercado para entrenamiento
  recordMarketData(pair, buyPrice, sellPrice, spread, volatility, wasSuccessful = null) {
    const now = new Date()
    const timestamp = now.getTime()
    const hour = now.getHours()
    const dayOfWeek = now.getDay()

    // Registrar precios
    if (!this.marketData.priceHistory.has(pair)) {
      this.marketData.priceHistory.set(pair, [])
    }
    this.marketData.priceHistory.get(pair).push({ buyPrice, sellPrice, timestamp })

    // Registrar spread
    if (!this.marketData.spreadHistory.has(pair)) {
      this.marketData.spreadHistory.set(pair, [])
    }
    this.marketData.spreadHistory.get(pair).push({ spread, timestamp })

    // Registrar volatilidad
    if (!this.marketData.volatilityHistory.has(pair)) {
      this.marketData.volatilityHistory.set(pair, [])
    }
    this.marketData.volatilityHistory.get(pair).push({ volatility, timestamp })

    // Registrar resultado si está disponible
    if (wasSuccessful !== null) {
      this.marketData.profitHistory.push({
        pair,
        spread,
        volatility,
        hour,
        dayOfWeek,
        wasSuccessful,
        timestamp,
      })
    }

    // Limitar el tamaño del historial
    this.pruneHistoricalData()
  }

  pruneHistoricalData() {
    const MAX_HISTORY_ITEMS = 1000
    const ONE_WEEK_MS = 7 * 24 * 60 * 60 * 1000
    const cutoffTime = Date.now() - ONE_WEEK_MS

    // Eliminar datos antiguos
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      this.marketData.priceHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.spreadHistory.entries()) {
      this.marketData.spreadHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      this.marketData.volatilityHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    this.marketData.profitHistory = this.marketData.profitHistory
      .filter((item) => item.timestamp > cutoffTime)
      .slice(-MAX_HISTORY_ITEMS)
  }

  async trainModel() {
    if (this.marketData.profitHistory.length < 10) {
      return { success: false, message: "Datos insuficientes para entrenar el modelo heurístico" }
    }

    // Simular entrenamiento con heurísticas
    const recentSuccessRate = this.getRecentProfitTrend()

    console.log(`🤖 Modelo heurístico actualizado con ${this.marketData.profitHistory.length} datos históricos`)

    return {
      success: true,
      accuracy: (recentSuccessRate + 1) / 2, // Convertir de -1,1 a 0,1
      loss: 1 - (recentSuccessRate + 1) / 2,
    }
  }

  getRecentProfitTrend() {
    // Calcular tendencia de ganancias recientes (-1 a 1)
    const recentProfits = this.marketData.profitHistory.slice(-10)
    if (recentProfits.length < 5) return 0

    const successCount = recentProfits.filter((p) => p.wasSuccessful).length
    return (successCount / recentProfits.length) * 2 - 1
  }

  getMarketTrend(pair) {
    // Calcular tendencia del mercado (-1 a 1)
    const priceHistory = this.marketData.priceHistory.get(pair)
    if (!priceHistory || priceHistory.length < 10) return 0

    const recentPrices = priceHistory.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)
    const firstPrice = recentPrices[0]
    const lastPrice = recentPrices[recentPrices.length - 1]

    return (lastPrice - firstPrice) / firstPrice
  }

  async predictOpportunitySuccess(opportunity) {
    if (!this.initialized) {
      return { probability: 0.5, confidence: "LOW" }
    }

    try {
      const now = new Date()
      const hour = now.getHours()
      const dayOfWeek = now.getDay()

      // Preparar datos para predicción heurística
      const inputData = [
        opportunity.grossProfit,
        this.getVolatility(opportunity.pair),
        hour / 24,
        dayOfWeek / 6,
        this.getRecentProfitTrend(),
        this.getMarketTrend(opportunity.pair),
      ]

      // Realizar predicción heurística
      const prediction = this.model.predict([inputData])
      const probability = prediction.dataSync()[0]

      // Determinar nivel de confianza
      let confidence = "MEDIUM"
      if (probability > 0.8 || probability < 0.2) {
        confidence = "HIGH"
      } else if (probability > 0.4 && probability < 0.6) {
        confidence = "LOW"
      }

      return { probability, confidence }
    } catch (error) {
      console.error("Error en predicción:", error)
      return { probability: 0.5, confidence: "LOW" }
    }
  }

  getVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length === 0) return 0

    // Obtener volatilidad más reciente
    return volatilityHistory[volatilityHistory.length - 1].volatility
  }

  async generateTradingSuggestions(bot) {
    try {
      // Obtener oportunidades actuales
      const opportunities = await bot.findArbitrageOpportunities()

      // Analizar cada oportunidad con IA
      const enhancedOpportunities = await Promise.all(
        opportunities.map(async (opportunity) => {
          // Predecir probabilidad de éxito
          const prediction = await this.predictOpportunitySuccess(opportunity)

          // Calcular tamaño óptimo basado en confianza
          const optimalSize = this.calculateOptimalSize(opportunity, prediction.probability, prediction.confidence)

          // Analizar mejor momento para ejecutar
          const timing = this.analyzeTradingTiming(opportunity.pair)

          return {
            ...opportunity,
            aiPrediction: {
              successProbability: prediction.probability,
              confidence: prediction.confidence,
              optimalSize,
              recommendedTiming: timing.recommendation,
              reasoning: this.generateReasoning(opportunity, prediction, timing),
            },
          }
        }),
      )

      // Ordenar por probabilidad de éxito ajustada por profit
      const sortedOpportunities = enhancedOpportunities
        .filter((o) => o.profitable)
        .sort((a, b) => {
          const scoreA = a.aiPrediction.successProbability * a.finalProfit
          const scoreB = b.aiPrediction.successProbability * b.finalProfit
          return scoreB - scoreA
        })

      // Generar recomendaciones generales
      const generalRecommendations = this.generateGeneralRecommendations(bot)

      return {
        opportunities: sortedOpportunities,
        generalRecommendations,
        marketInsights: this.generateMarketInsights(),
        lastUpdated: new Date().toISOString(),
      }
    } catch (error) {
      console.error("Error generando sugerencias de trading:", error)
      return {
        opportunities: [],
        generalRecommendations: [
          {
            type: "ERROR",
            message: `Error generando sugerencias: ${error.message}`,
            importance: "HIGH",
          },
        ],
        lastUpdated: new Date().toISOString(),
      }
    }
  }

  calculateOptimalSize(opportunity, probability, confidence) {
    // Base: tamaño mínimo del par
    let size = opportunity.tradeAmount

    // Ajustar según probabilidad de éxito
    if (probability > 0.8) {
      // Alta probabilidad de éxito
      size = Math.min(size * 1.5, opportunity.pair.maxTradeAmount)
    } else if (probability < 0.4) {
      // Baja probabilidad de éxito
      size = Math.max(size * 0.5, opportunity.pair.minTradeAmount)
    }

    // Ajustar según nivel de confianza
    if (confidence === "LOW") {
      size = Math.max(size * 0.7, opportunity.pair.minTradeAmount)
    }

    return Number.parseFloat(size.toFixed(2))
  }

  analyzeTradingTiming(pair) {
    const now = new Date()
    const hour = now.getHours()

    // Analizar patrones históricos por hora
    const hourlySuccessRate = this.calculateHourlySuccessRate()
    const currentHourRate = hourlySuccessRate[hour] || 0.5

    let recommendation = "NEUTRAL"
    let reason = ""

    if (currentHourRate > 0.7) {
      recommendation = "EXECUTE_NOW"
      reason = `Alta tasa de éxito histórica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del día`
    } else if (currentHourRate < 0.3) {
      recommendation = "WAIT"
      reason = `Baja tasa de éxito histórica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del día`
    }

    // Verificar volatilidad reciente
    const recentVolatility = this.getRecentVolatility(pair)
    if (recentVolatility > 3.0) {
      recommendation = "WAIT"
      reason = `Alta volatilidad reciente (${recentVolatility.toFixed(1)}%)`
    }

    return { recommendation, reason }
  }

  calculateHourlySuccessRate() {
    const hourlyStats = Array(24)
      .fill(0)
      .map(() => ({ success: 0, total: 0 }))

    // Calcular estadísticas por hora
    this.marketData.profitHistory.forEach((item) => {
      const hour = new Date(item.timestamp).getHours()
      hourlyStats[hour].total++
      if (item.wasSuccessful) {
        hourlyStats[hour].success++
      }
    })

    // Calcular tasas de éxito
    return hourlyStats.map((stats) => (stats.total > 0 ? stats.success / stats.total : 0.5))
  }

  getRecentVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length < 5) return 0

    // Calcular volatilidad promedio de las últimas 5 mediciones
    const recentVolatilities = volatilityHistory.slice(-5).map((v) => v.volatility)
    return recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length
  }

  generateReasoning(opportunity, prediction, timing) {
    const reasoning = []

    // Análisis de probabilidad
    if (prediction.probability > 0.8) {
      reasoning.push(`Alta probabilidad de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else if (prediction.probability < 0.4) {
      reasoning.push(`Baja probabilidad de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else {
      reasoning.push(`Probabilidad moderada de éxito (${(prediction.probability * 100).toFixed(1)}%)`)
    }

    // Análisis de profit
    if (opportunity.finalProfit > opportunity.pair.minProfit * 2) {
      reasoning.push(`Profit potencial alto (${opportunity.finalProfit.toFixed(2)}%)`)
    } else {
      reasoning.push(`Profit potencial moderado (${opportunity.finalProfit.toFixed(2)}%)`)
    }

    // Análisis de timing
    reasoning.push(timing.reason)

    // Análisis de riesgo
    const riskLevel = this.assessRiskLevel(opportunity)
    reasoning.push(`Nivel de riesgo: ${riskLevel.level} (${riskLevel.reason})`)

    return reasoning
  }

  assessRiskLevel(opportunity) {
    // Evaluar nivel de riesgo basado en múltiples factores
    let riskScore = 0
    const reasons = []

    // Factor 1: Volatilidad
    const volatility = this.getVolatility(opportunity.pair)
    if (volatility > 4.0) {
      riskScore += 2
      reasons.push(`alta volatilidad (${volatility.toFixed(1)}%)`)
    } else if (volatility > 2.0) {
      riskScore += 1
      reasons.push(`volatilidad moderada (${volatility.toFixed(1)}%)`)
    }

    // Factor 2: Spread sospechoso
    if (opportunity.grossProfit > config.SECURITY.SUSPICIOUS_PROFIT_THRESHOLD * 0.8) {
      riskScore += 2
      reasons.push(`spread inusualmente alto (${opportunity.grossProfit.toFixed(2)}%)`)
    }

    // Factor 3: Historial del par
    const pairHistory = this.getPairSuccessRate(opportunity.pair)
    if (pairHistory.rate < 0.4 && pairHistory.total > 5) {
      riskScore += 1
      reasons.push(`historial de éxito bajo (${(pairHistory.rate * 100).toFixed(1)}%)`)
    }

    // Determinar nivel
    let level = "BAJO"
    if (riskScore >= 3) {
      level = "ALTO"
    } else if (riskScore >= 1) {
      level = "MEDIO"
    }

    return {
      level,
      reason: reasons.length > 0 ? reasons.join(", ") : "sin factores de riesgo significativos",
    }
  }

  getPairSuccessRate(pair) {
    const pairHistory = this.marketData.profitHistory.filter((item) => item.pair === pair)

    if (pairHistory.length === 0) {
      return { rate: 0.5, total: 0 }
    }

    const successCount = pairHistory.filter((item) => item.wasSuccessful).length
    return {
      rate: successCount / pairHistory.length,
      total: pairHistory.length,
    }
  }

  generateGeneralRecommendations(bot) {
    const recommendations = []

    // Recomendación 1: Basada en rendimiento reciente
    const recentPerformance = this.analyzeRecentPerformance()
    if (recentPerformance.profitRate < 0.3 && recentPerformance.tradeCount > 5) {
      recommendations.push({
        type: "STRATEGY_ADJUSTMENT",
        message: `Considere ajustar parámetros de trading. Tasa de éxito reciente: ${(recentPerformance.profitRate * 100).toFixed(1)}%`,
        importance: "HIGH",
      })
    }

    // Recomendación 2: Basada en volatilidad del mercado
    const marketVolatility = this.getAverageMarketVolatility()
    if (marketVolatility > 4.0) {
      recommendations.push({
        type: "RISK_WARNING",
        message: `Alta volatilidad del mercado (${marketVolatility.toFixed(1)}%). Considere reducir tamaños de operación`,
        importance: "HIGH",
      })
    }

    // Recomendación 3: Oportunidad de rebalanceo
    if (bot.riskManager) {
      const imbalance = this.detectExchangeImbalance(bot)
      if (imbalance.detected) {
        recommendations.push({
          type: "REBALANCE",
          message: `Desbalance detectado: ${imbalance.message}`,
          importance: "MEDIUM",
        })
      }
    }

    // Recomendación 4: Mejores pares para trading
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recommendations.push({
        type: "PAIR_SUGGESTION",
        message: `Mejores pares por rendimiento: ${bestPairs.map((p) => p.pair).join(", ")}`,
        importance: "MEDIUM",
      })
    }

    return recommendations
  }

  analyzeRecentPerformance() {
    // Analizar rendimiento de las últimas 10 operaciones
    const recentTrades = this.marketData.profitHistory.slice(-10)

    if (recentTrades.length === 0) {
      return { profitRate: 0.5, tradeCount: 0 }
    }

    const successCount = recentTrades.filter((trade) => trade.wasSuccessful).length
    return {
      profitRate: successCount / recentTrades.length,
      tradeCount: recentTrades.length,
    }
  }

  getAverageMarketVolatility() {
    let totalVolatility = 0
    let pairCount = 0

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      if (history.length > 0) {
        // Obtener volatilidad promedio de las últimas 5 mediciones
        const recentVolatilities = history.slice(-5).map((v) => v.volatility)
        const avgVolatility = recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length

        totalVolatility += avgVolatility
        pairCount++
      }
    }

    return pairCount > 0 ? totalVolatility / pairCount : 0
  }

  detectExchangeImbalance(bot) {
    try {
      // Verificar si hay un desbalance significativo entre exchanges
      const binanceBalance = bot.balanceCache.get("BINANCE")
      const kucoinBalance = bot.balanceCache.get("KUCOIN")

      if (!binanceBalance || !kucoinBalance) {
        return { detected: false }
      }

      const binanceUsdt = binanceBalance.balances.USDT?.total || 0
      const kucoinUsdt = kucoinBalance.balances.USDT?.total || 0

      const totalUsdt = binanceUsdt + kucoinUsdt
      const threshold = totalUsdt * 0.3 // 30% de desbalance

      if (Math.abs(binanceUsdt - kucoinUsdt) > threshold) {
        const fromExchange = binanceUsdt > kucoinUsdt ? "Binance" : "KuCoin"
        const toExchange = binanceUsdt > kucoinUsdt ? "KuCoin" : "Binance"
        const amount = Math.abs(binanceUsdt - kucoinUsdt) / 2

        return {
          detected: true,
          message: `Considere transferir ~${amount.toFixed(2)} USDT de ${fromExchange} a ${toExchange}`,
        }
      }

      return { detected: false }
    } catch (error) {
      console.error("Error detectando desbalance:", error)
      return { detected: false }
    }
  }

  identifyBestPerformingPairs() {
    const pairStats = new Map()

    // Recopilar estadísticas por par
    this.marketData.profitHistory.forEach((item) => {
      if (!pairStats.has(item.pair)) {
        pairStats.set(item.pair, { success: 0, total: 0 })
      }

      const stats = pairStats.get(item.pair)
      stats.total++
      if (item.wasSuccessful) {
        stats.success++
      }
    })

    // Convertir a array y calcular tasas
    const pairPerformance = Array.from(pairStats.entries())
      .map(([pair, stats]) => ({
        pair,
        successRate: stats.total > 0 ? stats.success / stats.total : 0,
        tradeCount: stats.total,
      }))
      .filter((item) => item.tradeCount >= 5) // Mínimo 5 operaciones

    // Ordenar por tasa de éxito
    pairPerformance.sort((a, b) => b.successRate - a.successRate)

    // Devolver los 3 mejores
    return pairPerformance.slice(0, 3)
  }

  generateMarketInsights() {
    return {
      marketVolatility: this.getAverageMarketVolatility(),
      bestTradingHours: this.identifyBestTradingHours(),
      recentTrends: this.identifyRecentTrends(),
      lastUpdated: new Date().toISOString(),
    }
  }

  identifyBestTradingHours() {
    const hourlySuccessRate = this.calculateHourlySuccessRate()

    // Encontrar las mejores horas (top 3)
    const hourRanking = hourlySuccessRate
      .map((rate, hour) => ({ hour, rate }))
      .filter((item) => item.rate > 0) // Solo horas con datos
      .sort((a, b) => b.rate - a.rate)
      .slice(0, 3)

    return hourRanking.map((item) => ({
      hour: item.hour,
      successRate: item.rate,
      formattedHour: `${item.hour}:00 - ${item.hour + 1}:00`,
    }))
  }

  identifyRecentTrends() {
    const trends = []

    // Analizar tendencias de precios por par
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      if (history.length < 10) continue

      // Obtener precios recientes
      const recentPrices = history.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)

      // Calcular tendencia
      const firstPrice = recentPrices[0]
      const lastPrice = recentPrices[recentPrices.length - 1]
      const percentChange = ((lastPrice - firstPrice) / firstPrice) * 100

      // Determinar dirección
      let direction = "NEUTRAL"
      if (percentChange > 1.0) {
        direction = "UP"
      } else if (percentChange < -1.0) {
        direction = "DOWN"
      }

      trends.push({
        pair,
        direction,
        percentChange,
        strength: Math.abs(percentChange) > 3.0 ? "STRONG" : "MODERATE",
      })
    }

    return trends
  }

  // ======= AGREGADO PARA DASHBOARD (RECOMENDACIONES SIMPLES) =======
  /**
   * Devuelve recomendaciones actuales simples para el dashboard.
   * (Puedes mejorar esta función para mostrar aún más información si lo deseas)
   */
  getCurrentRecommendations() {
    // Ejemplo básico usando heurística y datos simulados
    const now = new Date()
    const hour = now.getHours()
    const recs = []

    // Ejemplo de recomendación por horario
    if (hour >= 8 && hour <= 16) {
      recs.push({ texto: "Mayor volumen: operar con más confianza", probabilidad: 80 })
    } else {
      recs.push({ texto: "Mercado lento: precaución al operar", probabilidad: 55 })
    }

    // Ejemplo de profit reciente
    const perf = this.analyzeRecentPerformance()
    if (perf.profitRate > 0.7) {
      recs.push({ texto: "El bot está en racha positiva", probabilidad: Math.round(perf.profitRate * 100) })
    } else if (perf.profitRate < 0.3) {
      recs.push({ texto: "Racha negativa: considere cambiar la estrategia", probabilidad: Math.round((1 - perf.profitRate) * 100) })
    } else {
      recs.push({ texto: "Rendimiento estable, mantener parámetros", probabilidad: 60 })
    }

    // Sugerencia de par
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recs.push({ texto: `Mejores pares: ${bestPairs.map((p) => p.pair).join(", ")}`, probabilidad: 65 })
    }

    return recs
  }
}

module.exports = new AITradingAdvisor()

------------------------------------------------------------------------------------------------------------------

// ========== MOTOR DE MACHINE LEARNING AVANZADO ==========
const fs = require('fs').promises
const path = require('path')
const config = require("../strategies/config")

class MLEngine {
  constructor() {
    this.models = new Map()
    this.trainingData = []
    this.predictions = []
    this.modelAccuracy = new Map()
    this.featureImportance = new Map()
    this.lastTraining = 0
    this.minTrainingInterval = 3600000 // 1 hora
    
    this.initializeModels()
  }

  initializeModels() {
    // Modelo de predicción de precios
    this.models.set('PRICE_PREDICTION', {
      name: 'Predicción de Precios',
      type: 'REGRESSION',
      features: ['price', 'volume', 'rsi', 'macd', 'bollinger_position'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    // Modelo de detección de oportunidades
    this.models.set('OPPORTUNITY_DETECTION', {
      name: 'Detección de Oportunidades',
      type: 'CLASSIFICATION',
      features: ['spread', 'volume_ratio', 'price_volatility', 'market_sentiment'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    // Modelo de gestión de riesgo
    this.models.set('RISK_ASSESSMENT', {
      name: 'Evaluación de Riesgo',
      type: 'CLASSIFICATION',
      features: ['volatility', 'correlation', 'market_cap', 'liquidity'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })

    console.log('🤖 Modelos de ML inicializados:', Array.from(this.models.keys()))
  }

  async collectTrainingData(marketData, opportunity, result) {
    const features = this.extractFeatures(marketData, opportunity)
    
    const trainingPoint = {
      timestamp: Date.now(),
      features,
      opportunity,
      result,
      profit: result.profit || 0,
      success: result.success || false,
      executionTime: result.executionTime || 0,
    }

    this.trainingData.push(trainingPoint)

    // Mantener solo los últimos 10,000 puntos de datos
    if (this.trainingData.length > 10000) {
      this.trainingData = this.trainingData.slice(-10000)
    }

    // Entrenar modelos periódicamente
    if (this.shouldRetrain()) {
      await this.retrainModels()
    }
  }

  extractFeatures(marketData, opportunity) {
    return {
      // Características de precio
      price: opportunity.buyPrice,
      priceChange24h: marketData.priceChange24h || 0,
      volume24h: marketData.volume24h || 0,
      
      // Características técnicas
      rsi: this.calculateRSI(marketData.prices || []),
      macd: this.calculateMACD(marketData.prices || []),
      bollingerPosition: this.calculateBollingerPosition(marketData.prices || []),
      
      // Características de oportunidad
      spread: opportunity.finalProfit,
      volumeRatio: this.calculateVolumeRatio(marketData),
      priceVolatility: this.calculateVolatility(marketData.prices || []),
      
      // Características de mercado
      marketSentiment: this.calculateMarketSentiment(marketData),
      liquidity: marketData.liquidity || 0,
      correlation: this.calculateCorrelation(marketData),
      
      // Características temporales
      hourOfDay: new Date().getHours(),
      dayOfWeek: new Date().getDay(),
      isWeekend: [0, 6].includes(new Date().getDay()),
    }
  }

  calculateRSI(prices, period = 14) {
    if (prices.length < period + 1) return 50

    let gains = 0
    let losses = 0

    for (let i = 1; i <= period; i++) {
      const change = prices[prices.length - i] - prices[prices.length - i - 1]
      if (change > 0) gains += change
      else losses += Math.abs(change)
    }

    const avgGain = gains / period
    const avgLoss = losses / period
    
    if (avgLoss === 0) return 100
    
    const rs = avgGain / avgLoss
    return 100 - (100 / (1 + rs))
  }

  calculateMACD(prices, fastPeriod = 12, slowPeriod = 26) {
    if (prices.length < slowPeriod) return 0

    const fastEMA = this.calculateEMA(prices, fastPeriod)
    const slowEMA = this.calculateEMA(prices, slowPeriod)
    
    return fastEMA - slowEMA
  }

  calculateEMA(prices, period) {
    if (prices.length === 0) return 0
    
    const multiplier = 2 / (period + 1)
    let ema = prices[0]
    
    for (let i = 1; i < prices.length; i++) {
      ema = (prices[i] * multiplier) + (ema * (1 - multiplier))
    }
    
    return ema
  }

  calculateBollingerPosition(prices, period = 20) {
    if (prices.length < period) return 0.5

    const recentPrices = prices.slice(-period)
    const sma = recentPrices.reduce((a, b) => a + b) / period
    const variance = recentPrices.reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / period
    const stdDev = Math.sqrt(variance)
    
    const currentPrice = prices[prices.length - 1]
    const upperBand = sma + (2 * stdDev)
    const lowerBand = sma - (2 * stdDev)
    
    // Posición entre 0 (banda inferior) y 1 (banda superior)
    return (currentPrice - lowerBand) / (upperBand - lowerBand)
  }

  calculateVolumeRatio(marketData) {
    const currentVolume = marketData.volume24h || 0
    const avgVolume = marketData.avgVolume || currentVolume
    return avgVolume > 0 ? currentVolume / avgVolume : 1
  }

  calculateVolatility(prices, period = 20) {
    if (prices.length < period) return 0

    const recentPrices = prices.slice(-period)
    const returns = []
    
    for (let i = 1; i < recentPrices.length; i++) {
      returns.push((recentPrices[i] - recentPrices[i-1]) / recentPrices[i-1])
    }
    
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    
    return Math.sqrt(variance) * Math.sqrt(365) // Volatilidad anualizada
  }

  calculateMarketSentiment(marketData) {
    // Sentimiento simplificado basado en varios factores
    let sentiment = 0.5 // Neutral

    // Ajustar por cambio de precio
    if (marketData.priceChange24h > 0) sentiment += 0.1
    else if (marketData.priceChange24h < 0) sentiment -= 0.1

    // Ajustar por volumen
    const volumeRatio = this.calculateVolumeRatio(marketData)
    if (volumeRatio > 1.2) sentiment += 0.1
    else if (volumeRatio < 0.8) sentiment -= 0.1

    return Math.max(0, Math.min(1, sentiment))
  }

  calculateCorrelation(marketData) {
    // Correlación simplificada - en producción usar datos reales de múltiples activos
    return marketData.correlation || 0.5
  }

  shouldRetrain() {
    const now = Date.now()
    const hasEnoughData = this.trainingData.length >= 100
    const timeToRetrain = now - this.lastTraining > this.minTrainingInterval
    
    return hasEnoughData && timeToRetrain
  }

  async retrainModels() {
    console.log('🔄 Reentrenando modelos de ML...')
    
    try {
      for (const [modelName, model] of this.models.entries()) {
        await this.trainModel(modelName, model)
      }
      
      this.lastTraining = Date.now()
      console.log('✅ Modelos reentrenados exitosamente')
      
      // Guardar modelos entrenados
      await this.saveModels()
      
    } catch (error) {
      console.error('❌ Error reentrenando modelos:', error)
    }
  }

  async trainModel(modelName, model) {
    // Preparar datos de entrenamiento
    const trainingSet = this.prepareTrainingData(model)
    
    if (trainingSet.length < 50) {
      console.log(`⚠️ Datos insuficientes para entrenar ${modelName}`)
      return
    }

    // Simulación de entrenamiento (en producción usar TensorFlow.js o similar)
    const accuracy = this.simulateTraining(trainingSet, model)
    
    // Actualizar métricas del modelo
    model.accuracy = accuracy
    model.lastTrained = Date.now()
    
    console.log(`📊 Modelo ${modelName} entrenado - Precisión: ${(accuracy * 100).toFixed(2)}%`)
  }

  prepareTrainingData(model) {
    return this.trainingData
      .filter(point => point.features && point.result)
      .map(point => ({
        features: model.features.map(feature => point.features[feature] || 0),
        target: this.getTarget(point, model.type),
      }))
  }

  getTarget(dataPoint, modelType) {
    switch (modelType) {
      case 'REGRESSION':
        return dataPoint.profit || 0
      case 'CLASSIFICATION':
        return dataPoint.success ? 1 : 0
      default:
        return 0
    }
  }

  simulateTraining(trainingSet, model) {
    // Simulación simple de entrenamiento
    // En producción, aquí iría el algoritmo real de ML
    
    const correctPredictions = trainingSet.filter(point => {
      const prediction = this.makeSimplePrediction(point.features, model)
      const actual = point.target
      
      if (model.type === 'CLASSIFICATION') {
        return (prediction > 0.5 && actual === 1) || (prediction <= 0.5 && actual === 0)
      } else {
        return Math.abs(prediction - actual) < Math.abs(actual) * 0.1 // 10% de tolerancia
      }
    }).length

    return correctPredictions / trainingSet.length
  }

  makeSimplePrediction(features, model) {
    // Predicción simple basada en pesos aleatorios
    // En producción usar modelo entrenado real
    
    const weights = model.weights || features.map(() => Math.random() - 0.5)
    if (!model.weights) model.weights = weights
    
    let prediction = 0
    for (let i = 0; i < features.length; i++) {
      prediction += features[i] * weights[i]
    }
    
    return model.type === 'CLASSIFICATION' ? this.sigmoid(prediction) : prediction
  }

  sigmoid(x) {
    return 1 / (1 + Math.exp(-x))
  }

  async predictOpportunitySuccess(opportunity, marketData) {
    const features = this.extractFeatures(marketData, opportunity)
    const model = this.models.get('OPPORTUNITY_DETECTION')
    
    if (!model || model.accuracy < 0.6) {
      return { confidence: 0.5, prediction: 'UNCERTAIN', reason: 'Modelo no entrenado suficientemente' }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const prediction = this.makeSimplePrediction(featureVector, model)
    
    // Actualizar estadísticas del modelo
    model.predictions++
    
    return {
      confidence: prediction,
      prediction: prediction > 0.7 ? 'SUCCESS' : prediction < 0.3 ? 'FAILURE' : 'UNCERTAIN',
      reason: this.explainPrediction(featureVector, model),
      modelAccuracy: model.accuracy,
    }
  }

  async predictPriceMovement(pair, marketData, timeframe = '1h') {
    const features = this.extractFeatures(marketData, { pair })
    const model = this.models.get('PRICE_PREDICTION')
    
    if (!model || model.accuracy < 0.6) {
      return { direction: 'NEUTRAL', confidence: 0.5, change: 0 }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const prediction = this.makeSimplePrediction(featureVector, model)
    
    return {
      direction: prediction > 0.01 ? 'UP' : prediction < -0.01 ? 'DOWN' : 'NEUTRAL',
      confidence: Math.abs(prediction),
      change: prediction,
      timeframe,
    }
  }

  async assessRisk(opportunity, marketData) {
    const features = this.extractFeatures(marketData, opportunity)
    const model = this.models.get('RISK_ASSESSMENT')
    
    if (!model || model.accuracy < 0.6) {
      return { risk: 'MEDIUM', confidence: 0.5, factors: [] }
    }

    const featureVector = model.features.map(feature => features[feature] || 0)
    const riskScore = this.makeSimplePrediction(featureVector, model)
    
    const riskLevel = riskScore > 0.7 ? 'HIGH' : riskScore < 0.3 ? 'LOW' : 'MEDIUM'
    
    return {
      risk: riskLevel,
      score: riskScore,
      confidence: model.accuracy,
      factors: this.identifyRiskFactors(features),
    }
  }

  explainPrediction(features, model) {
    const weights = model.weights || []
    const contributions = features.map((feature, i) => ({
      feature: model.features[i],
      value: feature,
      weight: weights[i] || 0,
      contribution: feature * (weights[i] || 0),
    }))

    contributions.sort((a, b) => Math.abs(b.contribution) - Math.abs(a.contribution))
    
    const topFactors = contributions.slice(0, 3)
    return `Factores principales: ${topFactors.map(f => f.feature).join(', ')}`
  }

  identifyRiskFactors(features) {
    const factors = []
    
    if (features.priceVolatility > 0.3) factors.push('Alta volatilidad')
    if (features.volumeRatio < 0.5) factors.push('Volumen bajo')
    if (features.rsi > 80) factors.push('Sobrecompra (RSI)')
    if (features.rsi < 20) factors.push('Sobreventa (RSI)')
    if (features.spread < 0.2) factors.push('Spread muy bajo')
    
    return factors
  }

  async saveModels() {
    try {
      const modelsData = {
        models: Object.fromEntries(this.models),
        lastTraining: this.lastTraining,
        trainingDataCount: this.trainingData.length,
      }
      
      const modelsPath = path.join(__dirname, 'models.json')
      await fs.writeFile(modelsPath, JSON.stringify(modelsData, null, 2))
      
      console.log('💾 Modelos guardados exitosamente')
    } catch (error) {
      console.error('❌ Error guardando modelos:', error)
    }
  }

  async loadModels() {
    try {
      const modelsPath = path.join(__dirname, 'models.json')
      const data = await fs.readFile(modelsPath, 'utf8')
      const modelsData = JSON.parse(data)
      
      this.models = new Map(Object.entries(modelsData.models))
      this.lastTraining = modelsData.lastTraining || 0
      
      console.log('📂 Modelos cargados exitosamente')
    } catch (error) {
      console.log('ℹ️ No se encontraron modelos guardados, usando configuración por defecto')
    }
  }

  getModelStats() {
    const stats = {}
    
    for (const [name, model] of this.models.entries()) {
      stats[name] = {
        name: model.name,
        type: model.type,
        accuracy: model.accuracy,
        predictions: model.predictions,
        lastTrained: model.lastTrained,
        features: model.features.length,
      }
    }
    
    return {
      models: stats,
      trainingDataPoints: this.trainingData.length,
      lastTraining: this.lastTraining,
      nextTraining: this.lastTraining + this.minTrainingInterval,
    }
  }
}

module.exports = { MLEngine }
--------------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');
const fs = require('fs').promises;
const path = require('path');

/**
 * Asesor de Trading con IA
 * Utiliza modelos de machine learning para analizar oportunidades y hacer recomendaciones
 */
class AITradingAdvisor extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.AI_TRADING.ENABLED;
        this.modelPath = config.AI_TRADING.MODEL_PATH;
        this.trainingDataDays = config.AI_TRADING.TRAINING_DATA_DAYS;
        this.predictionHorizon = config.AI_TRADING.PREDICTION_HORIZON;
        this.features = config.AI_TRADING.FEATURES;
        this.models = config.AI_TRADING.MODELS;
        this.autoRetrain = config.AI_TRADING.AUTO_RETRAIN;
        this.retrainThreshold = config.AI_TRADING.RETRAIN_THRESHOLD;
        
        this.priceModel = null;
        this.opportunityModel = null;
        this.riskModel = null;
        
        this.marketData = [];
        this.lastPredictions = {};
        this.modelAccuracy = {
            priceModel: 0,
            opportunityModel: 0,
            riskModel: 0
        };
        
        this.logger = console;
    }
    
    /**
     * Inicializa el asesor de IA
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('AI Trading Advisor deshabilitado');
            return;
        }
        
        this.logger.info('Inicializando AI Trading Advisor...');
        
        try {
            // Crear directorio de modelos si no existe
            await this.ensureModelDirectory();
            
            // Cargar modelos existentes o crear nuevos
            await this.loadModels();
            
            this.logger.info('AI Trading Advisor inicializado correctamente');
        } catch (error) {
            this.logger.error('Error inicializando AI Trading Advisor:', error);
            throw error;
        }
    }
    
    /**
     * Asegura que el directorio de modelos exista
     */
    async ensureModelDirectory() {
        try {
            await fs.mkdir(this.modelPath, { recursive: true });
        } catch (error) {
            if (error.code !== 'EEXIST') {
                throw error;
            }
        }
    }
    
    /**
     * Carga los modelos de ML o crea nuevos si no existen
     */
    async loadModels() {
        try {
            // En una implementación real, aquí cargaríamos modelos de TensorFlow.js, ONNX, etc.
            // Para esta implementación, usaremos modelos simulados
            
            this.priceModel = await this.loadOrCreateModel('price_prediction');
            this.opportunityModel = await this.loadOrCreateModel('opportunity_scoring');
            this.riskModel = await this.loadOrCreateModel('risk_assessment');
            
            this.logger.info('Modelos cargados correctamente');
        } catch (error) {
            this.logger.error('Error cargando modelos:', error);
            throw error;
        }
    }
    
    /**
     * Carga un modelo específico o crea uno nuevo
     * @param {string} modelType - Tipo de modelo
     * @returns {Object} - Modelo cargado
     */
    async loadOrCreateModel(modelType) {
        const modelFilePath = path.join(this.modelPath, `${modelType}.json`);
        
        try {
            // Intentar cargar el modelo
            const modelData = await fs.readFile(modelFilePath, 'utf8');
            const model = JSON.parse(modelData);
            this.logger.info(`Modelo ${modelType} cargado correctamente`);
            return model;
        } catch (error) {
            // Si el modelo no existe, crear uno nuevo
            if (error.code === 'ENOENT') {
                this.logger.info(`Modelo ${modelType} no encontrado, creando uno nuevo...`);
                const newModel = await this.createModel(modelType);
                
                // Guardar el nuevo modelo
                await fs.writeFile(modelFilePath, JSON.stringify(newModel, null, 2));
                
                return newModel;
            }
            
            throw error;
        }
    }
    
    /**
     * Crea un nuevo modelo
     * @param {string} modelType - Tipo de modelo
     * @returns {Object} - Nuevo modelo
     */
    async createModel(modelType) {
        // En una implementación real, aquí crearíamos y entrenaríamos un modelo real
        // Para esta implementación, usaremos un modelo simulado
        
        switch (modelType) {
            case 'price_prediction':
                return {
                    type: 'lstm',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    weights: this.generateRandomWeights(100),
                    biases: this.generateRandomWeights(10),
                    config: this.models.PRICE_PREDICTION
                };
                
            case 'opportunity_scoring':
                return {
                    type: 'random_forest',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    trees: this.generateRandomTrees(this.models.OPPORTUNITY_SCORING.nEstimators),
                    config: this.models.OPPORTUNITY_SCORING
                };
                
            case 'risk_assessment':
                return {
                    type: 'gradient_boosting',
                    version: '1.0.0',
                    created: new Date().toISOString(),
                    trees: this.generateRandomTrees(this.models.RISK_ASSESSMENT.nEstimators),
                    config: this.models.RISK_ASSESSMENT
                };
                
            default:
                throw new Error(`Tipo de modelo desconocido: ${modelType}`);
        }
    }
    
    /**
     * Genera pesos aleatorios para simular un modelo
     * @param {number} size - Tamaño del array
     * @returns {Array} - Array de pesos aleatorios
     */
    generateRandomWeights(size) {
        return Array.from({ length: size }, () => Math.random() * 2 - 1);
    }
    
    /**
     * Genera árboles aleatorios para simular un modelo de bosque
     * @param {number} numTrees - Número de árboles
     * @returns {Array} - Array de árboles aleatorios
     */
    generateRandomTrees(numTrees) {
        return Array.from({ length: numTrees }, () => ({
            depth: Math.floor(Math.random() * 10) + 3,
            nodes: Math.floor(Math.random() * 100) + 20,
            weights: this.generateRandomWeights(20)
        }));
    }
    
    /**
     * Analiza oportunidades de arbitraje usando IA
     * @param {Array} opportunities - Lista de oportunidades
     * @returns {Array} - Oportunidades analizadas con recomendaciones
     */
    async analyzeOpportunities(opportunities) {
        if (!this.enabled || !opportunities.length) {
            return opportunities;
        }
        
        try {
            // Preparar datos para el análisis
            const preparedData = this.prepareDataForAnalysis(opportunities);
            
            // Predecir precios futuros
            const pricePredictions = await this.predictPrices(preparedData);
            
            // Evaluar oportunidades
            const scoredOpportunities = await this.scoreOpportunities(opportunities, pricePredictions);
            
            // Evaluar riesgos
            const riskAssessment = await this.assessRisks(scoredOpportunities);
            
            // Generar recomendaciones
            const recommendedOpportunities = this.generateRecommendations(riskAssessment);
            
            // Evaluar si se necesita cambiar de estrategia
            const strategyRecommendation = this.recommendStrategy(recommendedOpportunities);
            if (strategyRecommendation) {
                this.emit('recommendation', strategyRecommendation);
            }
            
            return recommendedOpportunities;
        } catch (error) {
            this.logger.error('Error analizando oportunidades con IA:', error);
            return opportunities; // Devolver oportunidades originales en caso de error
        }
    }
    
    /**
     * Prepara los datos para el análisis
     * @param {Array} opportunities - Lista de oportunidades
     * @returns {Object} - Datos preparados
     */
    prepareDataForAnalysis(opportunities) {
        // Extraer pares únicos
        const uniquePairs = [...new Set(opportunities.map(opp => opp.pair))];
        
        // Preparar datos por par
        const preparedData = {};
        
        for (const pair of uniquePairs) {
            const pairOpportunities = opportunities.filter(opp => opp.pair === pair);
            
            preparedData[pair] = {
                prices: pairOpportunities.map(opp => ({
                    exchange: opp.exchanges[0],
                    price: opp.buyPrice
                })),
                volumes: pairOpportunities.map(opp => ({
                    exchange: opp.exchanges[0],
                    volume: opp.volume || 1000 // Valor por defecto si no hay volumen
                })),
                spreads: pairOpportunities.map(opp => opp.profitPercentage),
                timestamp: Date.now()
            };
        }
        
        return preparedData;
    }
    
    /**
     * Predice precios futuros
     * @param {Object} data - Datos preparados
     * @returns {Object} - Predicciones de precios
     */
    async predictPrices(data) {
        // En una implementación real, aquí usaríamos el modelo LSTM para predecir precios
        // Para esta implementación, usaremos predicciones simuladas
        
        const predictions = {};
        
        for (const pair in data) {
            predictions[pair] = {};
            
            for (const priceData of data[pair].prices) {
                const exchange = priceData.exchange;
                const currentPrice = priceData.price;
                
                // Simular predicción con una variación aleatoria de ±2%
                const randomFactor = 1 + (Math.random() * 0.04 - 0.02);
                predictions[pair][exchange] = currentPrice * randomFactor;
            }
        }
        
        return predictions;
    }
    
    /**
     * Evalúa y puntúa oportunidades
     * @param {Array} opportunities - Lista de oportunidades
     * @param {Object} pricePredictions - Predicciones de precios
     * @returns {Array} - Oportunidades puntuadas
     */
    async scoreOpportunities(opportunities, pricePredictions) {
        return opportunities.map(opportunity => {
            const { pair, exchanges } = opportunity;
            
            // Obtener predicciones para este par y exchanges
            const buyExchange = exchanges[0];
            const sellExchange = exchanges[1];
            
            let predictedProfit = opportunity.profitPercentage;
            
            // Si tenemos predicciones para ambos exchanges, calcular ganancia predicha
            if (pricePredictions[pair] && 
                pricePredictions[pair][buyExchange] && 
                pricePredictions[pair][sellExchange]) {
                
                const predictedBuyPrice = pricePredictions[pair][buyExchange];
                const predictedSellPrice = pricePredictions[pair][sellExchange];
                
                predictedProfit = ((predictedSellPrice - predictedBuyPrice) / predictedBuyPrice) * 100;
            }
            
            // Calcular puntuación basada en ganancia actual y predicha
            const score = this.calculateOpportunityScore(opportunity, predictedProfit);
            
            return {
                ...opportunity,
                aiScore: score,
                predictedProfit
            };
        });
    }
    
    /**
     * Calcula la puntuación de una oportunidad
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {number} predictedProfit - Ganancia predicha
     * @returns {number} - Puntuación (0-100)
     */
    calculateOpportunityScore(opportunity, predictedProfit) {
        // Factores para la puntuación
        const currentProfitWeight = 0.4;
        const predictedProfitWeight = 0.3;
        const volumeWeight = 0.15;
        const exchangeReliabilityWeight = 0.15;
        
        // Normalizar ganancia actual (0-100)
        const normalizedCurrentProfit = Math.min(opportunity.profitPercentage * 20, 100);
        
        // Normalizar ganancia predicha (0-100)
        const normalizedPredictedProfit = Math.min(predictedProfit * 20, 100);
        
        // Normalizar volumen (asumiendo que mayor volumen es mejor, hasta cierto punto)
        const volume = opportunity.volume || 1000; // Valor por defecto
        const normalizedVolume = Math.min(volume / 10000 * 100, 100);
        
        // Fiabilidad de exchanges (valores simulados)
        const exchangeReliability = {
            'Binance': 95,
            'Coinbase': 90,
            'Kraken': 85,
            'Kucoin': 80
        };
        
        // Calcular fiabilidad promedio de los exchanges involucrados
        const avgExchangeReliability = opportunity.exchanges.reduce((sum, exchange) => {
            return sum + (exchangeReliability[exchange] || 70);
        }, 0) / opportunity.exchanges.length;
        
        // Calcular puntuación final
        const score = (
            normalizedCurrentProfit * currentProfitWeight +
            normalizedPredictedProfit * predictedProfitWeight +
            normalizedVolume * volumeWeight +
            avgExchangeReliability * exchangeReliabilityWeight
        );
        
        return Math.round(score);
    }
    
    /**
     * Evalúa los riesgos de las oportunidades
     * @param {Array} opportunities - Oportunidades puntuadas
     * @returns {Array} - Oportunidades con evaluación de riesgo
     */
    async assessRisks(opportunities) {
        return opportunities.map(opportunity => {
            // En una implementación real, aquí usaríamos el modelo de evaluación de riesgos
            // Para esta implementación, usaremos una evaluación simulada
            
            // Factores de riesgo
            const volatilityRisk = Math.random() * 40; // 0-40
            const liquidityRisk = Math.random() * 30; // 0-30
            const exchangeRisk = Math.random() * 20; // 0-20
            const timingRisk = Math.random() * 10; // 0-10
            
            // Riesgo total (0-100)
            const totalRisk = volatilityRisk + liquidityRisk + exchangeRisk + timingRisk;
            
            // Categoría de riesgo
            let riskCategory;
            if (totalRisk < 30) {
                riskCategory = 'low';
            } else if (totalRisk < 60) {
                riskCategory = 'medium';
            } else {
                riskCategory = 'high';
            }
            
            return {
                ...opportunity,
                riskAssessment: {
                    volatilityRisk,
                    liquidityRisk,
                    exchangeRisk,
                    timingRisk,
                    totalRisk,
                    riskCategory
                }
            };
        });
    }
    
    /**
     * Genera recomendaciones finales
     * @param {Array} opportunities - Oportunidades con evaluación de riesgo
     * @returns {Array} - Oportunidades con recomendaciones
     */
    generateRecommendations(opportunities) {
        return opportunities.map(opportunity => {
            // Calcular puntuación final (score - riesgo)
            const finalScore = opportunity.aiScore - (opportunity.riskAssessment.totalRisk / 2);
            
            // Determinar acción recomendada
            let action;
            if (finalScore >= 70) {
                action = 'execute'; // Ejecutar inmediatamente
            } else if (finalScore >= 50) {
                action = 'monitor'; // Monitorear para posible ejecución
            } else {
                action = 'ignore'; // Ignorar esta oportunidad
            }
            
            // Determinar tamaño de inversión recomendado
            let recommendedSize;
            if (finalScore >= 80) {
                recommendedSize = 1.0; // 100% del tamaño máximo
            } else if (finalScore >= 70) {
                recommendedSize = 0.75; // 75% del tamaño máximo
            } else if (finalScore >= 60) {
                recommendedSize = 0.5; // 50% del tamaño máximo
            } else {
                recommendedSize = 0.25; // 25% del tamaño máximo
            }
            
            return {
                ...opportunity,
                aiRecommendation: {
                    finalScore,
                    action,
                    recommendedSize,
                    confidence: finalScore / 100,
                    reasoning: this.generateReasoning(opportunity, finalScore)
                }
            };
        });
    }
    
    /**
     * Genera un razonamiento para la recomendación
     * @param {Object} opportunity - Oportunidad evaluada
     * @param {number} finalScore - Puntuación final
     * @returns {string} - Razonamiento
     */
    generateReasoning(opportunity, finalScore) {
        const { profitPercentage, predictedProfit, riskAssessment } = opportunity;
        
        if (finalScore >= 70) {
            return `Alta probabilidad de ganancia (${profitPercentage.toFixed(2)}% actual, ${predictedProfit.toFixed(2)}% predicha) con riesgo ${riskAssessment.riskCategory}.`;
        } else if (finalScore >= 50) {
            return `Ganancia moderada (${profitPercentage.toFixed(2)}%) con algunas señales de precaución. Riesgo ${riskAssessment.riskCategory}.`;
        } else {
            return `Baja probabilidad de éxito. Ganancia insuficiente (${profitPercentage.toFixed(2)}%) para el nivel de riesgo ${riskAssessment.riskCategory}.`;
        }
    }
    
    /**
     * Recomienda cambios de estrategia basados en el análisis
     * @param {Array} opportunities - Oportunidades analizadas
     * @returns {Object|null} - Recomendación de estrategia o null
     */
    recommendStrategy(opportunities) {
        // Contar oportunidades por estrategia
        const strategyCounts = {};
        const strategyScores = {};
        
        for (const opp of opportunities) {
            if (!opp.strategy) continue;
            
            if (!strategyCounts[opp.strategy]) {
                strategyCounts[opp.strategy] = 0;
                strategyScores[opp.strategy] = 0;
            }
            
            strategyCounts[opp.strategy]++;
            strategyScores[opp.strategy] += opp.aiRecommendation.finalScore;
        }
        
        // Calcular puntuación promedio por estrategia
        for (const strategy in strategyCounts) {
            strategyScores[strategy] /= strategyCounts[strategy];
        }
        
        // Encontrar la estrategia con mejor puntuación
        let bestStrategy = null;
        let bestScore = 0;
        
        for (const strategy in strategyScores) {
            if (strategyScores[strategy] > bestScore) {
                bestScore = strategyScores[strategy];
                bestStrategy = strategy;
            }
        }
        
        // Si la mejor estrategia tiene una puntuación significativamente mejor, recomendarla
        if (bestStrategy && bestScore > 60) {
            return {
                suggestedStrategy: bestStrategy,
                score: bestScore,
                reason: `La estrategia ${bestStrategy} muestra el mejor rendimiento con una puntuación de ${bestScore.toFixed(2)}.`
            };
        }
        
        return null;
    }
    
    /**
     * Actualiza los datos de mercado para entrenamiento
     * @param {Object} marketData - Nuevos datos de mercado
     */
    updateMarketData(marketData) {
        this.marketData.push({
            ...marketData,
            timestamp: Date.now()
        });
        
        // Mantener solo los datos de los últimos N días
        const cutoffTime = Date.now() - (this.trainingDataDays * 24 * 60 * 60 * 1000);
        this.marketData = this.marketData.filter(data => data.timestamp >= cutoffTime);
        
        // Verificar si es necesario reentrenar
        if (this.autoRetrain && this.shouldRetrain()) {
            this.retrainModels();
        }
    }
    
    /**
     * Determina si es necesario reentrenar los modelos
     * @returns {boolean} - True si se debe reentrenar
     */
    shouldRetrain() {
        // Verificar si hay suficientes datos nuevos
        if (this.marketData.length < 1000) {
            return false;
        }
        
        // Verificar si la precisión ha caído por debajo del umbral
        for (const model in this.modelAccuracy) {
            if (this.modelAccuracy[model] < 1 - this.retrainThreshold) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Reentrenar los modelos con nuevos datos
     */
    async retrainModels() {
        this.logger.info('Reentrenando modelos de IA...');
        
        try {
            // En una implementación real, aquí reentrenaremos los modelos
            // Para esta implementación, simularemos el reentrenamiento
            
            // Simular reentrenamiento del modelo de predicción de precios
            await this.retrainPriceModel();
            
            // Simular reentrenamiento del modelo de puntuación de oportunidades
            await this.retrainOpportunityModel();
            
            // Simular reentrenamiento del modelo de evaluación de riesgos
            await this.retrainRiskModel();
            
            this.logger.info('Modelos reentrenados correctamente');
        } catch (error) {
            this.logger.error('Error reentrenando modelos:', error);
        }
    }
    
    /**
     * Reentrenar el modelo de predicción de precios
     */
    async retrainPriceModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Actualizar modelo simulado
        this.priceModel.version = `${parseFloat(this.priceModel.version) + 0.1}.0`;
        this.priceModel.updated = new Date().toISOString();
        this.priceModel.weights = this.generateRandomWeights(100);
        this.priceModel.biases = this.generateRandomWeights(10);
        
        // Simular mejora en precisión
        this.modelAccuracy.priceModel = 0.85 + Math.random() * 0.1;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'price_prediction.json'),
            JSON.stringify(this.priceModel, null, 2)
        );
    }
    
    /**
     * Reentrenar el modelo de puntuación de oportunidades
     */
    async retrainOpportunityModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 800));
        
        // Actualizar modelo simulado
        this.opportunityModel.version = `${parseFloat(this.opportunityModel.version) + 0.1}.0`;
        this.opportunityModel.updated = new Date().toISOString();
        this.opportunityModel.trees = this.generateRandomTrees(this.models.OPPORTUNITY_SCORING.nEstimators);
        
        // Simular mejora en precisión
        this.modelAccuracy.opportunityModel = 0.82 + Math.random() * 0.12;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'opportunity_scoring.json'),
            JSON.stringify(this.opportunityModel, null, 2)
        );
    }
    
    /**
     * Reentrenar el modelo de evaluación de riesgos
     */
    async retrainRiskModel() {
        // Simular reentrenamiento
        await new Promise(resolve => setTimeout(resolve, 600));
        
        // Actualizar modelo simulado
        this.riskModel.version = `${parseFloat(this.riskModel.version) + 0.1}.0`;
        this.riskModel.updated = new Date().toISOString();
        this.riskModel.trees = this.generateRandomTrees(this.models.RISK_ASSESSMENT.nEstimators);
        
        // Simular mejora en precisión
        this.modelAccuracy.riskModel = 0.8 + Math.random() * 0.15;
        
        // Guardar modelo actualizado
        await fs.writeFile(
            path.join(this.modelPath, 'risk_assessment.json'),
            JSON.stringify(this.riskModel, null, 2)
        );
    }
    
    /**
     * Obtiene el estado actual del asesor de IA
     * @returns {Object} - Estado del asesor
     */
    getStatus() {
        return {
            enabled: this.enabled,
            models: {
                priceModel: {
                    version: this.priceModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.priceModel || 0
                },
                opportunityModel: {
                    version: this.opportunityModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.opportunityModel || 0
                },
                riskModel: {
                    version: this.riskModel?.version || 'N/A',
                    accuracy: this.modelAccuracy.riskModel || 0
                }
            },
            dataPoints: this.marketData.length,
            lastUpdated: this.marketData.length ? new Date(Math.max(...this.marketData.map(d => d.timestamp))).toISOString() : 'N/A'
        };
    }
}

module.exports = AITradingAdvisor;

------------------------------------------------------------------------------------------------------------------

ALERTS

const https = require("https")
const EventEmitter = require("events")
const nodemailer = require("nodemailer")
const axios = require("axios")

/**
 * Gestor de Alertas para el Bot de Arbitraje
 */
class AlertManager extends EventEmitter {
  constructor(config) {
    super()
    this.config = config
    this.enabled = config.ALERTS.ENABLED
    this.channels = config.ALERTS.CHANNELS
    this.alertTypes = config.ALERTS.ALERT_TYPES

    this.emailTransporter = null
    this.alertHistory = []
    this.alertQueue = []
    this.isProcessingQueue = false

    this.logger = console

    // ======= AGREGADO DASHBOARD: historial reciente de anomalías =======
    this.anomalies = []
    // ======= FIN AGREGADO =======
  }

  /**
   * Inicializa el gestor de alertas
   */
  async initialize() {
    if (!this.enabled) {
      this.logger.info("Alert Manager deshabilitado")
      return
    }

    this.logger.info("Inicializando Alert Manager...")

    try {
      // Inicializar transportador de email
      if (this.channels.EMAIL.enabled) {
        await this.initializeEmailTransporter()
      }

      // Verificar configuración de Telegram
      if (this.channels.TELEGRAM.enabled) {
        await this.verifyTelegramConfig()
      }

      // Iniciar procesamiento de cola
      this.startQueueProcessor()

      // Programar resumen diario
      this.scheduleDailySummary()

      this.logger.info("Alert Manager inicializado correctamente")

      // ENVIAR MENSAJE DE PRUEBA AL INICIALIZAR - CAMBIADO A BOT_STARTED
      await this.sendAlert("BOT_STARTED", "🤖 Bot de Arbitraje iniciado correctamente")
    } catch (error) {
      this.logger.error("Error inicializando Alert Manager:", error)
      throw error
    }
  }

  /**
   * Inicializa el transportador de email
   */
  async initializeEmailTransporter() {
    try {
      this.emailTransporter = nodemailer.createTransport(this.channels.EMAIL.smtp)

      // Verificar configuración
      await this.emailTransporter.verify()
      this.logger.info("Transportador de email configurado correctamente")
    } catch (error) {
      this.logger.error("Error configurando email:", error)
      this.channels.EMAIL.enabled = false
    }
  }

  /**
   * Verifica la configuración de Telegram
   */
  async verifyTelegramConfig() {
    try {
      const { botToken, chatId } = this.channels.TELEGRAM

      // VERIFICAR QUE LAS VARIABLES ESTÉN CONFIGURADAS
      this.logger.info("=== VERIFICANDO CONFIGURACIÓN DE TELEGRAM ===")
      this.logger.info("Bot Token:", botToken ? "CONFIGURADO" : "NO CONFIGURADO")
      this.logger.info("Chat ID:", chatId ? "CONFIGURADO" : "NO CONFIGURADO")

      if (!botToken || botToken === "") {
        throw new Error("TELEGRAM_BOT_TOKEN no está configurado en las variables de entorno")
      }

      if (!chatId || chatId === "") {
        throw new Error("TELEGRAM_CHAT_ID no está configurado en las variables de entorno")
      }

      // Verificar que el bot esté activo
      const response = await axios.get(`https://api.telegram.org/bot${botToken}/getMe`)

      if (response.data.ok) {
        this.logger.info(`✅ Bot de Telegram verificado: ${response.data.result.username}`)
      } else {
        throw new Error("Token de bot de Telegram inválido")
      }
    } catch (error) {
      this.logger.error("❌ Error verificando Telegram:", error.message)
      // NO DESHABILITAR TELEGRAM, SOLO MOSTRAR EL ERROR
      // this.channels.TELEGRAM.enabled = false;
    }
  }

  /**
   * Inicia el procesador de cola de alertas
   */
  startQueueProcessor() {
    setInterval(async () => {
      if (!this.isProcessingQueue && this.alertQueue.length > 0) {
        await this.processAlertQueue()
      }
    }, 1000)
  }

  /**
   * Procesa la cola de alertas
   */
  async processAlertQueue() {
    this.isProcessingQueue = true

    while (this.alertQueue.length > 0) {
      const alert = this.alertQueue.shift()

      try {
        await this.sendAlertToChannels(alert)
      } catch (error) {
        this.logger.error("Error procesando alerta:", error)
      }

      // Pequeña pausa entre alertas
      await new Promise((resolve) => setTimeout(resolve, 100))
    }

    this.isProcessingQueue = false
  }

  /**
   * Programa el resumen diario
   */
  scheduleDailySummary() {
    if (!this.alertTypes.DAILY_SUMMARY.enabled) {
      return
    }

    const summaryTime = this.alertTypes.DAILY_SUMMARY.time || "23:59"
    const [hours, minutes] = summaryTime.split(":").map(Number)

    // Calcular tiempo hasta el próximo resumen
    const now = new Date()
    const nextSummary = new Date()
    nextSummary.setHours(hours, minutes, 0, 0)

    if (nextSummary <= now) {
      nextSummary.setDate(nextSummary.getDate() + 1)
    }

    const timeUntilSummary = nextSummary.getTime() - now.getTime()

    setTimeout(() => {
      this.sendDailySummary()

      // Programar para el día siguiente
      setInterval(
        () => {
          this.sendDailySummary()
        },
        24 * 60 * 60 * 1000,
      )
    }, timeUntilSummary)
  }

  /**
   * Envía una alerta
   * @param {string} type - Tipo de alerta ('info', 'warning', 'error', 'trade', 'risk')
   * @param {string} message - Mensaje de la alerta
   * @param {Object} data - Datos adicionales
   */
  async sendAlert(type, message, data = {}) {
    if (!this.enabled) {
      this.logger.info("Alertas deshabilitadas, no se enviará:", message)
      return
    }

    // BUSCAR CONFIGURACIÓN DE ALERTA O USAR VALORES POR DEFECTO
    const alertConfig = this.alertTypes[type.toUpperCase()] || {
      enabled: true,
      channels: ["telegram"],
      priority: "medium",
    }

    if (!alertConfig.enabled) {
      this.logger.info(`Tipo de alerta ${type} deshabilitado`)
      return
    }

    // Crear objeto de alerta
    const alert = {
      id: this.generateAlertId(),
      type,
      message,
      data,
      timestamp: new Date(),
      priority: alertConfig.priority || "medium",
      channels: alertConfig.channels || ["telegram"],
    }

    this.logger.info(`📢 Enviando alerta: ${type} - ${message}`)

    // Añadir a la cola
    this.alertQueue.push(alert)

    // Añadir al historial
    this.alertHistory.push(alert)

    // ======= AGREGADO DASHBOARD: guardar anomalías si corresponde =======
    if (type && (type.toUpperCase().includes("ANOMALY") || type.toUpperCase().includes("ANOMALIA") || type.toUpperCase().includes("RISK") || type.toUpperCase().includes("VOLATILIDAD") || type.toUpperCase().includes("OPPORTUNITY"))) {
      this.anomalies.push({
        tipo: type,
        descripcion: message,
        timestamp: new Date().toLocaleString(),
        data: data || {},
      })
      if (this.anomalies.length > 100) {
        this.anomalies.shift()
      }
    }
    // ======= FIN AGREGADO DASHBOARD =======

    // Mantener solo las últimas 1000 alertas
    if (this.alertHistory.length > 1000) {
      this.alertHistory.shift()
    }

    // Emitir evento
    this.emit("alertSent", alert)
  }

  /**
   * Envía una alerta a todos los canales configurados
   */
  async sendAlertToChannels(alert) {
    const promises = []

    for (const channel of alert.channels) {
      switch (channel.toLowerCase()) {
        case "email":
          if (this.channels.EMAIL.enabled) {
            promises.push(this.sendEmailAlert(alert))
          }
          break

        case "telegram":
          if (this.channels.TELEGRAM.enabled) {
            promises.push(this.sendTelegramAlert(alert))
          }
          break

        case "discord":
          if (this.channels.DISCORD.enabled) {
            promises.push(this.sendDiscordAlert(alert))
          }
          break

        case "slack":
          if (this.channels.SLACK.enabled) {
            promises.push(this.sendSlackAlert(alert))
          }
          break
      }
    }

    // Esperar a que se envíen todas las alertas
    const results = await Promise.allSettled(promises)

    // MOSTRAR RESULTADOS DE CADA CANAL
    results.forEach((result, index) => {
      if (result.status === "rejected") {
        this.logger.error(`Error enviando alerta por ${alert.channels[index]}:`, result.reason.message)
      }
    })
  }

  /**
   * Envía alerta por email
   */
  async sendEmailAlert(alert) {
    if (!this.emailTransporter) {
      throw new Error("Transportador de email no inicializado")
    }

    const subject = this.formatEmailSubject(alert)
    const html = this.formatEmailBody(alert)

    const mailOptions = {
      from: this.channels.EMAIL.from,
      to: this.channels.EMAIL.to,
      subject,
      html,
    }

    await this.emailTransporter.sendMail(mailOptions)
    this.logger.info(`✅ Alerta enviada por email: ${alert.type}`)
  }

  /**
   * Envía alerta por Telegram
   */
  async sendTelegramAlert(alert) {
    try {
      const { botToken, chatId, parseMode } = this.channels.TELEGRAM

      // VERIFICAR CONFIGURACIÓN ANTES DE ENVIAR
      if (!botToken || botToken === "") {
        throw new Error("TELEGRAM_BOT_TOKEN no configurado")
      }

      if (!chatId || chatId === "") {
        throw new Error("TELEGRAM_CHAT_ID no configurado")
      }

      const message = this.formatTelegramMessage(alert)
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`

      this.logger.info("📱 Enviando mensaje a Telegram...")

      const response = await axios.post(url, {
        chat_id: chatId,
        text: message,
        parse_mode: parseMode || "HTML",
      })

      if (response.data.ok) {
        this.logger.info(`✅ Alerta enviada por Telegram: ${alert.type}`)
      } else {
        throw new Error(`Error de Telegram: ${response.data.description}`)
      }
    } catch (error) {
      this.logger.error("❌ Error enviando alerta por Telegram:", error.message)

      if (error.response) {
        this.logger.error("Respuesta de Telegram:", error.response.data)
      }

      throw error
    }
  }

  /**
   * Envía alerta por Discord
   */
  async sendDiscordAlert(alert) {
    const { webhookUrl } = this.channels.DISCORD
    const embed = this.formatDiscordEmbed(alert)

    await axios.post(webhookUrl, {
      embeds: [embed],
    })

    this.logger.info(`✅ Alerta enviada por Discord: ${alert.type}`)
  }

  /**
   * Envía alerta por Slack
   */
  async sendSlackAlert(alert) {
    const { webhookUrl } = this.channels.SLACK
    const payload = this.formatSlackMessage(alert)

    await axios.post(webhookUrl, payload)

    this.logger.info(`✅ Alerta enviada por Slack: ${alert.type}`)
  }

  /**
   * Formatea el asunto del email
   */
  formatEmailSubject(alert) {
    const priorityEmoji = {
      low: "🔵",
      medium: "🟡",
      high: "🟠",
      critical: "🔴",
    }

    const emoji = priorityEmoji[alert.priority] || "🔵"
    return `${emoji} Bot de Arbitraje - ${alert.type.toUpperCase()}`
  }

  /**
   * Formatea el cuerpo del email
   */
  formatEmailBody(alert) {
    return `
      <html>
      <body style="font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f5f5f5;">
        <div style="max-width: 600px; margin: 0 auto; background-color: white; border-radius: 8px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
          <h2 style="color: #333; margin-top: 0;">Bot de Arbitraje CEX</h2>
          
          <div style="background-color: ${this.getPriorityColor(alert.priority)}; color: white; padding: 10px; border-radius: 4px; margin: 20px 0;">
            <strong>Tipo:</strong> ${alert.type.toUpperCase()}
          </div>
          
          <div style="margin: 20px 0;">
            <strong>Mensaje:</strong><br>
            ${alert.message}
          </div>
          
          <div style="margin: 20px 0;">
            <strong>Timestamp:</strong> ${alert.timestamp.toLocaleString()}
          </div>
          
          ${
            alert.data && Object.keys(alert.data).length > 0
              ? `
          <div style="margin: 20px 0;">
            <strong>Datos adicionales:</strong><br>
            <pre style="background-color: #f8f9fa; padding: 10px; border-radius: 4px; overflow-x: auto;">${JSON.stringify(alert.data, null, 2)}</pre>
          </div>
          `
              : ""
          }
          
          <hr style="margin: 20px 0; border: none; border-top: 1px solid #eee;">
          
          <p style="color: #666; font-size: 12px; margin: 0;">
            Esta es una notificación automática del Bot de Arbitraje CEX.
          </p>
        </div>
      </body>
      </html>
    `
  }

  /**
   * Formatea el mensaje de Telegram
   */
  formatTelegramMessage(alert) {
    const priorityEmoji = {
      low: "🔵",
      medium: "🟡",
      high: "🟠",
      critical: "🔴",
    }

    const emoji = priorityEmoji[alert.priority] || "🔵"

    let message = `${emoji} <b>Bot de Arbitraje CEX</b>\n\n`
    message += `<b>Tipo:</b> ${alert.type.toUpperCase()}\n`
    message += `<b>Mensaje:</b> ${alert.message}\n`
    message += `<b>Timestamp:</b> ${alert.timestamp.toLocaleString()}\n`

    if (alert.data && Object.keys(alert.data).length > 0) {
      message += `\n<b>Datos:</b>\n`
      for (const [key, value] of Object.entries(alert.data)) {
        message += `• ${key}: ${value}\n`
      }
    }

    return message
  }

  /**
   * Formatea el embed de Discord
   */
  formatDiscordEmbed(alert) {
    const color = this.getPriorityColorHex(alert.priority)

    const embed = {
      title: `Bot de Arbitraje CEX - ${alert.type.toUpperCase()}`,
      description: alert.message,
      color: Number.parseInt(color.replace("#", ""), 16),
      timestamp: alert.timestamp.toISOString(),
      fields: [],
    }

    if (alert.data && Object.keys(alert.data).length > 0) {
      for (const [key, value] of Object.entries(alert.data)) {
        embed.fields.push({
          name: key,
          value: String(value),
          inline: true,
        })
      }
    }

    return embed
  }

  /**
   * Formatea el mensaje de Slack
   */
  formatSlackMessage(alert) {
    const color = this.getPriorityColor(alert.priority)

    const attachment = {
      color,
      title: `Bot de Arbitraje CEX - ${alert.type.toUpperCase()}`,
      text: alert.message,
      timestamp: Math.floor(alert.timestamp.getTime() / 1000),
      fields: [],
    }

    if (alert.data && Object.keys(alert.data).length > 0) {
      for (const [key, value] of Object.entries(alert.data)) {
        attachment.fields.push({
          title: key,
          value: String(value),
          short: true,
        })
      }
    }

    return {
      attachments: [attachment],
    }
  }

  /**
   * Obtiene el color según la prioridad
   */
  getPriorityColor(priority) {
    const colors = {
      low: "#007bff",
      medium: "#ffc107",
      high: "#fd7e14",
      critical: "#dc3545",
    }

    return colors[priority] || colors.medium
  }

  /**
   * Obtiene el color hexadecimal según la prioridad
   */
  getPriorityColorHex(priority) {
    const colors = {
      low: "#007bff",
      medium: "#ffc107",
      high: "#fd7e14",
      critical: "#dc3545",
    }

    return colors[priority] || colors.medium
  }

  /**
   * Envía el resumen diario
   */
  async sendDailySummary() {
    try {
      // Obtener alertas del día
      const today = new Date()
      today.setHours(0, 0, 0, 0)

      const todayAlerts = this.alertHistory.filter((alert) => new Date(alert.timestamp) >= today)

      // Agrupar por tipo
      const alertsByType = {}
      for (const alert of todayAlerts) {
        if (!alertsByType[alert.type]) {
          alertsByType[alert.type] = 0
        }
        alertsByType[alert.type]++
      }

      // Crear mensaje de resumen
      let summary = `📊 Resumen diario del Bot de Arbitraje CEX\n\n`
      summary += `Total de alertas: ${todayAlerts.length}\n\n`

      if (Object.keys(alertsByType).length > 0) {
        summary += `Alertas por tipo:\n`
        for (const [type, count] of Object.entries(alertsByType)) {
          summary += `• ${type}: ${count}\n`
        }
      } else {
        summary += `No se generaron alertas hoy.`
      }

      // Enviar resumen
      await this.sendAlert("DAILY_SUMMARY", summary)
    } catch (error) {
      this.logger.error("Error enviando resumen diario:", error)
    }
  }

  /**
   * Genera un ID único para la alerta
   */
  generateAlertId() {
    return `alert_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  }

  /**
   * Obtiene el historial de alertas
   */
  getAlertHistory(limit = 100) {
    return this.alertHistory.slice(-limit)
  }

  /**
   * Obtiene estadísticas de alertas
   */
  getAlertStatistics() {
    const stats = {
      total: this.alertHistory.length,
      byType: {},
      byPriority: {},
      last24Hours: 0,
    }

    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000)

    for (const alert of this.alertHistory) {
      // Por tipo
      if (!stats.byType[alert.type]) {
        stats.byType[alert.type] = 0
      }
      stats.byType[alert.type]++

      // Por prioridad
      if (!stats.byPriority[alert.priority]) {
        stats.byPriority[alert.priority] = 0
      }
      stats.byPriority[alert.priority]++

      // Últimas 24 horas
      if (new Date(alert.timestamp) >= last24Hours) {
        stats.last24Hours++
      }
    }

    return stats
  }

  // ======= AGREGADO DASHBOARD: método para anomalias recientes =======
  getRecentAnomalies(limit = 25) {
    return this.anomalies.slice(-limit)
  }
  // ======= FIN AGREGADO DASHBOARD =======
}

module.exports = AlertManager


-------------------------------------------------------------------------------------------------------------

const nodemailer = require('nodemailer');

/**
 * Gestor de Email para el Bot de Arbitraje
 */
class EmailManager {
  constructor(config) {
    this.config = config;
    this.emailConfig = config.ALERTS.CHANNELS.EMAIL;
    this.transporter = null;
    this.logger = console;
  }

  /**
   * Inicializa el gestor de email
   */
  async initialize() {
    if (!this.emailConfig.enabled) {
      this.logger.info('Email deshabilitado en la configuración');
      return;
    }

    try {
      this.logger.info('Inicializando EmailManager...');
      
      // Crear transporter
      this.transporter = nodemailer.createTransporter({
        host: this.emailConfig.smtp.host,
        port: this.emailConfig.smtp.port,
        secure: this.emailConfig.smtp.secure,
        auth: {
          user: this.emailConfig.smtp.auth.user,
          pass: this.emailConfig.smtp.auth.pass,
        },
      });

      // Verificar conexión
      await this.transporter.verify();
      this.logger.info('✅ Conexión de email verificada correctamente');
      
      // Enviar email de prueba
      await this.sendTestEmail();
      
    } catch (error) {
      this.logger.error('❌ Error inicializando EmailManager:', error.message);
      throw error;
    }
  }

  /**
   * Envía un email de prueba
   */
  async sendTestEmail() {
    try {
      const testMessage = {
        from: this.emailConfig.from,
        to: this.emailConfig.to,
        subject: '🤖 Bot de Arbitraje - Test de Conexión',
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #2563eb;">🤖 Bot de Arbitraje CEX</h2>
            <p>Este es un mensaje de prueba para verificar que las notificaciones por email funcionan correctamente.</p>
            <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin: 20px 0;">
              <p><strong>Fecha:</strong> ${new Date().toLocaleString()}</p>
              <p><strong>Estado:</strong> ✅ Conexión exitosa</p>
            </div>
            <p style="color: #6b7280; font-size: 12px;">
              Este mensaje fue enviado automáticamente por el sistema de alertas.
            </p>
          </div>
        `
      };

      await this.transporter.sendMail(testMessage);
      this.logger.info('✅ Email de prueba enviado correctamente');
      
    } catch (error) {
      this.logger.error('❌ Error enviando email de prueba:', error.message);
      throw error;
    }
  }

  /**
   * Envía un email de alerta
   * @param {string} type - Tipo de alerta
   * @param {string} message - Mensaje de la alerta
   * @param {Object} data - Datos adicionales
   */
  async sendAlert(type, message, data = {}) {
    if (!this.emailConfig.enabled || !this.transporter) {
      return;
    }

    try {
      const emailContent = this.formatEmailContent(type, message, data);
      
      const mailOptions = {
        from: this.emailConfig.from,
        to: this.emailConfig.to,
        subject: emailContent.subject,
        html: emailContent.html
      };

      await this.transporter.sendMail(mailOptions);
      this.logger.info(`📧 Email enviado: ${type} - ${message}`);
      
    } catch (error) {
      this.logger.error('❌ Error enviando email:', error.message);
    }
  }

  /**
   * Formatea el contenido del email según el tipo
   * @param {string} type - Tipo de alerta
   * @param {string} message - Mensaje
   * @param {Object} data - Datos adicionales
   * @returns {Object} - Contenido formateado
   */
  formatEmailContent(type, message, data) {
    const timestamp = new Date().toLocaleString();
    let emoji = '📢';
    let color = '#6b7280';
    let priority = 'Normal';

    switch (type) {
      case 'info':
        emoji = 'ℹ️';
        color = '#2563eb';
        priority = 'Información';
        break;
      case 'warning':
        emoji = '⚠️';
        color = '#f59e0b';
        priority = 'Advertencia';
        break;
      case 'error':
        emoji = '❌';
        color = '#dc2626';
        priority = 'Error';
        break;
      case 'trade':
        emoji = '💰';
        color = '#059669';
        priority = 'Operación';
        break;
      case 'risk':
        emoji = '🚨';
        color = '#dc2626';
        priority = 'Riesgo Alto';
        break;
      case 'profit':
        emoji = '💵';
        color = '#059669';
        priority = 'Ganancia';
        break;
      case 'balance':
        emoji = '💳';
        color = '#7c3aed';
        priority = 'Balance';
        break;
    }

    const subject = `${emoji} Bot Arbitraje - ${priority}: ${message.substring(0, 50)}...`;

    const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #ffffff;">
        <div style="background-color: ${color}; color: white; padding: 20px; text-align: center;">
          <h1 style="margin: 0; font-size: 24px;">${emoji} Bot de Arbitraje CEX</h1>
          <p style="margin: 5px 0 0 0; opacity: 0.9;">Alerta de ${priority}</p>
        </div>
        
        <div style="padding: 30px;">
          <div style="background-color: #f9fafb; border-left: 4px solid ${color}; padding: 15px; margin-bottom: 20px;">
            <h3 style="margin: 0 0 10px 0; color: ${color};">Mensaje:</h3>
            <p style="margin: 0; font-size: 16px; line-height: 1.5;">${message}</p>
          </div>

          ${data.details ? `
            <div style="background-color: #f3f4f6; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #374151;">Detalles:</h4>
              <pre style="margin: 0; font-family: monospace; font-size: 12px; white-space: pre-wrap;">${JSON.stringify(data.details, null, 2)}</pre>
            </div>
          ` : ''}

          ${data.balances ? `
            <div style="background-color: #ecfdf5; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #065f46;">💳 Balances Actuales:</h4>
              ${Object.entries(data.balances).map(([exchange, balance]) => 
                `<p style="margin: 5px 0;"><strong>${exchange}:</strong> $${balance.toFixed(2)}</p>`
              ).join('')}
            </div>
          ` : ''}

          ${data.profit ? `
            <div style="background-color: #ecfdf5; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
              <h4 style="margin: 0 0 10px 0; color: #065f46;">💰 Información de Ganancia:</h4>
              <p style="margin: 5px 0;"><strong>Ganancia:</strong> $${data.profit.toFixed(2)}</p>
              <p style="margin: 5px 0;"><strong>Porcentaje:</strong> ${data.profitPercentage?.toFixed(2)}%</p>
            </div>
          ` : ''}

          <div style="border-top: 1px solid #e5e7eb; padding-top: 15px; margin-top: 20px;">
            <p style="margin: 0; color: #6b7280; font-size: 12px;">
              <strong>Fecha:</strong> ${timestamp}<br>
              <strong>Tipo:</strong> ${priority}<br>
              <strong>Sistema:</strong> Bot de Arbitraje CEX con IA
            </p>
          </div>
        </div>

        <div style="background-color: #f9fafb; padding: 15px; text-align: center; border-top: 1px solid #e5e7eb;">
          <p style="margin: 0; color: #6b7280; font-size: 11px;">
            Este mensaje fue enviado automáticamente por el sistema de alertas del Bot de Arbitraje.
          </p>
        </div>
      </div>
    `;

    return { subject, html };
  }

  /**
   * Envía resumen diario por email
   * @param {Object} stats - Estadísticas del día
   */
  async sendDailySummary(stats) {
    const data = {
      details: stats,
      balances: stats.balances,
      profit: stats.totalProfit
    };

    const message = `Resumen diario del bot de arbitraje:
    
💰 Ganancia Total: $${stats.totalProfit.toFixed(2)}
📈 Operaciones Exitosas: ${stats.successfulTrades}
📉 Operaciones Fallidas: ${stats.failedTrades}
🎯 Tasa de Éxito: ${((stats.successfulTrades / (stats.totalTrades || 1)) * 100).toFixed(1)}%
⚡ Latencia Promedio: ${stats.averageLatency}`;

    await this.sendAlert('info', message, data);
  }
}

module.exports = EmailManager;


----------------------------------------------------------------------------------------------------------------

BACKTESTING

// ========== MOTOR DE BACKTESTING HISTÓRICO ==========
const fs = require('fs').promises
const path = require('path')
const config = require("../strategies/config") // ✅ CORRECTO

class BacktestEngine {
  constructor(strategyManager) {
    this.strategyManager = strategyManager
    this.historicalData = new Map()
    this.backtestResults = []
    this.isRunning = false
  }

  async loadHistoricalData(pair, startDate, endDate) {
    try {
      const dataPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, `${pair.replace('/', '_')}.json`)
      
      // Intentar cargar datos existentes
      try {
        const data = await fs.readFile(dataPath, 'utf8')
        const historicalData = JSON.parse(data)
        
        // Filtrar por rango de fechas
        const filteredData = historicalData.filter(point => {
          const timestamp = new Date(point.timestamp).getTime()
          return timestamp >= startDate.getTime() && timestamp <= endDate.getTime()
        })
        
        this.historicalData.set(pair, filteredData)
        console.log(`📊 Cargados ${filteredData.length} puntos de datos históricos para ${pair}`)
        
        return filteredData
      } catch (fileError) {
        // Si no hay datos históricos, generar datos simulados
        console.log(`⚠️ No se encontraron datos históricos para ${pair}, generando datos simulados...`)
        const simulatedData = this.generateSimulatedData(pair, startDate, endDate)
        this.historicalData.set(pair, simulatedData)
        
        // Guardar datos simulados para uso futuro
        await this.saveHistoricalData(pair, simulatedData)
        
        return simulatedData
      }
    } catch (error) {
      console.error(`❌ Error cargando datos históricos para ${pair}:`, error)
      throw error
    }
  }

  generateSimulatedData(pair, startDate, endDate) {
    const data = []
    const basePrice = this.getBasePriceForPair(pair)
    let currentPrice = basePrice
    
    const totalMinutes = (endDate.getTime() - startDate.getTime()) / (1000 * 60)
    const interval = 5 // 5 minutos entre puntos de datos
    
    for (let i = 0; i < totalMinutes; i += interval) {
      const timestamp = new Date(startDate.getTime() + i * 60 * 1000)
      
      // Simular movimiento de precio con volatilidad
      const volatility = 0.02 // 2% volatilidad
      const randomChange = (Math.random() - 0.5) * volatility
      currentPrice *= (1 + randomChange)
      
      // Simular datos de ambos exchanges con spread
      const spread = (Math.random() * 0.01) + 0.001 // 0.1% - 1.1% spread
      const binancePrice = currentPrice * (1 - spread / 2)
      const kucoinPrice = currentPrice * (1 + spread / 2)
      
      data.push({
        timestamp: timestamp.toISOString(),
        pair,
        binance: {
          price: binancePrice,
          volume: Math.random() * 1000000,
        },
        kucoin: {
          price: kucoinPrice,
          volume: Math.random() * 800000,
        },
        spread: ((kucoinPrice - binancePrice) / binancePrice) * 100,
        volatility: this.calculateVolatility(data.slice(-20).map(d => d.binance.price)),
      })
    }
    
    return data
  }

  getBasePriceForPair(pair) {
    const basePrices = {
      'POL/USDT': 0.45,
      'USDC/USDT': 1.0,
      'BTC/USDT': 45000,
      'ETH/USDT': 3000,
    }
    return basePrices[pair] || 1.0
  }

  calculateVolatility(prices) {
    if (prices.length < 2) return 0
    
    const returns = []
    for (let i = 1; i < prices.length; i++) {
      returns.push((prices[i] - prices[i-1]) / prices[i-1])
    }
    
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    
    return Math.sqrt(variance)
  }

  async runBacktest(options = {}) {
    const {
      pairs = config.TRADING_PAIRS.map(p => p.symbol),
      startDate = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 días atrás
      endDate = new Date(),
      initialBalance = config.BACKTESTING.INITIAL_BALANCE_SIM,
      strategy = 'BALANCED',
      maxTrades = 100,
    } = options

    if (this.isRunning) {
      throw new Error('Ya hay un backtest en ejecución')
    }

    this.isRunning = true
    console.log(`🔄 Iniciando backtest: ${startDate.toDateString()} - ${endDate.toDateString()}`)

    try {
      const results = {
        id: Date.now(),
        startDate,
        endDate,
        strategy,
        initialBalance,
        pairs,
        trades: [],
        performance: {},
        summary: {},
        timestamp: new Date(),
      }

      // Cargar datos históricos para todos los pares
      for (const pair of pairs) {
        await this.loadHistoricalData(pair, startDate, endDate)
      }

      // Simular trading
      const simulation = await this.simulateTrading(results, maxTrades)
      results.trades = simulation.trades
      results.performance = simulation.performance
      results.summary = this.calculateSummary(simulation)

      this.backtestResults.push(results)
      
      console.log(`✅ Backtest completado: ${results.trades.length} trades simulados`)
      console.log(`📊 Rendimiento: ${results.summary.totalReturn.toFixed(2)}%`)

      // Guardar resultados
      await this.saveBacktestResults(results)

      return results
    } catch (error) {
      console.error('❌ Error en backtest:', error)
      throw error
    } finally {
      this.isRunning = false
    }
  }

  async simulateTrading(backtestConfig, maxTrades) {
    const trades = []
    let currentBalance = backtestConfig.initialBalance
    let totalFees = 0
    const balanceHistory = []

    // Obtener todos los puntos de datos ordenados por tiempo
    const allDataPoints = []
    for (const pair of backtestConfig.pairs) {
      const pairData = this.historicalData.get(pair) || []
      pairData.forEach(point => {
        allDataPoints.push({ ...point, pair })
      })
    }

    allDataPoints.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp))

    console.log(`📈 Simulando trading con ${allDataPoints.length} puntos de datos...`)

    for (let i = 0; i < allDataPoints.length && trades.length < maxTrades; i++) {
      const dataPoint = allDataPoints[i]
      
      // Simular detección de oportunidad
      const opportunity = this.simulateOpportunityDetection(dataPoint)
      
      if (opportunity && opportunity.profitable) {
        // Evaluar con la estrategia seleccionada
        const evaluatedOpp = this.strategyManager.strategies.get(backtestConfig.strategy)?.evaluate(opportunity)
        
        if (evaluatedOpp && currentBalance >= evaluatedOpp.tradeAmount) {
          // Simular ejecución del trade
          const tradeResult = this.simulateTradeExecution(evaluatedOpp, dataPoint)
          
          if (tradeResult.success) {
            const fees = evaluatedOpp.tradeAmount * (config.BACKTESTING.FEE_PERCENTAGE_SIM / 100)
            const netProfit = tradeResult.profit - fees
            
            currentBalance += netProfit
            totalFees += fees
            
            trades.push({
              timestamp: dataPoint.timestamp,
              pair: dataPoint.pair,
              type: 'ARBITRAGE',
              amount: evaluatedOpp.tradeAmount,
              profit: netProfit,
              fees,
              balance: currentBalance,
              strategy: backtestConfig.strategy,
              confidence: evaluatedOpp.confidence,
            })
          }
        }
      }

      // Registrar balance cada 100 puntos
      if (i % 100 === 0) {
        balanceHistory.push({
          timestamp: dataPoint.timestamp,
          balance: currentBalance,
        })
      }
    }

    return {
      trades,
      performance: {
        initialBalance: backtestConfig.initialBalance,
        finalBalance: currentBalance,
        totalFees,
        balanceHistory,
      }
    }
  }

  simulateOpportunityDetection(dataPoint) {
    const binancePrice = dataPoint.binance.price
    const kucoinPrice = dataPoint.kucoin.price
    
    if (!binancePrice || !kucoinPrice) return null

    // Calcular oportunidad de arbitraje
    const spread = Math.abs(kucoinPrice - binancePrice)
    const spreadPercent = (spread / Math.min(binancePrice, kucoinPrice)) * 100
    
    // Determinar dirección del arbitraje
    const buyExchange = binancePrice < kucoinPrice ? 'BINANCE' : 'KUCOIN'
    const sellExchange = binancePrice < kucoinPrice ? 'KUCOIN' : 'BINANCE'
    const buyPrice = Math.min(binancePrice, kucoinPrice)
    const sellPrice = Math.max(binancePrice, kucoinPrice)
    
    // Simular fees y costos
    const tradingFees = 0.2 // 0.2% total en fees
    const netProfit = spreadPercent - tradingFees
    
    return {
      pair: dataPoint.pair,
      buyExchange,
      sellExchange,
      buyPrice,
      sellPrice,
      spread: spreadPercent,
      finalProfit: netProfit,
      profitable: netProfit > 0.1, // Mínimo 0.1% profit
      confidence: Math.min(0.9, Math.max(0.1, netProfit / 2)), // Confianza basada en profit
      tradeAmount: 50, // Monto fijo para simulación
      timestamp: new Date(dataPoint.timestamp).getTime(),
    }
  }

  simulateTradeExecution(opportunity, dataPoint) {
    // Simular éxito/fallo basado en condiciones de mercado
    const volatility = dataPoint.volatility || 0
    const volume = Math.min(dataPoint.binance.volume, dataPoint.kucoin.volume)
    
    // Factores que afectan el éxito
    let successProbability = 0.8 // Base 80%
    
    // Reducir probabilidad con alta volatilidad
    if (volatility > 0.05) successProbability -= 0.2
    
    // Reducir probabilidad con bajo volumen
    if (volume < 100000) successProbability -= 0.1
    
    // Aumentar probabilidad con alto profit
    if (opportunity.finalProfit > 1.0) successProbability += 0.1
    
    const success = Math.random() < successProbability
    
    if (success) {
      // Simular slippage
      const slippage = Math.random() * 0.1 // Hasta 0.1% slippage
      const actualProfit = (opportunity.finalProfit - slippage) * opportunity.tradeAmount / 100
      
      return {
        success: true,
        profit: Math.max(0, actualProfit),
        executionTime: Math.random() * 30000 + 5000, // 5-35 segundos
      }
    } else {
      return {
        success: false,
        profit: 0,
        reason: 'Fallo en ejecución simulada',
      }
    }
  }

  calculateSummary(simulation) {
    const { trades, performance } = simulation
    const { initialBalance, finalBalance, totalFees } = performance
    
    const successfulTrades = trades.filter(t => t.profit > 0)
    const totalProfit = trades.reduce((sum, t) => sum + t.profit, 0)
    const totalReturn = ((finalBalance - initialBalance) / initialBalance) * 100
    
    const profitableTrades = trades.filter(t => t.profit > 0)
    const losingTrades = trades.filter(t => t.profit <= 0)
    
    const avgProfit = profitableTrades.length > 0 
      ? profitableTrades.reduce((sum, t) => sum + t.profit, 0) / profitableTrades.length 
      : 0
    
    const avgLoss = losingTrades.length > 0 
      ? Math.abs(losingTrades.reduce((sum, t) => sum + t.profit, 0)) / losingTrades.length 
      : 0

    const maxDrawdown = this.calculateMaxDrawdown(performance.balanceHistory)
    const sharpeRatio = this.calculateSharpeRatio(trades)
    
    return {
      totalTrades: trades.length,
      successfulTrades: successfulTrades.length,
      successRate: trades.length > 0 ? (successfulTrades.length / trades.length) * 100 : 0,
      totalProfit,
      totalReturn,
      totalFees,
      avgProfit,
      avgLoss,
      profitFactor: avgLoss > 0 ? avgProfit / avgLoss : 0,
      maxDrawdown,
      sharpeRatio,
      finalBalance,
      roi: totalReturn,
    }
  }

  calculateMaxDrawdown(balanceHistory) {
    if (balanceHistory.length < 2) return 0
    
    let maxDrawdown = 0
    let peak = balanceHistory[0].balance
    
    for (const point of balanceHistory) {
      if (point.balance > peak) {
        peak = point.balance
      } else {
        const drawdown = ((peak - point.balance) / peak) * 100
        maxDrawdown = Math.max(maxDrawdown, drawdown)
      }
    }
    
    return maxDrawdown
  }

  calculateSharpeRatio(trades) {
    if (trades.length < 2) return 0
    
    const returns = trades.map(t => (t.profit / t.amount) * 100)
    const avgReturn = returns.reduce((a, b) => a + b) / returns.length
    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length
    const stdDev = Math.sqrt(variance)
    
    return stdDev > 0 ? avgReturn / stdDev : 0
  }

  async saveHistoricalData(pair, data) {
    try {
      const dataPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, `${pair.replace('/', '_')}.json`)
      
      // Crear directorio si no existe
      await fs.mkdir(path.dirname(dataPath), { recursive: true })
      
      await fs.writeFile(dataPath, JSON.stringify(data, null, 2))
      console.log(`💾 Datos históricos guardados para ${pair}`)
    } catch (error) {
      console.error(`❌ Error guardando datos históricos para ${pair}:`, error)
    }
  }

  async saveBacktestResults(results) {
    try {
      const resultsPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, 'backtest_results.json')
      
      // Cargar resultados existentes
      let existingResults = []
      try {
        const data = await fs.readFile(resultsPath, 'utf8')
        existingResults = JSON.parse(data)
      } catch (error) {
        // Archivo no existe, usar array vacío
      }
      
      existingResults.push(results)
      
      // Mantener solo los últimos 50 resultados
      if (existingResults.length > 50) {
        existingResults = existingResults.slice(-50)
      }
      
      await fs.writeFile(resultsPath, JSON.stringify(existingResults, null, 2))
      console.log('💾 Resultados de backtest guardados')
    } catch (error) {
      console.error('❌ Error guardando resultados de backtest:', error)
    }
  }

  async getBacktestHistory() {
    try {
      const resultsPath = path.join(config.BACKTESTING.HISTORICAL_DATA_PATH, 'backtest_results.json')
      const data = await fs.readFile(resultsPath, 'utf8')
      return JSON.parse(data)
    } catch (error) {
      return []
    }
  }

  compareStrategies(backtestResults) {
    const strategyPerformance = new Map()
    
    for (const result of backtestResults) {
      const strategy = result.strategy
      if (!strategyPerformance.has(strategy)) {
        strategyPerformance.set(strategy, {
          backtests: 0,
          avgReturn: 0,
          avgSharpe: 0,
          avgSuccessRate: 0,
          totalReturn: 0,
        })
      }
      
      const perf = strategyPerformance.get(strategy)
      perf.backtests++
      perf.totalReturn += result.summary.totalReturn
      perf.avgReturn = perf.totalReturn / perf.backtests
      perf.avgSharpe = (perf.avgSharpe * (perf.backtests - 1) + result.summary.sharpeRatio) / perf.backtests
      perf.avgSuccessRate = (perf.avgSuccessRate * (perf.backtests - 1) + result.summary.successRate) / perf.backtests
    }
    
    return Object.fromEntries(strategyPerformance)
  }
}

module.exports = { BacktestEngine }

-------------------------------------------------------------------------------------------------------------

const fs = require('fs').promises;
const path = require('path');
const EventEmitter = require('events');

/**
 * Motor de Backtesting
 * Permite probar estrategias con datos históricos
 */
class BacktestEngine extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.BACKTESTING.ENABLED;
        this.dataSource = config.BACKTESTING.DATA_SOURCE;
        this.defaultPeriod = config.BACKTESTING.DEFAULT_PERIOD;
        this.commissionRate = config.BACKTESTING.COMMISSION_RATE;
        this.slippageRate = config.BACKTESTING.SLIPPAGE_RATE;
        this.initialCapital = config.BACKTESTING.INITIAL_CAPITAL;
        this.benchmark = config.BACKTESTING.BENCHMARK;
        this.metrics = config.BACKTESTING.METRICS;
        this.monteCarloSimulations = config.BACKTESTING.MONTE_CARLO_SIMULATIONS;
        this.confidenceIntervals = config.BACKTESTING.CONFIDENCE_INTERVALS;
        
        this.historicalData = {};
        this.backtestResults = {};
        this.currentBacktest = null;
        
        this.logger = console;
    }
    
    /**
     * Inicializa el motor de backtesting
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('Backtesting deshabilitado');
            return;
        }
        
        this.logger.info('Inicializando motor de backtesting...');
        
        try {
            // Crear directorio de datos si no existe
            await this.ensureDataDirectory();
            
            // Cargar datos históricos iniciales
            await this.loadInitialData();
            
            this.logger.info('Motor de backtesting inicializado correctamente');
        } catch (error) {
            this.logger.error('Error inicializando motor de backtesting:', error);
            throw error;
        }
    }
    
    /**
     * Asegura que el directorio de datos exista
     */
    async ensureDataDirectory() {
        const dataDir = path.join(__dirname, 'data');
        try {
            await fs.mkdir(dataDir, { recursive: true });
        } catch (error) {
            if (error.code !== 'EEXIST') {
                throw error;
            }
        }
    }
    
    /**
     * Carga datos históricos iniciales
     */
    async loadInitialData() {
        try {
            // En una implementación real, aquí cargaríamos datos históricos de una API o archivos
            // Para esta implementación, generaremos datos simulados
            
            const pairs = this.config.TRADING_PAIRS;
            const exchanges = Object.keys(this.config.EXCHANGES)
                .filter(key => this.config.EXCHANGES[key].enabled)
                .map(key => this.config.EXCHANGES[key].name);
            
            for (const pair of pairs) {
                this.historicalData[pair] = {};
                
                for (const exchange of exchanges) {
                    this.historicalData[pair][exchange] = await this.generateHistoricalData(pair, exchange);
                }
            }
            
            this.logger.info(`Datos históricos cargados para ${pairs.length} pares en ${exchanges.length} exchanges`);
        } catch (error) {
            this.logger.error('Error cargando datos históricos:', error);
            throw error;
        }
    }
    
    /**
     * Genera datos históricos simulados
     * @param {string} pair - Par de trading
     * @param {string} exchange - Exchange
     * @returns {Array} - Datos históricos simulados
     */
    async generateHistoricalData(pair, exchange) {
        const days = this.defaultPeriod;
        const dataPoints = days * 24 * 6; // 6 puntos por hora
        const endDate = new Date();
        const data = [];
        
        // Generar precio base según el par
        let basePrice;
        if (pair.includes('BTC')) {
            basePrice = 30000 + Math.random() * 10000;
        } else if (pair.includes('ETH')) {
            basePrice = 2000 + Math.random() * 500;
        } else if (pair.includes('XRP')) {
            basePrice = 0.5 + Math.random() * 0.2;
        } else {
            basePrice = 10 + Math.random() * 90;
        }
        
        // Añadir variación por exchange
        if (exchange === 'Binance') {
            basePrice *= 1.0;
        } else if (exchange === 'Coinbase') {
            basePrice *= 1.005;
        } else if (exchange === 'Kraken') {
            basePrice *= 0.995;
        } else {
            basePrice *= 1.002;
        }
        
        // Generar serie temporal
        let currentPrice = basePrice;
        for (let i = 0; i < dataPoints; i++) {
            const timestamp = new Date(endDate.getTime() - (dataPoints - i) * 10 * 60 * 1000); // 10 minutos
            
            // Simular movimiento de precio
            const change = (Math.random() - 0.5) * 0.01; // ±0.5%
            currentPrice = currentPrice * (1 + change);
            
            // Añadir algo de volatilidad según el par
            if (pair.includes('BTC')) {
                currentPrice += (Math.random() - 0.5) * 50;
            } else if (pair.includes('ETH')) {
                currentPrice += (Math.random() - 0.5) * 10;
            } else {
                currentPrice += (Math.random() - 0.5) * 0.05;
            }
            
            // Asegurar que el precio no sea negativo
            currentPrice = Math.max(currentPrice, 0.001);
            
            // Generar volumen simulado
            let volume;
            if (pair.includes('BTC')) {
                volume = Math.random() * 10 + 1;
            } else if (pair.includes('ETH')) {
                volume = Math.random() * 50 + 5;
            } else {
                volume = Math.random() * 100000 + 10000;
            }
            
            // Añadir datos
            data.push({
                timestamp: timestamp.toISOString(),
                open: currentPrice * (1 - 0.001),
                high: currentPrice * (1 + 0.002),
                low: currentPrice * (1 - 0.002),
                close: currentPrice,
                volume: volume,
                exchange
            });
        }
        
        return data;
    }
    
    /**
     * Ejecuta un backtest con una estrategia específica
     * @param {Object} options - Opciones del backtest
     * @returns {Object} - Resultados del backtest
     */
    async runBacktest(options) {
        if (!this.enabled) {
            throw new Error('Backtesting está deshabilitado');
        }
        
        const {
            strategy = 'basic',
            pairs = this.config.TRADING_PAIRS,
            exchanges = Object.keys(this.config.EXCHANGES)
                .filter(key => this.config.EXCHANGES[key].enabled)
                .map(key => this.config.EXCHANGES[key].name),
            startDate = new Date(Date.now() - this.defaultPeriod * 24 * 60 * 60 * 1000),
            endDate = new Date(),
            initialCapital = this.initialCapital,
            parameters = {}
        } = options;
        
        this.logger.info(`Iniciando backtest para estrategia ${strategy}...`);
        
        try {
            // Crear ID único para este backtest
            const backtestId = `backtest_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            
            // Inicializar estado del backtest
            this.currentBacktest = {
                id: backtestId,
                strategy,
                pairs,
                exchanges,
                startDate,
                endDate,
                initialCapital,
                parameters,
                status: 'running',
                progress: 0,
                trades: [],
                balance: initialCapital,
                equity: initialCapital,
                startTime: new Date()
            };
            
            // Emitir evento de inicio
            this.emit('backtestStarted', { id: backtestId });
            
            // Filtrar datos históricos según fechas y pares/exchanges
            const filteredData = await this.filterHistoricalData(pairs, exchanges, startDate, endDate);
            
            // Ejecutar simulación
            const result = await this.simulateStrategy(strategy, filteredData, initialCapital, parameters);
            
            // Calcular métricas
            const metrics = this.calculateMetrics(result);
            
            // Ejecutar simulaciones de Monte Carlo
            const monteCarloResults = await this.runMonteCarloSimulations(result);
            
            // Guardar resultados
            this.backtestResults[backtestId] = {
                ...this.currentBacktest,
                status: 'completed',
                progress: 100,
                result,
                metrics,
                monteCarloResults,
                endTime: new Date(),
                executionTime: new Date() - this.currentBacktest.startTime
            };
            
            // Emitir evento de finalización
            this.emit('backtestCompleted', { 
                id: backtestId,
                metrics,
                executionTime: this.backtestResults[backtestId].executionTime
            });
            
            this.currentBacktest = null;
            
            return this.backtestResults[backtestId];
        } catch (error) {
            this.logger.error('Error ejecutando backtest:', error);
            
            if (this.currentBacktest) {
                this.backtestResults[this.currentBacktest.id] = {
                    ...this.currentBacktest,
                    status: 'failed',
                    error: error.message,
                    endTime: new Date(),
                    executionTime: new Date() - this.currentBacktest.startTime
                };
                
                // Emitir evento de error
                this.emit('backtestError', { 
                    id: this.currentBacktest.id,
                    error: error.message
                });
                
                this.currentBacktest = null;
            }
            
            throw error;
        }
    }
    
    /**
     * Filtra datos históricos según criterios
     * @param {Array} pairs - Pares de trading
     * @param {Array} exchanges - Exchanges
     * @param {Date} startDate - Fecha de inicio
     * @param {Date} endDate - Fecha de fin
     * @returns {Object} - Datos históricos filtrados
     */
    async filterHistoricalData(pairs, exchanges, startDate, endDate) {
        const filteredData = {};
        
        for (const pair of pairs) {
            if (!this.historicalData[pair]) continue;
            
            filteredData[pair] = {};
            
            for (const exchange of exchanges) {
                if (!this.historicalData[pair][exchange]) continue;
                
                // Filtrar por fecha
                filteredData[pair][exchange] = this.historicalData[pair][exchange].filter(data => {
                    const timestamp = new Date(data.timestamp);
                    return timestamp >= startDate && timestamp <= endDate;
                });
            }
        }
        
        return filteredData;
    }
    
    /**
     * Simula una estrategia con datos históricos
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} data - Datos históricos
     * @param {number} initialCapital - Capital inicial
     * @param {Object} parameters - Parámetros de la estrategia
     * @returns {Object} - Resultados de la simulación
     */
    async simulateStrategy(strategyName, data, initialCapital, parameters) {
        // Obtener configuración de la estrategia
        const strategyConfig = this.config.STRATEGIES[strategyName.toUpperCase()] || this.config.STRATEGIES.BASIC;
        
        // Inicializar resultado
        const result = {
            trades: [],
            balanceHistory: [],
            equityHistory: [],
            positions: {},
            currentBalance: initialCapital,
            maxBalance: initialCapital,
            minBalance: initialCapital,
            finalBalance: initialCapital,
            totalTrades: 0,
            successfulTrades: 0,
            failedTrades: 0,
            totalProfit: 0,
            totalLoss: 0,
            netProfit: 0,
            winRate: 0,
            maxDrawdown: 0,
            maxDrawdownPercentage: 0
        };
        
        // Ordenar todos los datos por timestamp
        const allDataPoints = [];
        
        for (const pair in data) {
            for (const exchange in data[pair]) {
                for (const point of data[pair][exchange]) {
                    allDataPoints.push({
                        ...point,
                        pair,
                        exchange
                    });
                }
            }
        }
        
        // Ordenar por timestamp
        allDataPoints.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
        
        // Inicializar balance histórico
        result.balanceHistory.push({
            timestamp: allDataPoints[0]?.timestamp || new Date().toISOString(),
            balance: initialCapital
        });
        
        result.equityHistory.push({
            timestamp: allDataPoints[0]?.timestamp || new Date().toISOString(),
            equity: initialCapital
        });
        
        // Simular trading
        let lastProgressUpdate = 0;
        
        for (let i = 0; i < allDataPoints.length; i++) {
            // Actualizar progreso cada 5%
            const progress = Math.floor((i / allDataPoints.length) * 100);
            if (progress >= lastProgressUpdate + 5) {
                lastProgressUpdate = progress;
                if (this.currentBacktest) {
                    this.currentBacktest.progress = progress;
                    this.emit('backtestProgress', { 
                        id: this.currentBacktest.id,
                        progress
                    });
                }
            }
            
            const currentPoint = allDataPoints[i];
            const { pair, exchange, timestamp, close: price } = currentPoint;
            
            // Buscar oportunidades de arbitraje
            const opportunities = await this.findArbitrageOpportunities(allDataPoints, i, strategyName, strategyConfig);
            
            // Ejecutar operaciones para oportunidades encontradas
            for (const opportunity of opportunities) {
                const trade = await this.executeTrade(opportunity, result.currentBalance, timestamp);
                
                if (trade) {
                    // Actualizar balance
                    result.currentBalance += trade.profit;
                    
                    // Actualizar estadísticas
                    result.totalTrades++;
                    if (trade.profit > 0) {
                        result.successfulTrades++;
                        result.totalProfit += trade.profit;
                    } else {
                        result.failedTrades++;
                        result.totalLoss += trade.profit; // Será negativo
                    }
                    
                    // Actualizar máximo y mínimo balance
                    result.maxBalance = Math.max(result.maxBalance, result.currentBalance);
                    result.minBalance = Math.min(result.minBalance, result.currentBalance);
                    
                    // Registrar operación
                    result.trades.push(trade);
                }
            }
            
            // Actualizar historial de balance cada hora simulada
            if (i % 6 === 0) { // Asumiendo 6 puntos por hora
                result.balanceHistory.push({
                    timestamp,
                    balance: result.currentBalance
                });
                
                // Calcular equity (balance + valor de posiciones abiertas)
                let equity = result.currentBalance;
                
                // Añadir valor de posiciones abiertas (si las hubiera)
                for (const positionPair in result.positions) {
                    for (const positionExchange in result.positions[positionPair]) {
                        const position = result.positions[positionPair][positionExchange];
                        // En este ejemplo simplificado no manejamos posiciones abiertas
                    }
                }
                
                result.equityHistory.push({
                    timestamp,
                    equity
                });
            }
        }
        
        // Finalizar resultado
        result.finalBalance = result.currentBalance;
        result.netProfit = result.totalProfit + result.totalLoss;
        result.winRate = result.totalTrades > 0 ? result.successfulTrades / result.totalTrades : 0;
        
        // Calcular drawdown
        let peak = initialCapital;
        let maxDrawdown = 0;
        let maxDrawdownPercentage = 0;
        
        for (const point of result.balanceHistory) {
            if (point.balance > peak) {
                peak = point.balance;
            } else {
                const drawdown = peak - point.balance;
                const drawdownPercentage = drawdown / peak;
                
                if (drawdown > maxDrawdown) {
                    maxDrawdown = drawdown;
                    maxDrawdownPercentage = drawdownPercentage;
                }
            }
        }
        
        result.maxDrawdown = maxDrawdown;
        result.maxDrawdownPercentage = maxDrawdownPercentage;
        
        return result;
    }
    
    /**
     * Busca oportunidades de arbitraje en datos históricos
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} strategyConfig - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findArbitrageOpportunities(dataPoints, currentIndex, strategyName, strategyConfig) {
        const opportunities = [];
        const currentPoint = dataPoints[currentIndex];
        const { timestamp } = currentPoint;
        
        // Obtener precios actuales para todos los pares y exchanges
        const currentPrices = {};
        
        // Buscar en un rango cercano al punto actual (simulando datos simultáneos)
        const rangeStart = Math.max(0, currentIndex - 10);
        const rangeEnd = Math.min(dataPoints.length - 1, currentIndex + 10);
        
        for (let i = rangeStart; i <= rangeEnd; i++) {
            const point = dataPoints[i];
            const { pair, exchange, close: price } = point;
            
            if (!currentPrices[pair]) {
                currentPrices[pair] = {};
            }
            
            currentPrices[pair][exchange] = price;
        }
        
        // Buscar oportunidades según la estrategia
        switch (strategyName.toLowerCase()) {
            case 'basic':
                return this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                
            case 'triangular':
                return this.findTriangularArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                
            case 'statistical':
                return this.findStatisticalArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
            case 'ml':
                return this.findMLArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
            case 'combined':
                // Combinar resultados de varias estrategias
                const basicOpps = await this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                const triangularOpps = await this.findTriangularArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
                const statisticalOpps = await this.findStatisticalArbitrageOpportunities(currentPrices, dataPoints, currentIndex, strategyConfig);
                
                return [...basicOpps, ...triangularOpps, ...statisticalOpps];
                
            default:
                return this.findBasicArbitrageOpportunities(currentPrices, timestamp, strategyConfig);
        }
    }
    
    /**
     * Busca oportunidades de arbitraje básico
     * @param {Object} prices - Precios actuales
     * @param {string} timestamp - Timestamp actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findBasicArbitrageOpportunities(prices, timestamp, config) {
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.2;
        
        for (const pair in prices) {
            const exchanges = Object.keys(prices[pair]);
            
            // Necesitamos al menos 2 exchanges para arbitraje
            if (exchanges.length < 2) continue;
            
            // Encontrar el exchange con el precio más bajo y más alto
            let lowestPrice = Infinity;
            let highestPrice = -Infinity;
            let buyExchange = null;
            let sellExchange = null;
            
            for (const exchange of exchanges) {
                const price = prices[pair][exchange];
                
                if (price < lowestPrice) {
                    lowestPrice = price;
                    buyExchange = exchange;
                }
                
                if (price > highestPrice) {
                    highestPrice = price;
                    sellExchange = exchange;
                }
            }
            
            // Calcular ganancia potencial
            const profitPercentage = ((highestPrice - lowestPrice) / lowestPrice) * 100;
            
            // Verificar si la ganancia supera el mínimo requerido
            if (profitPercentage >= minProfitPercentage && buyExchange !== sellExchange) {
                opportunities.push({
                    type: 'basic',
                    pair,
                    buyExchange,
                    sellExchange,
                    buyPrice: lowestPrice,
                    sellPrice: highestPrice,
                    profitPercentage,
                    timestamp
                });
            }
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje triangular
     * @param {Object} prices - Precios actuales
     * @param {string} timestamp - Timestamp actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findTriangularArbitrageOpportunities(prices, timestamp, config) {
        // En una implementación real, aquí buscaríamos oportunidades de arbitraje triangular
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.15;
        
        // Simular algunas oportunidades triangulares
        if (Math.random() < 0.05) { // 5% de probabilidad de encontrar una oportunidad
            const profitPercentage = minProfitPercentage + Math.random() * 0.5;
            
            // Elegir pares y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 2) return opportunities;
            
            const pair1 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            let pair2 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            while (pair2 === pair1) {
                pair2 = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            }
            
            const availableExchanges = Object.keys(prices[pair1]);
            if (availableExchanges.length < 1) return opportunities;
            
            const exchange = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            
            opportunities.push({
                type: 'triangular',
                pairs: [pair1, pair2],
                exchange,
                steps: [
                    { pair: pair1, action: 'buy', price: prices[pair1][exchange] || 1000 },
                    { pair: pair2, action: 'sell', price: prices[pair2][exchange] || 1000 }
                ],
                profitPercentage,
                timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje estadístico
     * @param {Object} prices - Precios actuales
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findStatisticalArbitrageOpportunities(prices, dataPoints, currentIndex, config) {
        // En una implementación real, aquí buscaríamos oportunidades de arbitraje estadístico
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const minProfitPercentage = config.minProfitPercentage || 0.1;
        const lookbackPeriod = config.lookbackPeriod || 100;
        const zScoreThreshold = config.zScoreThreshold || 2.0;
        
        // Simular algunas oportunidades estadísticas
        if (Math.random() < 0.03) { // 3% de probabilidad de encontrar una oportunidad
            const profitPercentage = minProfitPercentage + Math.random() * 0.3;
            
            // Elegir par y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 1) return opportunities;
            
            const pair = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            
            const availableExchanges = Object.keys(prices[pair]);
            if (availableExchanges.length < 2) return opportunities;
            
            const exchange1 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            let exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            while (exchange2 === exchange1) {
                exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            }
            
            opportunities.push({
                type: 'statistical',
                pair,
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[pair][exchange1] || 1000,
                sellPrice: prices[pair][exchange2] || 1000,
                zScore: zScoreThreshold + Math.random(),
                profitPercentage,
                timestamp: dataPoints[currentIndex].timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje con ML
     * @param {Object} prices - Precios actuales
     * @param {Array} dataPoints - Puntos de datos históricos
     * @param {number} currentIndex - Índice actual
     * @param {Object} config - Configuración de la estrategia
     * @returns {Array} - Oportunidades encontradas
     */
    async findMLArbitrageOpportunities(prices, dataPoints, currentIndex, config) {
        // En una implementación real, aquí usaríamos un modelo de ML para encontrar oportunidades
        // Para esta implementación, simularemos algunas oportunidades
        
        const opportunities = [];
        const confidenceThreshold = config.confidenceThreshold || 0.7;
        
        // Simular algunas oportunidades basadas en ML
        if (Math.random() < 0.02) { // 2% de probabilidad de encontrar una oportunidad
            const confidence = confidenceThreshold + Math.random() * (1 - confidenceThreshold);
            const profitPercentage = 0.1 + Math.random() * 0.4;
            
            // Elegir par y exchanges aleatorios
            const availablePairs = Object.keys(prices);
            if (availablePairs.length < 1) return opportunities;
            
            const pair = availablePairs[Math.floor(Math.random() * availablePairs.length)];
            
            const availableExchanges = Object.keys(prices[pair]);
            if (availableExchanges.length < 2) return opportunities;
            
            const exchange1 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            let exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            while (exchange2 === exchange1) {
                exchange2 = availableExchanges[Math.floor(Math.random() * availableExchanges.length)];
            }
            
            opportunities.push({
                type: 'ml',
                pair,
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[pair][exchange1] || 1000,
                sellPrice: prices[pair][exchange2] || 1000,
                confidence,
                profitPercentage,
                timestamp: dataPoints[currentIndex].timestamp
            });
        }
        
        return opportunities;
    }
    
    /**
     * Ejecuta una operación simulada
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {number} balance - Balance actual
     * @param {string} timestamp - Timestamp actual
     * @returns {Object|null} - Detalles de la operación o null si no se ejecutó
     */
    async executeTrade(opportunity, balance, timestamp) {
        // Determinar cantidad a invertir (10% del balance)
        const investmentAmount = balance * 0.1;
        
        // Verificar si hay suficiente balance
        if (investmentAmount < 10) { // Mínimo $10
            return null;
        }
        
        // Calcular comisiones
        const buyCommission = investmentAmount * this.commissionRate;
        const sellCommission = (investmentAmount * (1 + opportunity.profitPercentage / 100)) * this.commissionRate;
        
        // Calcular slippage
        const buySlippage = investmentAmount * this.slippageRate;
        const sellSlippage = (investmentAmount * (1 + opportunity.profitPercentage / 100)) * this.slippageRate;
        
        // Calcular ganancia neta
        const grossProfit = investmentAmount * (opportunity.profitPercentage / 100);
        const netProfit = grossProfit - buyCommission - sellCommission - buySlippage - sellSlippage;
        
        // Simular éxito/fallo (95% éxito)
        const success = Math.random() > 0.05;
        
        // Si falla, perder una parte de la inversión
        const finalProfit = success ? netProfit : -investmentAmount * 0.02;
        
        return {
            timestamp,
            type: opportunity.type,
            pair: opportunity.pair || (opportunity.pairs ? opportunity.pairs[0] : 'unknown'),
            buyExchange: opportunity.buyExchange || opportunity.exchange || 'unknown',
            sellExchange: opportunity.sellExchange || opportunity.exchange || 'unknown',
            buyPrice: opportunity.buyPrice || 0,
            sellPrice: opportunity.sellPrice || 0,
            investmentAmount,
            grossProfit,
            fees: buyCommission + sellCommission,
            slippage: buySlippage + sellSlippage,
            netProfit,
            profit: finalProfit,
            profitPercentage: (finalProfit / investmentAmount) * 100,
            success
        };
    }
    
    /**
     * Calcula métricas de rendimiento
     * @param {Object} result - Resultados del backtest
     * @returns {Object} - Métricas calculadas
     */
    calculateMetrics(result) {
        const metrics = {};
        
        // Total Return
        metrics.totalReturn = ((result.finalBalance - this.initialCapital) / this.initialCapital) * 100;
        
        // Annualized Return (asumiendo 365 días por año)
        const days = result.balanceHistory.length > 1 ? 
            (new Date(result.balanceHistory[result.balanceHistory.length - 1].timestamp) - 
             new Date(result.balanceHistory[0].timestamp)) / (1000 * 60 * 60 * 24) : 1;
        
        metrics.annualizedReturn = ((1 + metrics.totalReturn / 100) ** (365 / days) - 1) * 100;
        
        // Sharpe Ratio (asumiendo tasa libre de riesgo del 2%)
        const riskFreeRate = 0.02;
        const returns = [];
        
        for (let i = 1; i < result.balanceHistory.length; i++) {
            const prevBalance = result.balanceHistory[i - 1].balance;
            const currentBalance = result.balanceHistory[i].balance;
            returns.push((currentBalance - prevBalance) / prevBalance);
        }
        
        const avgReturn = returns.reduce((sum, r) => sum + r, 0) / returns.length;
        const stdReturn = Math.sqrt(returns.reduce((sum, r) => sum + (r - avgReturn) ** 2, 0) / returns.length);
        
        metrics.sharpeRatio = stdReturn !== 0 ? 
            (avgReturn - riskFreeRate / 365) / stdReturn * Math.sqrt(365) : 0;
        
        // Max Drawdown
       metrics.maxDrawdown = result.maxDrawdown;
        metrics.maxDrawdownPercentage = result.maxDrawdownPercentage * 100;
        
        // Win Rate
        metrics.winRate = result.winRate * 100;
        
        // Profit Factor
        metrics.profitFactor = result.totalLoss !== 0 ? 
            Math.abs(result.totalProfit / result.totalLoss) : 
            (result.totalProfit > 0 ? Infinity : 0);
        
        // Calmar Ratio
        metrics.calmarRatio = metrics.maxDrawdownPercentage !== 0 ? 
            metrics.annualizedReturn / metrics.maxDrawdownPercentage : 0;
        
        // Average Trade
        metrics.averageTrade = result.totalTrades > 0 ? 
            result.netProfit / result.totalTrades : 0;
        
        // Best Trade
        metrics.bestTrade = result.trades.length > 0 ? 
            Math.max(...result.trades.map(t => t.profit)) : 0;
        
        // Worst Trade
        metrics.worstTrade = result.trades.length > 0 ? 
            Math.min(...result.trades.map(t => t.profit)) : 0;
        
        // Average Win
        const winningTrades = result.trades.filter(t => t.profit > 0);
        metrics.averageWin = winningTrades.length > 0 ? 
            winningTrades.reduce((sum, t) => sum + t.profit, 0) / winningTrades.length : 0;
        
        // Average Loss
        const losingTrades = result.trades.filter(t => t.profit < 0);
        metrics.averageLoss = losingTrades.length > 0 ? 
            losingTrades.reduce((sum, t) => sum + t.profit, 0) / losingTrades.length : 0;
        
        // Largest Winning Streak
        let currentWinStreak = 0;
        let maxWinStreak = 0;
        
        for (const trade of result.trades) {
            if (trade.profit > 0) {
                currentWinStreak++;
                maxWinStreak = Math.max(maxWinStreak, currentWinStreak);
            } else {
                currentWinStreak = 0;
            }
        }
        
        metrics.largestWinningStreak = maxWinStreak;
        
        // Largest Losing Streak
        let currentLossStreak = 0;
        let maxLossStreak = 0;
        
        for (const trade of result.trades) {
            if (trade.profit < 0) {
                currentLossStreak++;
                maxLossStreak = Math.max(maxLossStreak, currentLossStreak);
            } else {
                currentLossStreak = 0;
            }
        }
        
        metrics.largestLosingStreak = maxLossStreak;
        
        return metrics;
    }
    
    /**
     * Ejecuta simulaciones de Monte Carlo
     * @param {Object} result - Resultados del backtest
     * @returns {Object} - Resultados de Monte Carlo
     */
    async runMonteCarloSimulations(result) {
        const simulations = [];
        const trades = result.trades;
        
        if (trades.length === 0) {
            return { simulations: [], statistics: {} };
        }
        
        // Extraer retornos de las operaciones
        const returns = trades.map(trade => trade.profit / this.initialCapital);
        
        // Ejecutar simulaciones
        for (let sim = 0; sim < this.monteCarloSimulations; sim++) {
            let balance = this.initialCapital;
            const simulationReturns = [];
            
            // Generar secuencia aleatoria de retornos
            for (let i = 0; i < trades.length; i++) {
                const randomReturn = returns[Math.floor(Math.random() * returns.length)];
                balance += balance * randomReturn;
                simulationReturns.push((balance - this.initialCapital) / this.initialCapital);
            }
            
            simulations.push({
                finalReturn: simulationReturns[simulationReturns.length - 1],
                maxDrawdown: this.calculateSimulationDrawdown(simulationReturns),
                returns: simulationReturns
            });
        }
        
        // Calcular estadísticas
        const finalReturns = simulations.map(sim => sim.finalReturn);
        const maxDrawdowns = simulations.map(sim => sim.maxDrawdown);
        
        finalReturns.sort((a, b) => a - b);
        maxDrawdowns.sort((a, b) => a - b);
        
        const statistics = {};
        
        // Intervalos de confianza para retorno final
        for (const confidence of this.confidenceIntervals) {
            const lowerIndex = Math.floor((1 - confidence) / 2 * finalReturns.length);
            const upperIndex = Math.floor((1 + confidence) / 2 * finalReturns.length);
            
            statistics[`finalReturn_${confidence * 100}%`] = {
                lower: finalReturns[lowerIndex] * 100,
                upper: finalReturns[upperIndex] * 100
            };
        }
        
        // Intervalos de confianza para máximo drawdown
        for (const confidence of this.confidenceIntervals) {
            const lowerIndex = Math.floor((1 - confidence) / 2 * maxDrawdowns.length);
            const upperIndex = Math.floor((1 + confidence) / 2 * maxDrawdowns.length);
            
            statistics[`maxDrawdown_${confidence * 100}%`] = {
                lower: maxDrawdowns[lowerIndex] * 100,
                upper: maxDrawdowns[upperIndex] * 100
            };
        }
        
        // Probabilidad de pérdida
        const lossCount = finalReturns.filter(r => r < 0).length;
        statistics.probabilityOfLoss = (lossCount / finalReturns.length) * 100;
        
        return { simulations, statistics };
    }
    
    /**
     * Calcula el drawdown para una simulación
     * @param {Array} returns - Retornos de la simulación
     * @returns {number} - Máximo drawdown
     */
    calculateSimulationDrawdown(returns) {
        let peak = 0;
        let maxDrawdown = 0;
        
        for (const returnValue of returns) {
            if (returnValue > peak) {
                peak = returnValue;
            } else {
                const drawdown = peak - returnValue;
                maxDrawdown = Math.max(maxDrawdown, drawdown);
            }
        }
        
        return maxDrawdown;
    }
    
    /**
     * Obtiene los resultados de un backtest
     * @param {string} backtestId - ID del backtest
     * @returns {Object|null} - Resultados del backtest
     */
    getBacktestResults(backtestId) {
        return this.backtestResults[backtestId] || null;
    }
    
    /**
     * Obtiene la lista de todos los backtests
     * @returns {Array} - Lista de backtests
     */
    getAllBacktests() {
        return Object.values(this.backtestResults);
    }
    
    /**
     * Obtiene el estado del backtest actual
     * @returns {Object|null} - Estado del backtest actual
     */
    getCurrentBacktestStatus() {
        return this.currentBacktest;
    }
    
    /**
     * Cancela el backtest actual
     */
    cancelCurrentBacktest() {
        if (this.currentBacktest) {
            this.backtestResults[this.currentBacktest.id] = {
                ...this.currentBacktest,
                status: 'cancelled',
                endTime: new Date(),
                executionTime: new Date() - this.currentBacktest.startTime
            };
            
            this.emit('backtestCancelled', { id: this.currentBacktest.id });
            this.currentBacktest = null;
        }
    }
}

module.exports = BacktestEngine;

--------------------------------------------------------------------------------------------------------------

// ========== GESTOR DE DATOS HISTÓRICOS PARA BACKTESTING ==========
const fs = require("fs").promises
const path = require("path")
const config = require("../config") // Ajusta la ruta según tu estructura
const { ExchangeManager } = require("../exchanges") // Ajusta la ruta

class HistoricalDataManager {
  constructor(exchangeManager) {
    this.dataDir = config.BACKTESTING.HISTORICAL_DATA_PATH || "./historical_data"
    this.exchangeManager = exchangeManager || new ExchangeManager() // Puede pasarse o crearse uno nuevo
    this.ensureDataDirExists()
  }

  async ensureDataDirExists() {
    try {
      await fs.mkdir(this.dataDir, { recursive: true })
      console.log(`Directorio de datos históricos asegurado: ${this.dataDir}`)
    } catch (error) {
      console.error(`Error creando directorio de datos históricos ${this.dataDir}:`, error)
    }
  }

  getFilePath(exchange, pair, date) {
    // Formato de fecha YYYY-MM-DD
    const dateString = date.toISOString().split("T")[0]
    const pairFilename = pair.replace("/", "_") // BTC/USDT -> BTC_USDT
    return path.join(this.dataDir, exchange, pairFilename, `${dateString}.json`)
  }

  async saveData(exchange, pair, date, data) {
    const filePath = this.getFilePath(exchange, pair, date)
    try {
      await fs.mkdir(path.dirname(filePath), { recursive: true })
      await fs.writeFile(filePath, JSON.stringify(data, null, 2))
      console.log(`Datos guardados para ${exchange} - ${pair} en ${filePath}`)
    } catch (error) {
      console.error(`Error guardando datos en ${filePath}:`, error)
    }
  }

  async loadData(exchange, pair, date) {
    const filePath = this.getFilePath(exchange, pair, date)
    try {
      const data = await fs.readFile(filePath, "utf-8")
      return JSON.parse(data)
    } catch (error) {
      if (error.code === "ENOENT") {
        // console.log(`No se encontraron datos para ${exchange} - ${pair} en ${filePath}`);
        return null
      }
      console.error(`Error cargando datos desde ${filePath}:`, error)
      return null
    }
  }

  // Ejemplo: Obtener datos de Klines (velas)
  // Binance API: /api/v3/klines
  // KuCoin API: /api/v1/market/candles
  async fetchAndStoreCandlestickData(exchange, pair, interval = "1m", startTime, endTime) {
    // Esta función necesitaría implementaciones específicas por exchange
    // y manejar paginación si es necesario.
    console.log(
      `Simulando obtención de datos de velas para ${exchange} - ${pair} de ${new Date(startTime)} a ${new Date(endTime)}`,
    )

    // Ejemplo simplificado: generar datos aleatorios para un día
    const date = new Date(startTime)
    const existingData = await this.loadData(exchange, pair, date)
    if (existingData) {
      console.log(`Datos para ${exchange} - ${pair} en ${date.toISOString().split("T")[0]} ya existen.`)
      return existingData
    }

    const mockCandles = []
    let currentTime = startTime
    while (currentTime < endTime) {
      const open = Math.random() * 100 + 1000 // Precio de apertura aleatorio
      const close = open + (Math.random() - 0.5) * 10
      const high = Math.max(open, close) + Math.random() * 5
      const low = Math.min(open, close) - Math.random() * 5
      const volume = Math.random() * 1000

      mockCandles.push([
        currentTime, // Open time
        open.toFixed(4), // Open
        high.toFixed(4), // High
        low.toFixed(4), // Low
        close.toFixed(4), // Close
        volume.toFixed(4), // Volume
        currentTime + (60000 - 1), // Close time (para intervalo de 1m)
        (volume * ((open + close) / 2)).toFixed(4), // Quote asset volume
        Math.floor(Math.random() * 100), // Number of trades
        (volume / 2).toFixed(4), // Taker buy base asset volume
        ((volume * ((open + close) / 2)) / 2).toFixed(4), // Taker buy quote asset volume
        "0", // Ignore
      ])
      currentTime += 60000 // Avanzar 1 minuto
    }

    await this.saveData(exchange, pair, date, mockCandles)
    return mockCandles
  }

  async getHistoricalRange(exchange, pair, startDate, endDate, interval = "1m") {
    let allData = []
    const currentDate = new Date(startDate)
    const finalDate = new Date(endDate)

    while (currentDate <= finalDate) {
      let dailyData = await this.loadData(exchange, pair, currentDate)
      if (!dailyData) {
        // Si no hay datos locales, intentar obtenerlos (si se implementa la lógica de fetch real)
        // Por ahora, para el ejemplo, podríamos simular o simplemente saltar.
        console.log(
          `No hay datos locales para ${exchange} - ${pair} en ${currentDate.toISOString().split("T")[0]}, intentando obtener...`,
        )
        dailyData = await this.fetchAndStoreCandlestickData(
          exchange,
          pair,
          interval,
          currentDate.getTime(),
          currentDate.getTime() + (24 * 60 * 60 * 1000 - 1),
        )
      }
      if (dailyData) {
        allData = allData.concat(dailyData)
      }
      currentDate.setDate(currentDate.getDate() + 1) // Siguiente día
    }
    return allData
  }
}

module.exports = { HistoricalDataManager }


-------------------------------------------------------------------------------------------------------------------

CONPONENTS

import React from "react";

export default function AlertBanner({ show, message }) {
  if (!show) return null;
  return (
    <span style={{ color: "#b22222", marginLeft: 8, fontWeight: "bold" }}>
      ⚠️ {message}
    </span>
  );
}

-----------------------------------------------------------------------------------------------------------------

import React, { useState } from "react";
import "./../index.css"; // Asegúrate de importar los estilos

const BotControls = () => {
  const [mode, setMode] = useState("simulacion"); // "simulacion" o "produccion"
  const [botRunning, setBotRunning] = useState(false);

  return (
    <div style={{ display: "flex", gap: "12px" }}>
      <button
        className={`btn btn-primary ${mode === "simulacion" ? "btn-active" : ""}`}
        onClick={() => setMode("simulacion")}
      >
        Cambiar a Simulación
      </button>
      <button
        className={`btn btn-primary ${mode === "produccion" ? "btn-active" : ""}`}
        onClick={() => setMode("produccion")}
      >
        Cambiar a Producción
      </button>
      <button
        className={`btn ${botRunning ? "btn-active btn-success" : "btn-success"}`}
        onClick={() => setBotRunning((prev) => !prev)}
      >
        {botRunning ? "Bot en marcha" : "Iniciar Bot"}
      </button>
    </div>
  );
};

export default BotControls;

-----------------------------------------------------------------------------------------------------------------

import React, { useState } from "react";

export default function EditTokenDialog({ pair, onEdit }) {
  const [open, setOpen] = useState(false);
  const [values, setValues] = useState({ ...pair });

  const handleChange = (field, value) => {
    setValues({ ...values, [field]: value });
  };

  const handleSave = () => {
    onEdit(values);
    setOpen(false);
  };

  return (
    <>
      <button onClick={() => setOpen(true)}>Editar</button>
      {open && (
        <div className="modal">
          <h4>Editar {pair.pair}</h4>
          <label>
            Spread Min:
            <input
              type="number"
              value={values.min_spread}
              min="0"
              step="0.0001"
              onChange={e => handleChange("min_spread", Number(e.target.value))}
            />
          </label>
          <label>
            Slippage Máx:
            <input
              type="number"
              value={values.max_slippage}
              min="0"
              step="0.0001"
              onChange={e => handleChange("max_slippage", Number(e.target.value))}
            />
          </label>
          <label>
            Fee Trading:
            <input
              type="number"
              value={values.trading_fee}
              min="0"
              step="0.0001"
              onChange={e => handleChange("trading_fee", Number(e.target.value))}
            />
          </label>
          {/* Puedes agregar más campos como min_trade, retiros, etc */}
          <button onClick={handleSave}>Guardar</button>
          <button onClick={() => setOpen(false)}>Cancelar</button>
        </div>
      )}
    </>
  );
}

---------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";

const API_BASE = "http://localhost:8888/api";

export default function IAPanel() {
  const [config, setConfig] = useState(null);
  const [editConfig, setEditConfig] = useState(null);
  const [saving, setSaving] = useState(false);
  const [saveMsg, setSaveMsg] = useState("");

  // Cargar config inicial
  useEffect(() => {
    fetch(`${API_BASE}/config`)
      .then(res => res.json())
      .then(data => {
        setConfig(data);
        setEditConfig(JSON.parse(JSON.stringify(data))); // Deep clone para edición
      })
      .catch(() => setEditConfig(null));
  }, []);

  if (!editConfig) return <div className="dashboard-card">Cargando...</div>;

  // Handlers de cambio
  const handleStrategyChange = (strategy, field, value) => {
    setEditConfig(prev => ({
      ...prev,
      STRATEGIES: {
        ...prev.STRATEGIES,
        [strategy]: {
          ...prev.STRATEGIES[strategy],
          [field]: value
        }
      }
    }));
  };

  const handleIATradingChange = (field, value) => {
    setEditConfig(prev => ({
      ...prev,
      AI_TRADING: { ...prev.AI_TRADING, [field]: value }
    }));
  };

  // Guardar cambios al backend
  const handleSave = async () => {
    setSaving(true);
    setSaveMsg("");
    try {
      const res = await fetch(`${API_BASE}/config`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(editConfig),
      });
      if (res.ok) {
        setConfig(JSON.parse(JSON.stringify(editConfig)));
        setSaveMsg("✅ Cambios guardados correctamente.");
      } else {
        setSaveMsg("❌ Error al guardar. Revisa la consola del servidor.");
      }
    } catch (e) {
      setSaveMsg("❌ Error de red.");
    } finally {
      setSaving(false);
    }
  };

  const strategies = editConfig.STRATEGIES || {};
  const ai = editConfig.AI_TRADING || {};

  return (
    <div className="dashboard-card">
      <div className="card-header">
        <span className="emoji">🧠</span> Panel de IA & Estrategia (Editable)
      </div>
      <form
        onSubmit={e => {
          e.preventDefault();
          handleSave();
        }}
      >
        <div style={{ marginBottom: 15 }}>
          <b>Estrategias configuradas:</b>
          <ul style={{ listStyle: "none", padding: 0 }}>
            {Object.entries(strategies).map(([key, strat]) => (
              <li key={key} style={{ marginBottom: 12, background: "#181c27", borderRadius: 8, padding: 10 }}>
                <b>{strat.name}</b>
                <div>
                  <label>
                    Activada:&nbsp;
                    <input
                      type="checkbox"
                      checked={!!strat.enabled}
                      onChange={e =>
                        handleStrategyChange(key, "enabled", e.target.checked)
                      }
                    />
                  </label>
                </div>
                {strat.minProfitPercentage !== undefined && (
                  <div>
                    <label>
                      Spread mínimo (%):&nbsp;
                      <input
                        type="number"
                        step="0.01"
                        min="0"
                        style={{ width: 80 }}
                        value={strat.minProfitPercentage}
                        onChange={e =>
                          handleStrategyChange(
                            key,
                            "minProfitPercentage",
                            parseFloat(e.target.value)
                          )
                        }
                      />
                    </label>
                  </div>
                )}
                {strat.maxInvestmentPercentage !== undefined && (
                  <div>
                    <label>
                      Inversión máxima (%):&nbsp;
                      <input
                        type="number"
                        step="0.01"
                        min="0"
                        max="1"
                        style={{ width: 80 }}
                        value={strat.maxInvestmentPercentage}
                        onChange={e =>
                          handleStrategyChange(
                            key,
                            "maxInvestmentPercentage",
                            parseFloat(e.target.value)
                          )
                        }
                      />
                    </label>
                  </div>
                )}
                {strat.timeoutMs !== undefined && (
                  <div>
                    <label>
                      Timeout (segundos):&nbsp;
                      <input
                        type="number"
                        step="1"
                        min="0"
                        style={{ width: 80 }}
                        value={strat.timeoutMs / 1000}
                        onChange={e =>
                          handleStrategyChange(
                            key,
                            "timeoutMs",
                            parseInt(e.target.value, 10) * 1000
                          )
                        }
                      />
                    </label>
                  </div>
                )}
              </li>
            ))}
          </ul>
        </div>
        <div style={{ marginBottom: 15 }}>
          <b>IA Trading:</b>
          <div>
            <label>
              Activado:&nbsp;
              <input
                type="checkbox"
                checked={!!ai.ENABLED}
                onChange={e =>
                  handleIATradingChange("ENABLED", e.target.checked)
                }
              />
            </label>
          </div>
          <div>
            <label>
              Prediction Horizon (ms):&nbsp;
              <input
                type="number"
                min="0"
                step="1"
                style={{ width: 100 }}
                value={ai.PREDICTION_HORIZON || 0}
                onChange={e =>
                  handleIATradingChange(
                    "PREDICTION_HORIZON",
                    parseInt(e.target.value, 10)
                  )
                }
              />
            </label>
          </div>
        </div>
        <button
          type="submit"
          className="btn btn-success"
          disabled={saving}
          style={{ fontWeight: "bold", fontSize: 16 }}
        >
          {saving ? "Guardando..." : "Guardar cambios"}
        </button>
        {saveMsg && (
          <div style={{ marginTop: 14, fontWeight: "bold", color: saveMsg.startsWith("✅") ? "#0f0" : "#f44" }}>
            {saveMsg}
          </div>
        )}
      </form>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------

import { useState } from "react"
import { Link, useLocation } from "react-router-dom"
import { useAuth } from "../contexts/AuthContext"
import { useBot } from "../contexts/BotContext"

const SIDEBAR_WIDTH = 220
const SIDEBAR_WIDTH_COLLAPSED = 60

const Layout = ({ children }) => {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false)
  const { logout, currentUser } = useAuth()
  const { botState } = useBot()
  const location = useLocation()

  const toggleSidebar = () => {
    setSidebarCollapsed(!sidebarCollapsed)
  }

  return (
    <div className="dashboard-container">
      {/* Sidebar */}
      <div className={`sidebar ${sidebarCollapsed ? "sidebar-collapsed" : ""}`}>
        <div className="sidebar-header">
          <Link to="/" className="sidebar-logo">
            <i className="bi bi-robot"></i>
            {!sidebarCollapsed && <span>CEXs Arbitrage IA</span>}
          </Link>
          <button className="sidebar-toggle" onClick={toggleSidebar}>
            <i className={`bi bi-chevron-${sidebarCollapsed ? "right" : "left"}`}></i>
          </button>
        </div>

        <ul className="nav flex-column mt-4">
          <li className="nav-item">
            <Link to="/" className={`nav-link ${location.pathname === "/" ? "active" : ""}`}>
              <i className="bi bi-speedometer2"></i>
              {!sidebarCollapsed && <span>Dashboard</span>}
            </Link>
          </li>
          <li className="nav-item">
            <Link to="/opportunities" className={`nav-link ${location.pathname === "/opportunities" ? "active" : ""}`}>
              <i className="bi bi-graph-up-arrow"></i>
              {!sidebarCollapsed && <span>Oportunidades</span>}
            </Link>
          </li>
          <li className="nav-item">
            <Link to="/ai-advisor" className={`nav-link ${location.pathname === "/ai-advisor" ? "active" : ""}`}>
              <i className="bi bi-robot"></i>
              {!sidebarCollapsed && <span>Asesor IA</span>}
            </Link>
          </li>
          <li className="nav-item">
            <Link to="/reports" className={`nav-link ${location.pathname === "/reports" ? "active" : ""}`}>
              <i className="bi bi-file-earmark-bar-graph"></i>
              {!sidebarCollapsed && <span>Reportes</span>}
            </Link>
          </li>
          <li className="nav-item">
            <Link to="/settings" className={`nav-link ${location.pathname === "/settings" ? "active" : ""}`}>
              <i className="bi bi-gear"></i>
              {!sidebarCollapsed && <span>Configuración</span>}
            </Link>
          </li>
        </ul>

        {!sidebarCollapsed && (
          <div className="sidebar-footer">
            <div className="d-flex align-items-center mb-3">
              <div className={`badge me-2 ${botState.isRunning ? "bg-success" : "bg-danger"}`}>
                {botState.isRunning ? "Activo" : "Inactivo"}
              </div>
              <small className="text-white-50">{botState.isRunning ? "Bot en ejecución" : "Bot detenido"}</small>
            </div>
            <button className="btn btn-sm btn-light w-100" onClick={logout}>
              <i className="bi bi-box-arrow-right me-2"></i>
              Cerrar Sesión
            </button>
          </div>
        )}
      </div>

      {/* Header */}
      <header className={`header ${sidebarCollapsed ? "header-expanded" : ""}`}>
        <div className="d-flex justify-content-between align-items-center w-100">
          <div>
            <h5 className="mb-0">
              {location.pathname === "/" && "Dashboard"}
              {location.pathname === "/opportunities" && "Oportunidades de Arbitraje"}
              {location.pathname === "/ai-advisor" && "Asesor de IA"}
              {location.pathname === "/reports" && "Reportes y Análisis"}
              {location.pathname === "/settings" && "Configuración"}
            </h5>
          </div>

          <div className="d-flex align-items-center">
            {botState.isRunning && (
              <div className="me-4">
                <span className="badge bg-success me-2">
                  <i className="bi bi-play-fill"></i>
                </span>
                <span>Bot Activo</span>
              </div>
            )}

            <div className="dropdown">
              <button
                className="btn btn-sm btn-outline-secondary dropdown-toggle"
                type="button"
                id="userDropdown"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                <i className="bi bi-person-circle me-1"></i>
                {currentUser?.username || "Usuario"}
              </button>
              <ul className="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                <li>
                  <Link className="dropdown-item" to="/settings">
                    Configuración
                  </Link>
                </li>
                <li>
                  <hr className="dropdown-divider" />
                </li>
                <li>
                  <button className="dropdown-item" onClick={logout}>
                    Cerrar Sesión
                  </button>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main
        className={`main-content ${sidebarCollapsed ? "main-content-expanded" : ""}`}
        style={{
          marginLeft: sidebarCollapsed ? SIDEBAR_WIDTH_COLLAPSED : SIDEBAR_WIDTH,
          transition: "margin-left 0.2s"
        }}
      >
        {children}
      </main>
    </div>
  )
}

export default Layout

-------------------------------------------------------------------------------------------------------------

import React from "react";

export default function OperationHistory({ history }) {
  return (
    <div>
      <h4>Historial de operaciones</h4>
      <table>
        <thead>
          <tr>
            <th>Fecha</th>
            <th>Par</th>
            <th>Acción</th>
            <th>Resultado</th>
            <th>Motivo</th>
          </tr>
        </thead>
        <tbody>
          {history.map((h, i) => (
            <tr key={i}>
              <td>{h.date}</td>
              <td>{h.pair}</td>
              <td>{h.action}</td>
              <td>{h.success ? "✅" : "❌"}</td>
              <td>{h.reason}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}


--------------------------------------------------------------------------------------------------------------

import React from "react";

// Tabla de fees y mínimos para cada token/red/exchange
const FEES = {
  LTC: {
    binance: {
      withdraw: 0.0001,
      withdrawMin: 0.002,
      trade: 0.001, // 0.1%
      deposit: 0,
      depositMin: 0.002,
    },
    bybit: {
      withdraw: 0.0001,
      withdrawMin: 0.001,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.00000001,
    },
  },
  BNB: {
    binance: {
      withdraw: 0.00001,
      withdrawMin: 0.0005,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.000003,
    },
    bybit: {
      withdraw: 0.0002,
      withdrawMin: 0.0002,
      trade: 0.001,
      deposit: 0,
      depositMin: 0,
    },
  },
  XRP: {
    binance: {
      withdraw: 0.2,
      withdrawMin: 2,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.001,
    },
    bybit: {
      withdraw: 0.2,
      withdrawMin: 1.2,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.01,
    },
  },
  USDT: {
    binance: {
      withdraw: 0.2,
      withdrawMin: 10,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.002,
    },
    bybit: {
      withdraw: 0.3,
      withdrawMin: 1,
      trade: 0.001,
      deposit: 0,
      depositMin: 0.001,
    },
  },
};

const STABLECOINS = ["USDT", "USDC", "BUSD", "DAI"];

// Calcula el profit neto después de comisiones y mínimos
function calcProfitNeto(op, prices) {
  const [sym] = op.pair.split("/");
  const base = op.buyExchange.toLowerCase(); // binance o bybit
  const target = op.sellExchange.toLowerCase();

  // Precios de compra y venta (en USDT)
  const priceCompra = prices[sym]?.[base];
  const priceVenta = prices[sym]?.[target];
  if (!priceCompra || !priceVenta) return null;

  const monto = Number(op.amount);

  // Validar contra mínimos de retiro y depósito
  if (
    monto < FEES[sym][base].withdrawMin ||
    monto < FEES[sym][target].depositMin
  )
    return null;

  // Fees
  const feeTradeBuy = monto * FEES[sym][base].trade;
  const feeRetiro = FEES[sym][base].withdraw;
  const feeTradeSell =
    (monto - feeTradeBuy - feeRetiro) * FEES[sym][target].trade;
  const totalTokenRecibido =
    monto - feeTradeBuy - feeRetiro - feeTradeSell;

  // Profit neto en USDT
  const usdtFinal = totalTokenRecibido * priceVenta;
  const usdtInicial = monto * priceCompra;
  const profitNeto = usdtFinal - usdtInicial;
  const profitNetoPct = ((profitNeto / usdtInicial) * 100).toFixed(2);

  return { profitNeto, profitNetoPct };
}

function isStablecoinPair(pair) {
  const tokens = pair.split("/");
  return (
    STABLECOINS.includes(tokens[0]) && STABLECOINS.includes(tokens[1])
  );
}

function OpportunitiesPanel({ prices }) {
  const [opps, setOpps] = React.useState([]);

  React.useEffect(() => {
    // Cambia la URL por la de tu backend real
    fetch("http://localhost:8888/api/opportunities")
      .then((res) => res.json())
      .then((res) => {
        if (Array.isArray(res)) setOpps(res);
        else if (Array.isArray(res.data)) setOpps(res.data);
        else setOpps([]);
      })
      .catch(() => setOpps([]));
  }, []);

  // Filtros realistas para bajo presupuesto y oportunidades alcanzables
  const MAX_AMOUNT = 50; // Monto máximo por operación

  const filteredOpps = Array.isArray(opps)
    ? opps
        .filter(
          (op) =>
            !isStablecoinPair(op.pair) &&
            Number(op.amount) <= MAX_AMOUNT
        )
        .map((op) => {
          const profitNet = calcProfitNeto(op, prices);
          return profitNet
            ? { ...op, profitNeto: profitNet.profitNeto, profitNetoPct: profitNet.profitNetoPct }
            : null;
        })
        .filter(
          (op) =>
            op &&
            op.profitNeto > 0.10 // Solo si el profit neto es mayor a 10 centavos
        )
    : [];

  return (
    <div className="dashboard-card">
      <div className="card-header">
        <span className="emoji">💰</span>Oportunidades Realistas de Arbitraje
      </div>
      <div className="table-responsive">
        <table className="dashboard-table">
          <thead>
            <tr>
              <th>Par</th>
              <th>Exchanges</th>
              <th>Profit Neto</th>
              <th>Profit Neto %</th>
              <th>Confianza</th>
              <th>Monto</th>
              <th>Tiempo</th>
            </tr>
          </thead>
          <tbody>
            {filteredOpps.length === 0 ? (
              <tr>
                <td colSpan="7" className="text-center py-4">
                  No hay oportunidades realistas en este momento.
                </td>
              </tr>
            ) : (
              filteredOpps.map((op, idx) => (
                <tr key={idx}>
                  <td>{op.pair}</td>
                  <td>
                    {op.buyExchange} → {op.sellExchange}
                  </td>
                  <td className={op.profitNeto > 0 ? "text-success" : "text-danger"}>
                    {op.profitNeto ? op.profitNeto.toFixed(3) + " USDT" : "-"}
                  </td>
                  <td className={op.profitNetoPct > 0 ? "text-success" : "text-danger"}>
                    {op.profitNetoPct ? op.profitNetoPct + " %" : "-"}
                  </td>
                  <td>
                    <div className="progress" style={{ height: "6px" }}>
                      <div
                        className="progress-bar bg-success"
                        style={{ width: (op.confidence * 100) + "%" }}
                      ></div>
                    </div>
                    <small>{(op.confidence * 100).toFixed(1)}%</small>
                  </td>
                  <td>{op.amount} {op.pair.split("/")[0]}</td>
                  <td>{op.time}</td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
      <div style={{ fontSize: "0.9em", marginTop: 10, color: "#888" }}>
        * El profit neto ya descuenta fees de trading, retiro y mínimos de cada red/exchange.<br />
        * Solo se muestran oportunidades que puedes aprovechar con bajo presupuesto.<br />
        * No se muestran oportunidades entre stablecoins.
      </div>
    </div>
  );
}

export default OpportunitiesPanel;

-----------------------------------------------------------------------------------------------------------

import React, { useState } from "react";
import TokenPairsTable from "./TokenPairsTable";
import OperationHistory from "./OperationHistory";
import pairsData from "../config/pairs_full.json";

const exampleHistory = [
  { date: "2025-06-18 13:02", pair: "LTC/USDT", action: "Buy", success: false, reason: "Spread insuficiente" },
  { date: "2025-06-18 12:42", pair: "BTC/USDT", action: "Sell", success: true, reason: "" }
];

export default function PairsPanel() {
  const [pairs, setPairs] = useState(pairsData);
  const handleEdit = (updatedPair) => {
    setPairs(pairs.map(p => p.pair === updatedPair.pair ? updatedPair : p));
    // Aquí podrías hacer PUT a la API para guardar cambios en backend
  };

  return (
    <div>
      <h2>Dashboard de Pares y Tokens</h2>
      <TokenPairsTable pairs={pairs} onEdit={handleEdit} />
      <OperationHistory history={exampleHistory} />
    </div>
  );
}

--------------------------------------------------------------------------------------------------------------

import React from "react";
import { Link } from "react-router-dom";

const Sidebar = () => (
  <div className="sidebar">
    <ul>
      <li><Link to="/dashboard">Inicio</Link></li>
      <li><Link to="/general-config">Configuración General</Link></li>
      <li><Link to="/exchanges">Exchanges</Link></li>
      <li><Link to="/strategies">Estrategias de Trading</Link></li>
      <li><Link to="/risk">Gestión de Riesgos</Link></li>
      <li><Link to="/portfolio">Portfolio y Balances</Link></li>
      <li><Link to="/alerts">Alertas y Notificaciones</Link></li>
      <li><Link to="/ai">Inteligencia Artificial</Link></li>
      <li><Link to="/backtesting">Backtesting</Link></li>
      <li><Link to="/mobile-api">API Móvil</Link></li>
      <li><Link to="/logs">Logs y Monitoreo</Link></li>
      <li><Link to="/security">Seguridad</Link></li>
      <li><Link to="/troubleshooting">Troubleshooting</Link></li>
    </ul>
  </div>
);

export default Sidebar;


------------------------------------------------------------------------------------------------------------

import React from "react";

export default function StatusBadge({ active }) {
  return (
    <span style={{
      color: "#fff",
      padding: "2px 8px",
      borderRadius: 4,
      backgroundColor: active ? "green" : "gray"
    }}>
      {active ? "Activo" : "Inactivo"}
    </span>
  );
}

----------------------------------------------------------------------------------------------------------------

import React, { useState } from "react";
import StatusBadge from "./StatusBadge";
import AlertBanner from "./AlertBanner";
import TokenReviewTimer from "./TokenReviewTimer";

// Cambia esto si tu API_BASE está en otro archivo/config
const API_BASE = "http://localhost:8888/api";

export default function TokenPairsTable({ pairs, onEdit }) {
  const [editing, setEditing] = useState({}); // {pair: {campo: valor}}

  // Cuando se empieza a editar una celda
  const startEdit = (pair, field, value) => {
    setEditing({
      ...editing,
      [pair]: { ...editing[pair], [field]: value }
    });
  };

  // Cuando se cambia el valor de input
  const handleEdit = (pair, field, value) => {
    setEditing({
      ...editing,
      [pair]: { ...editing[pair], [field]: value }
    });
  };

  // Guardar el cambio (frontend + backend)
  const handleSave = async (pair, field) => {
    if (editing[pair] && editing[pair][field] !== undefined) {
      const updatedPair = { ...pairs.find(p => p.pair === pair), [field]: editing[pair][field] };
      // Llama a la API para guardar el cambio (PUT)
      try {
        await fetch(`${API_BASE}/pairs/${pair}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedPair)
        });
      } catch (e) {
        // Opcional: muestra toast de error
      }
      onEdit(updatedPair); // actualiza estado en frontend
      setEditing({ ...editing, [pair]: { ...editing[pair], [field]: undefined } });
    }
  };

  // Para mostrar valor editable o fijo en cada celda
  const renderEditableCell = (p, field, min, max, step) => {
    const isEditing = editing[p.pair] && editing[p.pair][field] !== undefined;
    return (
      <td
        className={
          field === "min_spread" && p.min_spread < 0.002
            ? "warning-cell"
            : field === "max_slippage" && p.max_slippage > 0.01
            ? "warning-cell"
            : ""
        }
        onClick={() => !isEditing && startEdit(p.pair, field, p[field])}
        style={{ cursor: "pointer", minWidth: 80 }}
      >
        {isEditing ? (
          <input
            className="inline-edit"
            type="number"
            min={min}
            max={max}
            step={step}
            value={editing[p.pair][field]}
            onChange={e => handleEdit(p.pair, field, e.target.value)}
            onBlur={() => handleSave(p.pair, field)}
            onKeyDown={e => e.key === "Enter" && handleSave(p.pair, field)}
            autoFocus
            style={{ width: 60 }}
          />
        ) : (
          <>
            {p[field]}
            {field === "min_spread" && p.min_spread < 0.002 && (
              <span style={{ color: "#ff9800", marginLeft: 4 }}>⚠️ Bajo</span>
            )}
            {field === "max_slippage" && p.max_slippage > 0.01 && (
              <span style={{ color: "#ff9800", marginLeft: 4 }}>⚠️ Alto</span>
            )}
          </>
        )}
      </td>
    );
  };

  return (
    <table className="dashboard-table">
      <thead>
        <tr>
          <th>Par</th>
          <th>Red (Binance/Bybit)</th>
          <th>Fee Trading</th>
          <th>Spread Min</th>
          <th>Slippage Máx</th>
          <th>Fee Retiro</th>
          <th>Volumen Min</th>
          <th>Status</th>
          <th>Última revisión</th>
        </tr>
      </thead>
      <tbody>
        {pairs.map((p) => (
          <tr key={p.pair}
            className={
              (p.min_spread < 0.002 || p.max_slippage > 0.01) ? "warning-row" : ""
            }
          >
            <td>{p.pair}</td>
            <td>
              {p.binance.network} / {p.bybit.network}
            </td>
            <td>{p.trading_fee}</td>
            {/* Spread Min EDITABLE */}
            {renderEditableCell(p, "min_spread", 0, 1, 0.0001)}
            {/* Slippage Máx EDITABLE */}
            {renderEditableCell(p, "max_slippage", 0, 1, 0.0001)}
            <td>
              {p.binance.withdrawal_fee} / {p.bybit.withdrawal_fee}
            </td>
            <td>{p.min_trade}</td>
            <td>
              <StatusBadge active={p.active} />
            </td>
            <td>
              <TokenReviewTimer lastReview={p.last_review} />
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
}

------------------------------------------------------------------------------------------------------------

import React from "react";

export default function TokenReviewTimer({ lastReview }) {
  const last = new Date(lastReview);
  const now = new Date();
  const diffHours = Math.floor((now - last) / 1000 / 3600);
  return (
    <span>
      Hace {diffHours}h
      {diffHours >= 12 && (
        <span style={{ color: "orange", fontWeight: "bold", marginLeft: 6 }}>
          (¡Revisión necesaria!)
        </span>
      )}
    </span>
  );
}

------------------------------------------------------------------------------------------------------------

CONFIG

[
  {
    "pair": "LTC/USDT",
    "base": "LTC",
    "quote": "USDT",
    "binance": {
      "address": "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.002,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.001,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 50,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BNB/USDT",
    "base": "BNB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.00001,
      "withdrawal_min": 0.0005,
      "deposit_min": 0.000003
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.0002,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 30,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XRP/USDT",
    "base": "XRP",
    "quote": "USDT",
    "binance": {
      "address": "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV",
      "network": "XRP",
      "memo": "466152795",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh",
      "network": "XRP",
      "memo": "501350199",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0.01
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ALGO/USDT",
    "base": "ALGO",
    "quote": "USDT",
    "binance": {
      "address": "L43SHHRVHAIYHGFGXFBKM7IMZNYT7WSLSMXPHGNH4D5NPYOBIJSK35X5OE",
      "network": "ALGO",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 10,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "U5EPBBGTH4ZHEJMSYWRRBEOTOORYTSTSTYZITGDYM2KUQPDXWTHFDJPFVY",
      "network": "ALGO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 10,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ANIME/USDT",
    "base": "ANIME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 7.74,
      "withdrawal_min": 16,
      "deposit_min": 0.00000001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "ARBI",
      "withdrawal_fee": 16,
      "withdrawal_min": 30,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "APT/USDT",
    "base": "APT",
    "quote": "USDT",
    "binance": {
      "address": "0x0b69478291cb55e808a716a046cc0d1ab2981e85778957da3fd519c6061ccb9e",
      "network": "APT",
      "withdrawal_fee": 0.016,
      "withdrawal_min": 0.06,
      "deposit_min": 0.00015
    },
    "bybit": {
      "address": "0x9f5ade930d03eb3fd1f0906f4e7edaddc458ac71260bf985bb61cfb61ac09191",
      "network": "APTOS",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ARB/USDT",
    "base": "ARB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.56,
      "withdrawal_min": 1.12,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.4,
      "withdrawal_min": 0.4,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ATOM/USDT",
    "base": "ATOM",
    "quote": "USDT",
    "binance": {
      "address": "cosmos1j8pp7zvcu9z8vd882m284j29fn2dszh05cqvf9",
      "network": "ATOM",
      "memo": "100738176",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00016
    },
    "bybit": {
      "address": "cosmos1c8dskmuz2wj29tg3rygt8mzg92f09gwcqqyexa",
      "network": "ATOM",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.015,
      "deposit_min": 0.0001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AVAX/USDT",
    "base": "AVAX",
    "quote": "USDT",
    "binance": {
      "address": "X-avax1j2suzh09083n9cyd80dk3lsr0c3e8ry3skk27q",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "X-avax1unlvn8ef6lpjsac0t37t9za6astc8a55pugnm2",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.008,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AXL/USDT",
    "base": "AXL",
    "quote": "USDT",
    "binance": {
      "address": "axelar17ewha7y7fr0xsej6xfep88rq30rse9hgynll78",
      "network": "AXL",
      "memo": "101408734",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 1,
      "deposit_min": 0.0015
    },
    "bybit": {
      "address": "axelar1yzsury9fldydgk425gmphy2zyehh3emc43ds6x",
      "network": "AXL",
      "memo": "10048670",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BB/USDT",
    "base": "BB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BounceBit",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 1,
      "deposit_min": 0.06
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BounceBit",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BEL/USDT",
    "base": "BEL",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.051,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BERA/USDT",
    "base": "BERA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BERA",
      "withdrawal_fee": 0.001,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BERA",
      "withdrawal_fee": 0.000001,
      "withdrawal_min": 0.00001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BOME/USDT",
    "base": "BOME",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 380,
      "withdrawal_min": 760,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 400,
      "withdrawal_min": 200,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BONK/USDT",
    "base": "BONK",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 41657,
      "withdrawal_min": 83314,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 40000,
      "withdrawal_min": 50000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "C98/USDT",
    "base": "C98",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.26,
      "withdrawal_min": 0.52,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CAKE/USDT",
    "base": "CAKE",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.0057,
      "withdrawal_min": 0.011,
      "deposit_min": 0.0006
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.023,
      "withdrawal_min": 0.023,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CATI/USDT",
    "base": "CATI",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 1.08,
      "withdrawal_min": 2.16,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
    },

  {
    "pair": "CELO/USDT",
    "base": "CELO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CGPT/USDT",
    "base": "CGPT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 10,
      "withdrawal_min": 20,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CHZ/USDT",
    "base": "CHZ",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Chiliz Chain",
      "withdrawal_fee": 20,
      "withdrawal_min": 40,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Chiliz Chain",
      "withdrawal_fee": 10,
      "withdrawal_min": 10,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CYBER/USDT",
    "base": "CYBER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.4,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOGS/USDT",
    "base": "DOGS",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOT/USDT",
    "base": "DOT",
    "quote": "USDT",
    "binance": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DYDX/USDT",
    "base": "DYDX",
    "quote": "USDT",
    "binance": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.09,
      "withdrawal_min": 0.09,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "EGLD/USDT",
    "base": "EGLD",
    "quote": "USDT",
    "binance": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.004,
      "withdrawal_min": 0.008,
      "deposit_min": 0.0005
    },
    "bybit": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ENJ/USDT",
    "base": "ENJ",
    "quote": "USDT",
    "binance": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 15,
      "withdrawal_min": 30,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FIDA/USDT",
    "base": "FIDA",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOKI/USDT",
    "base": "FLOKI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 210000,
      "withdrawal_min": 420000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 200000,
      "withdrawal_min": 200000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOW/USDT",
    "base": "FLOW",
    "quote": "USDT",
    "binance": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.05,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMT/USDT",
    "base": "GMT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMX/USDT",
    "base": "GMX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "AVAXC",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HAEDAL/USDT",
    "base": "HAEDAL",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HBAR/USDT",
    "base": "HBAR",
    "quote": "USDT",
    "binance": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HMSTR/USDT",
    "base": "HMSTR",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "HOME/USDT",
    "base": "HOME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.13,
      "withdrawal_min": 0.13,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HYPER/USDT",
    "base": "HYPER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICP/USDT",
    "base": "ICP",
    "quote": "USDT",
    "binance": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.00002
    },
    "bybit": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICX/USDT",
    "base": "ICX",
    "quote": "USDT",
    "binance": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "INJ/USDT",
    "base": "INJ",
    "quote": "USDT",
    "binance": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.005,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.002,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "IO/USDT",
    "base": "IO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "JUP/USDT",
    "base": "JUP",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KAIA/USDT",
    "base": "KAIA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KMNO/USDT",
    "base": "KMNO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KSM/USDT",
    "base": "KSM",
    "quote": "USDT",
    "binance": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "LUNA/USDT",
    "base": "LUNA",
    "quote": "USDT",
    "binance": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MAGIC/USDT",
    "base": "MAGIC",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MANTA/USDT",
    "base": "MANTA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MBOX/USDT",
    "base": "MBOX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MINA/USDT",
    "base": "MINA",
    "quote": "USDT",
    "binance": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NEAR/USDT",
    "base": "NEAR",
    "quote": "USDT",
    "binance": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NOT/USDT",
    "base": "NOT",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ONE/USDT",
    "base": "ONE",
    "quote": "USDT",
    "binance": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "OP/USDT",
    "base": "OP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PSG/USDT",
    "base": "PSG",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.05,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PYTH/USDT",
    "base": "PYTH",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "RDNT/USDT",
    "base": "RDNT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ROSE/USDT",
    "base": "ROSE",
    "quote": "USDT",
    "binance": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SCRT/USDT",
    "base": "SCRT",
    "quote": "USDT",
    "binance": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SEI/USDT",
    "base": "SEI",
    "quote": "USDT",
    "binance": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SHIB/USDT",
    "base": "SHIB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 4000000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 2000000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SIGN/USDT",
    "base": "SIGN",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "STX/USDT",
    "base": "STX",
    "quote": "USDT",
    "binance": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SUI/USDT",
    "base": "SUI",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TIA/USDT",
    "base": "TIA",
    "quote": "USDT",
    "binance": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TNSR/USDT",
    "base": "TNSR",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TON/USDT",
    "base": "TON",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRUMP/USDT",
    "base": "TRUMP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRX/USDT",
    "base": "TRX",
    "quote": "USDT",
    "binance": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "WAXP/USDT",
    "base": "WAXP",
    "quote": "USDT",
    "binance": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WCT/USDT",
    "base": "WCT",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WIF/USDT",
    "base": "WIF",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 55,
      "withdrawal_min": 110,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 50,
      "withdrawal_min": 50,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WLD/USDT",
    "base": "WLD",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Ethereum",
      "withdrawal_fee": 0.23,
      "withdrawal_min": 0.46,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Ethereum",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XAI/USDT",
    "base": "XAI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.7,
      "withdrawal_min": 1.4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XLM/USDT",
    "base": "XLM",
    "quote": "USDT",
    "binance": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZIL/USDT",
    "base": "ZIL",
    "quote": "USDT",
    "binance": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZRO/USDT",
    "base": "ZRO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.04,
      "withdrawal_min": 0.08,
      "deposit_min": 0.00026
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  }
]

----------------------------------------------------------------------------------------------------------------

CONTEXT

"use client"

import { createContext, useState, useContext, useEffect } from "react"
import api from "../services/api"

const AuthContext = createContext()

export const useAuth = () => useContext(AuthContext)

export const AuthProvider = ({ children }) => {
  const [currentUser, setCurrentUser] = useState(null)
  const [isAuthenticated, setIsAuthenticated] = useState(false)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    // Verificar si hay un token guardado
    const token = localStorage.getItem("token")
    const userData = localStorage.getItem("user")

    if (token && userData) {
      setCurrentUser(JSON.parse(userData))
      setIsAuthenticated(true)
      api.setAuthToken(token)
    }

    setLoading(false)
  }, [])

  const login = async (username, password) => {
    try {
      setLoading(true)
      const response = await api.post("/api/login", { username, password })

      const { token, user } = response.data

      localStorage.setItem("token", token)
      localStorage.setItem("user", JSON.stringify(user))

      setCurrentUser(user)
      setIsAuthenticated(true)
      api.setAuthToken(token)

      return { success: true }
    } catch (error) {
      return {
        success: false,
        message: error.response?.data?.message || "Error de autenticación",
      }
    } finally {
      setLoading(false)
    }
  }

  const logout = () => {
    localStorage.removeItem("token")
    localStorage.removeItem("user")
    setCurrentUser(null)
    setIsAuthenticated(false)
    api.removeAuthToken()
  }

  const value = {
    currentUser,
    isAuthenticated,
    loading,
    login,
    logout,
  }

  return <AuthContext.Provider value={value}>{!loading && children}</AuthContext.Provider>
}




--------------------------------------------------------------------------------------------------------------

"use client"

import { createContext, useState, useContext, useEffect } from "react"
import api from "../services/apiRoutes"

const BotContext = createContext()

export const useBot = () => useContext(BotContext)

export const BotProvider = ({ children, socket }) => {
  const [botState, setBotState] = useState({
    isRunning: false,
    totalTrades: 0,
    successfulTrades: 0,
    totalProfit: 0,
    dailyTrades: 0,
    dailyProfit: 0,
    dailyLoss: 0,
    cycleCount: 0,
    emergencyStop: false,
    pausedDueToAnomalies: false,
    pauseReason: "",
  })

  const [exposure, setExposure] = useState({
    total: 0,
    byPair: {},
  })

  const [balances, setBalances] = useState({
    BINANCE: {},
    KUCOIN: {},
  })

  const [opportunities, setOpportunities] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  // Cargar estado inicial
  useEffect(() => {
    const fetchInitialData = async () => {
      try {
        setLoading(true)

        // Obtener estado del bot
        const statusResponse = await api.get("/api/status")
        setBotState(statusResponse.data.botState)
        setExposure(statusResponse.data.exposure)

        // Obtener balances
        const balancesResponse = await api.get("/api/balances")
        setBalances(balancesResponse.data)

        // Obtener oportunidades
        const opportunitiesResponse = await api.get("/api/opportunities")
        setOpportunities(opportunitiesResponse.data)

        setError(null)
      } catch (error) {
        console.error("Error fetching initial data:", error)
        setError("Error cargando datos iniciales")
      } finally {
        setLoading(false)
      }
    }

    fetchInitialData()
  }, [])

  // Escuchar actualizaciones en tiempo real
  useEffect(() => {
    if (!socket) return

    socket.on("status_update", (data) => {
      setBotState(data.botState)
      setExposure(data.exposure)
    })

    socket.on("new_opportunity", (data) => {
      setOpportunities((prev) => [data, ...prev].slice(0, 20))
    })

    socket.on("balance_update", (data) => {
      setBalances(data)
    })

    return () => {
      socket.off("status_update")
      socket.off("new_opportunity")
      socket.off("balance_update")
    }
  }, [socket])

  // Iniciar el bot
  const startBot = async () => {
    try {
      const response = await api.post("/api/bot/start")
      if (response.data.success) {
        setBotState((prev) => ({ ...prev, isRunning: true }))
      }
      return response.data
    } catch (error) {
      console.error("Error starting bot:", error)
      return { success: false, message: error.response?.data?.message || "Error iniciando el bot" }
    }
  }

  // Detener el bot
  const stopBot = async () => {
    try {
      const response = await api.post("/api/bot/stop")
      if (response.data.success) {
        setBotState((prev) => ({ ...prev, isRunning: false }))
      }
      return response.data
    } catch (error) {
      console.error("Error stopping bot:", error)
      return { success: false, message: error.response?.data?.message || "Error deteniendo el bot" }
    }
  }

  // Ejecutar arbitraje manualmente
  const executeArbitrage = async (opportunityId) => {
    try {
      const response = await api.post("/api/bot/execute", { opportunityId })
      return response.data
    } catch (error) {
      console.error("Error executing arbitrage:", error)
      return { success: false, message: error.response?.data?.message || "Error ejecutando arbitraje" }
    }
  }

  // Actualizar configuración
  const updateSettings = async (settings) => {
    try {
      const response = await api.post("/api/bot/settings", { settings })
      return response.data
    } catch (error) {
      console.error("Error updating settings:", error)
      return { success: false, message: error.response?.data?.message || "Error actualizando configuración" }
    }
  }

  // Obtener reporte
  const getReport = async () => {
    try {
      const response = await api.get("/api/report")
      return response.data
    } catch (error) {
      console.error("Error fetching report:", error)
      throw new Error(error.response?.data?.message || "Error obteniendo reporte")
    }
  }

  // Obtener sugerencias de IA
  const getAISuggestions = async () => {
    try {
      const response = await api.get("/api/ai/suggestions")
      return response.data
    } catch (error) {
      console.error("Error fetching AI suggestions:", error)
      throw new Error(error.response?.data?.message || "Error obteniendo sugerencias de IA")
    }
  }

  const value = {
    botState,
    exposure,
    balances,
    opportunities,
    loading,
    error,
    startBot,
    stopBot,
    executeArbitrage,
    updateSettings,
    getReport,
    getAISuggestions,
    refreshOpportunities: async () => {
      try {
        const response = await api.get("/api/opportunities")
        setOpportunities(response.data)
        return { success: true }
      } catch (error) {
        console.error("Error refreshing opportunities:", error)
        return { success: false, message: error.message }
      }
    },
  }

  return <BotContext.Provider value={value}>{children}</BotContext.Provider>
}

--------------------------------------------------------------------------------------------------------


CORE 


const EventEmitter = require('events');
const nodemailer = require('nodemailer');
const axios = require('axios');

/**
 * Gestor de Alertas
 * Maneja notificaciones por email, Telegram, Discord y Slack
 */
class AlertManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.enabled = config.ALERTS.ENABLED;
        this.channels = config.ALERTS.CHANNELS;
        this.alertTypes = config.ALERTS.ALERT_TYPES;
        
        this.emailTransporter = null;
        this.alertHistory = [];
        this.alertQueue = [];
        this.isProcessingQueue = false;
        
        this.logger = console;
    }

    initialize() {
        // Método vacío para compatibilidad con el bot base
        // Agrega aquí inicialización si la necesitas en el futuro
    }
    
    // ... (el resto de los métodos de AlertManager quedan igual, como en tu dump)
}

module.exports = AlertManager;

----------------------------------------------------------------------------------------------------------

const StrategyManager = require('./StrategyManager');
const AlertManager = require('./AlertManager');
const ExchangeManager = require('../exchanges/exchange-manager');

class CEXArbitrageBot {
    constructor(config) {
        this.config = config;
        this.logger = console;
        this.exchangeManager = new ExchangeManager(config);
        this.strategyManager = new StrategyManager(config);   // <-- AGREGADO
        this.alertManager = new AlertManager(config);         // <-- AGREGADO
        console.log("✅ CEXArbitrageBot base inicializado");
        this.botState = {
            isRunning: false,
            totalProfit: 0
        };
    }

    async initialize() {
    this.logger.info('Iniciando bot de arbitraje...');
    if (typeof this.strategyManager.initialize === 'function') {
        this.strategyManager.initialize();
    }
    await this.alertManager.initialize();
    this.logger.info('Bot inicializado correctamente');
}

    async start() {
        console.log("⚙️ Bot base iniciado");
        if (this.isRunning) return;
        await this.initialize();
        this.isRunning = true;
        this.logger.info('Bot arrancando ciclo de arbitraje...');
        while (this.isRunning) {
            try {
                const prices = {
                    BINANCE: Math.random() * 100 + 100,
                    KUCOIN: Math.random() * 100 + 100,
                    OKX: Math.random() * 100 + 100
                };
                const pair = "BTC/USDT";
                const opportunities = [
                    ...this.strategyManager.findBasicArbitrage(prices, pair),
                    ...this.strategyManager.findTriangularArbitrage(prices, pair),
                    ...this.strategyManager.findStatisticalArbitrage(prices, pair)
                ];
                if (opportunities.length > 0) {
                    for (const opp of opportunities) {
                        await this.alertManager.sendAlert(
                            "OPPORTUNITY",
                            `Oportunidad de arbitraje detectada: ${opp.strategy} (${opp.profitPercentage.toFixed(2)}%)`,
                            opp
                        );
                        this.strategyManager.updateStrategyPerformance(opp.strategy, {
                            success: true,
                            profit: opp.profitPercentage
                        });
                    }
                }
                await this._sleep(10000);
            } catch (error) {
                this.logger.error('Error en el ciclo principal:', error);
            }
        }
    }

    stop() {
        console.log("⚙️ Bot base detenido");
        this.isRunning = false;
        this.logger.info('Bot detenido.');
    }

    _sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

module.exports = { CEXArbitrageBot };


------------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');

/**
 * Gestor de Estrategias
 * Maneja múltiples estrategias de arbitraje y su selección
 */
class StrategyManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.strategies = config.STRATEGIES;
        this.activeStrategy = 'BASIC';
        this.strategyInstances = {};
        this.strategyPerformance = {};
        this.strategyHistory = [];
        this.logger = console;
    }

    findBasicArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje básico
        // Por ahora devolvemos un array vacío para evitar errores
        return [];
    }

    findTriangularArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje triangular
        return [];
    }

    findStatisticalArbitrage(prices, pair) {
        // Aquí va tu lógica de arbitraje estadístico
        return [];
    }

    // ... (el resto de los métodos de StrategyManager quedan igual, como en tu dump)
}

/**
 * Clase Strategy
 * Representa una estrategia individual
 */
class Strategy {
    constructor(name, config) {
        this.name = name;
        this.config = config;
        this.isActive = false;
        this.lastExecution = null;
    }
    
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    
    execute(marketData) {
        this.lastExecution = new Date();
        // Implementación específica de cada estrategia
        return [];
    }
}

module.exports = StrategyManager;

----------------------------------------------------------------------------------------------------------

CSS

/* Aplica al contenedor principal del dashboard */
.dashboard-main, .main-content, .dashboard-container {
  margin-left: auto;
  margin-right: auto;
  /* Elige un ancho máximo adecuado para tu diseño */
  max-width: 1100px;
  min-width: 900px;
  width: 100%;
  display: block;
}

---------------------------------------------------------------------------------------------------------------

.dashboard-container {
  display: flex;
  min-height: 100vh;
  background: linear-gradient(160deg, #6a11cb 0%, #2575fc 100%);
}

.sidebar {
  width: 220px;
  background: #222;
  color: #fff;
  padding: 30px 10px;
  min-height: 100vh;
}
.sidebar h2 {
  font-size: 1.2em;
  margin-bottom: 2em;
}
.sidebar ul {
  list-style: none;
  padding: 0;
}
.sidebar li {
  margin: 18px 0;
}
.sidebar a {
  color: #fff;
  text-decoration: none;
  font-weight: bold;
}

.dashboard-main {
  flex: 1;
  padding: 32px;
  display: flex;
  flex-direction: column;
}
.dashboard-row {
  display: flex;
  flex-wrap: wrap;
  gap: 22px;
  margin-bottom: 28px;
}
.panel {
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 4px 16px rgba(100,100,100,0.10);
  padding: 22px;
  flex: 1;
  min-width: 320px;
  max-width: 420px;
}
.panel h3 {
  font-size: 1.15em;
  margin-bottom: 12px;
}
.panel ul {
  margin: 0;
  padding-left: 18px;
}
button {
  margin-bottom: 10px;
  background: #2575fc;
  color: #fff;
  padding: 8px 18px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}
button:disabled {
  background: #aaa;
}
input, select {
  margin: 4px 0 10px 0;
  padding: 6px 10px;
  border-radius: 4px;
  border: 1px solid #ccc;
}
.warning-cell {
  background: #fff3cd;
  color: #856404;
  font-weight: bold;
}

.success-cell {
  background: #d4edda;
  color: #155724;
}

.dashboard-table tr:hover {
  background: #e3f2fd;
  cursor: pointer;
}

.inline-edit {
  border: 1px solid #007bff;
  background: #f0f8ff;
  border-radius: 4px;
  padding: 2px 6px;
}
.warning-cell {
  background: #fff3cd !important;
  color: #856404 !important;
  font-weight: bold;
}
.warning-row {
  background: #fffbe5 !important;
}
.inline-edit {
  border: 1px solid #007bff;
  background: #f0f8ff;
  border-radius: 4px;
  padding: 2px 6px;
}


------------------------------------------------------------------------------------------------------------

DATA

[
  {
    "pair": "LTC/USDT",
    "base": "LTC",
    "quote": "USDT",
    "binance": {
      "address": "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.002,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.001,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 50,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BNB/USDT",
    "base": "BNB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.00001,
      "withdrawal_min": 0.0005,
      "deposit_min": 0.000003
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.0002,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 30,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XRP/USDT",
    "base": "XRP",
    "quote": "USDT",
    "binance": {
      "address": "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV",
      "network": "XRP",
      "memo": "466152795",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh",
      "network": "XRP",
      "memo": "501350199",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0.01
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ALGO/USDT",
    "base": "ALGO",
    "quote": "USDT",
    "binance": {
      "address": "L43SHHRVHAIYHGFGXFBKM7IMZNYT7WSLSMXPHGNH4D5NPYOBIJSK35X5OE",
      "network": "ALGO",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 10,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "U5EPBBGTH4ZHEJMSYWRRBEOTOORYTSTSTYZITGDYM2KUQPDXWTHFDJPFVY",
      "network": "ALGO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 10,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ANIME/USDT",
    "base": "ANIME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 7.74,
      "withdrawal_min": 16,
      "deposit_min": 0.00000001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "ARBI",
      "withdrawal_fee": 16,
      "withdrawal_min": 30,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "APT/USDT",
    "base": "APT",
    "quote": "USDT",
    "binance": {
      "address": "0x0b69478291cb55e808a716a046cc0d1ab2981e85778957da3fd519c6061ccb9e",
      "network": "APT",
      "withdrawal_fee": 0.016,
      "withdrawal_min": 0.06,
      "deposit_min": 0.00015
    },
    "bybit": {
      "address": "0x9f5ade930d03eb3fd1f0906f4e7edaddc458ac71260bf985bb61cfb61ac09191",
      "network": "APTOS",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ARB/USDT",
    "base": "ARB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.56,
      "withdrawal_min": 1.12,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.4,
      "withdrawal_min": 0.4,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ATOM/USDT",
    "base": "ATOM",
    "quote": "USDT",
    "binance": {
      "address": "cosmos1j8pp7zvcu9z8vd882m284j29fn2dszh05cqvf9",
      "network": "ATOM",
      "memo": "100738176",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00016
    },
    "bybit": {
      "address": "cosmos1c8dskmuz2wj29tg3rygt8mzg92f09gwcqqyexa",
      "network": "ATOM",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.015,
      "deposit_min": 0.0001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AVAX/USDT",
    "base": "AVAX",
    "quote": "USDT",
    "binance": {
      "address": "X-avax1j2suzh09083n9cyd80dk3lsr0c3e8ry3skk27q",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "X-avax1unlvn8ef6lpjsac0t37t9za6astc8a55pugnm2",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.008,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AXL/USDT",
    "base": "AXL",
    "quote": "USDT",
    "binance": {
      "address": "axelar17ewha7y7fr0xsej6xfep88rq30rse9hgynll78",
      "network": "AXL",
      "memo": "101408734",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 1,
      "deposit_min": 0.0015
    },
    "bybit": {
      "address": "axelar1yzsury9fldydgk425gmphy2zyehh3emc43ds6x",
      "network": "AXL",
      "memo": "10048670",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BB/USDT",
    "base": "BB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BounceBit",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 1,
      "deposit_min": 0.06
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BounceBit",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BEL/USDT",
    "base": "BEL",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.051,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BERA/USDT",
    "base": "BERA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BERA",
      "withdrawal_fee": 0.001,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BERA",
      "withdrawal_fee": 0.000001,
      "withdrawal_min": 0.00001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BOME/USDT",
    "base": "BOME",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 380,
      "withdrawal_min": 760,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 400,
      "withdrawal_min": 200,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BONK/USDT",
    "base": "BONK",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 41657,
      "withdrawal_min": 83314,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 40000,
      "withdrawal_min": 50000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "C98/USDT",
    "base": "C98",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.26,
      "withdrawal_min": 0.52,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CAKE/USDT",
    "base": "CAKE",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.0057,
      "withdrawal_min": 0.011,
      "deposit_min": 0.0006
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.023,
      "withdrawal_min": 0.023,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CATI/USDT",
    "base": "CATI",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 1.08,
      "withdrawal_min": 2.16,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
    },

  {
    "pair": "CELO/USDT",
    "base": "CELO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CGPT/USDT",
    "base": "CGPT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 10,
      "withdrawal_min": 20,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CHZ/USDT",
    "base": "CHZ",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Chiliz Chain",
      "withdrawal_fee": 20,
      "withdrawal_min": 40,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Chiliz Chain",
      "withdrawal_fee": 10,
      "withdrawal_min": 10,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CYBER/USDT",
    "base": "CYBER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.4,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOGS/USDT",
    "base": "DOGS",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOT/USDT",
    "base": "DOT",
    "quote": "USDT",
    "binance": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DYDX/USDT",
    "base": "DYDX",
    "quote": "USDT",
    "binance": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.09,
      "withdrawal_min": 0.09,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "EGLD/USDT",
    "base": "EGLD",
    "quote": "USDT",
    "binance": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.004,
      "withdrawal_min": 0.008,
      "deposit_min": 0.0005
    },
    "bybit": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ENJ/USDT",
    "base": "ENJ",
    "quote": "USDT",
    "binance": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 15,
      "withdrawal_min": 30,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FIDA/USDT",
    "base": "FIDA",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOKI/USDT",
    "base": "FLOKI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 210000,
      "withdrawal_min": 420000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 200000,
      "withdrawal_min": 200000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOW/USDT",
    "base": "FLOW",
    "quote": "USDT",
    "binance": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.05,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMT/USDT",
    "base": "GMT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMX/USDT",
    "base": "GMX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "AVAXC",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HAEDAL/USDT",
    "base": "HAEDAL",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HBAR/USDT",
    "base": "HBAR",
    "quote": "USDT",
    "binance": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HMSTR/USDT",
    "base": "HMSTR",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "HOME/USDT",
    "base": "HOME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.13,
      "withdrawal_min": 0.13,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HYPER/USDT",
    "base": "HYPER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICP/USDT",
    "base": "ICP",
    "quote": "USDT",
    "binance": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.00002
    },
    "bybit": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICX/USDT",
    "base": "ICX",
    "quote": "USDT",
    "binance": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "INJ/USDT",
    "base": "INJ",
    "quote": "USDT",
    "binance": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.005,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.002,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "IO/USDT",
    "base": "IO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "JUP/USDT",
    "base": "JUP",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KAIA/USDT",
    "base": "KAIA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KMNO/USDT",
    "base": "KMNO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KSM/USDT",
    "base": "KSM",
    "quote": "USDT",
    "binance": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "LUNA/USDT",
    "base": "LUNA",
    "quote": "USDT",
    "binance": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MAGIC/USDT",
    "base": "MAGIC",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MANTA/USDT",
    "base": "MANTA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MBOX/USDT",
    "base": "MBOX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MINA/USDT",
    "base": "MINA",
    "quote": "USDT",
    "binance": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NEAR/USDT",
    "base": "NEAR",
    "quote": "USDT",
    "binance": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NOT/USDT",
    "base": "NOT",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ONE/USDT",
    "base": "ONE",
    "quote": "USDT",
    "binance": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "OP/USDT",
    "base": "OP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PSG/USDT",
    "base": "PSG",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.05,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PYTH/USDT",
    "base": "PYTH",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "RDNT/USDT",
    "base": "RDNT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ROSE/USDT",
    "base": "ROSE",
    "quote": "USDT",
    "binance": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SCRT/USDT",
    "base": "SCRT",
    "quote": "USDT",
    "binance": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SEI/USDT",
    "base": "SEI",
    "quote": "USDT",
    "binance": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SHIB/USDT",
    "base": "SHIB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 4000000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 2000000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SIGN/USDT",
    "base": "SIGN",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "STX/USDT",
    "base": "STX",
    "quote": "USDT",
    "binance": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SUI/USDT",
    "base": "SUI",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TIA/USDT",
    "base": "TIA",
    "quote": "USDT",
    "binance": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TNSR/USDT",
    "base": "TNSR",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TON/USDT",
    "base": "TON",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRUMP/USDT",
    "base": "TRUMP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRX/USDT",
    "base": "TRX",
    "quote": "USDT",
    "binance": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "WAXP/USDT",
    "base": "WAXP",
    "quote": "USDT",
    "binance": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WCT/USDT",
    "base": "WCT",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WIF/USDT",
    "base": "WIF",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 55,
      "withdrawal_min": 110,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 50,
      "withdrawal_min": 50,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WLD/USDT",
    "base": "WLD",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Ethereum",
      "withdrawal_fee": 0.23,
      "withdrawal_min": 0.46,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Ethereum",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XAI/USDT",
    "base": "XAI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.7,
      "withdrawal_min": 1.4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XLM/USDT",
    "base": "XLM",
    "quote": "USDT",
    "binance": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZIL/USDT",
    "base": "ZIL",
    "quote": "USDT",
    "binance": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZRO/USDT",
    "base": "ZRO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.04,
      "withdrawal_min": 0.08,
      "deposit_min": 0.00026
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  }
]


-------------------------------------------------------------------------------------------------------------

EXCHANGES

[
  {
    "pair": "LTC/USDT",
    "base": "LTC",
    "quote": "USDT",
    "binance": {
      "address": "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.002,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ",
      "network": "Litecoin",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.001,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 50,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BNB/USDT",
    "base": "BNB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.00001,
      "withdrawal_min": 0.0005,
      "deposit_min": 0.000003
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.0002,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 30,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XRP/USDT",
    "base": "XRP",
    "quote": "USDT",
    "binance": {
      "address": "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV",
      "network": "XRP",
      "memo": "466152795",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh",
      "network": "XRP",
      "memo": "501350199",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0.01
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ALGO/USDT",
    "base": "ALGO",
    "quote": "USDT",
    "binance": {
      "address": "L43SHHRVHAIYHGFGXFBKM7IMZNYT7WSLSMXPHGNH4D5NPYOBIJSK35X5OE",
      "network": "ALGO",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 10,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "U5EPBBGTH4ZHEJMSYWRRBEOTOORYTSTSTYZITGDYM2KUQPDXWTHFDJPFVY",
      "network": "ALGO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 10,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ANIME/USDT",
    "base": "ANIME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 7.74,
      "withdrawal_min": 16,
      "deposit_min": 0.00000001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "ARBI",
      "withdrawal_fee": 16,
      "withdrawal_min": 30,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "APT/USDT",
    "base": "APT",
    "quote": "USDT",
    "binance": {
      "address": "0x0b69478291cb55e808a716a046cc0d1ab2981e85778957da3fd519c6061ccb9e",
      "network": "APT",
      "withdrawal_fee": 0.016,
      "withdrawal_min": 0.06,
      "deposit_min": 0.00015
    },
    "bybit": {
      "address": "0x9f5ade930d03eb3fd1f0906f4e7edaddc458ac71260bf985bb61cfb61ac09191",
      "network": "APTOS",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 1
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ARB/USDT",
    "base": "ARB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.56,
      "withdrawal_min": 1.12,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.4,
      "withdrawal_min": 0.4,
      "deposit_min": 0.00000001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ATOM/USDT",
    "base": "ATOM",
    "quote": "USDT",
    "binance": {
      "address": "cosmos1j8pp7zvcu9z8vd882m284j29fn2dszh05cqvf9",
      "network": "ATOM",
      "memo": "100738176",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00016
    },
    "bybit": {
      "address": "cosmos1c8dskmuz2wj29tg3rygt8mzg92f09gwcqqyexa",
      "network": "ATOM",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.015,
      "deposit_min": 0.0001
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AVAX/USDT",
    "base": "AVAX",
    "quote": "USDT",
    "binance": {
      "address": "X-avax1j2suzh09083n9cyd80dk3lsr0c3e8ry3skk27q",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "X-avax1unlvn8ef6lpjsac0t37t9za6astc8a55pugnm2",
      "network": "AVAX",
      "withdrawal_fee": 0.008,
      "withdrawal_min": 0.008,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "AXL/USDT",
    "base": "AXL",
    "quote": "USDT",
    "binance": {
      "address": "axelar17ewha7y7fr0xsej6xfep88rq30rse9hgynll78",
      "network": "AXL",
      "memo": "101408734",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 1,
      "deposit_min": 0.0015
    },
    "bybit": {
      "address": "axelar1yzsury9fldydgk425gmphy2zyehh3emc43ds6x",
      "network": "AXL",
      "memo": "10048670",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BB/USDT",
    "base": "BB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BounceBit",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 1,
      "deposit_min": 0.06
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BounceBit",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BEL/USDT",
    "base": "BEL",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.051,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BERA/USDT",
    "base": "BERA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BERA",
      "withdrawal_fee": 0.001,
      "withdrawal_min": 0.1,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BERA",
      "withdrawal_fee": 0.000001,
      "withdrawal_min": 0.00001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BOME/USDT",
    "base": "BOME",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 380,
      "withdrawal_min": 760,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 400,
      "withdrawal_min": 200,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "BONK/USDT",
    "base": "BONK",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 41657,
      "withdrawal_min": 83314,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 40000,
      "withdrawal_min": 50000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "C98/USDT",
    "base": "C98",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.26,
      "withdrawal_min": 0.52,
      "deposit_min": 0.007
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CAKE/USDT",
    "base": "CAKE",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.0057,
      "withdrawal_min": 0.011,
      "deposit_min": 0.0006
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.023,
      "withdrawal_min": 0.023,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CATI/USDT",
    "base": "CATI",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 1.08,
      "withdrawal_min": 2.16,
      "deposit_min": 0.00000002
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
    },

  {
    "pair": "CELO/USDT",
    "base": "CELO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.1,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "CELO",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CGPT/USDT",
    "base": "CGPT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 10,
      "withdrawal_min": 20,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CHZ/USDT",
    "base": "CHZ",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Chiliz Chain",
      "withdrawal_fee": 20,
      "withdrawal_min": 40,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Chiliz Chain",
      "withdrawal_fee": 10,
      "withdrawal_min": 10,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "CYBER/USDT",
    "base": "CYBER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.4,
      "deposit_min": 0.002
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOGS/USDT",
    "base": "DOGS",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DOT/USDT",
    "base": "DOT",
    "quote": "USDT",
    "binance": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "13zhBAjXq6XWusrrDw8LpYBNaeG4gAXjFtSm8Dw81LV4wAqm",
      "network": "DOT",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 40,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "DYDX/USDT",
    "base": "DYDX",
    "quote": "USDT",
    "binance": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "dydx1plrw2mur00y6mh94vc4u5y9wz56ktdnt6ep4gq",
      "network": "DYDX",
      "withdrawal_fee": 0.09,
      "withdrawal_min": 0.09,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "EGLD/USDT",
    "base": "EGLD",
    "quote": "USDT",
    "binance": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.004,
      "withdrawal_min": 0.008,
      "deposit_min": 0.0005
    },
    "bybit": {
      "address": "erd1ld8ylfwe0dj72mkeq73fz9x36tn0p943cmfv6fwzft9jt0rjf0xs5xdfu4",
      "network": "EGLD",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ENJ/USDT",
    "base": "ENJ",
    "quote": "USDT",
    "binance": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 15,
      "withdrawal_min": 30,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "enCbjnvB5Zpu26ciGoMPaNVSWXWKqtbGptKpDj1UUsZqF2o6i",
      "network": "Enjin",
      "withdrawal_fee": 12,
      "withdrawal_min": 12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FIDA/USDT",
    "base": "FIDA",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOKI/USDT",
    "base": "FLOKI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 210000,
      "withdrawal_min": 420000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 200000,
      "withdrawal_min": 200000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "FLOW/USDT",
    "base": "FLOW",
    "quote": "USDT",
    "binance": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.05,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0xdbb61e402a382eb3",
      "network": "FLOW",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMT/USDT",
    "base": "GMT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.02
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.2,
      "withdrawal_min": 1.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "GMX/USDT",
    "base": "GMX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "AVAXC",
      "withdrawal_fee": 0.005,
      "withdrawal_min": 0.005,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HAEDAL/USDT",
    "base": "HAEDAL",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HBAR/USDT",
    "base": "HBAR",
    "quote": "USDT",
    "binance": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0.0.615422",
      "network": "HBAR",
      "memo": "10067078",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HMSTR/USDT",
    "base": "HMSTR",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "HOME/USDT",
    "base": "HOME",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.13,
      "withdrawal_min": 0.13,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.12,
      "withdrawal_min": 0.12,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "HYPER/USDT",
    "base": "HYPER",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 3,
      "withdrawal_min": 3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICP/USDT",
    "base": "ICP",
    "quote": "USDT",
    "binance": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0002,
      "deposit_min": 0.00002
    },
    "bybit": {
      "address": "dc8d5fcdfee8c6afe59bd85155fa18b0cbc1fee57e6b7f66ef10220d25d4bc1a",
      "network": "ICP",
      "withdrawal_fee": 0.0001,
      "withdrawal_min": 0.0001,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ICX/USDT",
    "base": "ICX",
    "quote": "USDT",
    "binance": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "hx8c278a658331a569b640e925ac55a70a8e5534b6",
      "network": "ICX",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.02,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "INJ/USDT",
    "base": "INJ",
    "quote": "USDT",
    "binance": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.005,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "inj1vmqxkjmruu2q06qlfg7sjqe8chhsejy7mh6j6n",
      "network": "INJ",
      "memo": "10014232",
      "withdrawal_fee": 0.002,
      "withdrawal_min": 0.002,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "IO/USDT",
    "base": "IO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "JUP/USDT",
    "base": "JUP",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KAIA/USDT",
    "base": "KAIA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "KAIA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KMNO/USDT",
    "base": "KMNO",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "KSM/USDT",
    "base": "KSM",
    "quote": "USDT",
    "binance": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "GJR9MqPoddfpZxotFsX8v77qubfeW5jpCD7eYT8CpZKiaMV",
      "network": "KSM",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "LUNA/USDT",
    "base": "LUNA",
    "quote": "USDT",
    "binance": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "terra188gwmnvl8zv4n5639hghms4l5s00s6z7e48t6s",
      "network": "Terra",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MAGIC/USDT",
    "base": "MAGIC",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MANTA/USDT",
    "base": "MANTA",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Manta Pacific Mainnet",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MBOX/USDT",
    "base": "MBOX",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.5,
      "withdrawal_min": 0.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "MINA/USDT",
    "base": "MINA",
    "quote": "USDT",
    "binance": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.04,
      "deposit_min": 0.00005
    },
    "bybit": {
      "address": "B62qnEPLBPPnRi71NyExqDM9Et9rrvK4bB2GapNhhgM9DvgGipKLNEW",
      "network": "MINA",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NEAR/USDT",
    "base": "NEAR",
    "quote": "USDT",
    "binance": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "7e156143ead7675a8e85234ca5f3d3358b7edd2ae0948bc41106aab78af508ef",
      "network": "NEAR",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "NOT/USDT",
    "base": "NOT",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ONE/USDT",
    "base": "ONE",
    "quote": "USDT",
    "binance": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "one1xqeje970edyrw5j6t2vykcs45cse663ml3pwe3",
      "network": "ONE",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "OP/USDT",
    "base": "OP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "OP Mainnet",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PSG/USDT",
    "base": "PSG",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 0.05,
      "withdrawal_min": 0.05,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "PYTH/USDT",
    "base": "PYTH",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "RDNT/USDT",
    "base": "RDNT",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ROSE/USDT",
    "base": "ROSE",
    "quote": "USDT",
    "binance": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "rose1u9v2v6w437w7d2na4w4qm6t9w7yzn0hy2l8q4x",
      "network": "Oasis",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SCRT/USDT",
    "base": "SCRT",
    "quote": "USDT",
    "binance": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "secret1g4d9f6k4z0n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Secret",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SEI/USDT",
    "base": "SEI",
    "quote": "USDT",
    "binance": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "sei1p6k4q8c6g36w7z0n9gx7t4z3u7e7m3a4c8l4yc8",
      "network": "SEI",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SHIB/USDT",
    "base": "SHIB",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 4000000,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 2000000,
      "withdrawal_min": 2000000,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SIGN/USDT",
    "base": "SIGN",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "STX/USDT",
    "base": "STX",
    "quote": "USDT",
    "binance": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "SP3K8Z0E6H43N2VZ2YB6A7A5JY8X3N3N8M9TD8K4F",
      "network": "Stacks",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "SUI/USDT",
    "base": "SUI",
    "quote": "USDT",
    "binance": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x17cbbf04d589fda59d51ffde92501894fa643de3be3e447f7cabeca7aa90082c",
      "network": "SUI",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TIA/USDT",
    "base": "TIA",
    "quote": "USDT",
    "binance": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.02,
      "deposit_min": 0.001
    },
    "bybit": {
      "address": "celestia1h4q4j8j3y6n9gx7t4z3u7e7m3a4c8l4yc8c9vj",
      "network": "Celestia",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TNSR/USDT",
    "base": "TNSR",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TON/USDT",
    "base": "TON",
    "quote": "USDT",
    "binance": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "bybit": {
      "address": "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
      "network": "TON",
      "withdrawal_fee": 0.3,
      "withdrawal_min": 0.3,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRUMP/USDT",
    "base": "TRUMP",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "BSC",
      "withdrawal_fee": 1.5,
      "withdrawal_min": 1.5,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "TRX/USDT",
    "base": "TRX",
    "quote": "USDT",
    "binance": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "TQ7DuEjJXQ6gHzXfWnA3SA8k6nJk8jWZKQ",
      "network": "TRON",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },

  {
    "pair": "WAXP/USDT",
    "base": "WAXP",
    "quote": "USDT",
    "binance": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "wax1k2v4m4rzk5ljh37u2f454p4w3ffj4qk8p3rkxf",
      "network": "WAX",
      "withdrawal_fee": 2,
      "withdrawal_min": 2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WCT/USDT",
    "base": "WCT",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.2,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WIF/USDT",
    "base": "WIF",
    "quote": "USDT",
    "binance": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 55,
      "withdrawal_min": 110,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "3j8DNJSqBz5wzPTmhhLkfCNRvSJ5bqdRC8zGrSHLXMX8",
      "network": "Solana",
      "withdrawal_fee": 50,
      "withdrawal_min": 50,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "WLD/USDT",
    "base": "WLD",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Ethereum",
      "withdrawal_fee": 0.23,
      "withdrawal_min": 0.46,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Ethereum",
      "withdrawal_fee": 0.2,
      "withdrawal_min": 0.2,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XAI/USDT",
    "base": "XAI",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "Arbitrum One",
      "withdrawal_fee": 0.7,
      "withdrawal_min": 1.4,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "Arbitrum One",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "XLM/USDT",
    "base": "XLM",
    "quote": "USDT",
    "binance": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.02,
      "withdrawal_min": 0.1,
      "deposit_min": 0.0001
    },
    "bybit": {
      "address": "GC3ZP2U7WJ2JK3MNHVZ4V8UIG4N2PJS4C42R7V7C6H5D2A5WA7HD6WJR",
      "network": "Stellar",
      "memo": "3574998388",
      "withdrawal_fee": 0.01,
      "withdrawal_min": 0.01,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZIL/USDT",
    "base": "ZIL",
    "quote": "USDT",
    "binance": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 2,
      "deposit_min": 0.01
    },
    "bybit": {
      "address": "zil1hkycgdsq0zj0gkc7hlzm7s9y2q2n6g4z9v6xdh",
      "network": "Zilliqa",
      "withdrawal_fee": 1,
      "withdrawal_min": 1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  },
  {
    "pair": "ZRO/USDT",
    "base": "ZRO",
    "quote": "USDT",
    "binance": {
      "address": "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
      "network": "ARBITRUM",
      "withdrawal_fee": 0.04,
      "withdrawal_min": 0.08,
      "deposit_min": 0.00026
    },
    "bybit": {
      "address": "0x4231d188a91481a8c3d39d444b7451436babee94",
      "network": "AVAXC",
      "withdrawal_fee": 0.1,
      "withdrawal_min": 0.1,
      "deposit_min": 0
    },
    "trading_fee": 0.001,
    "min_trade": 10,
    "max_trade": 20,
    "min_spread": 0.002,
    "max_slippage": 0.001
  }
]


----------------------------------------------------------------------------------------------------------

// ========== MÓDULO DE GESTIÓN DE EXCHANGES ==========
const axios = require("axios")
const crypto = require("crypto")
const EventEmitter = require('events')
const config = require('../strategies/config');

class ExchangeManager extends EventEmitter {
  constructor(config) {
    super();
    this.config = config;
    this.exchanges = {
      BINANCE: {
        name: "Binance",
        baseURL: config.EXCHANGES.BINANCE.testnet || config.EXCHANGES.BINANCE.baseURL,
        apiKey: config.EXCHANGES.BINANCE.apiKey,
        apiSecret: config.EXCHANGES.BINANCE.apiSecret,
      },
      KUCOIN: {
        name: "KuCoin",
        baseURL: config.EXCHANGES.KUCOIN.testnet || config.EXCHANGES.KUCOIN.baseURL,
        apiKey: config.EXCHANGES.KUCOIN.apiKey,
        apiSecret: config.EXCHANGES.KUCOIN.apiSecret,
        passphrase: config.EXCHANGES.KUCOIN.passphrase,
      },
    }

    console.log(`🔄 Exchange Manager inicializado: ${Object.keys(this.exchanges).join(", ")}`)
    console.log(`🧪 Modo testnet: ${config.TRADING_MODE === 'simulation' ? "Activado" : "Desactivado"}`)
  }

  // Obtener precios de todos los pares en todos los exchanges
  async getAllPrices() {
    const allPrices = {}

    for (const pair of config.TRADING_PAIRS) {
      allPrices[pair.symbol] = {}

      for (const exchangeName of Object.keys(this.exchanges)) {
        try {
          const price = await this.getPrice(exchangeName, pair.symbol)
          allPrices[pair.symbol][exchangeName] = price
        } catch (error) {
          console.error(`Error obteniendo precio de ${pair.symbol} en ${exchangeName}:`, error.message)
        }
      }
    }

    return allPrices
  }

  // Obtener precio de un par en un exchange específico
  async getPrice(exchangeName, symbol) {
    if (exchangeName === "BINANCE") {
      return this.getBinancePrice(symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinPrice(symbol)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener precio en Binance
  async getBinancePrice(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/ticker/price`, {
        params: { symbol: formattedSymbol },
      })

      return Number.parseFloat(response.data.price)
    } catch (error) {
      throw new Error(`Error en Binance: ${error.message}`)
    }
  }

  // Obtener precio en KuCoin
  async getKucoinPrice(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      // Usar endpoint público sin autenticación para evitar problemas SSL
      const response = await axios.get(`https://api.kucoin.com/api/v1/market/orderbook/level1`, {
        params: { symbol: formattedSymbol },
        timeout: 10000,
        headers: {
          "User-Agent": "CEX-Arbitrage-Bot/1.0",
        },
      })

      // KuCoin devuelve precio en data.data.price
      return Number.parseFloat(response.data.data.price)
    } catch (error) {
      // Si falla KuCoin, usar precio simulado
      console.warn(`⚠️ Usando precio simulado para ${symbol} en KuCoin`)
      return this.getSimulatedPrice(symbol)
    }
  }

  // Calcular spread entre dos precios
  calculateSpread(price1, price2) {
    return Math.abs((price1 - price2) / Math.min(price1, price2)) * 100
  }

  // Obtener balances en un exchange
  async getBalances(exchangeName) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver balances iniciales
      return this.getSimulatedBalances(exchangeName)
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceBalances()
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinBalances()
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Balances simulados para modo DRY_RUN
  getSimulatedBalances(exchangeName) {
    const initialBalances = config.INITIAL_BALANCES[exchangeName]
    const balances = {}

    for (const [asset, amount] of Object.entries(initialBalances)) {
      balances[asset] = {
        free: amount,
        locked: 0,
        total: amount,
      }
    }

    return balances
  }

  // Obtener balances en Binance
  async getBinanceBalances() {
    try {
      const timestamp = Date.now()
      const queryString = `timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/account`, {
        params: {
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      const balances = {}
      response.data.balances.forEach((balance) => {
        const free = Number.parseFloat(balance.free)
        const locked = Number.parseFloat(balance.locked)
        const total = free + locked

        if (total > 0) {
          balances[balance.asset] = {
            free,
            locked,
            total,
          }
        }
      })

      return balances
    } catch (error) {
      throw new Error(`Error obteniendo balances de Binance: ${error.message}`)
    }
  }

  // Obtener balances en KuCoin
  async getKucoinBalances() {
    try {
      // Primero necesitamos obtener un token de KuCoin
      const timestamp = Date.now()
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + "/api/v1/accounts")
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}/api/v1/accounts`, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      const balances = {}
      response.data.data.forEach((balance) => {
        const free = Number.parseFloat(balance.available)
        const locked = Number.parseFloat(balance.holds)
        const total = free + locked

        if (total > 0) {
          balances[balance.currency] = {
            free,
            locked,
            total,
          }
        }
      })

      return balances
    } catch (error) {
      throw new Error(`Error obteniendo balances de KuCoin: ${error.message}`)
    }
  }

  // Colocar orden en un exchange
  async placeOrder(exchangeName, symbol, side, amount) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, simular la orden
      return this.simulateOrder(exchangeName, symbol, side, amount)
    }

    if (exchangeName === "BINANCE") {
      return this.placeBinanceOrder(symbol, side, amount)
    } else if (exchangeName === "KUCOIN") {
      return this.placeKucoinOrder(symbol, side, amount)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Simular orden para modo DRY_RUN
  async simulateOrder(exchangeName, symbol, side, amount) {
    try {
      const price = await this.getPrice(exchangeName, symbol)
      const executedQty = side === "buy" ? amount / price : amount
      const orderId = `sim-${Date.now()}-${Math.floor(Math.random() * 1000)}`

      console.log(
        `🧪 SIMULACIÓN: Orden ${side} de ${amount} ${symbol} en ${exchangeName} a precio ${price} (ID: ${orderId})`,
      )

      return {
        orderId,
        status: "FILLED",
        executedQty,
        price,
      }
    } catch (error) {
      throw new Error(`Error simulando orden: ${error.message}`)
    }
  }

  // Colocar orden en Binance
  async placeBinanceOrder(symbol, side, amount) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const timestamp = Date.now()
      const params = {
        symbol: formattedSymbol,
        side: side.toUpperCase(),
        type: "MARKET",
        quantity: amount,
        timestamp,
      }

      const queryString = Object.entries(params)
        .map(([key, value]) => `${key}=${value}`)
        .join("&")

      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.post(`${this.exchanges.BINANCE.baseURL}/api/v3/order`, null, {
        params: {
          ...params,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        orderId: response.data.orderId,
        status: response.data.status,
        executedQty: Number.parseFloat(response.data.executedQty),
        price: Number.parseFloat(response.data.price),
      }
    } catch (error) {
      throw new Error(`Error colocando orden en Binance: ${error.message}`)
    }
  }

  // Colocar orden en KuCoin
  async placeKucoinOrder(symbol, side, amount) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      const timestamp = Date.now()
      const data = {
        clientOid: `bot-${timestamp}`,
        side: side.toUpperCase(),
        symbol: formattedSymbol,
        type: "market",
        size: amount,
      }

      const dataString = JSON.stringify(data)
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "POST" + "/api/v1/orders" + dataString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.post(`${this.exchanges.KUCOIN.baseURL}/api/v1/orders`, data, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
          "Content-Type": "application/json",
        },
      })

      // KuCoin devuelve solo el ID de la orden, necesitamos consultar el estado
      const orderId = response.data.data.orderId
      const orderDetails = await this.getKucoinOrderDetails(orderId)

      return {
        orderId,
        status: orderDetails.status,
        executedQty: Number.parseFloat(orderDetails.executedQty),
        price: Number.parseFloat(orderDetails.price),
      }
    } catch (error) {
      throw new Error(`Error colocando orden en KuCoin: ${error.message}`)
    }
  }

  // Obtener detalles de una orden en KuCoin
  async getKucoinOrderDetails(orderId) {
    try {
      const timestamp = Date.now()
      const endpoint = `/api/v1/orders/${orderId}`
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + endpoint)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}${endpoint}`, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      const order = response.data.data
      return {
        status: order.isActive ? "ACTIVE" : "FILLED",
        executedQty: order.dealSize,
        price: order.dealFunds / order.dealSize, // Precio promedio
      }
    } catch (error) {
      throw new Error(`Error obteniendo detalles de orden en KuCoin: ${error.message}`)
    }
  }

  // Obtener estado de una orden
  async getOrderStatus(exchangeName, orderId, symbol) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver estado completado
      return {
        status: "FILLED",
        executedQty: 1,
        price: 1,
      }
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceOrderStatus(orderId, symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinOrderDetails(orderId)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener estado de una orden en Binance
  async getBinanceOrderStatus(orderId, symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const timestamp = Date.now()
      const queryString = `symbol=${formattedSymbol}&orderId=${orderId}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/order`, {
        params: {
          symbol: formattedSymbol,
          orderId,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        status: response.data.status,
        executedQty: Number.parseFloat(response.data.executedQty),
        price: Number.parseFloat(response.data.price),
      }
    } catch (error) {
      throw new Error(`Error obteniendo estado de orden en Binance: ${error.message}`)
    }
  }

  // Obtener dirección de depósito
  async getDepositAddress(exchangeName, asset, network) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, devolver dirección simulada
      return {
        address: `sim-${exchangeName.toLowerCase()}-${asset.toLowerCase()}-address`,
        tag: null,
      }
    }

    if (exchangeName === "BINANCE") {
      return this.getBinanceDepositAddress(asset, network)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinDepositAddress(asset, network)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener dirección de depósito en Binance
  async getBinanceDepositAddress(asset, network) {
    try {
      const timestamp = Date.now()
      const queryString = `coin=${asset}&network=${network}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/sapi/v1/capital/deposit/address`, {
        params: {
          coin: asset,
          network,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        address: response.data.address,
        tag: response.data.tag,
      }
    } catch (error) {
      throw new Error(`Error obteniendo dirección de depósito en Binance: ${error.message}`)
    }
  }

  // Obtener dirección de depósito en KuCoin
  async getKucoinDepositAddress(asset, network) {
    try {
      const timestamp = Date.now()
      const endpoint = `/api/v1/deposit-addresses`
      const queryString = `currency=${asset}&network=${network}`
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "GET" + endpoint + "?" + queryString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}${endpoint}`, {
        params: {
          currency: asset,
          network,
        },
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
        },
      })

      return {
        address: response.data.data.address,
        tag: response.data.data.memo,
      }
    } catch (error) {
      throw new Error(`Error obteniendo dirección de depósito en KuCoin: ${error.message}`)
    }
  }

  // Realizar retiro
  async withdraw(exchangeName, asset, amount, address, network) {
    if (config.BOT.DRY_RUN) {
      // En modo simulación, simular retiro
      const withdrawId = `sim-withdraw-${Date.now()}`
      console.log(`🧪 SIMULACIÓN: Retiro de ${amount} ${asset} desde ${exchangeName} a ${address} (ID: ${withdrawId})`)
      return { withdrawId }
    }

    if (exchangeName === "BINANCE") {
      return this.binanceWithdraw(asset, amount, address, network)
    } else if (exchangeName === "KUCOIN") {
      return this.kucoinWithdraw(asset, amount, address, network)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Realizar retiro en Binance
  async binanceWithdraw(asset, amount, address, network) {
    try {
      const timestamp = Date.now()
      const queryString = `coin=${asset}&address=${address}&amount=${amount}&network=${network}&timestamp=${timestamp}`
      const signature = crypto.createHmac("sha256", this.exchanges.BINANCE.apiSecret).update(queryString).digest("hex")

      const response = await axios.post(`${this.exchanges.BINANCE.baseURL}/sapi/v1/capital/withdraw/apply`, null, {
        params: {
          coin: asset,
          address,
          amount,
          network,
          timestamp,
          signature,
        },
        headers: {
          "X-MBX-APIKEY": this.exchanges.BINANCE.apiKey,
        },
      })

      return {
        withdrawId: response.data.id,
      }
    } catch (error) {
      throw new Error(`Error realizando retiro en Binance: ${error.message}`)
    }
  }

  // Realizar retiro en KuCoin
  async kucoinWithdraw(asset, amount, address, network) {
    try {
      const timestamp = Date.now()
      const data = {
        currency: asset,
        address,
        amount: amount.toString(),
        network,
      }

      const dataString = JSON.stringify(data)
      const signature = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(timestamp + "POST" + "/api/v1/withdrawals" + dataString)
        .digest("base64")

      const passphrase = crypto
        .createHmac("sha256", this.exchanges.KUCOIN.apiSecret)
        .update(this.exchanges.KUCOIN.passphrase)
        .digest("base64")

      const response = await axios.post(`${this.exchanges.KUCOIN.baseURL}/api/v1/withdrawals`, data, {
        headers: {
          "KC-API-KEY": this.exchanges.KUCOIN.apiKey,
          "KC-API-SIGN": signature,
          "KC-API-TIMESTAMP": timestamp,
          "KC-API-PASSPHRASE": passphrase,
          "KC-API-KEY-VERSION": "2",
          "Content-Type": "application/json",
        },
      })

      return {
        withdrawId: response.data.data.withdrawalId,
      }
    } catch (error) {
      throw new Error(`Error realizando retiro en KuCoin: ${error.message}`)
    }
  }

  // Obtener order book
  async getOrderBook(exchangeName, symbol) {
    if (exchangeName === "BINANCE") {
      return this.getBinanceOrderBook(symbol)
    } else if (exchangeName === "KUCOIN") {
      return this.getKucoinOrderBook(symbol)
    } else {
      throw new Error(`Exchange no soportado: ${exchangeName}`)
    }
  }

  // Obtener order book en Binance
  async getBinanceOrderBook(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POLUSDT)
      const formattedSymbol = symbol.replace("/", "")

      const response = await axios.get(`${this.exchanges.BINANCE.baseURL}/api/v3/depth`, {
        params: {
          symbol: formattedSymbol,
          limit: 20,
        },
      })

      return {
        bids: response.data.bids.map((bid) => [Number.parseFloat(bid[0]), Number.parseFloat(bid[1])]),
        asks: response.data.asks.map((ask) => [Number.parseFloat(ask[0]), Number.parseFloat(ask[1])]),
      }
    } catch (error) {
      throw new Error(`Error obteniendo order book en Binance: ${error.message}`)
    }
  }

  // Obtener order book en KuCoin
  async getKucoinOrderBook(symbol) {
    try {
      // Convertir formato de símbolo (POL/USDT -> POL-USDT)
      const formattedSymbol = symbol.replace("/", "-")

      const response = await axios.get(`${this.exchanges.KUCOIN.baseURL}/api/v1/market/orderbook/level2_20`, {
        params: {
          symbol: formattedSymbol,
        },
      })

      return {
        bids: response.data.data.bids.map((bid) => [Number.parseFloat(bid[0]), Number.parseFloat(bid[1])]),
        asks: response.data.data.asks.map((ask) => [Number.parseFloat(ask[0]), Number.parseFloat(ask[1])]),
      }
    } catch (error) {
      throw new Error(`Error obteniendo order book en KuCoin: ${error.message}`)
    }
  }

  // Método auxiliar para generar precios simulados
  getSimulatedPrice(symbol) {
    // Precios base simulados
    const basePrices = {
      "POL/USDT": 0.45,
      "USDC/USDT": 1.0001,
    }

    const basePrice = basePrices[symbol] || 1.0
    // Agregar variación aleatoria del ±0.1%
    const variation = (Math.random() - 0.5) * 0.002
    return basePrice * (1 + variation)
  }
}

module.exports = ExchangeManager


--------------------------------------------------------------------------------------------------------

const ccxt = require("ccxt")

/**
 * Fetcher de precios reales para Binance y Bybit
 */
class RealPriceFetcher {
  constructor(config) {
    this.config = config
    this.exchanges = {}
    this.lastPrices = {}
    this.isInitialized = false

    this.logger = console
  }

  /**
   * Inicializa las conexiones a los exchanges
   */
  async initialize() {
    try {
      this.logger.info("🔄 Inicializando conexiones a exchanges...")

      // Configurar Binance
if (this.config.EXCHANGES.BINANCE.enabled) {
   this.exchanges.binance = new ccxt.binance({
    apiKey: this.config.EXCHANGES.BINANCE.apiKey,
    secret: this.config.EXCHANGES.BINANCE.apiSecret,
    sandbox: this.config.EXCHANGES.BINANCE.sandbox,
    enableRateLimit: true,
    rateLimit: this.config.EXCHANGES.BINANCE.rateLimit,
  });

  await this.exchanges.binance.loadMarkets();
  this.logger.info("✅ Binance conectado");
}

      // Configurar Bybit (NUEVO - reemplaza Kucoin)
      if (this.config.EXCHANGES.BYBIT.enabled) {
        this.exchanges.bybit = new ccxt.bybit({
          apiKey: this.config.EXCHANGES.BYBIT.apiKey,
          secret: this.config.EXCHANGES.BYBIT.apiSecret,
          sandbox: this.config.EXCHANGES.BYBIT.sandbox,
          enableRateLimit: true,
          rateLimit: this.config.EXCHANGES.BYBIT.rateLimit,
        })

        await this.exchanges.bybit.loadMarkets()
        this.logger.info("✅ Bybit conectado")
      }

      this.isInitialized = true
      this.logger.info("🎉 RealPriceFetcher inicializado correctamente")
    } catch (error) {
      this.logger.error("❌ Error inicializando RealPriceFetcher:", error.message)
      throw error
    }
  }

  /**
   * Obtiene precios reales de todos los exchanges para un par específico
   */
  async fetchPricesForPair(pair) {
    if (!this.isInitialized) {
      throw new Error("RealPriceFetcher no está inicializado")
    }

    const prices = {}

    for (const [exchangeName, exchange] of Object.entries(this.exchanges)) {
      try {
        // Verificar si el par está disponible
        if (!exchange.markets[pair]) {
          this.logger.warn(`⚠️  Par ${pair} no disponible en ${exchangeName}`)
          continue
        }

        // Obtener ticker
        const ticker = await exchange.fetchTicker(pair)

        prices[exchangeName] = {
          price: ticker.last,
          bid: ticker.bid,
          ask: ticker.ask,
          volume: ticker.baseVolume,
          timestamp: ticker.timestamp,
          lastUpdate: Date.now(),
        }

        this.logger.debug(`📊 ${exchangeName}: ${pair} = $${ticker.last?.toFixed(4)}`)
      } catch (error) {
        this.logger.error(`❌ Error obteniendo precio de ${pair} en ${exchangeName}:`, error.message)
      }
    }

    // Guardar en caché
    this.lastPrices[pair] = prices

    return prices
  }

  /**
   * Obtiene precios de todos los pares configurados
   */
  async fetchAllPrices() {
    const allPrices = {}

    for (const pair of this.config.TRADING_PAIRS) {
      try {
        allPrices[pair] = await this.fetchPricesForPair(pair)

        // Pequeña pausa para evitar rate limits
        await new Promise((resolve) => setTimeout(resolve, 100))
      } catch (error) {
        this.logger.error(`❌ Error obteniendo precios para ${pair}:`, error.message)
      }
    }

    return allPrices
  }

  /**
   * Calcula oportunidades de arbitraje
   */
  calculateArbitrageOpportunities(prices) {
    const opportunities = {}

    for (const [pair, exchangePrices] of Object.entries(prices)) {
      const exchanges = Object.keys(exchangePrices)

      if (exchanges.length < 2) {
        continue
      }

      let bestBuy = null
      let bestSell = null
      let lowestAsk = Number.POSITIVE_INFINITY
      let highestBid = 0

      // Encontrar mejor compra (menor ask) y mejor venta (mayor bid)
      for (const [exchangeName, priceData] of Object.entries(exchangePrices)) {
        if (priceData.ask && priceData.ask < lowestAsk) {
          lowestAsk = priceData.ask
          bestBuy = { exchange: exchangeName, price: priceData.ask }
        }

        if (priceData.bid && priceData.bid > highestBid) {
          highestBid = priceData.bid
          bestSell = { exchange: exchangeName, price: priceData.bid }
        }
      }

      if (bestBuy && bestSell && bestBuy.exchange !== bestSell.exchange) {
        const profitPercentage = ((bestSell.price - bestBuy.price) / bestBuy.price) * 100

        opportunities[pair] = {
          exchanges: exchangePrices,
          bestBuy,
          bestSell,
          profitPercentage,
          isOpportunity: profitPercentage >= this.config.STRATEGIES.BASIC.minProfitPercentage,
          minProfitThreshold: this.config.STRATEGIES.BASIC.minProfitPercentage,
        }
      }
    }

    return opportunities
  }

  /**
   * Obtiene los últimos precios del caché
   */
  getLastPrices() {
    return this.lastPrices
  }

  /**
   * Verifica el estado de las conexiones
   */
  async checkConnections() {
    const status = {}

    for (const [exchangeName, exchange] of Object.entries(this.exchanges)) {
      try {
        const exchangeStatus = await exchange.fetchStatus()
        status[exchangeName] = {
          connected: true,
          status: exchangeStatus.status || "active",
          updated: exchangeStatus.updated,
        }
      } catch (error) {
        status[exchangeName] = {
          connected: false,
          error: error.message,
        }
      }
    }

    return status
  }
}

module.exports = RealPriceFetcher


------------------------------------------------------------------------------------------------------------

MOBILE

// Versión simplificada sin dependencias
class MobileAPI {
  constructor(config) {
    this.enabled = false;
    console.log('📱 Mobile API disabled (firebase-admin no instalado)');
  }
  
  start() {
    // No hacer nada
    return;
  }
  
  stop() {
    // No hacer nada
    return;
  }
  
  sendNotification() {
    // No hacer nada
    return;
  }
}

module.exports = MobileAPI;

----------------------------------------------------------------------------------------------------------

const express = require('express');
const jwt = require('jsonwebtoken');
const rateLimit = require('express-rate-limit');
const cors = require('cors');
const admin = require('firebase-admin');

/**
 * API Móvil para el Bot de Arbitraje
 * Proporciona endpoints para la aplicación móvil
 */
class MobileAPI {
    constructor(config) {
        this.config = config;
        this.enabled = config.MOBILE_API.ENABLED;
        this.port = config.MOBILE_API.PORT;
        this.jwtSecret = config.MOBILE_API.JWT_SECRET;
        this.jwtExpiry = config.MOBILE_API.JWT_EXPIRY;
        this.rateLimitConfig = config.MOBILE_API.RATE_LIMIT;
        this.corsConfig = config.MOBILE_API.CORS;
        this.endpoints = config.MOBILE_API.ENDPOINTS;
        this.pushNotifications = config.MOBILE_API.PUSH_NOTIFICATIONS;
        
        this.app = express();
        this.server = null;
        this.bot = null;
        this.authenticatedUsers = new Map();
        
        this.logger = console;
    }
    
    /**
     * Inicializa la API móvil
     */
    async initialize() {
        if (!this.enabled) {
            this.logger.info('Mobile API deshabilitada');
            return;
        }
        
        this.logger.info('Inicializando Mobile API...');
        
        try {
            // Configurar middleware
            this.setupMiddleware();
            
            // Configurar rutas
            this.setupRoutes();
            
            // Inicializar Firebase para notificaciones push
            if (this.pushNotifications.enabled) {
                await this.initializeFirebase();
            }
            
            // Iniciar servidor
            await this.startServer();
            
            this.logger.info(`Mobile API inicializada en puerto ${this.port}`);
        } catch (error) {
            this.logger.error('Error inicializando Mobile API:', error);
            throw error;
        }
    }
    
    /**
     * Configura el middleware de Express
     */
    setupMiddleware() {
        // CORS
        this.app.use(cors(this.corsConfig));
        
        // Rate limiting
        const limiter = rateLimit(this.rateLimitConfig);
        this.app.use(limiter);
        
        // Body parser
        this.app.use(express.json({ limit: '10mb' }));
        this.app.use(express.urlencoded({ extended: true }));
        
        // Logging middleware
        this.app.use((req, res, next) => {
            this.logger.info(`${req.method} ${req.path} - ${req.ip}`);
            next();
        });
        
        // Error handling middleware
        this.app.use((error, req, res, next) => {
            this.logger.error('API Error:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        });
    }
    
    /**
     * Configura las rutas de la API
     */
    setupRoutes() {
        // Ruta de autenticación
        this.app.post('/api/mobile/auth/login', this.handleLogin.bind(this));
        this.app.post('/api/mobile/auth/logout', this.authenticateToken.bind(this), this.handleLogout.bind(this));
        this.app.post('/api/mobile/auth/refresh', this.handleRefreshToken.bind(this));
        
        // Rutas protegidas
        this.app.use('/api/mobile/*', this.authenticateToken.bind(this));
        
        // Estado del bot
        this.app.get(this.endpoints.STATUS, this.handleGetStatus.bind(this));
        
        // Operaciones
        this.app.get(this.endpoints.TRADES, this.handleGetTrades.bind(this));
        this.app.get('/api/mobile/trades/:id', this.handleGetTradeDetails.bind(this));
        
        // Portfolio
        this.app.get(this.endpoints.PORTFOLIO, this.handleGetPortfolio.bind(this));
        this.app.get('/api/mobile/portfolio/history', this.handleGetPortfolioHistory.bind(this));
        
        // Alertas
        this.app.get(this.endpoints.ALERTS, this.handleGetAlerts.bind(this));
        this.app.post('/api/mobile/alerts/mark-read', this.handleMarkAlertsRead.bind(this));
        
        // Configuración
        this.app.get(this.endpoints.SETTINGS, this.handleGetSettings.bind(this));
        this.app.put(this.endpoints.SETTINGS, this.handleUpdateSettings.bind(this));
        
        // Control del bot
        this.app.post('/api/mobile/bot/start', this.handleStartBot.bind(this));
        this.app.post('/api/mobile/bot/stop', this.handleStopBot.bind(this));
        this.app.post('/api/mobile/bot/strategy', this.handleChangeStrategy.bind(this));
        
        // Estadísticas
        this.app.get('/api/mobile/stats/summary', this.handleGetStatsSummary.bind(this));
        this.app.get('/api/mobile/stats/performance', this.handleGetPerformanceStats.bind(this));
        
        // Notificaciones push
        this.app.post('/api/mobile/notifications/register', this.handleRegisterDevice.bind(this));
        this.app.post('/api/mobile/notifications/unregister', this.handleUnregisterDevice.bind(this));
        
        // Health check
        this.app.get('/api/mobile/health', (req, res) => {
            res.json({ status: 'ok', timestamp: new Date().toISOString() });
        });
    }
    
    /**
     * Inicializa Firebase para notificaciones push
     */
    async initializeFirebase() {
        try {
            if (!this.pushNotifications.fcmServerKey) {
                throw new Error('FCM Server Key no configurado');
            }
            
            // En una implementación real, aquí inicializaríamos Firebase Admin SDK
            this.logger.info('Firebase inicializado para notificaciones push');
        } catch (error) {
            this.logger.error('Error inicializando Firebase:', error);
            this.pushNotifications.enabled = false;
        }
    }
    
    /**
     * Inicia el servidor
     */
    async startServer() {
        return new Promise((resolve, reject) => {
            this.server = this.app.listen(this.port, (error) => {
                if (error) {
                    reject(error);
                } else {
                    resolve();
                }
            });
        });
    }
    
    /**
     * Middleware de autenticación
     */
    authenticateToken(req, res, next) {
        const authHeader = req.headers['authorization'];
        const token = authHeader && authHeader.split(' ')[1];
        
        if (!token) {
            return res.status(401).json({
                success: false,
                error: 'Token de acceso requerido'
            });
        }
        
        jwt.verify(token, this.jwtSecret, (error, user) => {
            if (error) {
                return res.status(403).json({
                    success: false,
                    error: 'Token inválido'
                });
            }
            
            req.user = user;
            next();
        });
    }
    
    /**
     * Maneja el login
     */
    async handleLogin(req, res) {
        try {
            const { username, password } = req.body;
            
            // En una implementación real, aquí verificaríamos las credenciales
            // Para esta implementación, usaremos credenciales hardcodeadas
            if (username === 'admin' && password === 'admin123') {
                const user = {
                    id: 1,
                    username: 'admin',
                    role: 'admin'
                };
                
                const token = jwt.sign(user, this.jwtSecret, { expiresIn: this.jwtExpiry });
                const refreshToken = jwt.sign(user, this.jwtSecret + '_refresh', { expiresIn: '7d' });
                
                // Guardar usuario autenticado
                this.authenticatedUsers.set(user.id, {
                    ...user,
                    token,
                    refreshToken,
                    loginTime: new Date()
                });
                
                res.json({
                    success: true,
                    data: {
                        user,
                        token,
                        refreshToken
                    }
                });
            } else {
                res.status(401).json({
                    success: false,
                    error: 'Credenciales inválidas'
                });
            }
        } catch (error) {
            this.logger.error('Error en login:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Maneja el logout
     */
    async handleLogout(req, res) {
        try {
            const userId = req.user.id;
            
            // Remover usuario autenticado
            this.authenticatedUsers.delete(userId);
            
            res.json({
                success: true,
                message: 'Logout exitoso'
            });
        } catch (error) {
            this.logger.error('Error en logout:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Maneja la renovación de token
     */
    async handleRefreshToken(req, res) {
        try {
            const { refreshToken } = req.body;
            
            if (!refreshToken) {
                return res.status(401).json({
                    success: false,
                    error: 'Refresh token requerido'
                });
            }
            
            jwt.verify(refreshToken, this.jwtSecret + '_refresh', (error, user) => {
                if (error) {
                    return res.status(403).json({
                        success: false,
                        error: 'Refresh token inválido'
                    });
                }
                
                const newToken = jwt.sign(
                    { id: user.id, username: user.username, role: user.role },
                    this.jwtSecret,
                    { expiresIn: this.jwtExpiry }
                );
                
                res.json({
                    success: true,
                    data: { token: newToken }
                });
            });
        } catch (error) {
            this.logger.error('Error renovando token:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene el estado del bot
     */
    async handleGetStatus(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const status = this.bot.getStatus();
            const riskAnalysis = this.bot.getRiskAnalysis();
            
            res.json({
                success: true,
                data: {
                    ...status,
                    riskAnalysis
                }
            });
        } catch (error) {
            this.logger.error('Error obteniendo estado:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene las operaciones
     */
    async handleGetTrades(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { page = 1, limit = 20, type, status } = req.query;
            const offset = (page - 1) * limit;
            
            let trades = this.bot.getTradeHistory();
            
            // Filtrar por tipo si se especifica
            if (type) {
                trades = trades.filter(trade => trade.type === type);
            }
            
            // Filtrar por estado si se especifica
            if (status) {
                trades = trades.filter(trade => 
                    status === 'success' ? trade.success : !trade.success
                );
            }
            
            // Paginar
            const total = trades.length;
            const paginatedTrades = trades.slice(offset, offset + parseInt(limit));
            
            res.json({
                success: true,
                data: {
                    trades: paginatedTrades,
                    pagination: {
                        page: parseInt(page),
                        limit: parseInt(limit),
                        total,
                        pages: Math.ceil(total / limit)
                    }
                }
            });
        } catch (error) {
            this.logger.error('Error obteniendo operaciones:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene detalles de una operación específica
     */
    async handleGetTradeDetails(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { id } = req.params;
            const trades = this.bot.getTradeHistory();
            const trade = trades.find(t => t.id === id);
            
            if (!trade) {
                return res.status(404).json({
                    success: false,
                    error: 'Operación no encontrada'
                });
            }
            
            res.json({
                success: true,
                data: trade
            });
        } catch (error) {
            this.logger.error('Error obteniendo detalles de operación:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene información del portfolio
     */
    async handleGetPortfolio(req, res) {
        try {
            // En una implementación real, obtendríamos datos del portfolio manager
            const portfolioData = {
                totalValue: 10500.75,
                totalProfit: 500.75,
                totalProfitPercentage: 5.01,
                balances: {
                    'Binance': 2625.19,
                    'Coinbase': 2631.25,
                    'Kraken': 2622.15,
                    'Kucoin': 2622.16
                },
                allocation: {
                    'Binance': 25.0,
                    'Coinbase': 25.1,
                    'Kraken': 24.9,
                    'Kucoin': 25.0
                },
                lastUpdate: new Date().toISOString()
            };
            
            res.json({
                success: true,
                data: portfolioData
            });
        } catch (error) {
            this.logger.error('Error obteniendo portfolio:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene historial del portfolio
     */
    async handleGetPortfolioHistory(req, res) {
        try {
            const { period = '7d' } = req.query;
            
            // Simular datos históricos
            const history = [];
            const now = new Date();
            let days;
            
            switch (period) {
                case '1d':
                    days = 1;
                    break;
                case '7d':
                    days = 7;
                    break;
                case '30d':
                    days = 30;
                    break;
                default:
                    days = 7;
            }
            
            for (let i = days; i >= 0; i--) {
                const date = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);
                history.push({
                    timestamp: date.toISOString(),
                    value: 10000 + Math.random() * 1000,
                    profit: Math.random() * 100 - 50
                });
            }
            
            res.json({
                success: true,
                data: history
            });
        } catch (error) {
            this.logger.error('Error obteniendo historial de portfolio:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene alertas
     */
    async handleGetAlerts(req, res) {
        try {
            // En una implementación real, obtendríamos alertas del alert manager
            const alerts = [
                {
                    id: 'alert_1',
                    type: 'trade_executed',
                    message: 'Arbitraje ejecutado: BTC/USDT - Ganancia: 0.5%',
                    timestamp: new Date().toISOString(),
                    priority: 'medium',
                    read: false
                },
                {
                    id: 'alert_2',
                    type: 'risk_warning',
                    message: 'Volatilidad alta detectada en el mercado',
                    timestamp: new Date(Date.now() - 3600000).toISOString(),
                    priority: 'high',
                    read: true
                }
            ];
            
            res.json({
                success: true,
                data: alerts
            });
        } catch (error) {
            this.logger.error('Error obteniendo alertas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Marca alertas como leídas
     */
    async handleMarkAlertsRead(req, res) {
        try {
            const { alertIds } = req.body;
            
            // En una implementación real, marcaríamos las alertas como leídas
            this.logger.info(`Marcando alertas como leídas: ${alertIds.join(', ')}`);
            
            res.json({
                success: true,
                message: 'Alertas marcadas como leídas'
            });
        } catch (error) {
            this.logger.error('Error marcando alertas como leídas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene configuración
     */
    async handleGetSettings(req, res) {
        try {
            const settings = {
                riskLevel: 'medium',
                maxExposure: 20,
                strategies: ['basic', 'triangular'],
                notifications: {
                    trades: true,
                    alerts: true,
                    dailySummary: false
                },
                autoRebalance: true
            };
            
            res.json({
                success: true,
                data: settings
            });
        } catch (error) {
            this.logger.error('Error obteniendo configuración:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Actualiza configuración
     */
    async handleUpdateSettings(req, res) {
        try {
            const settings = req.body;
            
            // En una implementación real, actualizaríamos la configuración del bot
            this.logger.info('Actualizando configuración:', settings);
            
            res.json({
                success: true,
                message: 'Configuración actualizada correctamente'
            });
        } catch (error) {
            this.logger.error('Error actualizando configuración:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Inicia el bot
     */
    async handleStartBot(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { mode = 'simulation' } = req.body;
            
            await this.bot.start(mode);
            
            // Enviar notificación push
            if (this.pushNotifications.enabled) {
                await this.sendPushNotification(req.user.id, {
                    title: 'Bot Iniciado',
                    body: `Bot iniciado en modo ${mode}`,
                    data: { type: 'bot_started', mode }
                });
            }
            
            res.json({
                success: true,
                message: 'Bot iniciado correctamente'
            });
        } catch (error) {
            this.logger.error('Error iniciando bot:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Detiene el bot
     */
    async handleStopBot(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            await this.bot.stop();
            
            // Enviar notificación push
            if (this.pushNotifications.enabled) {
                await this.sendPushNotification(req.user.id, {
                    title: 'Bot Detenido',
                    body: 'Bot detenido correctamente',
                    data: { type: 'bot_stopped' }
                });
            }
            
            res.json({
                success: true,
                message: 'Bot detenido correctamente'
            });
        } catch (error) {
            this.logger.error('Error deteniendo bot:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Cambia la estrategia del bot
     */
    async handleChangeStrategy(req, res) {
        try {
            if (!this.bot) {
                return res.status(503).json({
                    success: false,
                    error: 'Bot no disponible'
                });
            }
            
            const { strategy } = req.body;
            
            this.bot.changeStrategy(strategy);
            
            res.json({
                success: true,
                message: `Estrategia cambiada a ${strategy}`
            });
        } catch (error) {
            this.logger.error('Error cambiando estrategia:', error);
            res.status(500).json({
                success: false,
                error: error.message
            });
        }
    }
    
    /**
     * Obtiene resumen de estadísticas
     */
    async handleGetStatsSummary(req, res) {
        try {
            const stats = {
                totalTrades: 156,
                successfulTrades: 142,
                failedTrades: 14,
                winRate: 91.03,
                totalProfit: 1250.75,
                averageProfit: 8.79,
                bestTrade: 45.20,
                worstTrade: -12.30,
                sharpeRatio: 1.85,
                maxDrawdown: 3.2
            };
            
            res.json({
                success: true,
                data: stats
            });
        } catch (error) {
            this.logger.error('Error obteniendo estadísticas:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Obtiene estadísticas de rendimiento
     */
    async handleGetPerformanceStats(req, res) {
        try {
            const { period = '30d' } = req.query;
            
            // Simular datos de rendimiento
            const performance = {
                period,
                totalReturn: 12.5,
                annualizedReturn: 156.2,
                volatility: 8.3,
                sharpeRatio: 1.85,
                maxDrawdown: 3.2,
                calmarRatio: 48.8,
                winRate: 91.03,
                profitFactor: 6.45,
                averageTrade: 8.79,
                tradesPerDay: 5.2
            };
            
            res.json({
                success: true,
                data: performance
            });
        } catch (error) {
            this.logger.error('Error obteniendo estadísticas de rendimiento:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Registra dispositivo para notificaciones push
     */
    async handleRegisterDevice(req, res) {
        try {
            const { deviceToken, platform } = req.body;
            const userId = req.user.id;
            
            // En una implementación real, guardaríamos el token del dispositivo
            this.logger.info(`Registrando dispositivo para usuario ${userId}: ${platform}`);
            
            res.json({
                success: true,
                message: 'Dispositivo registrado para notificaciones'
            });
        } catch (error) {
            this.logger.error('Error registrando dispositivo:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Desregistra dispositivo para notificaciones push
     */
    async handleUnregisterDevice(req, res) {
        try {
            const { deviceToken } = req.body;
            const userId = req.user.id;
            
            // En una implementación real, removeríamos el token del dispositivo
            this.logger.info(`Desregistrando dispositivo para usuario ${userId}`);
            
            res.json({
                success: true,
                message: 'Dispositivo desregistrado de notificaciones'
            });
        } catch (error) {
            this.logger.error('Error desregistrando dispositivo:', error);
            res.status(500).json({
                success: false,
                error: 'Error interno del servidor'
            });
        }
    }
    
    /**
     * Envía notificación push a un usuario
     * @param {number} userId - ID del usuario
     * @param {Object} notification - Datos de la notificación
     */
    async sendPushNotification(userId, notification) {
        try {
            if (!this.pushNotifications.enabled) {
                return;
            }
            
            // En una implementación real, enviaríamos la notificación usando Firebase
            this.logger.info(`Enviando notificación push a usuario ${userId}:`, notification);
        } catch (error) {
            this.logger.error('Error enviando notificación push:', error);
        }
    }
    
    /**
     * Establece la referencia al bot
     * @param {Object} bot - Instancia del bot
     */
    setBot(bot) {
        this.bot = bot;
    }
    
    /**
     * Detiene la API móvil
     */
    async stop() {
        if (this.server) {
            return new Promise((resolve) => {
                this.server.close(() => {
                    this.logger.info('Mobile API detenida');
                    resolve();
                });
            });
        }
    }
}

module.exports = MobileAPI;


-----------------------------------------------------------------------------------------------------------

PAGES

"use client"

import { useState, useEffect } from "react"
import { useBot } from "../contexts/BotContext"

const AIAdvisor = () => {
  const { getAISuggestions, loading: botLoading } = useBot()
  const [suggestions, setSuggestions] = useState(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)

  useEffect(() => {
    fetchSuggestions()
  }, [])

  const fetchSuggestions = async () => {
    try {
      setLoading(true)
      const data = await getAISuggestions()
      setSuggestions(data)
      setError(null)
    } catch (error) {
      console.error("Error fetching AI suggestions:", error)
      setError("Error obteniendo sugerencias de IA")
    } finally {
      setLoading(false)
    }
  }

  if (loading || botLoading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: "80vh" }}>
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Cargando...</span>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="alert alert-danger" role="alert">
        {error}
      </div>
    )
  }

  return (
    <div className="container-fluid p-0">
      <div className="row mb-4">
        <div className="col-12">
          <div className="dashboard-card">
            <div className="d-flex justify-content-between align-items-center">
              <div>
                <h4 className="mb-0">
                  <span className="ai-badge me-2">
                    <i className="bi bi-robot"></i>
                    IA
                  </span>
                  Asesor de Trading Inteligente
                </h4>
                <p className="text-muted mb-0">Análisis y recomendaciones basadas en inteligencia artificial</p>
              </div>

              <div>
                <button className="btn btn-primary" onClick={fetchSuggestions}>
                  <i className="bi bi-arrow-clockwise me-2"></i>
                  Actualizar Análisis
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Recomendaciones Generales */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="dashboard-card">
            <h5 className="card-header">Recomendaciones Generales</h5>

            {suggestions?.generalRecommendations?.length > 0 ? (
              <div className="mt-3">
                {suggestions.generalRecommendations.map((recommendation, index) => (
                  <div key={index} className={`ai-recommendation ${recommendation.importance.toLowerCase()}`}>
                    <div className="d-flex align-items-center mb-2">
                      <span
                        className={`badge bg-${recommendation.importance === "HIGH" ? "danger" : recommendation.importance === "MEDIUM" ? "warning" : "info"} me-2`}
                      >
                        {recommendation.importance === "HIGH"
                          ? "Alta Prioridad"
                          : recommendation.importance === "MEDIUM"
                            ? "Media Prioridad"
                            : "Baja Prioridad"}
                      </span>
                      <strong>{recommendation.type.replace("_", " ")}</strong>
                    </div>
                    <p className="mb-0">{recommendation.message}</p>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-4">
                <i className="bi bi-emoji-smile fs-4 text-muted"></i>
                <p className="mt-2 mb-0">No hay recomendaciones generales en este momento</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Oportunidades Analizadas */}
      <div className="row mb-4">
        <div className="col-12">
          <div className="dashboard-card">
            <h5 className="card-header">Oportunidades Analizadas por IA</h5>

            {suggestions?.opportunities?.length > 0 ? (
              <div className="table-responsive">
                <table className="dashboard-table">
                  <thead>
                    <tr>
                      <th>Par</th>
                      <th>Exchanges</th>
                      <th>Profit</th>
                      <th>Probabilidad de Éxito</th>
                      <th>Tamaño Óptimo</th>
                      <th>Recomendación</th>
                      <th>Acción</th>
                    </tr>
                  </thead>
                  <tbody>
                    {suggestions.opportunities.map((opportunity, index) => (
                      <tr key={index}>
                        <td>{opportunity.pair}</td>
                        <td>
                          {opportunity.buyExchange} → {opportunity.sellExchange}
                        </td>
                        <td className="text-success">{opportunity.finalProfit.toFixed(2)}%</td>
                        <td>
                          <div className="progress" style={{ height: "6px" }}>
                            <div
                              className={`progress-bar ${opportunity.aiPrediction.successProbability > 0.7 ? "bg-success" : opportunity.aiPrediction.successProbability > 0.4 ? "bg-warning" : "bg-danger"}`}
                              role="progressbar"
                              style={{ width: `${opportunity.aiPrediction.successProbability * 100}%` }}
                              aria-valuenow={opportunity.aiPrediction.successProbability * 100}
                              aria-valuemin="0"
                              aria-valuemax="100"
                            ></div>
                          </div>
                          <small>
                            {(opportunity.aiPrediction.successProbability * 100).toFixed(1)}% (
                            {opportunity.aiPrediction.confidence})
                          </small>
                        </td>
                        <td>{opportunity.aiPrediction.optimalSize} USDT</td>
                        <td>
                          <span
                            className={`badge ${opportunity.aiPrediction.recommendedTiming === "EXECUTE_NOW" ? "badge-success" : opportunity.aiPrediction.recommendedTiming === "WAIT" ? "badge-warning" : "badge-info"}`}
                          >
                            {opportunity.aiPrediction.recommendedTiming === "EXECUTE_NOW"
                              ? "Ejecutar Ahora"
                              : opportunity.aiPrediction.recommendedTiming === "WAIT"
                                ? "Esperar"
                                : "Neutral"}
                          </span>
                        </td>
                        <td>
                          <button className="btn btn-sm btn-outline-primary">
                            <i className="bi bi-info-circle me-1"></i>
                            Detalles
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-4">
                <i className="bi bi-search fs-4 text-muted"></i>
                <p className="mt-2 mb-0">No hay oportunidades analizadas en este momento</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Análisis de Mercado */}
      <div className="row">
        <div className="col-md-6">
          <div className="dashboard-card h-100">
            <h5 className="card-header">Tendencias Recientes</h5>

            {suggestions?.marketInsights?.recentTrends?.length > 0 ? (
              <div className="table-responsive">
                <table className="dashboard-table">
                  <thead>
                    <tr>
                      <th>Par</th>
                      <th>Dirección</th>
                      <th>Cambio</th>
                      <th>Fuerza</th>
                    </tr>
                  </thead>
                  <tbody>
                    {suggestions.marketInsights.recentTrends.map((trend, index) => (
                      <tr key={index}>
                        <td>{trend.pair}</td>
                        <td>
                          {trend.direction === "UP" ? (
                            <span className="text-success">
                              <i className="bi bi-arrow-up-right me-1"></i>
                              Subida
                            </span>
                          ) : trend.direction === "DOWN" ? (
                            <span className="text-danger">
                              <i className="bi bi-arrow-down-right me-1"></i>
                              Bajada
                            </span>
                          ) : (
                            <span className="text-muted">
                              <i className="bi bi-arrow-right me-1"></i>
                              Neutral
                            </span>
                          )}
                        </td>
                        <td
                          className={
                            trend.percentChange > 0
                              ? "text-success"
                              : trend.percentChange < 0
                                ? "text-danger"
                                : "text-muted"
                          }
                        >
                          {trend.percentChange.toFixed(2)}%
                        </td>
                        <td>
                          <span className={`badge ${trend.strength === "STRONG" ? "badge-danger" : "badge-warning"}`}>
                            {trend.strength === "STRONG" ? "Fuerte" : "Moderada"}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center py-4">
                <p className="mb-0">No hay datos de tendencias disponibles</p>
              </div>
            )}
          </div>
        </div>

        <div className="col-md-6">
          <div className="dashboard-card h-100">
            <h5 className="card-header">Mejores Horas de Trading</h5>

            {suggestions?.marketInsights?.bestTradingHours?.length > 0 ? (
              <div className="mt-3">
                <div className="list-group">
                  {suggestions.marketInsights.bestTradingHours.map((hour, index) => (
                    <div key={index} className="list-group-item list-group-item-action">
                      <div className="d-flex w-100 justify-content-between">
                        <h6 className="mb-1">
                          <i className="bi bi-clock me-2"></i>
                          {hour.formattedHour}
                        </h6>
                        <small className="text-success">{(hour.successRate * 100).toFixed(1)}% de éxito</small>
                      </div>
                      <div className="progress mt-2" style={{ height: "6px" }}>
                        <div
                          className="progress-bar bg-success"
                          role="progressbar"
                          style={{ width: `${hour.successRate * 100}%` }}
                          aria-valuenow={hour.successRate * 100}
                          aria-valuemin="0"
                          aria-valuemax="100"
                        ></div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-3 p-3 bg-light-info rounded">
                  <div className="d-flex align-items-center mb-2">
                    <i className="bi bi-info-circle text-info me-2"></i>
                    <strong>Volatilidad del Mercado</strong>
                  </div>
                  <p className="mb-0">
                    Volatilidad actual: <strong>{suggestions.marketInsights.marketVolatility.toFixed(2)}%</strong>
                    {suggestions.marketInsights.marketVolatility > 4 ? (
                      <span className="text-danger ms-2">(Alta - Precaución)</span>
                    ) : suggestions.marketInsights.marketVolatility > 2 ? (
                      <span className="text-warning ms-2">(Moderada)</span>
                    ) : (
                      <span className="text-success ms-2">(Baja - Favorable)</span>
                    )}
                  </p>
                </div>
              </div>
            ) : (
              <div className="text-center py-4">
                <p className="mb-0">No hay datos de horas óptimas disponibles</p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default AIAdvisor

----------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

function AnomalyDetectionPanel() {
  const [anomalies, setAnomalies] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/api/anomalias")
      .then(res => res.json())
      .then(data => {
        setAnomalies(data.anomalias || []);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, []);

  return (
    <div id="anomalies" className="panel">
      <h3>Detección de Anomalías</h3>
      {loading ? (
        <div className="text-muted">Cargando...</div>
      ) : anomalies.length === 0 ? (
        <div className="text-muted">No se detectaron anomalías recientes.</div>
      ) : (
        <ul>
          {anomalies.map((anomaly, i) => (
            <li key={i}>
              <strong>{anomaly.type || anomaly.categoria || "Anomalía"}</strong>
              {anomaly.timestamp && (
                <> ({new Date(anomaly.timestamp).toLocaleString()})</>
              )}
              {anomaly.descripcion && (
                <>: {anomaly.descripcion}</>
              )}
              {anomaly.message && !anomaly.descripcion && (
                <>: {anomaly.message}</>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
}

export default AnomalyDetectionPanel;

---------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

function AnomalyDetectionPanel() {
  const [anomalies, setAnomalies] = useState([]);

  useEffect(() => {
    fetch("/api/anomalies")
      .then(res => res.json())
      .then(data => setAnomalies(data.anomalies || []))
      .catch(() => setAnomalies([]));
  }, []);

  return (
    <div id="anomalies" className="panel">
      <h3>Anomalías de Mercado</h3>
      <ul>
        {anomalies.length === 0 ? (
          <li>No se detectaron anomalías.</li>
        ) : (
          anomalies.map((a, i) => (
            <li key={i}>
              {a.type}: {a.description} ({a.timestamp})
            </li>
          ))
        )}
      </ul>
    </div>
  );
}

export default AnomalyDetectionPanel;

-----------------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

function ArbitragePanel() {
  const [status, setStatus] = useState("off");
  const [opportunities, setOpportunities] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Cargar oportunidades de arbitraje
    fetch("/api/opportunities")
      .then(res => res.json())
      .then(data => setOpportunities(data.opportunities || []))
      .catch(() => setOpportunities([]));
    // Cargar estado del bot
    fetch("/api/bot/status")
      .then(res => res.json())
      .then(data => setStatus(data.status))
      .catch(() => setStatus("off"));
  }, []);

  const handleToggle = () => {
    setLoading(true);
    fetch(`/api/bot/${status === "on" ? "stop" : "start"}`, { method: "POST" })
      .then(() => setStatus(status === "on" ? "off" : "on"))
      .finally(() => setLoading(false));
  };

  return (
    <div id="arbitrage" className="panel">
      <h3>Arbitraje Automático</h3>
      <button onClick={handleToggle} disabled={loading}>
        {status === "on" ? "Detener Arbitraje" : "Iniciar Arbitraje"}
      </button>
      <ul>
        {opportunities.length === 0 ? (
          <li>No hay oportunidades disponibles.</li>
        ) : (
          opportunities.map((opp, i) => (
            <li key={i}>
              {opp.description} — Profit: {opp.profit}%
            </li>
          ))
        )}
      </ul>
    </div>
  );
}

export default ArbitragePanel;

---------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

-----------------------------------------------------------------------------------------------------------------------

import React from "react";

export default function BalancesRiskPanel() {
  return (
    <div className="panel">
      <h2>💼 Balances Iniciales & Control de Riesgo</h2>
      <h3>Balances Iniciales</h3>
      <table>
        <thead>
          <tr>
            <th>Exchange</th>
            <th>USDT</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>BINANCE</td>
            <td>20</td>
          </tr>
          <tr>
            <td>BYBIT</td>
            <td>20</td>
          </tr>
        </tbody>
      </table>
      <h3>Umbrales y Control de Riesgo</h3>
      <table>
        <thead>
          <tr>
            <th>Exchange</th>
            <th>Mín/Máx x operación</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>BINANCE</td>
            <td>10</td>
          </tr>
          <tr>
            <td>BYBIT</td>
            <td>10</td>
          </tr>
        </tbody>
      </table>
      <p><b>Spread mínimo para arbitraje:</b> 
        <span style={{color: "#23408e"}}> 0.2% recomendado</span>
      </p>
      <p><b>Slippage máximo tolerado:</b> 
        <span style={{color: "#23408e"}}> 0.15% recomendado</span>
      </p>
      <h3>Límites y Regulaciones</h3>
      <ul>
        <li><b>Límites de retiro/trading:</b> Ninguno (ambos exchanges)</li>
        <li><b>Restricciones/regulaciones por país:</b> Ninguno</li>
      </ul>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";

const CommissionPanel = () => {
  const [commissions, setCommissions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetch("/api/commissions")
      .then((res) => res.json())
      .then((data) => {
        setCommissions(data.commissions || []);
        setLoading(false);
      })
      .catch(() => {
        setError("Error al cargar comisiones.");
        setLoading(false);
      });
  }, []);

  return (
    <div className="panel">
      <h2>Comisiones</h2>
      {loading && <div>Cargando comisiones...</div>}
      {error && <div style={{ color: "red" }}>{error}</div>}
      {!loading && !error && commissions.length === 0 && (
        <div>No hay datos de comisiones.</div>
      )}
      {!loading && !error && commissions.length > 0 && (
        <table>
          <thead>
            <tr>
              <th>Exchange</th>
              <th>Tipo</th>
              <th>Comisión</th>
            </tr>
          </thead>
          <tbody>
            {commissions.map((c, idx) => (
              <tr key={idx}>
                <td>{c.exchange || "N/A"}</td>
                <td>{c.type || "N/A"}</td>
                <td>{c.fee || "N/A"}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default CommissionPanel;

-----------------------------------------------------------------------------------------------------------------------

/* General Styles */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
    color: #333;
}

/* Sidebar Styles */
.sidebar {
    background-color: #343a40;
    color: #fff;
    min-height: 100vh;
    padding: 20px 0;
    position: fixed;
    width: inherit;
    max-width: inherit;
}

.sidebar-header {
    padding: 0 15px 20px;
    border-bottom: 1px solid #495057;
}

.sidebar .nav-link {
    color: #adb5bd;
    padding: 10px 15px;
    margin: 5px 0;
    border-radius: 5px;
    transition: all 0.3s;
}

.sidebar .nav-link:hover,
.sidebar .nav-link.active {
    color: #fff;
    background-color: #495057;
}

.sidebar .nav-link i {
    margin-right: 10px;
}

/* Main Content Styles */
.main-content {
    margin-left: 16.666667%; /* Ajustar según el ancho del sidebar */
    padding: 20px;
}

.header {
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #dee2e6;
}

/* Card Styles */
.card {
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    overflow: hidden;
}

.card-header {
    background-color: #f8f9fa;
    border-bottom: 1px solid #dee2e6;
    padding: 15px 20px;
}

.card-header h5 {
    margin: 0;
    font-weight: 600;
}

.card-body {
    padding: 20px;
}

/* Status Indicator Styles */
.status-indicator {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}

.status-label {
    font-weight: 600;
    margin-right: 10px;
}

.status-value {
    margin-right: 10px;
}

.status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
}

.status-dot.active {
    background-color: #28a745;
    box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.3);
}

.status-dot.inactive {
    background-color: #dc3545;
    box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.3);
}

/* Metric Styles */
.metric {
    margin-bottom: 10px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.metric-label {
    font-weight: 600;
}

.metric-value {
    font-weight: 500;
    color: #495057;
}

/* Risk Metric Styles */
.risk-metric {
    margin-bottom: 15px;
}

.risk-label {
    font-weight: 600;
    display: block;
    margin-bottom: 5px;
}

.risk-value {
    font-weight: 500;
    color: #495057;
    float: right;
}

.progress {
    height: 8px;
    margin-top: 5px;
    border-radius: 4px;
    background-color: #e9ecef;
    overflow: hidden;
}

/* Chart Container Styles */
.chart-container {
    position: relative;
    height: 300px;
    width: 100%;
}

/* Balance Container Styles */
.balances-container {
    max-height: 200px;
    overflow-y: auto;
}

.balance-item {
    display: flex;
    justify-content: space-between;
    padding: 8px 0;
    border-bottom: 1px solid #dee2e6;
}

.balance-item:last-child {
    border-bottom: none;
}

.exchange-name {
    font-weight: 600;
}

.exchange-balance {
    font-weight: 500;
    color: #495057;
}

/* Control Button Styles */
.controls {
    display: block !important;
    gap: 10px;
    justify-content: center;
}

.btn {
    border-radius: 5px;
    padding: 8px 16px;
    font-weight: 500;
}

/* Mode Indicator Styles */
.mode-indicator {
    font-weight: 600;
}

/* Responsive Adjustments */
@media (max-width: 992px) {
    .sidebar {
        position: static;
        min-height: auto;
        margin-bottom: 20px;
    }
    
    .main-content {
        margin-left: 0;
    }
}

------------------------------------------------------------------------------------------------------------------


import React, { useState, useEffect } from "react";
import "bootstrap-icons/font/bootstrap-icons.css";
import "./dashboard-pro.css";
import OpportunitiesPanel from '../components/OpportunitiesPanel';
import IAPanel from '../components/IAPanel';
import TokenPairsTable from "../components/TokenPairsTable";
import OperationHistory from "../components/OperationHistory";
import PairsPanel from '../components/PairsPanel';

// Configura la URL de tu backend aquí:
const API_BASE = "http://localhost:8888/api"

const BOT_NAME = "YAGECOIN EXCHANGE 🤖";
const BOT_BADGE = "Arbitraje IA Ultimate";
const BOT_LOGO = "https://i.ibb.co/gZ3hKxQt/YGCT-32-X32.png";

// Emojis para cada sección:
const sectionConfig = [
  { emoji: "📈", label: "Precios Tiempo Real", icon: "bi-lightning-charge" },
  { emoji: "💰", label: "Oportunidades", icon: "bi-currency-exchange" },
  { emoji: "💳", label: "Balances", icon: "bi-wallet2" },
  { emoji: "🧠", label: "IA & Estrategia", icon: "bi-cpu" },
  { emoji: "🛡️", label: "Riesgo", icon: "bi-shield-check" },
  { emoji: "🔄", label: "Rebalanceo", icon: "bi-arrow-repeat" },
  { emoji: "📝", label: "Logs", icon: "bi-journal-text" },
  { emoji: "🌐", label: "Direcciones", icon: "bi-link-45deg" },
  { emoji: "💸", label: "Fees", icon: "bi-cash-coin" },
  { emoji: "📊", label: "Métricas", icon: "bi-bar-chart" },
  { emoji: "⚙️", label: "Pares & Control", icon: "bi-sliders" }
];

const PAIRS = [
  { symbol: "LTCUSDT", display: "LTC/USDT", icon: "https://i.postimg.cc/QtnQV83h/litecoin.jpg" },
  { symbol: "BNBUSDT", display: "BNB/USDT", icon: "https://i.postimg.cc/ZnBrdGb3/bnb.png" },
  { symbol: "XRPUSDT", display: "XRP/USDT", icon: "https://i.postimg.cc/4yDpbWy0/xrp.png" },
  [
  { symbol: "LTCUSDT", display: "LTC/USDT" },
  { symbol: "BNBUSDT", display: "BNB/USDT" },
  { symbol: "XRPUSDT", display: "XRP/USDT" },
  { symbol: "ALGOUSDT", display: "ALGO/USDT" },
  { symbol: "ANIMEUSDT", display: "ANIME/USDT" },
  { symbol: "APTUSDT", display: "APT/USDT" },
  { symbol: "ARBUSDT", display: "ARB/USDT" },
  { symbol: "ATOMUSDT", display: "ATOM/USDT" },
  { symbol: "AVAXUSDT", display: "AVAX/USDT" },
  { symbol: "AXLUSDT", display: "AXL/USDT" },
  { symbol: "BBUSDT", display: "BB/USDT" },
  { symbol: "BELUSDT", display: "BEL/USDT" },
  { symbol: "BERAUSDT", display: "BERA/USDT" },
  { symbol: "BOMEUSDT", display: "BOME/USDT" },
  { symbol: "BONKUSDT", display: "BONK/USDT" },
  { symbol: "C98USDT", display: "C98/USDT" },
  { symbol: "CAKEUSDT", display: "CAKE/USDT" },
  { symbol: "CATIUSDT", display: "CATI/USDT" },
  { symbol: "CELOUSDT", display: "CELO/USDT" },
  { symbol: "CGPTUSDT", display: "CGPT/USDT" },
  { symbol: "CHZUSDT", display: "CHZ/USDT" },
  { symbol: "CYBERUSDT", display: "CYBER/USDT" },
  { symbol: "DOGSUSDT", display: "DOGS/USDT" },
  { symbol: "DOTUSDT", display: "DOT/USDT" },
  { symbol: "DYDXUSDT", display: "DYDX/USDT" },
  { symbol: "EGLDUSDT", display: "EGLD/USDT" },
  { symbol: "ENJUSDT", display: "ENJ/USDT" },
  { symbol: "FIDAUSDT", display: "FIDA/USDT" },
  { symbol: "FLOKIUSDT", display: "FLOKI/USDT" },
  { symbol: "FLOWUSDT", display: "FLOW/USDT" },
  { symbol: "GMTUSDT", display: "GMT/USDT" },
  { symbol: "GMXUSDT", display: "GMX/USDT" },
  { symbol: "HAEDALUSDT", display: "HAEDAL/USDT" },
  { symbol: "HBARUSDT", display: "HBAR/USDT" },
  { symbol: "HMSTRUSDT", display: "HMSTR/USDT" },
  { symbol: "HOMEUSDT", display: "HOME/USDT" },
  { symbol: "HYPERUSDT", display: "HYPER/USDT" },
  { symbol: "ICPUSDT", display: "ICP/USDT" },
  { symbol: "ICXUSDT", display: "ICX/USDT" },
  { symbol: "INJUSDT", display: "INJ/USDT" },
  { symbol: "IOUSDT", display: "IO/USDT" },
  { symbol: "JUPUSDT", display: "JUP/USDT" },
  { symbol: "KAIAUSDT", display: "KAIA/USDT" },
  { symbol: "KMNOUSDT", display: "KMNO/USDT" },
  { symbol: "KSMUSDT", display: "KSM/USDT" },
  { symbol: "LUNAUSDT", display: "LUNA/USDT" },
  { symbol: "MAGICUSDT", display: "MAGIC/USDT" },
  { symbol: "MANTAUSDT", display: "MANTA/USDT" },
  { symbol: "MBOXUSDT", display: "MBOX/USDT" },
  { symbol: "MINAUSDT", display: "MINA/USDT" },
  { symbol: "NEARUSDT", display: "NEAR/USDT" },
  { symbol: "NOTUSDT", display: "NOT/USDT" },
  { symbol: "ONEUSDT", display: "ONE/USDT" },
  { symbol: "OPUSDT", display: "OP/USDT" },
  { symbol: "PSGUSDT", display: "PSG/USDT" },
  { symbol: "PYTHUSDT", display: "PYTH/USDT" },
  { symbol: "RDNTUSDT", display: "RDNT/USDT" },
  { symbol: "ROSEUSDT", display: "ROSE/USDT" },
  { symbol: "SCRTUSDT", display: "SCRT/USDT" },
  { symbol: "SEIUSDT", display: "SEI/USDT" },
  { symbol: "SHIBUSDT", display: "SHIB/USDT" },
  { symbol: "SIGNUSDT", display: "SIGN/USDT" },
  { symbol: "STXUSDT", display: "STX/USDT" },
  { symbol: "SUIUSDT", display: "SUI/USDT" },
  { symbol: "TIAUSDT", display: "TIA/USDT" },
  { symbol: "TNSRUSDT", display: "TNSR/USDT" },
  { symbol: "TONUSDT", display: "TON/USDT" },
  { symbol: "TRUMPUSDT", display: "TRUMP/USDT" },
  { symbol: "TRXUSDT", display: "TRX/USDT" },
  { symbol: "WAXPUSDT", display: "WAXP/USDT" },
  { symbol: "WCTUSDT", display: "WCT/USDT" },
  { symbol: "WIFUSDT", display: "WIF/USDT" },
  { symbol: "WLDUSDT", display: "WLD/USDT" },
  { symbol: "XAIUSDT", display: "XAI/USDT" },
  { symbol: "XLMUSDT", display: "XLM/USDT" },
  { symbol: "ZILUSDT", display: "ZIL/USDT" },
  { symbol: "ZROUSDT", display: "ZRO/USDT" }
]
];

const EXCHANGES = ["Binance", "Bybit"];
const TOKENS = ["USDT", ...PAIRS.map(pair => pair.symbol.replace('USDT', ''))];

// --- Paneles ---

function PricesPanel() {
  const [prices, setPrices] = useState({});

  useEffect(() => {
    const ws = new window.WebSocket(
      `wss://stream.binance.com:9443/stream?streams=${PAIRS.map(p => p.symbol.toLowerCase() + '@ticker').join('/')}`
    );
    ws.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      if (msg.data && msg.data.s && msg.data.c) {
        setPrices(prev => ({
          ...prev,
          [msg.data.s]: {
            ...(prev[msg.data.s] || {}),
            binance: msg.data.c
          }
        }));
      }
    };
    return () => ws.close();
  }, []);

  useEffect(() => {
    let ws;
    let reconnectTimeout;

    const connect = () => {
      ws = new window.WebSocket("wss://stream.bybit.com/v5/public/spot");
      ws.onopen = () => {
        ws.send(JSON.stringify({
          op: "subscribe",
          args: PAIRS.map(p => `tickers.${p.symbol}`)
        }));
      };
      ws.onmessage = (event) => {
        try {
          const msg = JSON.parse(event.data);
          if (msg.topic && msg.data && msg.data.symbol && msg.data.lastPrice) {
            setPrices(prev => ({
              ...prev,
              [msg.data.symbol]: {
                ...(prev[msg.data.symbol] || {}),
                bybit: msg.data.lastPrice
              }
            }));
          }
        } catch (e) {}
      };
      ws.onerror = () => ws.close();
      ws.onclose = () => {
        reconnectTimeout = setTimeout(connect, 3000);
      };
    };

    connect();

    return () => {
      if (ws) ws.close();
      if (reconnectTimeout) clearTimeout(reconnectTimeout);
    };
  }, []);

  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">📈</span>Precios y Mejor Oportunidad de Arbitraje</div>
      <div className="table-responsive">
        <table className="dashboard-table">
          <thead>
            <tr>
              <th>Par</th>
              <th>Binance</th>
              <th>Bybit</th>
              <th>Mejor Spread</th>
              <th>Spread %</th>
            </tr>
          </thead>
          <tbody>
            {PAIRS.map(pair => {
              const data = prices[pair.symbol] || {};
              const bin = data.binance ? parseFloat(data.binance) : null;
              const byb = data.bybit ? parseFloat(data.bybit) : null;

              let bestDirection = "";
              let spread = null;
              let spreadPct = null;
              let colorClass = "";

              if (bin && byb) {
                const spreadBybitMinusBinance = byb - bin;
                const spreadBinanceMinusBybit = bin - byb;
                if (Math.abs(spreadBybitMinusBinance) > Math.abs(spreadBinanceMinusBybit)) {
                  spread = spreadBybitMinusBinance;
                  spreadPct = ((spreadBybitMinusBinance / bin) * 100);
                  if (spread > 0) {
                    bestDirection = "Binance → Bybit";
                    colorClass = "text-primary";
                  } else {
                    bestDirection = "Bybit → Binance";
                    colorClass = "text-success";
                  }
                } else {
                  spread = spreadBinanceMinusBybit;
                  spreadPct = ((spreadBinanceMinusBybit / byb) * 100);
                  if (spread > 0) {
                    bestDirection = "Bybit → Binance";
                    colorClass = "text-success";
                  } else {
                    bestDirection = "Binance → Bybit";
                    colorClass = "text-primary";
                  }
                }
              }

              const fmt = v => v !== null && v !== undefined && !isNaN(v)
                ? parseFloat(v).toLocaleString(undefined, {minimumFractionDigits: 4, maximumFractionDigits: 8})
                : "-";

              return (
                <tr key={pair.symbol}>
                  <td>
                    <img src={pair.icon} alt={pair.symbol} style={{ width: 22, marginRight: 8, borderRadius: 6 }} />
                    {pair.symbol} {pair.display && pair.display !== pair.symbol ? pair.display : ""}
                  </td>
                  <td>{fmt(data.binance)}</td>
                  <td>{fmt(data.bybit)}</td>
                  <td className={colorClass}>
                    {spread !== null
                      ? (<>
                          <b>
                            {bestDirection === "Binance → Bybit"
                              ? <span style={{color: "#00BFFF"}}>Binance <span style={{fontWeight: "bold"}}>→</span> Bybit</span>
                              : <span style={{color: "#28a745"}}>Bybit <span style={{fontWeight: "bold"}}>→</span> Binance</span>
                            }
                          </b>
                          <span style={{marginLeft: 8, fontWeight: "bold"}}>{fmt(spread)}</span>
                        </>)
                      : "-"}
                  </td>
                  <td className={colorClass}>
                    {spreadPct !== null ? spreadPct.toFixed(3) + " %" : "-"}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      </div>
      <div style={{ fontSize: "0.95em", marginTop: 10, color: "#888" }}>
        * El mejor spread y dirección indican dónde comprar y dónde vender para el mayor arbitraje posible en ese par.<br />
        * Flecha azul: oportunidad de Binance → Bybit. Flecha verde: oportunidad de Bybit → Binance.
      </div>
    </div>
  );
}

function BalancesPanel() {
  const [balances, setBalances] = useState(null);

  useEffect(() => {
    fetch(`${API_BASE}/balances`)
      .then(res => res.json())
      .then(setBalances)
      .catch(() => setBalances(null));
  }, []);

  if (!balances) return (
    <div className="dashboard-card">
      <div className="card-header" style={{color: "#FFD700", fontWeight: "bold"}}>Balances</div>
      <div style={{color: "#fff", fontWeight: "bold"}}>Cargando...</div>
    </div>
  );

  return (
    <div className="dashboard-card">
      <div className="card-header" style={{color: "#FFD700", fontWeight: "bold"}}>
        <span className="emoji">💳</span>Balances por Exchange
      </div>
      {EXCHANGES.map(ex => (
        <div key={ex}>
          <h6 style={{color: "#FFD700", fontWeight: "bold"}}>{ex.charAt(0).toUpperCase() + ex.slice(1)}</h6>
          <div className="table-responsive">
            <table className="dashboard-table">
              <thead>
                <tr>
                  <th>Token</th>
                  <th>Disponible</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                {TOKENS.map(token => {
                  const bal = balances[ex] && balances[ex].find(b => b.token === token)
                    ? balances[ex].find(b => b.token === token)
                    : { token, available: 0, total: 0 };
                  return (
                    <tr key={token}>
                      <td style={{color: "#fff", fontWeight: "bold"}}>{bal.token}</td>
                      <td style={{color: "#fff", fontWeight: "bold"}}>{bal.available}</td>
                      <td style={{color: "#fff", fontWeight: "bold"}}>{bal.total}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      ))}
    </div>
  );
}

function RiskPanel() {
  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">🛡️</span>Gestión de Riesgo</div>
      <div className="risk-metric">
        <span className="risk-label">Máx. exposición:</span>
        <span className="risk-value">200 USDT</span>
      </div>
      <div className="risk-metric">
        <span className="risk-label">Pérdida diaria máx.:</span>
        <span className="risk-value">12 USDT</span>
      </div>
      <div className="risk-metric">
        <span className="risk-label">Drawdown:</span>
        <span className="risk-value">6.2 USDT</span>
      </div>
    </div>
  );
}

function RebalancePanel() {
  const [lastRebalance, setLastRebalance] = useState(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [isAutoRebalance, setIsAutoRebalance] = useState(false);
  const [rebalanceInterval, setRebalanceInterval] = useState("10 min");
  const [rebalanceAmount, setRebalanceAmount] = useState("");
  const [balances, setBalances] = useState(null);

  // Nuevo: para elegir exchanges y token
  const [fromExchange, setFromExchange] = useState(EXCHANGES[0]);
  const [toExchange, setToExchange] = useState(EXCHANGES[1]);
  const [token, setToken] = useState(TOKENS[0]);

  useEffect(() => {
    fetch("/api/rebalance/last")
      .then(res => res.json())
      .then(data => setLastRebalance(data.lastRebalance))
      .catch(() => setLastRebalance(null));

    fetch("/api/balances")
      .then(res => res.json())
      .then(setBalances)
      .catch(() => setBalances(null));
  }, []);

  const handleManualRebalance = () => {
    setLoading(true);
    setMessage("");
    fetch("/api/rebalance", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        amount: Number(rebalanceAmount),
        fromExchange,
        toExchange,
        token
      })
    })
      .then(res => res.json())
      .then(data => {
        setMessage(data.message || "Rebalanceo ejecutado.");
        setLastRebalance(new Date().toISOString());
        // Recargar balances tras rebalanceo
        fetch("/api/balances")
          .then(res => res.json())
          .then(setBalances)
          .catch(() => {});
      })
      .catch(() => setMessage("Error al ejecutar el rebalanceo."))
      .finally(() => setLoading(false));
  };

  const toggleAutoRebalance = () => {
    const newStatus = !isAutoRebalance;
    setIsAutoRebalance(newStatus);
    setMessage(newStatus ? "Rebalanceo automático activado." : "Rebalanceo automático desactivado.");
    // Aquí podrías enviar activación al backend si corresponde
  };

  const handleIntervalChange = (e) => {
    setRebalanceInterval(e.target.value);
    setMessage(`Intervalo de rebalanceo automático: ${e.target.value}`);
    // Puedes enviar el intervalo al backend si lo necesitas
  };

  // Evitar seleccionar el mismo exchange en origen y destino
  useEffect(() => {
    if (fromExchange === toExchange) {
      const newTo = EXCHANGES.find(ex => ex !== fromExchange) || EXCHANGES[0];
      setToExchange(newTo);
    }
  }, [fromExchange]);

  return (
    <div id="rebalance" className="panel">
      <h3>Panel de Rebalanceo</h3>
      <p>Último rebalanceo: {lastRebalance ? new Date(lastRebalance).toLocaleString() : "No disponible"}</p>
      {/* Mostrar balances actuales */}
      <div style={{ marginBottom: 16 }}>
        <h4>Balances Actuales</h4>
        {balances ? (
          <div style={{ display: "flex", gap: 24 }}>
            {Object.entries(balances).map(([exchange, tokens]) => (
              <div key={exchange}>
                <b style={{ color: "#FFD700" }}>{exchange}</b>
                <table style={{ width: "100%", fontSize: "0.95em" }}>
                  <thead>
                    <tr>
                      <th style={{ color: "#FFD700" }}>Token</th>
                      <th style={{ color: "#FFD700" }}>Disponible</th>
                      <th style={{ color: "#FFD700" }}>Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tokens.map(b => (
                      <tr key={b.token}>
                        <td style={{ color: "#fff" }}>{b.token}</td>
                        <td style={{ color: "#fff" }}>{b.available}</td>
                        <td style={{ color: "#fff" }}>{b.total}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ))}
          </div>
        ) : (
          <span style={{ color: "#fff" }}>Cargando balances...</span>
        )}
      </div>
      {/* Input para la cantidad y selects de exchanges/token */}
      <div style={{ display: "flex", alignItems: "center", gap: 10, marginBottom: 16 }}>
        <select
          value={fromExchange}
          onChange={e => setFromExchange(e.target.value)}
          style={{ width: 120 }}
        >
          {EXCHANGES.map(ex => (
            <option key={ex} value={ex}>{ex}</option>
          ))}
        </select>
        <span style={{ color: "#FFD700", fontWeight: "bold" }}>→</span>
        <select
          value={toExchange}
          onChange={e => setToExchange(e.target.value)}
          style={{ width: 120 }}
        >
          {EXCHANGES.filter(ex => ex !== fromExchange).map(ex => (
            <option key={ex} value={ex}>{ex}</option>
          ))}
        </select>
        <select
          value={token}
          onChange={e => setToken(e.target.value)}
          style={{ width: 90 }}
        >
          {TOKENS.map(tk => (
            <option key={tk} value={tk}>{tk}</option>
          ))}
        </select>
        <input
          type="number"
          min="0"
          placeholder="Cantidad"
          value={rebalanceAmount}
          onChange={e => setRebalanceAmount(e.target.value)}
          style={{ width: 120 }}
        />
        <button
          className="btn btn-warning"
          onClick={handleManualRebalance}
          disabled={loading || !rebalanceAmount || fromExchange === toExchange}
        >
          {loading ? "Rebalanceando..." : "Rebalanceo Manual"}
        </button>
      </div>
      {/* Auto rebalanceo */}
      <div style={{ display: "flex", alignItems: "center", gap: 10, marginBottom: 16 }}>
        <button
          className={isAutoRebalance ? "btn btn-success btn-active" : "btn btn-success"}
          onClick={toggleAutoRebalance}
        >
          {isAutoRebalance ? "Rebalanceo Automático ON" : "Activar Rebalanceo Automático"}
        </button>
        <select
          value={rebalanceInterval}
          onChange={handleIntervalChange}
          className="form-select"
          style={{ width: 120 }}
          disabled={!isAutoRebalance}
        >
          <option value="10 min">10 min</option>
          <option value="1h">1h</option>
          <option value="6h">6h</option>
        </select>
      </div>
      <div>
        <b>Estado automático:</b> {isAutoRebalance ? `Activado (${rebalanceInterval})` : "Desactivado"}
      </div>
      {message && <p>{message}</p>}
    </div>
  );
}

function LogsPanel() {
  const [logs, setLogs] = useState([]);
  useEffect(() => {
    fetch(`${API_BASE}/logs`).then(res => res.json()).then(setLogs).catch(() => setLogs([]));
  }, []);
  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">📝</span>Logs del Sistema</div>
      <ul>
        {logs.length === 0 ? <li>Cargando...</li> : logs.map((log, idx) => <li key={idx}>{log}</li>)}
      </ul>
    </div>
  );
}

function AddressesPanel() {
  const [addresses, setAddresses] = useState([]);
  useEffect(() => {
    fetch(`${API_BASE}/addresses`).then(res => res.json()).then(setAddresses).catch(() => setAddresses([]));
  }, []);
  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">🌐</span>Direcciones y Redes</div>
      <div className="table-responsive">
        <table className="dashboard-table">
          <thead><tr><th>Exchange</th><th>Token</th><th>Dirección</th><th>Red</th></tr></thead>
          <tbody>
            {addresses.length === 0 ? (
              <tr><td colSpan="4" className="text-center py-4">Cargando...</td></tr>
            ) : addresses.map((a, idx) => (
              <tr key={idx}><td>{a.exchange}</td><td>{a.token}</td><td>{a.address}</td><td>{a.network}</td></tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function FeesPanel() {
  const [fees, setFees] = useState([]);
  useEffect(() => {
    fetch(`${API_BASE}/fees`).then(res => res.json()).then(setFees).catch(() => setFees([]));
  }, []);
  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">💸</span>Fees y Mínimos</div>
      <div className="table-responsive">
        <table className="dashboard-table">
          <thead>
            <tr>
              <th>Exchange</th>
              <th>Token</th>
              <th>Comisión retiro</th>
              <th>Mín. retiro</th>
              <th>Mín. depósito</th>
              <th>Red</th>
            </tr>
          </thead>
          <tbody>
            {fees.length === 0 ? (
              <tr><td colSpan="6" className="text-center py-4">Cargando...</td></tr>
            ) : fees.map((f, idx) => (
              <tr key={idx}>
                <td>{f.exchange}</td>
                <td>{f.token}</td>
                <td>{f.withdraw_fee}</td>
                <td>{f.withdraw_min}</td>
                <td>{f.deposit_min}</td>
                <td>{f.network}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

function MetricsPanel() {
  const [metrics, setMetrics] = useState(null);
  useEffect(() => {
    fetch(`${API_BASE}/metrics`).then(res => res.json()).then(setMetrics).catch(() => setMetrics(null));
  }, []);
  if (!metrics) return <div className="dashboard-card"><div className="card-header">Métricas</div><div>Cargando...</div></div>;
  return (
    <div className="dashboard-card">
      <div className="card-header"><span className="emoji">📊</span>Métricas del Bot</div>
      <div className="metric"><span className="metric-label">Total Trades</span><span className="metric-value">{metrics.trades}</span></div>
      <div className="metric"><span className="metric-label">Total Profit</span><span className="metric-value">{metrics.profit} USDT</span></div>
      <div className="metric"><span className="metric-label">Win Rate</span><span className="metric-value">{metrics.winRate}%</span></div>
    </div>
  );
}

// --- Sidebar --- 
function Sidebar({ current, setCurrent }) {
  return (
    <nav className="sidebar">
      <div className="sidebar-header">
        <img className="sidebar-logo" src={BOT_LOGO} alt="Logo" />
        <span className="sidebar-title">{BOT_NAME}</span>
        <span className="sidebar-badge">{BOT_BADGE}</span>
      </div>
      <ul className="nav flex-column">
        {sectionConfig.map((s, idx) => (
          <li key={s.label} className="nav-item">
            <span
              className={`nav-link${idx === current ? " active" : ""}`}
              onClick={() => setCurrent(idx)}
            >
              <span className="emoji">{s.emoji}</span>
              <i className={`bi ${s.icon}`}></i>
              {s.label}
            </span>
          </li>
        ))}
      </ul>
    </nav>
  );
}

// --- Paneles para el dashboard ---
const panels = [
  <PricesPanel key={0} />,
  <OpportunitiesPanel key={1} />,
  <BalancesPanel key={2} />,
  <IAPanel key={3} />,
  <RiskPanel key={4} />,
  <RebalancePanel key={5} />,
  <LogsPanel key={6} />,
  <AddressesPanel key={7} />,
  <FeesPanel key={8} />,
  <MetricsPanel key={9} />,
  <PairsPanel key={10} />
];

// --- Dashboard Principal ---
export default function Dashboard() {
  const [current, setCurrent] = useState(0);
  const [botStatus, setBotStatus] = useState({ mode: "desconocido", isRunning: false });
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetch(`${API_BASE}/status`)
      .then(res => res.json())
      .then(setBotStatus)
      .catch(() => setBotStatus({ mode: "simulation", isRunning: false }));
  }, []);

  const setMode = (mode) => {
    setLoading(true);
    fetch(`${API_BASE}/set-mode`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ mode })
    })
      .then(res => res.json())
      .then(() => {
        fetch(`${API_BASE}/status`)
          .then(res => res.json())
          .then(setBotStatus);
      })
      .finally(() => setLoading(false));
  };

  // Iniciar o detener el bot
  const toggleBot = () => {
    setLoading(true);
    fetch(`${API_BASE}/${botStatus.isRunning ? "stop" : "start"}`, { method: "POST" })
      .then(res => res.json())
      .then(() => {
        setTimeout(() => {
          fetch(`${API_BASE}/status`)
            .then(res => res.json())
            .then(setBotStatus)
            .finally(() => setLoading(false));
        }, 700); // espera breve para asegurar que el backend actualice el estado
      });
  };

  return (
    <div className="dashboard-main" style={{ display: "flex", minHeight: "100vh" }}>
      <Sidebar current={current} setCurrent={setCurrent} />
      <main style={{ flex: 1 }}>
        <div className="header">
          <span className="header-title">
            <span className="header-emoji">{sectionConfig[current].emoji}</span>
            {sectionConfig[current].label}
          </span>
          {/* BLOQUE DE BOTONES DE CONTROL DEL BOT */}
          <div style={{ marginTop: 8, marginBottom: 8, display: "flex", alignItems: "center", gap: 8 }}>
            {botStatus.mode === "production" && (
              <span style={{
                background: "#28a745",
                color: "#fff",
                borderRadius: 6,
                padding: "3px 10px",
                fontWeight: "bold",
                marginRight: 10
              }}>🚨 MODO PRODUCCIÓN</span>
            )}
            {botStatus.mode === "simulation" && (
              <span style={{
                background: "#00BFFF",
                color: "#fff",
                borderRadius: 6,
                padding: "3px 10px",
                fontWeight: "bold",
                marginRight: 10
              }}>🧪 MODO SIMULACIÓN</span>
            )}

            {/* Botón Simulación */}
            <button
              className={`btn btn-primary ${botStatus.mode === "simulation" ? "btn-active" : ""}`}
              onClick={() => setMode("simulation")}
              disabled={botStatus.mode === "simulation" || loading}
              style={{ marginRight: 4, fontWeight: "bold" }}
            >
              Cambiar a Simulación
            </button>

            {/* Botón Producción */}
            <button
              className={`btn btn-success ${botStatus.mode === "production" ? "btn-active" : ""}`}
              onClick={() => setMode("production")}
              disabled={botStatus.mode === "production" || loading}
              style={{ marginRight: 4, fontWeight: "bold" }}
            >
              Cambiar a Producción
            </button>

            {/* Botón Iniciar/Detener Bot */}
            <button
              className={`btn ${botStatus.isRunning ? "btn-danger btn-active" : "btn-success"}`}
              onClick={toggleBot}
              style={{
                borderRadius: 6,
                padding: "3px 10px",
                fontWeight: "bold"
              }}
              disabled={loading}
            >
              {botStatus.isRunning ? "Detener Bot" : "Iniciar Bot"}
            </button>
          </div>
        </div>

        {/* --- MENÚ DE DOS FILAS --- */}
        <div className="controls" style={{ width: "100%", margin: "0 auto", marginTop: 24 }}>
          <div style={{ display: "flex", justifyContent: "center", gap: 8, marginBottom: 8 }}>
            {sectionConfig.slice(0, 5).map((s, idx) => (
              <button
                key={s.label}
                className={`btn ${idx === current ? "btn-primary btn-active" : "btn-outline-secondary"}`}
                onClick={() => setCurrent(idx)}
                style={{
                  minWidth: 120,
                  padding: "10px 8px",
                  fontWeight: "bold",
                  borderRadius: 10,
                }}
              >
                <span className="emoji">{s.emoji}</span> {s.label}
              </button>
            ))}
          </div>
          <div style={{ display: "flex", justifyContent: "center", gap: 8 }}>
            {sectionConfig.slice(5).map((s, idx) => (
              <button
                key={s.label}
                className={`btn ${idx + 5 === current ? "btn-primary btn-active" : "btn-outline-secondary"}`}
                onClick={() => setCurrent(idx + 5)}
                style={{
                  minWidth: 120,
                  padding: "10px 8px",
                  fontWeight: "bold",
                  borderRadius: 10,
                }}
              >
                <span className="emoji">{s.emoji}</span> {s.label}
              </button>
            ))}
          </div>
        </div>
        {/* --- FIN MENÚ DE DOS FILAS --- */}

        <div>
          {panels[current]}
        </div>
      </main>
    </div>
  );
}

------------------------------------------------------------------------------------------------------------

@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@500;700&family=Inter:wght@400;600&display=swap');

/* ---- Tipografía Moderna ---- */
body {
  font-family: 'Montserrat', 'Inter', Arial, sans-serif;
  background: linear-gradient(120deg, #181a20 55%, #23272f 100%);
  color: #fff; /* Blanco para el contenido */
  min-height: 100vh;
  margin: 0;
}

/* ---- Sidebar ---- */
.sidebar {
  width: 220px; /* O el ancho que uses */
  background: #23273a;
  height: 100vh;
  position: fixed;
  left: 0;
  top: 0;
  display: flex;
  flex-direction: column;
  /* Para que el contenido nunca se salga */
  overflow: hidden;
}

.sidebar-header {
  padding: 24px 12px 18px 12px;
  flex-shrink: 0;
}

.nav.flex-column {
  flex: 1 1 auto;
  overflow-y: auto;   /* Aquí el truco: SOLO el menú scrollea */
  padding-bottom: 16px;
}

.sidebar-logo {
  width: 60px;
  border-radius: 20px;
  margin-bottom: 10px;
  border: 2px solid #fff3;
  background: #222;
}

.sidebar-title {
  font-size: 1.3rem;
  font-weight: 700;
  letter-spacing: 2px;
  color: #FFA500; /* Naranja brillante */
}
.sidebar-badge {
  font-size: 0.9rem;
  color: #e5ecfa;
  background: #3b3b5c;
  border-radius: 12px;
  padding: 3px 12px;
  margin-top: 6px;
  font-family: 'Inter', Arial, sans-serif;
}

.nav {
  margin-top: 25px;
}
.nav-link {
  color: #d1d9e6;
  font-size: 1.06rem;
  display: flex;
  align-items: center;
  gap: 10px;
  padding: 14px 28px;
  border-radius: 8px 0 0 8px;
  margin: 7px 0;
  transition: background 0.18s, color 0.18s, padding 0.2s;
  cursor: pointer;
  position: relative;
}
.nav-link.active, .nav-link:hover {
  background: linear-gradient(90deg, #FFA500 0%, #FFD700 80%);
  color: #222c;
  font-weight: bold;
  box-shadow: 2px 2px 14px #ffd70022;
  padding-left: 36px;
}
.nav-link .emoji {
  font-size: 1.2em;
  margin-right: 2px;
}
.nav-link .bi {
  font-size: 1.15em;
}

.main-content {
  margin-left: 240px;
  padding: 32px 18px 32px 18px;
  min-height: 100vh;
  transition: margin 0.3s;
}

/* ---- Título Principal ---- */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #23273a;
  border-radius: 18px;
  box-shadow: 0 2px 16px #0003;
  padding: 18px 26px;
  margin-bottom: 35px;
}
.header-title {
  font-size: 2.05rem;
  font-weight: 800;
  color: #FFA500; /* Naranja brillante */
  letter-spacing: 1.5px;
  display: flex;
  align-items: center;
  gap: 12px;
}
.header-emoji {
  font-size: 1.8rem;
}

.controls {
  display: block !important;
  width: 100% !important;
}

.btn {
  font-family: 'Inter', Arial, sans-serif;
  border: none;
  padding: 9px 20px;
  border-radius: 7px;
  font-weight: 600;
  font-size: 1.01rem;
  cursor: pointer;
  background: #4e53e2;
  color: #fff;
  transition: background 0.2s, color 0.2s;
  box-shadow: 0 1px 7px #0002;
}
.btn-outline-secondary {
  background: #23273a;
  color: #FFA500;
  border: 1px solid #FFA500;
}
.btn-primary, .btn:active, .btn:focus {
  background: linear-gradient(90deg,#FFA500,#FFD700);
  color: #181a20;
}
.btn:active {
  transform: scale(0.98);
}

/* ---- Tarjeta de Paneles ---- */
.dashboard-card {
  background: #282c3e;
  border-radius: 18px;
  box-shadow: 0 4px 25px #0004;
  padding: 24px 20px 14px 20px;
  margin-bottom: 32px;
  transition: box-shadow 0.22s;
}
.dashboard-card:hover {
  box-shadow: 0 8px 30px #0007;
}

/* ---- Títulos y Subtítulos de Paneles ---- */
.card-header {
  background: none;
  border: none;
  font-size: 1.35rem;
  color: #FFA500; /* Naranja brillante */
  font-weight: 700;
  margin-bottom: 10px;
  letter-spacing: 1.2px;
  display: flex;
  align-items: center;
  gap: 8px;
  font-family: 'Montserrat', Arial, sans-serif;
}

/* Subtítulos (por ejemplo, secciones dentro de la tarjeta) */
h6, .subtitle, .dashboard-card h6 {
  color: #FFD700 !important; /* Amarillo dorado */
  font-size: 1.09rem;
  font-weight: 600;
  margin-bottom: 13px;
  font-family: 'Montserrat', Arial, sans-serif;
  letter-spacing: 0.8px;
}

.dashboard-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 8px;
  font-size: 1.01rem;
}
.dashboard-table th, .dashboard-table td {
  padding: 9px 12px;
  border-bottom: 1px solid #343b50;
  color: #fff; /* Blanco para todo el contenido de tabla */
  font-family: 'Inter', Arial, sans-serif;
}
.dashboard-table th {
  background: #22263a;
  color: #FFA500; /* Naranja para los headers de tabla */
  font-weight: 700;
  font-size: 1.04rem;
}
.dashboard-table tr:last-child td {
  border-bottom: none;
}
.dashboard-table td .emoji {
  font-size: 1.1em;
}

/* ---- Barras de Progreso ---- */
.progress-bar {
  background: linear-gradient(90deg, #FFA500, #FFD700);
}

/* ---- Métricas ---- */
.metric, .risk-metric {
  margin-bottom: 13px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.metric-label, .risk-label {
  font-weight: 600;
  color: #FFD700; /* Amarillo */
  font-family: 'Montserrat', Arial, sans-serif;
}
.metric-value, .risk-value {
  color: #FFA500; /* Naranja */
  font-weight: 700;
  font-size: 1rem;
  font-family: 'Inter', Arial, sans-serif;
}

/* ---- Contenidos generales ---- */
.dashboard-card, .dashboard-card * {
  color: #fff;
}

/* Rebalance Panel - Mejor contraste */
#rebalance.panel, .panel, .dashboard-card {
  color: #fff !important;
  background: #181c27 !important;
}

#rebalance input, #rebalance select {
  background: #222d3d;
  color: #fff;
  border: 1px solid #444;
  border-radius: 6px;
  padding: 6px 10px;
}

#rebalance input::placeholder {
  color: #bbb;
}

#rebalance table th,
#rebalance table td {
  color: #fff !important;
  background: #222d3d !important;
  font-weight: 500;
}

#rebalance button.btn-warning {
  color: #242424 !important;
  background: linear-gradient(90deg, #ffd700 70%, #ffb300 100%);
  font-weight: bold;
  border: none;
}

#rebalance button.btn-success {
  color: #fff !important;
  background: linear-gradient(90deg, #28a745 60%, #00b369 100%);
  font-weight: bold;
  border: none;
}

#rebalance b, #rebalance h3, #rebalance h4 {
  color: #FFD700;
}

#rebalance option, #rebalance select {
  color: #111;
  background: #ffe;
}

#rebalance .form-select {
  background: #222d3d;
  color: #fff;
}

#rebalance p, #rebalance .small {
  color: #e6e6e6;
}

#rebalance .btn[disabled] {
  opacity: 0.6 !important;
  color: #bbb !important;
}

#rebalance .btn.btn-warning:active,
#rebalance .btn.btn-warning:focus {
  background: #ffea70 !important;
  color: #888 !important;
}

@media (max-width: 900px) {
  .sidebar { width: 100vw; min-height: 80px; border-radius: 0 0 18px 18px; position: static;}
  .main-content { margin-left: 0; padding: 12px;}
  .header { flex-direction: column; gap: 12px; }
}
::-webkit-scrollbar { width: 7px; background: #222; }
::-webkit-scrollbar-thumb { background: #444a; border-radius: 7px; }

------------------------------------------------------------------------------------------------------------------

import React from "react";

const data = [
  {
    exchange: "BINANCE",
    tokens: [
      { symbol: "USDC", address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", memo: "163771801", network: "TON", min: "0.002 USDT" },
      { symbol: "LTC", address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4", network: "Litecoin", min: "0.002 LTC" },
      { symbol: "BNB", address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BEP20 (BSC)", min: "0.000003 BNB" },
      { symbol: "XRP", address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV", tag: "466152795", network: "Ripple", min: "0.001 XRP" }
    ]
  },
  {
    exchange: "BYBIT",
    tokens: [
      { symbol: "USDT", address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON", min: "0.001 USDT" },
      { symbol: "LTC", address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ", network: "Litecoin", min: "0.00000001 LTC" },
      { symbol: "BNB", address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BEP20 (BSC)", min: "0.000 BNB" },
      { symbol: "XRP", address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh", tag: "501350199", network: "Ripple", min: "0.01 XRP" }
    ]
  }
];

export default function DepositAddressesPanel() {
  return (
    <div className="panel">
      <h2>🏦 Direcciones y Redes de Depósito</h2>
      {data.map(({exchange, tokens}) => (
        <div key={exchange}>
          <h3>{exchange}</h3>
          <table>
            <thead>
              <tr>
                <th>Token</th>
                <th>Dirección</th>
                <th>Red</th>
                <th>Memo/Tag</th>
                <th>Mín. Depósito</th>
              </tr>
            </thead>
            <tbody>
              {tokens.map(t => (
                <tr key={t.symbol}>
                  <td>{t.symbol}</td>
                  <td style={{fontFamily:"monospace"}}>{t.address}</td>
                  <td>{t.network}</td>
                  <td>{t.memo || t.tag || "-"}</td>
                  <td>{t.min}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      ))}
    </div>
  );
}

------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

--------------------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";

export default function FeesPanel() {
  const [fees, setFees] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/api/fees")
      .then(res => res.json())
      .then(data => {
        setFees(data);
        setLoading(false);
      })
      .catch(() => setLoading(false));
  }, []);

  return (
    <div className="panel">
      <h2>💸 Fees y Mínimos</h2>
      {loading ? (
        <p>Cargando...</p>
      ) : (
        <table>
          <thead>
            <tr>
              <th>Exchange</th>
              <th>Token</th>
              <th>Comisión retiro</th>
              <th>Mín. retiro</th>
              <th>Mín. depósito</th> {/* 👈 NUEVA COLUMNA */}
              <th>Red</th>
            </tr>
          </thead>
          <tbody>
            {fees.map((fee, idx) => (
              <tr key={fee.exchange + fee.token + idx}>
                <td>{fee.exchange}</td>
                <td>{fee.token}</td>
                <td>{fee.withdraw_fee}</td>
                <td>{fee.withdraw_min}</td>
                <td>{fee.deposit_min}</td>   {/* 👈 NUEVO DATO */}
                <td>{fee.network}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

----------------------------------------------------------------------------------------------------------------


import React, { useEffect, useState } from "react";


export default function GeneralConfigPanel() {
  const [config, setConfig] = useState({});
  const [edit, setEdit] = useState(false);

  useEffect(() => {
    api.get("/config").then(res => setConfig(res.data));
  }, []);

  function handleChange(e) {
    setConfig({ ...config, [e.target.name]: e.target.value });
  }

  function handleSubmit(e) {
    e.preventDefault();
    api.post("/config", config).then(() => setEdit(false));
  }

  return (
    <div>
      <h2>Configuración General</h2>
      {edit ? (
        <form onSubmit={handleSubmit}>
          <label>Nombre del Bot</label>
          <input name="BOT_NAME" value={config.BOT_NAME || ""} onChange={handleChange} />
          <label>Versión</label>
          <input name="VERSION" value={config.VERSION || ""} onChange={handleChange} />
          <label>Modo</label>
          <select name="ENVIRONMENT" value={config.ENVIRONMENT || ""} onChange={handleChange}>
            <option value="production">Producción</option>
            <option value="development">Desarrollo</option>
            <option value="testing">Testing</option>
          </select>
          {/* ...otros campos */}
          <button type="submit">Guardar</button>
        </form>
      ) : (
        <div>
          <p><b>Nombre del Bot:</b> {config.BOT_NAME}</p>
          <p><b>Versión:</b> {config.VERSION}</p>
          <p><b>Modo:</b> {config.ENVIRONMENT}</p>
          {/* ...otros campos */}
          <button onClick={() => setEdit(true)}>Editar</button>
        </div>
      )}
    </div>
  );
}

------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

export default function LogsPanel() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetch("/api/logs")
      .then(res => res.json())
      .then(data => {
        setLogs(data.logs || []);
        setLoading(false);
      })
      .catch(() => {
        setError("Error al cargar logs.");
        setLoading(false);
      });
  }, []);

  return (
    <div id="logs" className="panel">
      <h3>Logs del Sistema</h3>
      {loading && <div>Cargando logs...</div>}
      {error && <div style={{ color: "red" }}>{error}</div>}
      {!loading && !error && logs.length === 0 && (
        <div>No hay logs para mostrar.</div>
      )}
      {!loading && !error && logs.length > 0 && (
        <pre style={{ background: "#222", color: "#eee", padding: "1em", borderRadius: "5px", maxHeight: 400, overflow: "auto" }}>
          {logs.map((line, i) => <div key={i}>{line}</div>)}
        </pre>
      )}
    </div>
  );
}

-------------------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";

const MetricsPanel = () => {
  const [metrics, setMetrics] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetch("/api/metrics")
      .then((res) => res.json())
      .then((data) => {
        setMetrics(data.metrics || data); // admite respuesta {metrics:...} o {...}
        setLoading(false);
      })
      .catch(() => {
        setError("Error al cargar métricas.");
        setLoading(false);
      });
  }, []);

  if (loading) return <div className="panel">Cargando métricas...</div>;
  if (error) return <div className="panel" style={{ color: "red" }}>{error}</div>;
  if (!metrics || Object.keys(metrics).length === 0)
    return <div className="panel">No hay métricas para mostrar.</div>;

  return (
    <div className="panel">
      <h2>Métricas del Bot</h2>
      <ul>
        {Object.entries(metrics).map(([key, value]) => (
          <li key={key}>
            <strong>{key}:</strong> {value?.toString()}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default MetricsPanel;

----------------------------------------------------------------------------------------------------------------------------

// Versión simplificada sin dependencias
class MobileAPI {
  constructor(config) {
    this.enabled = false;
    console.log('📱 Mobile API disabled (firebase-admin no instalado)');
  }
  
  start() {
    // No hacer nada
    return;
  }
  
  stop() {
    // No hacer nada
    return;
  }
  
  sendNotification() {
    // No hacer nada
    return;
  }
}

module.exports = MobileAPI;

-----------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------------

import React from "react";

const pairs = [
  { pair: "LTC/USDT", icon: "https://cryptologos.cc/logos/litecoin-ltc-logo.png?v=029" },
  { pair: "BNB/USDT", icon: "https://cryptologos.cc/logos/binance-coin-bnb-logo.png?v=029" },
  { pair: "XRP/USDT", icon: "https://cryptologos.cc/logos/xrp-xrp-logo.png?v=029" }
];
const baseAsset = "USDT";

export default function PairsPanel() {
  return (
    <div className="panel">
      <h2>🔗 Pares a Monitorear</h2>
      <p><b>Activo base:</b> {baseAsset}</p>
      <table>
        <thead>
          <tr>
            <th>Token</th>
            <th>Par</th>
          </tr>
        </thead>
        <tbody>
          {pairs.map(({pair, icon}) => (
            <tr key={pair}>
              <td className="token">
                <img src={icon} alt={pair.split("/")[0]} />
                {pair.split("/")[0]}
              </td>
              <td>{pair}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

--------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

------------------------------------------------------------------------------------------------------------------------

import React, { useEffect, useState } from "react";

const PAIRS = [
  { symbol: "LTCUSDT", display: "LTC/USDT", icon: "https://cryptologos.cc/logos/litecoin-ltc-logo.png?v=029" },
  { symbol: "BNBUSDT", display: "BNB/USDT", icon: "https://cryptologos.cc/logos/binance-coin-bnb-logo.png?v=029" },
  { symbol: "XRPUSDT", display: "XRP/USDT", icon: "https://cryptologos.cc/logos/xrp-xrp-logo.png?v=029" },
];

// Utilidad para formatear precios
const fmt = v => v ? parseFloat(v).toLocaleString(undefined, {minimumFractionDigits: 4, maximumFractionDigits: 8}) : "-";

export default function PricesPanel() {
  const [prices, setPrices] = useState({});

  // -- BINANCE WEBSOCKET --
  useEffect(() => {
    const ws = new WebSocket(
      `wss://stream.binance.com:9443/stream?streams=${PAIRS.map(p => p.symbol.toLowerCase() + '@ticker').join('/')}`
    );
    ws.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      if (msg.data && msg.stream) {
        setPrices(prev => ({
          ...prev,
          [msg.data.s]: {
            ...prev[msg.data.s],
            binance: msg.data.c
          }
        }));
      }
    };
    return () => ws.close();
  }, []);

  // -- BYBIT WEBSOCKET --
  useEffect(() => {
    const ws = new WebSocket("wss://stream.bybit.com/v5/public/spot");
    ws.onopen = () => {
      ws.send(JSON.stringify({
        op: "subscribe",
        args: PAIRS.map(p => `tickers.${p.symbol}`)
      }));
    };
    ws.onmessage = (event) => {
      const msg = JSON.parse(event.data);
      if (msg.topic && msg.data && Array.isArray(msg.data)) {
        msg.data.forEach(ticker => {
          setPrices(prev => ({
            ...prev,
            [ticker.symbol]: {
              ...prev[ticker.symbol],
              bybit: ticker.lastPrice
            }
          }));
        });
      }
    };
    return () => ws.close();
  }, []);

  // No necesitas modificar el useEffect de cálculo, lo hacemos directo al render

  return (
    <div className="card">
      <h2>💹 Precios y Mejor Oportunidad de Arbitraje</h2>
      <table>
        <thead>
          <tr>
            <th>Par</th>
            <th>Binance</th>
            <th>Bybit</th>
            <th>Mejor Spread</th>
            <th>Spread %</th>
          </tr>
        </thead>
        <tbody>
          {PAIRS.map(pair => {
            const data = prices[pair.symbol] || {};
            const bin = data.binance ? parseFloat(data.binance) : null;
            const byb = data.bybit ? parseFloat(data.bybit) : null;

            let bestDirection = "";
            let spread = null;
            let spreadPct = null;
            let colorClass = "";
            let directionArrow = "";

            if (bin && byb) {
              const spreadBybitMinusBinance = byb - bin;
              const spreadBinanceMinusBybit = bin - byb;
              // Decidir mejor dirección (mayor valor absoluto)
              if (Math.abs(spreadBybitMinusBinance) > Math.abs(spreadBinanceMinusBybit)) {
                // Bybit -> Binance
                spread = spreadBybitMinusBinance;
                spreadPct = ((spreadBybitMinusBinance / bin) * 100);
                if (spread > 0) {
                  bestDirection = "Binance → Bybit";
                  colorClass = "diff-positive";
                  directionArrow = "→";
                } else {
                  bestDirection = "Bybit → Binance";
                  colorClass = "diff-negative";
                  directionArrow = "←";
                }
              } else {
                // Binance -> Bybit
                spread = spreadBinanceMinusBybit;
                spreadPct = ((spreadBinanceMinusBybit / byb) * 100);
                if (spread > 0) {
                  bestDirection = "Bybit → Binance";
                  colorClass = "diff-positive";
                  directionArrow = "←";
                } else {
                  bestDirection = "Binance → Bybit";
                  colorClass = "diff-negative";
                  directionArrow = "→";
                }
              }
            }

            return (
              <tr key={pair.symbol}>
                <td className="token">
                  <img src={pair.icon} alt={pair.symbol} />
                  {pair.display}
                </td>
                <td>{fmt(data.binance)}</td>
                <td>{fmt(data.bybit)}</td>
                <td className={colorClass}>
                  {spread !== null
                    ? <>
                        <b>
                          {bestDirection === "Binance → Bybit"
                            ? <span style={{color: "#00BFFF"}}>Binance <span style={{fontWeight: "bold"}}>→</span> Bybit</span>
                            : <span style={{color: "#28a745"}}>Bybit <span style={{fontWeight: "bold"}}>→</span> Binance</span>
                          }
                        </b>
                        <span style={{marginLeft: 8, fontWeight: "bold"}}>{fmt(spread)}</span>
                      </>
                    : "-"}
                </td>
                <td className={colorClass}>
                  {spreadPct !== null ? spreadPct.toFixed(3) + " %" : "-"}
                </td>
              </tr>
            );
          })}
        </tbody>
      </table>
      <div style={{ fontSize: "0.92em", marginTop: 10, color: "#888" }}>
        * El mejor spread y dirección indican dónde comprar y dónde vender para el mayor arbitraje posible en ese par.<br />
        * Flecha azul: oportunidad de Binance → Bybit. Flecha verde: oportunidad de Bybit → Binance.
      </div>
    </div>
  );
}

-----------------------------------------------------------------------------------------------------------------


import React, { useState, useEffect } from "react";

const EXCHANGES = ["Binance", "Bybit"];
const TOKENS = ["USDT", "LTC", "BNB", "XRP"]; // Ajusta según tus tokens reales

export default function RebalancePanel() {
  const [lastRebalance, setLastRebalance] = useState(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [isAutoRebalance, setIsAutoRebalance] = useState(false);
  const [rebalanceInterval, setRebalanceInterval] = useState("10 min");
  const [rebalanceAmount, setRebalanceAmount] = useState("");
  const [balances, setBalances] = useState(null);

  // Nuevo: para elegir exchanges y token
  const [fromExchange, setFromExchange] = useState(EXCHANGES[0]);
  const [toExchange, setToExchange] = useState(EXCHANGES[1]);
  const [token, setToken] = useState(TOKENS[0]);

  useEffect(() => {
    fetch("/api/rebalance/last")
      .then(res => res.json())
      .then(data => setLastRebalance(data.lastRebalance))
      .catch(() => setLastRebalance(null));

    fetch("/api/balances")
      .then(res => res.json())
      .then(setBalances)
      .catch(() => setBalances(null));
  }, []);

  const handleManualRebalance = () => {
    setLoading(true);
    setMessage("");
    fetch("/api/rebalance", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        amount: Number(rebalanceAmount),
        fromExchange,
        toExchange,
        token
      })
    })
      .then(res => res.json())
      .then(data => {
        setMessage(data.message || "Rebalanceo ejecutado.");
        setLastRebalance(new Date().toISOString());
        // Recargar balances tras rebalanceo
        fetch("/api/balances")
          .then(res => res.json())
          .then(setBalances)
          .catch(() => {});
      })
      .catch(() => setMessage("Error al ejecutar el rebalanceo."))
      .finally(() => setLoading(false));
  };

  const toggleAutoRebalance = () => {
    const newStatus = !isAutoRebalance;
    setIsAutoRebalance(newStatus);
    setMessage(newStatus ? "Rebalanceo automático activado." : "Rebalanceo automático desactivado.");
    // Aquí podrías enviar activación al backend si corresponde
  };

  const handleIntervalChange = (e) => {
    setRebalanceInterval(e.target.value);
    setMessage(`Intervalo de rebalanceo automático: ${e.target.value}`);
    // Puedes enviar el intervalo al backend si lo necesitas
  };

  // Evitar seleccionar el mismo exchange en origen y destino
  useEffect(() => {
    if (fromExchange === toExchange) {
      const newTo = EXCHANGES.find(ex => ex !== fromExchange) || EXCHANGES[0];
      setToExchange(newTo);
    }
  }, [fromExchange]);

  return (
    <div id="rebalance" className="panel">
      <h3>Panel de Rebalanceo</h3>
      <p>Último rebalanceo: {lastRebalance ? new Date(lastRebalance).toLocaleString() : "No disponible"}</p>
      {/* Mostrar balances actuales */}
      <div style={{ marginBottom: 16 }}>
        <h4>Balances Actuales</h4>
        {balances ? (
          <div style={{ display: "flex", gap: 24 }}>
            {Object.entries(balances).map(([exchange, tokens]) => (
              <div key={exchange}>
                <b style={{ color: "#FFD700" }}>{exchange}</b>
                <table style={{ width: "100%", fontSize: "0.95em" }}>
                  <thead>
                    <tr>
                      <th style={{ color: "#FFD700" }}>Token</th>
                      <th style={{ color: "#FFD700" }}>Disponible</th>
                      <th style={{ color: "#FFD700" }}>Total</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tokens.map(b => (
                      <tr key={b.token}>
                        <td style={{ color: "#fff" }}>{b.token}</td>
                        <td style={{ color: "#fff" }}>{b.available}</td>
                        <td style={{ color: "#fff" }}>{b.total}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ))}
          </div>
        ) : (
          <span style={{ color: "#fff" }}>Cargando balances...</span>
        )}
      </div>
      {/* Input para la cantidad y selects de exchanges/token */}
      <div style={{ display: "flex", alignItems: "center", gap: 10, marginBottom: 16 }}>
        <select
          value={fromExchange}
          onChange={e => setFromExchange(e.target.value)}
          style={{ width: 120 }}
        >
          {EXCHANGES.map(ex => (
            <option key={ex} value={ex}>{ex}</option>
          ))}
        </select>
        <span style={{ color: "#FFD700", fontWeight: "bold" }}>→</span>
        <select
          value={toExchange}
          onChange={e => setToExchange(e.target.value)}
          style={{ width: 120 }}
        >
          {EXCHANGES.filter(ex => ex !== fromExchange).map(ex => (
            <option key={ex} value={ex}>{ex}</option>
          ))}
        </select>
        <select
          value={token}
          onChange={e => setToken(e.target.value)}
          style={{ width: 90 }}
        >
          {TOKENS.map(tk => (
            <option key={tk} value={tk}>{tk}</option>
          ))}
        </select>
        <input
          type="number"
          min="0"
          placeholder="Cantidad"
          value={rebalanceAmount}
          onChange={e => setRebalanceAmount(e.target.value)}
          style={{ width: 120 }}
        />
        <button
          className="btn btn-warning"
          onClick={handleManualRebalance}
          disabled={loading || !rebalanceAmount || fromExchange === toExchange}
        >
          {loading ? "Rebalanceando..." : "Rebalanceo Manual"}
        </button>
      </div>
      {/* Auto rebalanceo */}
      <div style={{ display: "flex", alignItems: "center", gap: 10, marginBottom: 16 }}>
        <button
          className={isAutoRebalance ? "btn btn-success btn-active" : "btn btn-success"}
          onClick={toggleAutoRebalance}
        >
          {isAutoRebalance ? "Rebalanceo Automático ON" : "Activar Rebalanceo Automático"}
        </button>
        <select
          value={rebalanceInterval}
          onChange={handleIntervalChange}
          className="form-select"
          style={{ width: 120 }}
          disabled={!isAutoRebalance}
        >
          <option value="10 min">10 min</option>
          <option value="1h">1h</option>
          <option value="6h">6h</option>
        </select>
      </div>
      <div>
        <b>Estado automático:</b> {isAutoRebalance ? `Activado (${rebalanceInterval})` : "Desactivado"}
      </div>
      {message && <p>{message}</p>}
    </div>
  );
}

------------------------------------------------------------------------------------------------------------


import React, { useState, useEffect } from "react";

// Helper para validaciones
function validateRisk(risk) {
  const errors = {};
  if (risk.MAX_DRAWDOWN < 0 || risk.MAX_DRAWDOWN > 1)
    errors.MAX_DRAWDOWN = "Debe estar entre 0 y 1 (0=0%, 1=100%)";
  if (risk.MAX_EXPOSURE < 0 || risk.MAX_EXPOSURE > 1)
    errors.MAX_EXPOSURE = "Debe estar entre 0 y 1 (0=0%, 1=100%)";
  if (risk.STOP_LOSS_PERCENTAGE < 0 || risk.STOP_LOSS_PERCENTAGE > 1)
    errors.STOP_LOSS_PERCENTAGE = "Debe estar entre 0 y 1";
  if (risk.MIN_TRADE_AMOUNT < 0)
    errors.MIN_TRADE_AMOUNT = "No puede ser negativo";
  if (risk.MAX_TRADE_AMOUNT < risk.MIN_TRADE_AMOUNT)
    errors.MAX_TRADE_AMOUNT = "Debe ser mayor o igual al mínimo";
  if (risk.MAX_SLIPPAGE < 0 || risk.MAX_SLIPPAGE > 1)
    errors.MAX_SLIPPAGE = "Debe estar entre 0 y 1 (0=0%, 1=100%)";
  if (risk.MIN_SPREAD < 0)
    errors.MIN_SPREAD = "No puede ser negativo";
  if (risk.MAX_DAILY_TRADES < 1)
    errors.MAX_DAILY_TRADES = "Debe ser al menos 1";
  if (risk.MAX_CONCURRENT_TRADES < 1)
    errors.MAX_CONCURRENT_TRADES = "Debe ser al menos 1";
  // ...puedes agregar más validaciones según tus reglas de negocio
  return errors;
}

const tooltips = {
  RISK_LEVEL: "Nivel general de riesgo para los algoritmos de gestión.",
  MAX_DRAWDOWN: "Pérdida máxima permitida desde el pico de capital antes de detener operaciones. Ejemplo: 0.05 = 5%",
  MAX_EXPOSURE: "Porcentaje máximo del capital invertido en operaciones simultáneamente. Ejemplo: 0.2 = 20%",
  STOP_LOSS_PERCENTAGE: "Porcentaje de stop loss global por operación. Ejemplo: 0.02 = 2%",
  VOLATILITY_THRESHOLD: "Umbral de volatilidad para pausar operaciones si se supera.",
  MAX_DAILY_TRADES: "Cantidad máxima de operaciones permitidas por día.",
  MAX_CONCURRENT_TRADES: "Máximo de operaciones abiertas al mismo tiempo.",
  MIN_PROFIT_THRESHOLD: "Ganancia mínima requerida para ejecutar arbitraje (en %).",
  REBALANCE_THRESHOLD: "Nivel de desbalance para ejecutar rebalanceo automático.",
  EMERGENCY_STOP_LOSS: "Nivel de pérdida extrema para detener todos los bots.",
  MIN_TRADE_AMOUNT: "Monto mínimo por operación.",
  MAX_TRADE_AMOUNT: "Monto máximo por operación.",
  MAX_SLIPPAGE: "Slippage máximo tolerado (como porcentaje, ej: 0.1 = 10%).",
  MIN_SPREAD: "Spread mínimo requerido para arbitrar.",
  EXCHANGE_RISK_SCORES: "Riesgo relativo de cada exchange (1=riesgo base, >1 más riesgoso).",
};

export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);
  const [saveMsg, setSaveMsg] = useState("");
  const [errors, setErrors] = useState({});

  useEffect(() => {
    fetch("http://localhost:8888/api/risk")
      .then(res => res.json())
      .then(data => setRisk(data));
  }, []);

  const handleChange = (field, value) => {
    setRisk(prev => ({ ...prev, [field]: value }));
    setErrors({});
    setSaveMsg("");
  };

  const handleExchangeScore = (exchange, value) => {
    setRisk(prev => ({
      ...prev,
      EXCHANGE_RISK_SCORES: {
        ...prev.EXCHANGE_RISK_SCORES,
        [exchange]: value,
      },
    }));
    setErrors({});
    setSaveMsg("");
  };

  const saveRisk = async () => {
    const v = validateRisk(risk);
    setErrors(v);
    if (Object.keys(v).length) return;

    setSaving(true);
    setSaveMsg("");
    await fetch("http://localhost:8888/api/risk", {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(risk),
    });
    setSaving(false);
    setSaveMsg("¡Gestión de riesgo actualizada!");
  };

  if (!risk) return <div className="dashboard-card">Cargando...</div>;

  return (
    <div className="dashboard-card">
      <h2>Gestión de Riesgo <span title="Todos estos parámetros pueden ser ajustados en tiempo real.">🛈</span></h2>
      <div style={{display: "flex", flexWrap: "wrap", gap: 18, alignItems: "flex-end"}}>
        <div>
          <label title={tooltips.RISK_LEVEL}>
            Nivel de riesgo:<br/>
            <select value={risk.RISK_LEVEL} onChange={e => handleChange("RISK_LEVEL", e.target.value)}>
              <option value="low">Bajo</option>
              <option value="medium">Medio</option>
              <option value="high">Alto</option>
            </select>
          </label>
        </div>
        <div>
          <label title={tooltips.MAX_DRAWDOWN}>
            Máx. Drawdown (%):<br/>
            <input
              type="range"
              min="0"
              max="0.5"
              step="0.01"
              value={risk.MAX_DRAWDOWN}
              onChange={e => handleChange("MAX_DRAWDOWN", parseFloat(e.target.value))}
              style={{ width: 120 }}
            />
            <span>{(risk.MAX_DRAWDOWN * 100).toFixed(2)}%</span>
          </label>
          {errors.MAX_DRAWDOWN && <div style={{ color: "red" }}>{errors.MAX_DRAWDOWN}</div>}
        </div>
        <div>
          <label title={tooltips.MAX_EXPOSURE}>
            Máx. Exposición (%):<br/>
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={risk.MAX_EXPOSURE}
              onChange={e => handleChange("MAX_EXPOSURE", parseFloat(e.target.value))}
              style={{ width: 120 }}
            />
            <span>{(risk.MAX_EXPOSURE * 100).toFixed(0)}%</span>
          </label>
          {errors.MAX_EXPOSURE && <div style={{ color: "red" }}>{errors.MAX_EXPOSURE}</div>}
        </div>
        <div>
          <label title={tooltips.STOP_LOSS_PERCENTAGE}>
            Stop Loss (%):<br/>
            <input
              type="number"
              min="0"
              max="1"
              step="0.01"
              value={risk.STOP_LOSS_PERCENTAGE}
              onChange={e => handleChange("STOP_LOSS_PERCENTAGE", parseFloat(e.target.value))}
              style={{ width: 70 }}
            />
          </label>
          {errors.STOP_LOSS_PERCENTAGE && <div style={{ color: "red" }}>{errors.STOP_LOSS_PERCENTAGE}</div>}
        </div>
        <div>
          <label title={tooltips.VOLATILITY_THRESHOLD}>
            Umbral de volatilidad:<br/>
            <input
              type="number"
              min="0"
              step="0.01"
              value={risk.VOLATILITY_THRESHOLD}
              onChange={e => handleChange("VOLATILITY_THRESHOLD", parseFloat(e.target.value))}
              style={{ width: 70 }}
            />
          </label>
        </div>
        <div>
          <label title={tooltips.MAX_DAILY_TRADES}>
            Máx. trades diarios:<br/>
            <input
              type="number"
              min="1"
              value={risk.MAX_DAILY_TRADES}
              onChange={e => handleChange("MAX_DAILY_TRADES", parseInt(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
          {errors.MAX_DAILY_TRADES && <div style={{ color: "red" }}>{errors.MAX_DAILY_TRADES}</div>}
        </div>
        <div>
          <label title={tooltips.MAX_CONCURRENT_TRADES}>
            Máx. trades simultáneos:<br/>
            <input
              type="number"
              min="1"
              value={risk.MAX_CONCURRENT_TRADES}
              onChange={e => handleChange("MAX_CONCURRENT_TRADES", parseInt(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
          {errors.MAX_CONCURRENT_TRADES && <div style={{ color: "red" }}>{errors.MAX_CONCURRENT_TRADES}</div>}
        </div>
        <div>
          <label title={tooltips.MIN_PROFIT_THRESHOLD}>
            Ganancia mínima (%):<br/>
            <input
              type="number"
              min="0"
              step="0.01"
              value={risk.MIN_PROFIT_THRESHOLD}
              onChange={e => handleChange("MIN_PROFIT_THRESHOLD", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
        </div>
        <div>
          <label title={tooltips.REBALANCE_THRESHOLD}>
            Umbral rebalanceo:<br/>
            <input
              type="number"
              min="0"
              step="0.01"
              value={risk.REBALANCE_THRESHOLD}
              onChange={e => handleChange("REBALANCE_THRESHOLD", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
        </div>
        <div>
          <label title={tooltips.EMERGENCY_STOP_LOSS}>
            Stop Loss Emergencia:<br/>
            <input
              type="number"
              min="0"
              step="0.01"
              value={risk.EMERGENCY_STOP_LOSS}
              onChange={e => handleChange("EMERGENCY_STOP_LOSS", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
        </div>
        <div>
          <label title={tooltips.MIN_TRADE_AMOUNT}>
            Mín. por operación:<br/>
            <input
              type="number"
              min="0"
              value={risk.MIN_TRADE_AMOUNT}
              onChange={e => handleChange("MIN_TRADE_AMOUNT", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
          {errors.MIN_TRADE_AMOUNT && <div style={{ color: "red" }}>{errors.MIN_TRADE_AMOUNT}</div>}
        </div>
        <div>
          <label title={tooltips.MAX_TRADE_AMOUNT}>
            Máx. por operación:<br/>
            <input
              type="number"
              min={risk.MIN_TRADE_AMOUNT}
              value={risk.MAX_TRADE_AMOUNT}
              onChange={e => handleChange("MAX_TRADE_AMOUNT", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
          {errors.MAX_TRADE_AMOUNT && <div style={{ color: "red" }}>{errors.MAX_TRADE_AMOUNT}</div>}
        </div>
        <div>
          <label title={tooltips.MAX_SLIPPAGE}>
            Slippage máx. (%):<br/>
            <input
              type="range"
              min="0"
              max="0.5"
              step="0.01"
              value={risk.MAX_SLIPPAGE}
              onChange={e => handleChange("MAX_SLIPPAGE", parseFloat(e.target.value))}
              style={{ width: 120 }}
            />
            <span>{(risk.MAX_SLIPPAGE * 100).toFixed(2)}%</span>
          </label>
          {errors.MAX_SLIPPAGE && <div style={{ color: "red" }}>{errors.MAX_SLIPPAGE}</div>}
        </div>
        <div>
          <label title={tooltips.MIN_SPREAD}>
            Spread mínimo (%):<br/>
            <input
              type="number"
              min="0"
              step="0.01"
              value={risk.MIN_SPREAD}
              onChange={e => handleChange("MIN_SPREAD", parseFloat(e.target.value))}
              style={{ width: 60 }}
            />
          </label>
        </div>
        <div>
          <label title={tooltips.EXCHANGE_RISK_SCORES}>
            Score riesgo exchanges:<br/>
            <div style={{ display: "flex", gap: 10 }}>
              {Object.entries(risk.EXCHANGE_RISK_SCORES).map(([ex, score]) => (
                <div key={ex}>
                  <span>{ex}: </span>
                  <input
                    type="number"
                    min="0"
                    step="0.01"
                    value={score}
                    onChange={e => handleExchangeScore(ex, parseFloat(e.target.value))}
                    style={{ width: 50 }}
                  />
                </div>
              ))}
            </div>
          </label>
        </div>
      </div>
      <button onClick={saveRisk} disabled={saving} style={{ marginTop: 20, fontWeight: "bold" }}>
        {saving ? "Guardando..." : "Guardar Cambios"}
      </button>
      {saveMsg && <div style={{ color: "green", marginTop: 10 }}>{saveMsg}</div>}
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------



import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

------------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

export default function SimulationSwitch() {
  const [simulating, setSimulating] = useState(false);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    // Consulta si el modo simulación está activo
    fetch("/api/simulation/status")
      .then(res => res.json())
      .then(data => setSimulating(!!data.simulation))
      .catch(() => setSimulating(false));
  }, []);

  const handleToggle = () => {
    setLoading(true);
    fetch(`/api/simulation/${simulating ? "off" : "on"}`, { method: "POST" })
      .then(() => setSimulating(!simulating))
      .finally(() => setLoading(false));
  };

  return (
    <div id="simulation-switch" className="panel">
      <h3>Modo Simulación</h3>
      <button onClick={handleToggle} disabled={loading}>
        {simulating ? "Desactivar Simulación" : "Activar Simulación"}
      </button>
      <p>
        Estado actual: <b>{simulating ? "Simulación activa" : "Simulación desactivada"}</b>
      </p>
    </div>
  );
}

----------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";

export default function StrategySelector() {
  const [strategies, setStrategies] = useState([]);
  const [selected, setSelected] = useState("");
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    // Cargar lista de estrategias disponibles
    fetch("/api/strategies")
      .then(res => res.json())
      .then(data => setStrategies(data.strategies || []))
      .catch(() => setStrategies([]));
    // Cargar la estrategia actualmente seleccionada
    fetch("/api/strategies/selected")
      .then(res => res.json())
      .then(data => setSelected(data.selected || ""))
      .catch(() => setSelected(""));
  }, []);

  const handleChange = (e) => {
    setSelected(e.target.value);
  };

  const handleSave = () => {
    setSaving(true);
    fetch("/api/strategies/selected", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ strategy: selected }),
    })
      .then(() => setSaving(false))
      .catch(() => setSaving(false));
  };

  return (
    <div id="strategy-selector" className="panel">
      <h3>Selector de Estrategia</h3>
      <label>
        Estrategia activa:
        <select value={selected} onChange={handleChange}>
          <option value="" disabled>
            Selecciona una estrategia
          </option>
          {strategies.map((s, i) => (
            <option value={s} key={i}>
              {s}
            </option>
          ))}
        </select>
      </label>
      <button onClick={handleSave} disabled={saving || !selected}>
        {saving ? "Guardando..." : "Activar Estrategia"}
      </button>
    </div>
  );
}

---------------------------------------------------------------------------------------------------------------

import React, { useState, useEffect } from "react";


export default function RiskManagerPanel() {
  const [risk, setRisk] = useState(null);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    api.get("/risk").then(res => setRisk(res.data));
  }, []);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    if (name.startsWith("STOP_LOSS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        STOP_LOSS: { ...prev.STOP_LOSS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else if (name.startsWith("VOLATILITY_LIMITS.")) {
      const sub = name.split(".")[1];
      setRisk((prev) => ({
        ...prev,
        VOLATILITY_LIMITS: { ...prev.VOLATILITY_LIMITS, [sub]: type === "checkbox" ? checked : value }
      }));
    } else {
      setRisk((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleSave = () => {
    setSaving(true);
    api.post("/risk", risk).then(() => setSaving(false));
  };

  if (!risk) return <div>Cargando...</div>;

  return (
    <div id="risk" className="panel">
      <h3>Gestión de Riesgo</h3>
      <label>
        Máx. pérdida diaria ($):
        <input name="MAX_DAILY_LOSS" type="number" value={risk.MAX_DAILY_LOSS} onChange={handleChange} />
      </label>
      <label>
        Máx. Drawdown (%):
        <input name="MAX_DRAWDOWN" type="number" value={risk.MAX_DRAWDOWN} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por par (%):
        <input name="MAX_EXPOSURE_PER_PAIR" type="number" value={risk.MAX_EXPOSURE_PER_PAIR} step="0.01" onChange={handleChange} />
      </label>
      <label>
        Máx. exposición por exchange (%):
        <input name="MAX_EXPOSURE_PER_EXCHANGE" type="number" value={risk.MAX_EXPOSURE_PER_EXCHANGE} step="0.01" onChange={handleChange} />
      </label>

      <fieldset>
        <legend>Stop Loss</legend>
        <label>
          Habilitado:
          <input type="checkbox" name="STOP_LOSS.enabled" checked={!!risk.STOP_LOSS?.enabled} onChange={handleChange} />
        </label>
        <label>
          Porcentaje stop loss:
          <input type="number" name="STOP_LOSS.percentage" step="0.01" value={risk.STOP_LOSS?.percentage || ""} onChange={handleChange} />
        </label>
        <label>
          Trailing Stop:
          <input type="checkbox" name="STOP_LOSS.trailingStop" checked={!!risk.STOP_LOSS?.trailingStop} onChange={handleChange} />
        </label>
        <label>
          Distancia trailing:
          <input type="number" name="STOP_LOSS.trailingDistance" step="0.01" value={risk.STOP_LOSS?.trailingDistance || ""} onChange={handleChange} />
        </label>
      </fieldset>

      <fieldset>
        <legend>Límites de Volatilidad</legend>
        <label>
          Máx. volatilidad (%):
          <input type="number" name="VOLATILITY_LIMITS.maxVolatility" step="0.01" value={risk.VOLATILITY_LIMITS?.maxVolatility || ""} onChange={handleChange} />
        </label>
        <label>
          Ventana de volatilidad (h):
          <input type="number" name="VOLATILITY_LIMITS.volatilityWindow" value={risk.VOLATILITY_LIMITS?.volatilityWindow || ""} onChange={handleChange} />
        </label>
        <label>
          Pausar si volatilidad alta:
          <input type="checkbox" name="VOLATILITY_LIMITS.pauseOnHighVolatility" checked={!!risk.VOLATILITY_LIMITS?.pauseOnHighVolatility} onChange={handleChange} />
        </label>
      </fieldset>

      <label>
        Umbral de rebalanceo (%):
        <input name="REBALANCE_THRESHOLD" type="number" step="0.01" value={risk.REBALANCE_THRESHOLD} onChange={handleChange} />
      </label>
      <label>
        Rebalanceo automático:
        <input type="checkbox" name="AUTO_REBALANCE" checked={!!risk.AUTO_REBALANCE} onChange={handleChange} />
      </label>
      <label>
        Frecuencia de rebalanceo (ms):
        <input name="REBALANCE_FREQUENCY" type="number" value={risk.REBALANCE_FREQUENCY} onChange={handleChange} />
      </label>

      <button onClick={handleSave} disabled={saving}>{saving ? "Guardando..." : "Actualizar"}</button>
    </div>
  );
}

--------------------------------------------------------------------------------------------------------------------

PORTAFOLIO

const EventEmitter = require('events');

/**
 * Gestor de Portfolio
 * Maneja la distribución y rebalanceo de fondos entre exchanges
 */
class PortfolioManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.initialBalance = config.PORTFOLIO.INITIAL_BALANCE;
        this.rebalanceFrequency = config.PORTFOLIO.REBALANCE_FREQUENCY;
        this.targetAllocation = config.PORTFOLIO.TARGET_ALLOCATION;
        this.minBalancePerExchange = config.PORTFOLIO.MIN_BALANCE_PER_EXCHANGE;
        this.reservePercentage = config.PORTFOLIO.RESERVE_PERCENTAGE;
        this.autoCompound = config.PORTFOLIO.AUTO_COMPOUND;
        this.compoundThreshold = config.PORTFOLIO.COMPOUND_THRESHOLD;
        
        this.currentBalances = {};
        this.balanceHistory = [];
        this.allocationHistory = [];
        this.rebalanceHistory = [];
        this.totalValue = 0;
        this.totalProfit = 0;
        this.totalProfitPercentage = 0;
        this.lastRebalance = null;
        this.rebalanceInterval = null;
        
        this.logger = console;

        // ======= AGREGADO DASHBOARD =======
        this._autoRebalanceEnabled = false; // Estado del auto rebalanceo
        // ======= FIN AGREGADO DASHBOARD =======
    }
    
    /**
     * Inicializa el gestor de portfolio
     * @param {Object} initialBalances - Balances iniciales por exchange
     */
    async initialize(initialBalances = {}) {
        this.logger.info('Inicializando Portfolio Manager...');
        
        try {
            // Establecer balances iniciales
            this.currentBalances = { ...initialBalances };
            
            // Si no hay balances iniciales, distribuir el balance inicial
            if (Object.keys(this.currentBalances).length === 0) {
                await this.distributeInitialBalance();
            }
            
            // Calcular valor total inicial
            this.calculateTotalValue();
            
            // Registrar estado inicial
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            // Programar rebalanceo automático
            if (this.rebalanceFrequency > 0) {
                this.scheduleAutoRebalance();
            }
            
            this.logger.info('Portfolio Manager inicializado correctamente');
            this.logger.info(`Valor total del portfolio: $${this.totalValue.toFixed(2)}`);
        } catch (error) {
            this.logger.error('Error inicializando Portfolio Manager:', error);
            throw error;
        }
    }
    
    /**
     * Distribuye el balance inicial según la asignación objetivo
     */
    async distributeInitialBalance() {
        const exchanges = Object.keys(this.targetAllocation);
        const balancePerExchange = this.initialBalance / exchanges.length;
        
        for (const exchange of exchanges) {
            const targetPercentage = this.targetAllocation[exchange];
            this.currentBalances[exchange] = this.initialBalance * targetPercentage;
        }
        
        this.logger.info('Balance inicial distribuido entre exchanges');
    }
    
    /**
     * Calcula el valor total del portfolio
     */
    calculateTotalValue() {
        this.totalValue = Object.values(this.currentBalances).reduce((sum, balance) => sum + balance, 0);
        this.totalProfit = this.totalValue - this.initialBalance;
        this.totalProfitPercentage = ((this.totalProfit / this.initialBalance) * 100);
    }
    
    /**
     * Registra un snapshot del balance actual
     */
    recordBalanceSnapshot() {
        this.balanceHistory.push({
            timestamp: new Date(),
            balances: { ...this.currentBalances },
            totalValue: this.totalValue,
            totalProfit: this.totalProfit,
            totalProfitPercentage: this.totalProfitPercentage
        });
        
        // Mantener solo los últimos 1000 registros
        if (this.balanceHistory.length > 1000) {
            this.balanceHistory.shift();
        }
    }
    
    /**
     * Registra un snapshot de la asignación actual
     */
    recordAllocationSnapshot() {
        const allocation = {};
        
        for (const exchange in this.currentBalances) {
            allocation[exchange] = (this.currentBalances[exchange] / this.totalValue) * 100;
        }
        
        this.allocationHistory.push({
            timestamp: new Date(),
            allocation,
            totalValue: this.totalValue
        });
        
        // Mantener solo los últimos 500 registros
        if (this.allocationHistory.length > 500) {
            this.allocationHistory.shift();
        }
    }
    
    /**
     * Programa el rebalanceo automático
     */
    scheduleAutoRebalance() {
        this._autoRebalanceEnabled = true; // AGREGADO DASHBOARD: marcar como habilitado
        this.rebalanceInterval = setInterval(async () => {
            try {
                await this.checkAndRebalance();
            } catch (error) {
                this.logger.error('Error en rebalanceo automático:', error);
            }
        }, this.rebalanceFrequency);
    }
    
    /**
     * Actualiza los balances del portfolio
     * @param {Object} newBalances - Nuevos balances por exchange
     */
    async updateBalances(newBalances) {
        // Actualizar balances
        this.currentBalances = { ...newBalances };
        
        // Recalcular valor total
        this.calculateTotalValue();
        
        // Registrar snapshot
        this.recordBalanceSnapshot();
        this.recordAllocationSnapshot();
        
        // Verificar si se necesita rebalanceo
        if (await this.shouldRebalance()) {
            this.emit('rebalanceNeeded', {
                balances: this.currentBalances,
                reason: 'Desviación de asignación objetivo'
            });
        }
        
        // Verificar si se debe reinvertir ganancias
        if (this.autoCompound && this.totalProfit >= this.compoundThreshold) {
            await this.compoundProfits();
        }
    }
    
    /**
     * Verifica si se necesita rebalanceo
     * @returns {boolean} - True si se necesita rebalanceo
     */
    async shouldRebalance() {
        const currentAllocation = this.getCurrentAllocation();
        const rebalanceThreshold = this.config.RISK_MANAGEMENT.REBALANCE_THRESHOLD || 0.15;
        
        for (const exchange in this.targetAllocation) {
            const targetPercentage = this.targetAllocation[exchange];
            const currentPercentage = currentAllocation[exchange] || 0;
            const deviation = Math.abs(targetPercentage - currentPercentage);
            
            if (deviation > rebalanceThreshold) {
                this.logger.info(`Rebalanceo necesario: ${exchange} - Objetivo: ${targetPercentage}%, Actual: ${currentPercentage.toFixed(2)}%`);
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Obtiene la asignación actual del portfolio
     * @returns {Object} - Asignación actual por exchange
     */
    getCurrentAllocation() {
        const allocation = {};
        
        for (const exchange in this.currentBalances) {
            allocation[exchange] = (this.currentBalances[exchange] / this.totalValue) * 100;
        }
        
        return allocation;
    }
    
    /**
     * Verifica y ejecuta rebalanceo si es necesario
     */
    async checkAndRebalance() {
        if (await this.shouldRebalance()) {
            await this.rebalancePortfolio();
        }
    }
    
    /**
     * Ejecuta el rebalanceo del portfolio
     */
    async rebalancePortfolio() {
        this.logger.info('Iniciando rebalanceo del portfolio...');
        
        try {
            const rebalanceId = this.generateRebalanceId();
            const startTime = new Date();
            const initialBalances = { ...this.currentBalances };
            
            // Calcular nuevos balances objetivo
            const targetBalances = this.calculateTargetBalances();
            
            // Calcular transferencias necesarias
            const transfers = this.calculateRequiredTransfers(targetBalances);
            
            // Ejecutar transferencias (simulado)
            const executedTransfers = await this.executeTransfers(transfers);
            
            // Actualizar balances
            this.applyTransfers(executedTransfers);
            
            // Registrar rebalanceo
            const rebalanceRecord = {
                id: rebalanceId,
                timestamp: startTime,
                endTime: new Date(),
                initialBalances,
                finalBalances: { ...this.currentBalances },
                targetBalances,
                transfers: executedTransfers,
                totalTransferred: executedTransfers.reduce((sum, t) => sum + t.amount, 0),
                success: true
            };
            
            this.rebalanceHistory.push(rebalanceRecord);
            this.lastRebalance = startTime;
            
            // Mantener solo los últimos 100 rebalanceos
            if (this.rebalanceHistory.length > 100) {
                this.rebalanceHistory.shift();
            }
            
            // Registrar nuevo estado
            this.calculateTotalValue();
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            this.emit('rebalanceCompleted', rebalanceRecord);
            this.logger.info(`Rebalanceo completado: $${rebalanceRecord.totalTransferred.toFixed(2)} transferidos`);
            
        } catch (error) {
            this.logger.error('Error ejecutando rebalanceo:', error);
            
            // Registrar rebalanceo fallido
            this.rebalanceHistory.push({
                id: this.generateRebalanceId(),
                timestamp: new Date(),
                success: false,
                error: error.message
            });
            
            this.emit('rebalanceError', { error: error.message });
        }
    }
    
    /**
     * Calcula los balances objetivo según la asignación
     * @returns {Object} - Balances objetivo por exchange
     */
    calculateTargetBalances() {
        const targetBalances = {};
        const availableBalance = this.totalValue * (1 - this.reservePercentage);
        
        for (const exchange in this.targetAllocation) {
            const targetPercentage = this.targetAllocation[exchange];
            targetBalances[exchange] = availableBalance * targetPercentage;
            
            // Asegurar balance mínimo
            if (targetBalances[exchange] < this.minBalancePerExchange) {
                targetBalances[exchange] = this.minBalancePerExchange;
            }
        }
        
        return targetBalances;
    }
    
    /**
     * Calcula las transferencias necesarias para el rebalanceo
     * @param {Object} targetBalances - Balances objetivo
     * @returns {Array} - Lista de transferencias necesarias
     */
    calculateRequiredTransfers(targetBalances) {
        const transfers = [];
        const surplusExchanges = [];
        const deficitExchanges = [];
        
        // Identificar exchanges con exceso y déficit
        for (const exchange in this.currentBalances) {
            const currentBalance = this.currentBalances[exchange];
            const targetBalance = targetBalances[exchange] || 0;
            const difference = currentBalance - targetBalance;
            
            if (difference > 1) { // Margen de $1 para evitar transferencias mínimas
                surplusExchanges.push({
                    exchange,
                    surplus: difference
                });
            } else if (difference < -1) {
                deficitExchanges.push({
                    exchange,
                    deficit: -difference
                });
            }
        }
        
        // Ordenar por cantidad (mayor primero)
        surplusExchanges.sort((a, b) => b.surplus - a.surplus);
        deficitExchanges.sort((a, b) => b.deficit - a.deficit);
        
        // Calcular transferencias
        for (const deficitExchange of deficitExchanges) {
            let remainingDeficit = deficitExchange.deficit;
            
            for (let i = 0; i < surplusExchanges.length && remainingDeficit > 0; i++) {
                const surplusExchange = surplusExchanges[i];
                
                if (surplusExchange.surplus <= 0) continue;
                
                const transferAmount = Math.min(surplusExchange.surplus, remainingDeficit);
                
                if (transferAmount > 1) { // Transferir solo si es mayor a $1
                    transfers.push({
                        from: surplusExchange.exchange,
                        to: deficitExchange.exchange,
                        amount: transferAmount
                    });
                    
                    surplusExchange.surplus -= transferAmount;
                    remainingDeficit -= transferAmount;
                }
            }
        }
        
        return transfers;
    }
    
    /**
     * Ejecuta las transferencias (simulado)
     * @param {Array} transfers - Lista de transferencias
     * @returns {Array} - Transferencias ejecutadas
     */
    async executeTransfers(transfers) {
        const executedTransfers = [];
        
        for (const transfer of transfers) {
            try {
                // Simular latencia de transferencia
                await new Promise(resolve => setTimeout(resolve, Math.random() * 1000 + 500));
                
                // Simular éxito/fallo (98% éxito)
                const success = Math.random() > 0.02;
                
                if (success) {
                    // Simular fee de transferencia (0.1%)
                    const fee = transfer.amount * 0.001;
                    const netAmount = transfer.amount - fee;
                    
                    executedTransfers.push({
                        ...transfer,
                        netAmount,
                        fee,
                        success: true,
                        timestamp: new Date()
                    });
                    
                    this.logger.info(`Transferencia ejecutada: $${transfer.amount.toFixed(2)} de ${transfer.from} a ${transfer.to}`);
                } else {
                    throw new Error('Transferencia fallida');
                }
            } catch (error) {
                this.logger.error(`Error en transferencia de ${transfer.from} a ${transfer.to}:`, error);
                
                executedTransfers.push({
                    ...transfer,
                    success: false,
                    error: error.message,
                    timestamp: new Date()
                });
            }
        }
        
        return executedTransfers;
    }
    
    /**
     * Aplica las transferencias a los balances
     * @param {Array} transfers - Transferencias ejecutadas
     */
    applyTransfers(transfers) {
        for (const transfer of transfers) {
            if (transfer.success) {
                // Restar del exchange origen
                this.currentBalances[transfer.from] -= transfer.amount;
                
                // Sumar al exchange destino (menos fee)
                this.currentBalances[transfer.to] += transfer.netAmount;
            }
        }
    }
    
    /**
     * Reinvierte las ganancias en el portfolio
     */
    async compoundProfits() {
        if (this.totalProfit < this.compoundThreshold) {
            return;
        }
        
        this.logger.info(`Reinvirtiendo ganancias: $${this.totalProfit.toFixed(2)}`);
        
        try {
            // Distribuir ganancias según asignación objetivo
            for (const exchange in this.targetAllocation) {
                const allocationPercentage = this.targetAllocation[exchange];
                const additionalAmount = this.totalProfit * allocationPercentage;
                
                this.currentBalances[exchange] += additionalAmount;
            }
            
            // Actualizar balance inicial para reflejar la reinversión
            this.initialBalance = this.totalValue;
            
            // Recalcular métricas
            this.calculateTotalValue();
            this.recordBalanceSnapshot();
            this.recordAllocationSnapshot();
            
            this.emit('profitsCompounded', {
                amount: this.totalProfit,
                newInitialBalance: this.initialBalance
            });
            
            this.logger.info('Ganancias reinvertidas correctamente');
        } catch (error) {
            this.logger.error('Error reinvirtiendo ganancias:', error);
        }
    }
    
    /**
     * Genera un ID único para el rebalanceo
     * @returns {string} - ID del rebalanceo
     */
    generateRebalanceId() {
        return `rebalance_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }
    
    /**
     * Obtiene el estado actual del portfolio
     * @returns {Object} - Estado del portfolio
     */
    getPortfolioStatus() {
        return {
            totalValue: this.totalValue,
            totalProfit: this.totalProfit,
            totalProfitPercentage: this.totalProfitPercentage,
            currentBalances: { ...this.currentBalances },
            currentAllocation: this.getCurrentAllocation(),
            targetAllocation: { ...this.targetAllocation },
            lastRebalance: this.lastRebalance,
            nextRebalanceCheck: this.lastRebalance ? 
                new Date(this.lastRebalance.getTime() + this.rebalanceFrequency) : 
                new Date()
        };
    }

    // ======= AGREGADO DASHBOARD: API paneles de rebalanceo y balances =======
    getBalances() {
        // Devuelve balances actuales
        return { ...this.currentBalances }
    }
    isAutoRebalanceEnabled() {
        return !!this._autoRebalanceEnabled
    }
    enableAutoRebalance() {
        if (!this._autoRebalanceEnabled) {
            this._autoRebalanceEnabled = true;
            if (!this.rebalanceInterval && this.rebalanceFrequency > 0) {
                this.scheduleAutoRebalance();
            }
        }
    }
    disableAutoRebalance() {
        if (this._autoRebalanceEnabled) {
            this._autoRebalanceEnabled = false;
            if (this.rebalanceInterval) {
                clearInterval(this.rebalanceInterval);
                this.rebalanceInterval = null;
            }
        }
    }
    // ======= FIN AGREGADO DASHBOARD =======
    
    /**
     * Obtiene el historial de balances
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de balances
     */
    getBalanceHistory(limit = 100) {
        return this.balanceHistory.slice(-limit);
    }
    
    /**
     * Obtiene el historial de asignaciones
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de asignaciones
     */
    getAllocationHistory(limit = 100) {
        return this.allocationHistory.slice(-limit);
    }
    
    /**
     * Obtiene el historial de rebalanceos
     * @param {number} limit - Límite de registros
     * @returns {Array} - Historial de rebalanceos
     */
    getRebalanceHistory(limit = 50) {
        return this.rebalanceHistory.slice(-limit);
    }
    
    /**
     * Actualiza la asignación objetivo
     * @param {Object} newAllocation - Nueva asignación objetivo
     */
    updateTargetAllocation(newAllocation) {
        // Validar que las asignaciones sumen 100%
        const totalAllocation = Object.values(newAllocation).reduce((sum, allocation) => sum + allocation, 0);
        
        if (Math.abs(totalAllocation - 1.0) > 0.01) {
            throw new Error('La asignación total debe sumar 100%');
        }
        
        this.targetAllocation = { ...newAllocation };
        this.logger.info('Asignación objetivo actualizada:', this.targetAllocation);
        
        // Verificar si se necesita rebalanceo inmediato
        this.checkAndRebalance();
    }
    
    /**
     * Detiene el gestor de portfolio
     */
    stop() {
        if (this.rebalanceInterval) {
            clearInterval(this.rebalanceInterval);
            this.rebalanceInterval = null;
        }
        
        this._autoRebalanceEnabled = false; // AGREGADO DASHBOARD: marcar como deshabilitado
        this.logger.info('Portfolio Manager detenido');
    }
}

module.exports = PortfolioManager;

---------------------------------------------------------------------------------------------------------

RISK

// ========== GESTIÓN AVANZADA DE RIESGO ==========
const config = require("../strategies/config")

class AdvancedRiskManager {
  constructor() {
    this.exposureMap = new Map()
    this.totalExposure = 0
    this.riskMetrics = new Map()
    this.correlationMatrix = new Map()
    this.volatilityHistory = new Map()
    this.anomalyDetector = new AnomalyDetector()
    this.stressTestResults = []
    this.riskLimits = this.initializeRiskLimits()
    
    // ======= AGREGADO PARA DASHBOARD =======
    this.riskSettings = {
      maxPorOperacion: 100,
      maxTotal: 1000,
    }
    // ======= FIN AGREGADO DASHBOARD =======

    console.log('🛡️ Gestor de Riesgo Avanzado inicializado')
  }

  // ======= AGREGADO PARA DASHBOARD =======
  getRiskSettings() {
    return this.riskSettings
  }
  setRiskSettings(settings) {
    this.riskSettings = { ...this.riskSettings, ...settings }
  }
  // ======= FIN AGREGADO DASHBOARD =======
  
  initializeRiskLimits() {
    return {
      maxDailyLoss: config.BOT.MAX_DAILY_LOSS || -5.0, // -5%
      maxSingleTradeRisk: 2.0, // 2% del portfolio por trade
      maxCorrelatedExposure: 30.0, // 30% en activos correlacionados
      maxVolatilityThreshold: 50.0, // 50% volatilidad anualizada
      maxDrawdown: 10.0, // 10% drawdown máximo
      minLiquidityRatio: 0.2, // 20% mínimo en activos líquidos
      maxConcentrationRisk: 40.0, // 40% máximo en un solo activo
    }
  }

  async assessTradeRisk(opportunity, marketData, portfolioValue) {
    const riskAssessment = {
      riskScore: 0,
      riskLevel: 'LOW',
      riskFactors: [],
      recommendations: [],
      approved: true,
      maxPositionSize: opportunity.tradeAmount,
    }

    try {
      // 1. Riesgo de volatilidad
      const volatilityRisk = this.assessVolatilityRisk(opportunity.pair, marketData)
      riskAssessment.riskScore += volatilityRisk.score
      if (volatilityRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...volatilityRisk.factors)
      }

      // 2. Riesgo de liquidez
      const liquidityRisk = this.assessLiquidityRisk(opportunity, marketData)
      riskAssessment.riskScore += liquidityRisk.score
      if (liquidityRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...liquidityRisk.factors)
      }

      // 3. Riesgo de concentración
      const concentrationRisk = this.assessConcentrationRisk(opportunity, portfolioValue)
      riskAssessment.riskScore += concentrationRisk.score
      if (concentrationRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...concentrationRisk.factors)
      }

      // 4. Riesgo de correlación
      const correlationRisk = this.assessCorrelationRisk(opportunity.pair)
      riskAssessment.riskScore += correlationRisk.score
      if (correlationRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...correlationRisk.factors)
      }

      // 5. Riesgo temporal
      const temporalRisk = this.assessTemporalRisk()
      riskAssessment.riskScore += temporalRisk.score
      if (temporalRisk.factors.length > 0) {
        riskAssessment.riskFactors.push(...temporalRisk.factors)
      }

      // Determinar nivel de riesgo
      if (riskAssessment.riskScore < 0.3) {
        riskAssessment.riskLevel = 'LOW'
      } else if (riskAssessment.riskScore < 0.7) {
        riskAssessment.riskLevel = 'MEDIUM'
      } else {
        riskAssessment.riskLevel = 'HIGH'
      }

      // Ajustar tamaño de posición basado en riesgo
      riskAssessment.maxPositionSize = this.calculateOptimalPositionSize(
        opportunity,
        riskAssessment.riskScore,
        portfolioValue
      )

      // Generar recomendaciones
      riskAssessment.recommendations = this.generateRiskRecommendations(riskAssessment)

      // Decidir aprobación
      riskAssessment.approved = this.shouldApproveTradeRisk(riskAssessment)

      return riskAssessment
    } catch (error) {
      console.error('❌ Error en evaluación de riesgo:', error)
      return {
        ...riskAssessment,
        riskLevel: 'HIGH',
        approved: false,
        riskFactors: ['Error en evaluación de riesgo'],
      }
    }
  }

  assessVolatilityRisk(pair, marketData) {
    const assessment = { score: 0, factors: [] }
    
    const currentVolatility = marketData.volatility || 0
    const historicalVolatility = this.getHistoricalVolatility(pair)
    
    // Volatilidad actual vs histórica
    if (currentVolatility > historicalVolatility * 1.5) {
      assessment.score += 0.3
      assessment.factors.push(`Volatilidad elevada: ${(currentVolatility * 100).toFixed(1)}%`)
    }

    // Volatilidad absoluta
    if (currentVolatility > this.riskLimits.maxVolatilityThreshold / 100) {
      assessment.score += 0.4
      assessment.factors.push(`Volatilidad excesiva: ${(currentVolatility * 100).toFixed(1)}%`)
    }

    // Cambios súbitos de volatilidad
    const volatilityChange = this.getVolatilityChange(pair)
    if (Math.abs(volatilityChange) > 0.1) {
      assessment.score += 0.2
      assessment.factors.push(`Cambio súbito de volatilidad: ${(volatilityChange * 100).toFixed(1)}%`)
    }

    return assessment
  }

  assessLiquidityRisk(opportunity, marketData) {
    const assessment = { score: 0, factors: [] }
    
    const volume24h = marketData.volume24h || 0
    const avgVolume = marketData.avgVolume || volume24h
    const volumeRatio = avgVolume > 0 ? volume24h / avgVolume : 1

    // Volumen bajo
    if (volumeRatio < 0.5) {
      assessment.score += 0.3
      assessment.factors.push(`Volumen bajo: ${(volumeRatio * 100).toFixed(1)}% del promedio`)
    }

    // Spread amplio (indicador de baja liquidez)
    if (opportunity.spread > 2.0) {
      assessment.score += 0.2
      assessment.factors.push(`Spread amplio: ${opportunity.spread.toFixed(2)}%`)
    }

    // Profundidad del order book
    const orderBookDepth = marketData.orderBookDepth || 0
    if (orderBookDepth < opportunity.tradeAmount * 2) {
      assessment.score += 0.4
      assessment.factors.push('Profundidad insuficiente del order book')
    }

    return assessment
  }

  assessConcentrationRisk(opportunity, portfolioValue) {
    const assessment = { score: 0, factors: [] }
    
    const currentExposure = this.exposureMap.get(opportunity.pair) || 0
    const newExposure = currentExposure + opportunity.tradeAmount
    const concentrationPercent = (newExposure / portfolioValue) * 100

    // Concentración por par
    if (concentrationPercent > this.riskLimits.maxConcentrationRisk) {
      assessment.score += 0.5
      assessment.factors.push(`Concentración excesiva en ${opportunity.pair}: ${concentrationPercent.toFixed(1)}%`)
    }

    // Exposición total
    const newTotalExposure = this.totalExposure + opportunity.tradeAmount
    const totalExposurePercent = (newTotalExposure / portfolioValue) * 100
    
    if (totalExposurePercent > 80) {
      assessment.score += 0.3
      assessment.factors.push(`Exposición total alta: ${totalExposurePercent.toFixed(1)}%`)
    }

    return assessment
  }

  assessCorrelationRisk(pair) {
    const assessment = { score: 0, factors: [] }
    
    const correlatedPairs = this.getCorrelatedPairs(pair)
    let correlatedExposure = 0

    for (const correlatedPair of correlatedPairs) {
      correlatedExposure += this.exposureMap.get(correlatedPair) || 0
    }

    const correlationPercent = (correlatedExposure / this.totalExposure) * 100

    if (correlationPercent > this.riskLimits.maxCorrelatedExposure) {
      assessment.score += 0.4
      assessment.factors.push(`Alta exposición correlacionada: ${correlationPercent.toFixed(1)}%`)
    }

    return assessment
  }

  assessTemporalRisk() {
    const assessment = { score: 0, factors: [] }
    
    const now = new Date()
    const hour = now.getHours()
    const day = now.getDay()

    // Horarios de baja liquidez
    if (hour >= 22 || hour <= 6) {
      assessment.score += 0.1
      assessment.factors.push('Horario de baja liquidez')
    }

    // Fines de semana
    if (day === 0 || day === 6) {
      assessment.score += 0.1
      assessment.factors.push('Trading en fin de semana')
    }

    // Eventos de mercado (simplificado)
    if (this.isHighVolatilityPeriod()) {
      assessment.score += 0.2
      assessment.factors.push('Período de alta volatilidad del mercado')
    }

    return assessment
  }

  calculateOptimalPositionSize(opportunity, riskScore, portfolioValue) {
    const baseSize = opportunity.tradeAmount
    const maxRiskPerTrade = portfolioValue * (this.riskLimits.maxSingleTradeRisk / 100)
    
    // Ajustar por score de riesgo
    const riskAdjustment = Math.max(0.1, 1 - riskScore)
    const adjustedSize = baseSize * riskAdjustment
    
    // Aplicar límites
    return Math.min(adjustedSize, maxRiskPerTrade, baseSize)
  }

  generateRiskRecommendations(riskAssessment) {
    const recommendations = []

    if (riskAssessment.riskLevel === 'HIGH') {
      recommendations.push('Considere reducir el tamaño de la posición')
      recommendations.push('Monitoree de cerca la ejecución')
      recommendations.push('Prepare stop-loss más estricto')
    }

    if (riskAssessment.riskFactors.includes('Volatilidad elevada')) {
      recommendations.push('Espere a que la volatilidad se normalice')
    }

    if (riskAssessment.riskFactors.some(f => f.includes('Concentración'))) {
      recommendations.push('Diversifique la exposición')
    }

    if (riskAssessment.riskFactors.some(f => f.includes('liquidez'))) {
      recommendations.push('Verifique la profundidad del order book')
    }

    return recommendations
  }

  shouldApproveTradeRisk(riskAssessment) {
    // No aprobar si el riesgo es muy alto
    if (riskAssessment.riskScore > 0.8) return false
    
    // No aprobar si hay factores críticos
    const criticalFactors = [
      'Volatilidad excesiva',
      'Concentración excesiva',
      'Profundidad insuficiente'
    ]
    
    for (const factor of riskAssessment.riskFactors) {
      if (criticalFactors.some(critical => factor.includes(critical))) {
        return false
      }
    }

    return true
  }

  async runStressTest(scenarios = []) {
    console.log('🧪 Ejecutando stress test...')
    
    const defaultScenarios = [
      { name: 'Crash 20%', priceChange: -0.20, volumeChange: -0.50 },
      { name: 'Volatilidad Extrema', volatilityMultiplier: 3, spreadMultiplier: 2 },
      { name: 'Liquidez Baja', volumeChange: -0.80, spreadMultiplier: 5 },
      { name: 'Correlación Alta', correlationIncrease: 0.5 },
    ]

    const testScenarios = scenarios.length > 0 ? scenarios : defaultScenarios
    const results = []

    for (const scenario of testScenarios) {
      const result = await this.simulateScenario(scenario)
      results.push(result)
    }

    this.stressTestResults = results
    return results
  }

  async simulateScenario(scenario) {
    const simulation = {
      name: scenario.name,
      parameters: scenario,
      results: {
        portfolioLoss: 0,
        maxDrawdown: 0,
        tradesAffected: 0,
        liquidityImpact: 0,
        riskScore: 0,
      },
      recommendations: [],
    }

    // Simular impacto en portfolio
    if (scenario.priceChange) {
      simulation.results.portfolioLoss = this.totalExposure * Math.abs(scenario.priceChange)
    }

    // Simular impacto en liquidez
    if (scenario.volumeChange) {
      simulation.results.liquidityImpact = Math.abs(scenario.volumeChange)
    }

    // Calcular score de riesgo del escenario
    simulation.results.riskScore = this.calculateScenarioRisk(scenario)

    // Generar recomendaciones
    simulation.recommendations = this.generateStressTestRecommendations(simulation)

    return simulation
  }

  calculateScenarioRisk(scenario) {
    let riskScore = 0

    if (scenario.priceChange && Math.abs(scenario.priceChange) > 0.1) {
      riskScore += 0.4
    }

    if (scenario.volatilityMultiplier && scenario.volatilityMultiplier > 2) {
      riskScore += 0.3
    }

    if (scenario.volumeChange && scenario.volumeChange < -0.5) {
      riskScore += 0.3
    }

    return Math.min(1.0, riskScore)
  }

  generateStressTestRecommendations(simulation) {
    const recommendations = []

    if (simulation.results.portfolioLoss > this.totalExposure * 0.1) {
      recommendations.push('Reducir exposición total')
      recommendations.push('Implementar hedging')
    }

    if (simulation.results.liquidityImpact > 0.5) {
      recommendations.push('Diversificar exchanges')
      recommendations.push('Monitorear volúmenes más de cerca')
    }

    if (simulation.results.riskScore > 0.7) {
      recommendations.push('Pausar trading automático')
      recommendations.push('Revisar límites de riesgo')
    }

    return recommendations
  }

  // Métodos auxiliares
  getHistoricalVolatility(pair) {
    const history = this.volatilityHistory.get(pair) || []
    if (history.length === 0) return 0.02 // 2% por defecto
    
    return history.reduce((sum, vol) => sum + vol, 0) / history.length
  }

  getVolatilityChange(pair) {
    const history = this.volatilityHistory.get(pair) || []
    if (history.length < 2) return 0
    
    return history[history.length - 1] - history[history.length - 2]
  }

  getCorrelatedPairs(pair) {
    // Simplificado - en producción usar matriz de correlación real
    const correlations = {
      'POL/USDT': ['MATIC/USDT'],
      'BTC/USDT': ['ETH/USDT'],
      'ETH/USDT': ['BTC/USDT'],
    }
    
    return correlations[pair] || []
  }

  isHighVolatilityPeriod() {
    // Simplificado - en producción usar indicadores de mercado reales
    return Math.random() < 0.1 // 10% probabilidad
  }

  updateExposure(pair, amount, isClosing = false) {
    const currentExposure = this.exposureMap.get(pair) || 0
    
    if (isClosing) {
      const newExposure = Math.max(0, currentExposure - amount)
      this.exposureMap.set(pair, newExposure)
      this.totalExposure = Math.max(0, this.totalExposure - amount)
    } else {
      this.exposureMap.set(pair, currentExposure + amount)
      this.totalExposure += amount
    }
  }

  trackVolatility(pair, volatility) {
    if (!this.volatilityHistory.has(pair)) {
      this.volatilityHistory.set(pair, [])
    }
    
    const history = this.volatilityHistory.get(pair)
    history.push(volatility)
    
    // Mantener solo los últimos 100 puntos
    if (history.length > 100) {
      history.shift()
    }
  }

  getRiskReport() {
    return {
      totalExposure: this.totalExposure,
      exposureByPair: Object.fromEntries(this.exposureMap),
      riskLimits: this.riskLimits,
      stressTestResults: this.stressTestResults.slice(-5), // Últimos 5 tests
      riskMetrics: Object.fromEntries(this.riskMetrics),
      recommendations: this.generatePortfolioRiskRecommendations(),
    }
  }

  generatePortfolioRiskRecommendations() {
    const recommendations = []
    
    // Verificar exposición total
    if (this.totalExposure > 1000) { // Ejemplo: $1000
      recommendations.push({
        type: 'EXPOSURE',
        message: 'Exposición total elevada',
        priority: 'MEDIUM',
      })
    }

    // Verificar concentración
    for (const [pair, exposure] of this.exposureMap.entries()) {
      if (exposure > this.totalExposure * 0.4) {
        recommendations.push({
          type: 'CONCENTRATION',
          message: `Alta concentración en ${pair}`,
          priority: 'HIGH',
        })
      }
    }

    return recommendations
  }
}

// Detector de anomalías auxiliar
class AnomalyDetector {
  constructor() {
    this.priceHistory = new Map()
    this.volumeHistory = new Map()
    this.spreadHistory = new Map()
  }

  detectAnomalies(pair, price, volume, spread) {
    const anomalies = []
    
    // Detectar anomalías de precio
    const priceAnomaly = this.detectPriceAnomaly(pair, price)
    if (priceAnomaly) anomalies.push(priceAnomaly)
    
    // Detectar anomalías de volumen
    const volumeAnomaly = this.detectVolumeAnomaly(pair, volume)
    if (volumeAnomaly) anomalies.push(volumeAnomaly)
    
    // Detectar anomalías de spread
    const spreadAnomaly = this.detectSpreadAnomaly(pair, spread)
    if (spreadAnomaly) anomalies.push(spreadAnomaly)
    
    // Actualizar historiales
    this.updateHistory(pair, price, volume, spread)
    
    return anomalies
  }

  detectPriceAnomaly(pair, price) {
    const history = this.priceHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const deviation = Math.abs(price - avg) / avg
    
    if (deviation > 0.05) { // 5% desviación
      return {
        type: 'PRICE_ANOMALY',
        severity: deviation > 0.1 ? 'HIGH' : 'MEDIUM',
        message: `Precio anómalo: ${(deviation * 100).toFixed(1)}% desviación`,
      }
    }
    
    return null
  }

  detectVolumeAnomaly(pair, volume) {
    const history = this.volumeHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const ratio = volume / avg
    
    if (ratio < 0.1 || ratio > 10) {
      return {
        type: 'VOLUME_ANOMALY',
        severity: ratio < 0.05 || ratio > 20 ? 'HIGH' : 'MEDIUM',
        message: `Volumen anómalo: ${ratio.toFixed(1)}x del promedio`,
      }
    }
    
    return null
  }

  detectSpreadAnomaly(pair, spread) {
    const history = this.spreadHistory.get(pair) || []
    if (history.length < 10) return null
    
    const avg = history.reduce((a, b) => a + b) / history.length
    const ratio = spread / avg
    
    if (ratio > 3) {
      return {
        type: 'SPREAD_ANOMALY',
        severity: ratio > 5 ? 'HIGH' : 'MEDIUM',
        message: `Spread anómalo: ${ratio.toFixed(1)}x del promedio`,
      }
    }
    
    return null
  }

  updateHistory(pair, price, volume, spread) {
    // Actualizar historial de precios
    if (!this.priceHistory.has(pair)) {
      this.priceHistory.set(pair, [])
    }
    const priceHist = this.priceHistory.get(pair)
    priceHist.push(price)
    if (priceHist.length > 50) priceHist.shift()
    
    // Actualizar historial de volumen
    if (!this.volumeHistory.has(pair)) {
      this.volumeHistory.set(pair, [])
    }
    const volumeHist = this.volumeHistory.get(pair)
    volumeHist.push(volume)
    if (volumeHist.length > 50) volumeHist.shift()
    
    // Actualizar historial de spread
    if (!this.spreadHistory.has(pair)) {
      this.spreadHistory.set(pair, [])
    }
    const spreadHist = this.spreadHistory.get(pair)
    spreadHist.push(spread)
    if (spreadHist.length > 50) spreadHist.shift()
  }
}

module.exports = {
  AdvancedRiskManager
}

---------------------------------------------------------------------------------------------------------------


SCRIPTS

// Nuevo script para ejecutar el backtesting
const { Backtester } = require("../backtesting/backtester")
const { HistoricalDataManager } = require("../backtesting/historical-data-manager")
const config = require("../config")

async function main() {
  if (!config.BACKTESTING.ENABLED) {
    console.log("El backtesting está desactivado en la configuración.")
    return
  }

  const startDateStr = process.argv[2] || "2024-01-01" // Ejemplo: YYYY-MM-DD
  const endDateStr = process.argv[3] || "2024-01-02" // Ejemplo: YYYY-MM-DD

  console.log(`Preparando datos históricos para el backtest (${startDateStr} a ${endDateStr})...`)
  const dataManager = new HistoricalDataManager()

  // Descargar/verificar datos para el rango especificado
  // Esto es un ejemplo, necesitarías una lógica más robusta para manejar los días
  const currentDate = new Date(startDateStr)
  const finalDate = new Date(endDateStr)

  while (currentDate <= finalDate) {
    for (const pairConfig of config.TRADING_PAIRS) {
      for (const exchangeName of Object.keys(config.EXCHANGES)) {
        // El método fetchAndStoreCandlestickData ahora guarda los datos si no existen.
        // Para un backtest, primero nos aseguraríamos que los datos existen.
        // Si no, se podrían descargar aquí o el backtester podría hacerlo.
        // Por simplicidad, asumimos que fetchAndStore los obtiene y guarda si es necesario.
        await dataManager.fetchAndStoreCandlestickData(
          exchangeName,
          pairConfig.symbol,
          "1m", // intervalo
          currentDate.getTime(), // startTime del día
          currentDate.getTime() + (24 * 60 * 60 * 1000 - 1), // endTime del día
        )
      }
    }
    currentDate.setDate(currentDate.getDate() + 1)
  }
  console.log("Datos históricos listos.")

  const backtester = new Backtester(startDateStr, endDateStr)

  try {
    const report = await backtester.run()
    console.log("\n--- Reporte Final del Backtest ---")
    console.log(`Periodo: ${report.startDate.toDateString()} - ${report.endDate.toDateString()}`)
    console.log(`Balance Inicial: ${report.initialBalance.toFixed(2)} USDT`)
    console.log(`Balance Final: ${report.finalBalance.toFixed(2)} USDT`)
    console.log(`Profit: ${report.profit.toFixed(2)} USDT (${report.profitPercentage.toFixed(2)}%)`)
    console.log(`Total Trades: ${report.totalTrades}`)

    // Enviar alerta con el resumen del backtest
    if (config.ALERTS.ALERT_ON_BACKTEST_COMPLETION && backtester.simulatedBot) {
      const alertMessage =
        `Backtest completado (${startDateStr} a ${endDateStr}):\n` +
        `Profit: ${report.profit.toFixed(2)} USDT (${report.profitPercentage.toFixed(2)}%)\n` +
        `Trades: ${report.totalTrades}`
      await backtester.simulatedBot.logAndAlert(alertMessage, { type: "BACKTEST_RESULT", priority: "normal" })
    }
  } catch (error) {
    console.error("Error durante el backtesting:", error)
  }
}

main()

---------------------------------------------------------------------------------------------------------------

SERVICES

import axios from 'axios';

const api = axios.create({
  baseURL: 'http://localhost:3000', // Cambia esto por la URL de tu backend
});

export default api;

-------------------------------------------------------------------------------------------------------------------


STRATEGIES

/**
 * Configuración completa del Bot de YageCoin Exchange CEX con IA
 */


module.exports = {
  // Configuración general
  CHECK_INTERVAL: 5000, // Intervalo de verificación en ms
  TRADING_PAIRS: ["LTC/USDT", "BNB/USDT", "XRP/USDT"], // SOLO los tres pares indicados

  // Configuración de Exchanges - SOLO BINANCE Y BYBIT HABILITADOS
  EXCHANGES: {
    BINANCE: {
      name: "Binance",
      apiKey: process.env.BINANCE_API_KEY || "",
      apiSecret: process.env.BINANCE_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.1,
        taker: 0.1,
      },
      enabled: true, // ✅ HABILITADO
    },
    COINBASE: {
      name: "Coinbase",
      apiKey: process.env.COINBASE_API_KEY || "",
      apiSecret: process.env.COINBASE_API_SECRET || "",
      passphrase: process.env.COINBASE_PASSPHRASE || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.005,
        taker: 0.005,
      },
      enabled: false, // ❌ DESHABILITADO
    },
    KRAKEN: {
      name: "Kraken",
      apiKey: process.env.KRAKEN_API_KEY || "",
      apiSecret: process.env.KRAKEN_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.0016,
        taker: 0.0026,
      },
      enabled: false, // ❌ DESHABILITADO
    },
    KUCOIN: {
      name: "Kucoin",
      apiKey: process.env.KUCOIN_API_KEY || "",
      apiSecret: process.env.KUCOIN_API_SECRET || "",
      passphrase: process.env.KUCOIN_PASSPHRASE || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.001,
        taker: 0.001,
      },
      enabled: false, // ❌ DESHABILITADO - CAMBIADO A BYBIT
    },
    BYBIT: {
      name: "Bybit",
      apiKey: process.env.BYBIT_API_KEY || "",
      apiSecret: process.env.BYBIT_API_SECRET || "",
      sandbox: process.env.NODE_ENV !== "production",
      rateLimit: 10,
      fees: {
        maker: 0.1,
        taker: 0.1,
      },
      enabled: true, // ✅ HABILITADO - NUEVO
    },
  },

  // === NUEVO BLOQUE PARA REDES, DIRECCIONES Y MINIMOS DE DEPOSITO/RETIRO ===
  TOKEN_NETWORKS: {
    BINANCE: {
      USDT: {
        address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb",
        memo: "163771801",
        network: "TON",
        minDeposit: 0.002,
        minWithdraw: 10,
        withdrawFee: 0.20,
        withdrawToken: "USDC", // Confirmar si es USDT o USDC en TON
        note: "Depósito mínimo en TON: 0.002 USDT"
      },
      LTC: {
        address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4",
        network: "Litecoin",
        minDeposit: 0.002,
        minWithdraw: 0.002,
        withdrawFee: 0.0001,
        withdrawToken: "LTC"
      },
      BNB: {
        address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7",
        network: "BEP20",
        minDeposit: 0.000003,
        minWithdraw: 0.0005,
        withdrawFee: 0.00001,
        withdrawToken: "BNB"
      },
      XRP: {
        address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV",
        tag: "466152795",
        network: "XRP",
        minDeposit: 0.001,
        minWithdraw: 2,
        withdrawFee: 0.2,
        withdrawToken: "XRP"
      }
    },
    BYBIT: {
      USDT: {
        address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB",
        network: "TON",
        minDeposit: 0.001,
        minWithdraw: 1,
        withdrawFee: 0.3,
        withdrawToken: "USDT"
      },
      LTC: {
        address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ",
        network: "Litecoin",
        minDeposit: 0.00000001,
        minWithdraw: 0.001,
        withdrawFee: 0.0001,
        withdrawToken: "LTC"
      },
      BNB: {
        address: "0x4231d188a91481a8c3d39d444b7451436babee94",
        network: "BEP20",
        minDeposit: 0.000,
        minWithdraw: 0.0002,
        withdrawFee: 0.0002,
        withdrawToken: "BNB"
      },
      XRP: {
        address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh",
        tag: "501350199",
        network: "XRP",
        minDeposit: 0.01,
        minWithdraw: 1.2,
        withdrawFee: 0.2,
        withdrawToken: "XRP"
      }
    }
  },

// Configuración de Gestión de Riesgos
  RISK_MANAGEMENT: {
    RISK_LEVEL: "medium",
    MAX_DRAWDOWN: 0.05,
    MAX_EXPOSURE: 0.2,
    STOP_LOSS_PERCENTAGE: 0.02,
    VOLATILITY_THRESHOLD: 0.1,
    MAX_DAILY_TRADES: 100,
    MAX_CONCURRENT_TRADES: 5,
    MIN_PROFIT_THRESHOLD: 0.1,
    REBALANCE_THRESHOLD: 0.15,
    EMERGENCY_STOP_LOSS: 0.1,
    MIN_TRADE_AMOUNT: 10, // Mínimo por operación
    MAX_TRADE_AMOUNT: 10, // Máximo por operación
    MAX_SLIPPAGE: 0.005, // 0.5% de slippage máximo tolerado
    MIN_SPREAD: 0.1, // 0.1% spread mínimo para arbitrar
    EXCHANGE_RISK_SCORES: {
      Binance: 1.0,
      Bybit: 1.3,
    },
  },

  // Configuración de Portfolio
  PORTFOLIO: {
    INITIAL_BALANCE: 15, // 15 USDT por exchange
    REBALANCE_FREQUENCY: 3600000,
    TARGET_ALLOCATION: {
      Binance: 0.5,
      Bybit: 0.5,
    },
    MIN_BALANCE_PER_EXCHANGE: 15,
    RESERVE_PERCENTAGE: 0.1,
    AUTO_COMPOUND: true,
    COMPOUND_THRESHOLD: 100,
  },

  // Límites y reglas del exchange
  EXCHANGE_LIMITS: {
    BINANCE: {
      dailyWithdrawLimit: null,
      tradingLimit: null,
      countryRestrictions: null
    },
    BYBIT: {
      dailyWithdrawLimit: null,
      tradingLimit: null,
      countryRestrictions: null
    }
  },

  // Configuración de Estrategias
  STRATEGIES: {
    BASIC: {
      name: "Arbitraje Básico",
      enabled: true,
      minProfitPercentage: 0.2,
      maxInvestmentPercentage: 0.1,
      timeoutMs: 30000,
    },
    TRIANGULAR: {
      name: "Arbitraje Triangular",
      enabled: true,
      minProfitPercentage: 0.15,
      maxInvestmentPercentage: 0.08,
      timeoutMs: 45000,
      maxHops: 3,
    },
    STATISTICAL: {
      name: "Arbitraje Estadístico",
      enabled: true,
      lookbackPeriod: 100,
      zScoreThreshold: 2.0,
      meanReversionTime: 300000,
      minProfitPercentage: 0.1,
    },
    ML: {
      name: "Machine Learning",
      enabled: true,
      modelType: "random_forest",
      features: ["price_spread", "volume_ratio", "volatility", "time_of_day", "market_sentiment"],
      retrainInterval: 86400000,
      confidenceThreshold: 0.7,
    },
    COMBINED: {
      name: "Estrategia Combinada",
      enabled: true,
      strategies: ["BASIC", "TRIANGULAR", "STATISTICAL"],
      votingThreshold: 2,
      weightings: {
        BASIC: 0.4,
        TRIANGULAR: 0.3,
        STATISTICAL: 0.3,
      },
    },
  },

  // Configuración de IA y Machine Learning
  AI_TRADING: {
    ENABLED: true,
    MODEL_PATH: "./models/",
    TRAINING_DATA_DAYS: 30,
    PREDICTION_HORIZON: 300000,
    FEATURES: {
      TECHNICAL_INDICATORS: true,
      MARKET_SENTIMENT: true,
      ORDER_BOOK_ANALYSIS: true,
      VOLUME_ANALYSIS: true,
      CORRELATION_ANALYSIS: true,
    },
    MODELS: {
      PRICE_PREDICTION: {
        type: "lstm",
        layers: [50, 50, 25],
        epochs: 100,
        batchSize: 32,
      },
      OPPORTUNITY_SCORING: {
        type: "random_forest",
        nEstimators: 100,
        maxDepth: 10,
      },
      RISK_ASSESSMENT: {
        type: "gradient_boosting",
        nEstimators: 50,
        learningRate: 0.1,
      },
    },
    AUTO_RETRAIN: true,
    RETRAIN_THRESHOLD: 0.05,
    SENTIMENT_SOURCES: ["twitter", "reddit", "news", "fear_greed_index"],
  },

  // Configuración de Backtesting
  BACKTESTING: {
    ENABLED: true,
    DATA_SOURCE: "historical_api",
    DEFAULT_PERIOD: 30,
    COMMISSION_RATE: 0.001,
    SLIPPAGE_RATE: 0.0005,
    INITIAL_CAPITAL: 10000,
    BENCHMARK: "BTC",
    METRICS: ["total_return", "sharpe_ratio", "max_drawdown", "win_rate", "profit_factor", "calmar_ratio"],
    MONTE_CARLO_SIMULATIONS: 1000,
    CONFIDENCE_INTERVALS: [0.95, 0.99],
  },

  // *** CONFIGURACIÓN DE ALERTAS COMPLETAS ***
  ALERTS: {
    ENABLED: true,
    CHANNELS: {
      EMAIL: {
        enabled: process.env.EMAIL_ENABLED === "true",
        smtp: {
          host: process.env.EMAIL_SERVICE === "gmail" ? "smtp.gmail.com" : "smtp.gmail.com",
          port: 587,
          secure: false,
          auth: {
            user: process.env.EMAIL_USER || "",
            pass: process.env.EMAIL_PASS || "",
          },
        },
        from: process.env.EMAIL_USER || "bot@arbitrage.com",
        to: process.env.EMAIL_TO || "admin@arbitrage.com",
      },
      TELEGRAM: {
        enabled: true,
        botToken: process.env.TELEGRAM_BOT_TOKEN || "",
        chatId: process.env.TELEGRAM_CHAT_ID || "",
        parseMode: "HTML",
      },
      DISCORD: {
        enabled: false,
        webhookUrl: process.env.DISCORD_WEBHOOK_URL || "",
      },
      SLACK: {
        enabled: false,
        webhookUrl: process.env.SLACK_WEBHOOK_URL || "",
      },
    },
    ALERT_TYPES: {
      // *** ALERTAS DE SISTEMA ***
      BOT_STARTED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "medium",
      },
      BOT_STOPPED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      SYSTEM_ERROR: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "critical",
      },
      CONNECTION_ERROR: {
        enabled: true,
        channels: ["telegram"],
        priority: "high",
      },

      // *** ALERTAS DE TRADING ***
      TRADE_EXECUTED: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      TRADE_FAILED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      OPPORTUNITY_FOUND: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      PAIR_ANALYSIS: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },

      // *** ALERTAS DE BALANCE ***
      BALANCE_UPDATE: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      LOW_BALANCE: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      BALANCE_REBALANCED: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },

      // *** ALERTAS DE GANANCIAS ***
      PROFIT_MILESTONE: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
        milestones: [50, 100, 250, 500, 1000], // USD
      },
      DAILY_PROFIT: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },

      // *** ALERTAS DE RIESGO ***
      RISK_WARNING: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
      HIGH_VOLATILITY: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      STOP_LOSS_TRIGGERED: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "critical",
      },

      // *** ALERTAS PERIÓDICAS ***
      HOURLY_SUMMARY: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      DAILY_SUMMARY: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "medium",
        time: "23:59",
      },
      WEEKLY_SUMMARY: {
        enabled: true,
        channels: ["email"],
        priority: "medium",
      },

      // *** ALERTAS GENERALES ***
      INFO: {
        enabled: true,
        channels: ["telegram"],
        priority: "low",
      },
      WARNING: {
        enabled: true,
        channels: ["telegram"],
        priority: "medium",
      },
      ERROR: {
        enabled: true,
        channels: ["telegram", "email"],
        priority: "high",
      },
    },
  },

  // Configuración de API Móvil
  MOBILE_API: {
    ENABLED: false,
    PORT: process.env.MOBILE_API_PORT || 8426,
    JWT_SECRET: process.env.JWT_SECRET || "your-secret-key",
    JWT_EXPIRY: "24h",
    RATE_LIMIT: {
      windowMs: 15 * 60 * 1000,
      max: 100,
    },
    CORS: {
      origin: process.env.MOBILE_APP_URL || "*",
      credentials: true,
    },
    ENDPOINTS: {
      STATUS: "/api/mobile/status",
      TRADES: "/api/mobile/trades",
      PORTFOLIO: "/api/mobile/portfolio",
      ALERTS: "/api/mobile/alerts",
      SETTINGS: "/api/mobile/settings",
    },
    PUSH_NOTIFICATIONS: {
      enabled: true,
      fcmServerKey: process.env.FCM_SERVER_KEY || "",
      topics: ["trades", "alerts", "system"],
    },
  },

  // Configuración de Base de Datos
  DATABASE: {
    TYPE: "mongodb",
    URL: process.env.DATABASE_URL || "mongodb://localhost:27017/arbitrage_bot",
    OPTIONS: {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    },
    COLLECTIONS: {
      TRADES: "trades",
      BALANCES: "balances",
      PRICES: "prices",
      ALERTS: "alerts",
      SETTINGS: "settings",
      ML_MODELS: "ml_models",
    },
  },

  // Configuración de Logging
  LOGGING: {
    LEVEL: process.env.LOG_LEVEL || "info",
    FILE: {
      enabled: true,
      path: "./logs/",
      maxSize: "10m",
      maxFiles: 5,
      datePattern: "YYYY-MM-DD",
    },
    CONSOLE: {
      enabled: true,
      colorize: true,
      timestamp: true,
    },
    REMOTE: {
      enabled: false,
      endpoint: process.env.LOG_ENDPOINT || "",
      apiKey: process.env.LOG_API_KEY || "",
    },
  },

  // Configuración de Seguridad
  SECURITY: {
    API_ENCRYPTION: true,
    ENCRYPTION_KEY: process.env.ENCRYPTION_KEY || "your-encryption-key",
    TWO_FACTOR_AUTH: {
      enabled: false,
      secret: process.env.TOTP_SECRET || "",
    },
    IP_WHITELIST: process.env.IP_WHITELIST ? process.env.IP_WHITELIST.split(",") : [],
    MAX_LOGIN_ATTEMPTS: 5,
    LOCKOUT_DURATION: 300000,
    SESSION_TIMEOUT: 3600000,
  },

  // Configuración de Performance
  PERFORMANCE: {
    MAX_MEMORY_USAGE: 512,
    CPU_THRESHOLD: 80,
    GARBAGE_COLLECTION: {
      enabled: true,
      interval: 300000,
    },
    CACHE: {
      enabled: true,
      ttl: 60000,
      maxSize: 1000,
    },
    COMPRESSION: {
      enabled: true,
      level: 6,
    },
  },

  // Configuración de Desarrollo
  DEVELOPMENT: {
    DEBUG_MODE: process.env.NODE_ENV === "development",
    MOCK_EXCHANGES: process.env.MOCK_EXCHANGES === "true",
    SIMULATION_ONLY: process.env.SIMULATION_ONLY === "true",
    HOT_RELOAD: true,
    PROFILING: {
      enabled: false,
      interval: 60000,
    },
  },
}


-------------------------------------------------------------------------------------------------------------

/**
 * Módulo de gestión avanzada de riesgos para el bot de arbitraje
 */
const EventEmitter = require('events')

class AdvancedRiskManager extends EventEmitter {
    constructor(config) {
        super();
        this.config = config;
        this.riskLevel = config.RISK_MANAGEMENT.RISK_LEVEL || 'medium';
        this.maxDrawdown = config.RISK_MANAGEMENT.MAX_DRAWDOWN || 0.05;
        this.maxExposure = config.RISK_MANAGEMENT.MAX_EXPOSURE || 0.2;
        this.stopLossPercentage = config.RISK_MANAGEMENT.STOP_LOSS_PERCENTAGE || 0.02;
        this.volatilityThreshold = config.RISK_MANAGEMENT.VOLATILITY_THRESHOLD || 0.1;
        this.exchangeRiskScores = config.RISK_MANAGEMENT.EXCHANGE_RISK_SCORES || {
            'Binance': 1,
            'Coinbase': 1,
            'Kraken': 1.2,
            'Kucoin': 1.5
        };
        
        this.portfolioValue = 0;
        this.initialPortfolioValue = 0;
        this.maxPortfolioValue = 0;
        this.currentDrawdown = 0;
        this.riskAnalysis = {
            marketVolatility: 0,
            exchangeRisk: 0,
            liquidityRisk: 0,
            overallRisk: 0
        };
        
        this.logger = console;
    }
    
    /**
     * Inicializa el gestor de riesgos con los balances actuales
     * @param {Object} balances - Balances por exchange
     */
    initialize(balances) {
        this.portfolioValue = this.calculatePortfolioValue(balances);
        this.initialPortfolioValue = this.portfolioValue;
        this.maxPortfolioValue = this.portfolioValue;
        this.logger.info(`Risk Manager inicializado con portfolio: $${this.portfolioValue.toFixed(2)}`);
    }
    
    /**
     * Calcula el valor total del portfolio
     * @param {Object} balances - Balances por exchange
     * @returns {number} - Valor total del portfolio
     */
    calculatePortfolioValue(balances) {
        let total = 0;
        for (const exchange in balances) {
            total += balances[exchange];
        }
        return total;
    }
    
    /**
     * Actualiza el análisis de riesgo basado en las condiciones actuales
     * @param {Object} marketData - Datos del mercado
     * @param {Object} balances - Balances por exchange
     */
    updateRiskAnalysis(marketData, balances) {
        // Actualizar valor del portfolio
        this.portfolioValue = this.calculatePortfolioValue(balances);
        
        // Actualizar máximo valor del portfolio
        if (this.portfolioValue > this.maxPortfolioValue) {
            this.maxPortfolioValue = this.portfolioValue;
        }
        
        // Calcular drawdown actual
        this.currentDrawdown = (this.maxPortfolioValue - this.portfolioValue) / this.maxPortfolioValue;
        
        // Calcular volatilidad del mercado (simulado)
        const marketVolatility = this.calculateMarketVolatility(marketData);
        
        // Calcular riesgo de exchange
        const exchangeRisk = this.calculateExchangeRisk(balances);
        
        // Calcular riesgo de liquidez
        const liquidityRisk = this.calculateLiquidityRisk(marketData);
        
        // Calcular riesgo total
        const overallRisk = (marketVolatility + exchangeRisk + liquidityRisk) / 3;
        
        this.riskAnalysis = {
            marketVolatility,
            exchangeRisk,
            liquidityRisk,
            overallRisk
        };
        
        return this.riskAnalysis;
    }
    
    /**
     * Calcula la volatilidad del mercado
     * @param {Object} marketData - Datos del mercado
     * @returns {number} - Porcentaje de volatilidad (0-100)
     */
    calculateMarketVolatility(marketData) {
        // Simulación de cálculo de volatilidad
        // En una implementación real, se calcularía la desviación estándar de los precios
        if (!marketData || !marketData.volatility) {
            return Math.random() * 30 + 10; // Valor aleatorio entre 10 y 40
        }
        
        return marketData.volatility * 100;
    }
    
    /**
     * Calcula el riesgo asociado a los exchanges
     * @param {Object} balances - Balances por exchange
     * @returns {number} - Porcentaje de riesgo (0-100)
     */
    calculateExchangeRisk(balances) {
        if (!balances) return 30; // Valor por defecto
        
        let totalRisk = 0;
        let totalBalance = 0;
        
        for (const exchange in balances) {
            const balance = balances[exchange];
            const riskScore = this.exchangeRiskScores[exchange] || 1;
            
            totalRisk += balance * riskScore;
            totalBalance += balance;
        }
        
        // Normalizar a un porcentaje (0-100)
        return totalBalance > 0 ? (totalRisk / totalBalance) * 25 : 30;
    }
    
    /**
     * Calcula el riesgo de liquidez
     * @param {Object} marketData - Datos del mercado
     * @returns {number} - Porcentaje de riesgo (0-100)
     */
    calculateLiquidityRisk(marketData) {
        // Simulación de cálculo de riesgo de liquidez
        // En una implementación real, se analizarían los libros de órdenes
        if (!marketData || !marketData.liquidityScore) {
            return Math.random() * 40 + 20; // Valor aleatorio entre 20 y 60
        }
        
        return (1 - marketData.liquidityScore) * 100;
    }
    
    /**
     * Evalúa si una oportunidad de arbitraje cumple con los criterios de riesgo
     * @param {Object} opportunity - Oportunidad de arbitraje
     * @param {Object} balances - Balances por exchange
     * @returns {boolean} - True si la oportunidad es aceptable
     */
    evaluateOpportunity(opportunity, balances) {
        // Verificar si estamos en drawdown máximo
        if (this.currentDrawdown >= this.maxDrawdown) {
            this.logger.warn(`Oportunidad rechazada: Drawdown máximo alcanzado (${(this.currentDrawdown * 100).toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si la exposición es demasiado alta
        const exposureAmount = opportunity.investmentAmount;
        const exposurePercentage = exposureAmount / this.portfolioValue;
        
        if (exposurePercentage > this.maxExposure) {
            this.logger.warn(`Oportunidad rechazada: Exposición demasiado alta (${(exposurePercentage * 100).toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si la volatilidad del mercado es demasiado alta
        if (this.riskAnalysis.marketVolatility > this.volatilityThreshold * 100) {
            this.logger.warn(`Oportunidad rechazada: Volatilidad del mercado demasiado alta (${this.riskAnalysis.marketVolatility.toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si el riesgo total es aceptable según el nivel de riesgo configurado
        const riskThreshold = this.getRiskThreshold();
        if (this.riskAnalysis.overallRisk > riskThreshold) {
            this.logger.warn(`Oportunidad rechazada: Riesgo total demasiado alto (${this.riskAnalysis.overallRisk.toFixed(2)}%)`);
            return false;
        }
        
        // Verificar si hay suficiente balance en los exchanges involucrados
        for (const exchange of opportunity.exchanges) {
            if (!balances[exchange] || balances[exchange] < opportunity.minRequiredBalance) {
                this.logger.warn(`Oportunidad rechazada: Balance insuficiente en ${exchange}`);
                return false;
            }
        }
        
        return true;
    }
    
    /**
     * Obtiene el umbral de riesgo según el nivel configurado
     * @returns {number} - Umbral de riesgo (0-100)
     */
    getRiskThreshold() {
        switch (this.riskLevel) {
            case 'low':
                return 30;
            case 'medium':
                return 50;
            case 'high':
                return 70;
            default:
                return 50;
        }
    }
    
    /**
     * Actualiza la configuración de riesgo
     * @param {Object} settings - Nuevas configuraciones
     */
    updateSettings(settings) {
        if (settings.riskLevel) {
            this.riskLevel = settings.riskLevel;
        }
        
        if (settings.maxDrawdown) {
            this.maxDrawdown = settings.maxDrawdown;
        }
        
        if (settings.maxExposure) {
            this.maxExposure = settings.maxExposure;
        }
        
        if (settings.stopLossPercentage) {
            this.stopLossPercentage = settings.stopLossPercentage;
        }
        
        if (settings.volatilityThreshold) {
            this.volatilityThreshold = settings.volatilityThreshold;
        }
        
        this.logger.info(`Configuración de riesgo actualizada: ${JSON.stringify({
            riskLevel: this.riskLevel,
            maxDrawdown: this.maxDrawdown,
            maxExposure: this.maxExposure,
            stopLossPercentage: this.stopLossPercentage,
            volatilityThreshold: this.volatilityThreshold
        })}`);
    }
    
    /**
     * Implementa un sistema de reequilibrio de fondos entre exchanges
     * @param {Object} balances - Balances actuales por exchange
     * @param {Object} exchangeManager - Gestor de exchanges para realizar transferencias
     * @returns {Object} - Resultado del reequilibrio
     */
    rebalanceFunds(balances, exchangeManager) {
        this.logger.info('Iniciando reequilibrio de fondos entre exchanges...');
        
        // Calcular el balance total y el balance promedio objetivo
        const totalBalance = this.calculatePortfolioValue(balances);
        const exchangeCount = Object.keys(balances).length;
        const targetBalance = totalBalance / exchangeCount;
        
        this.logger.info(`Balance total: $${totalBalance.toFixed(2)}, Balance objetivo por exchange: $${targetBalance.toFixed(2)}`);
        
        // Identificar exchanges con exceso y déficit de fondos
        const excessExchanges = [];
        const deficitExchanges = [];
        
        for (const exchange in balances) {
            const balance = balances[exchange];
            const difference = balance - targetBalance;
            
            // Usar un margen del 5% para evitar transferencias innecesarias
            if (difference > targetBalance * 0.05) {
                excessExchanges.push({
                    exchange,
                    balance,
                    excess: difference
                });
            } else if (difference < -targetBalance * 0.05) {
                deficitExchanges.push({
                    exchange,
                    balance,
                    deficit: -difference
                });
            }
        }
        
        // Ordenar por exceso/déficit (de mayor a menor)
        excessExchanges.sort((a, b) => b.excess - a.excess);
        deficitExchanges.sort((a, b) => b.deficit - a.deficit);
        
        // Realizar transferencias
        const transfers = [];
        let totalTransferred = 0;
        
        for (const deficitExchange of deficitExchanges) {
            let remainingDeficit = deficitExchange.deficit;
            
            for (let i = 0; i < excessExchanges.length && remainingDeficit > 0; i++) {
                const excessExchange = excessExchanges[i];
                
                if (excessExchange.excess <= 0) continue;
                
                const transferAmount = Math.min(excessExchange.excess, remainingDeficit);
                
                if (transferAmount > 0) {
                    // En una implementación real, aquí se llamaría a exchangeManager.transfer()
                    this.logger.info(`Transfiriendo $${transferAmount.toFixed(2)} de ${excessExchange.exchange} a ${deficitExchange.exchange}`);
                    
                    // Registrar la transferencia
                    transfers.push({
                        from: excessExchange.exchange,
                        to: deficitExchange.exchange,
                        amount: transferAmount
                    });
                    
                    // Actualizar los balances simulados
                    excessExchange.excess -= transferAmount;
                    remainingDeficit -= transferAmount;
                    totalTransferred += transferAmount;
                }
            }
        }
        
        this.logger.info(`Reequilibrio completado. Total transferido: $${totalTransferred.toFixed(2)}`);
        
        return {
            success: true,
            transfers,
            totalTransferred
        };
    }
    
    /**
     * Obtiene el análisis de riesgo actual
     * @returns {Object} - Análisis de riesgo
     */
    getRiskAnalysis() {
        return this.riskAnalysis;
    }
}

module.exports = AdvancedRiskManager;

----------------------------------------------------------------------------------------------------------------

const EventEmitter = require('events');

/**
 * Gestor de Estrategias
 * Maneja múltiples estrategias de arbitraje y su selección
 */
class StrategyManager {
  constructor() {
    this.config = config;
    this.activeStrategy = 'BASIC';
        this.strategyInstances = {};
        this.strategyPerformance = {};
        this.strategyHistory = [];
        
        this.logger = console;
    }
    
    /**
     * Inicializa el gestor de estrategias
     */
    initialize() {
        this.logger.info('Inicializando Strategy Manager...');
        
        try {
            // Inicializar instancias de estrategias
            this.initializeStrategies();
            
            // Inicializar métricas de rendimiento
            this.initializePerformanceMetrics();
            
            this.logger.info('Strategy Manager inicializado correctamente');
            this.logger.info(`Estrategia activa: ${this.activeStrategy}`);
        } catch (error) {
            this.logger.error('Error inicializando Strategy Manager:', error);
            throw error;
        }
    }
    
    /**
     * Inicializa las instancias de estrategias
     */
    initializeStrategies() {
        for (const strategyName in this.strategies) {
            const strategyConfig = this.strategies[strategyName];
            
            if (strategyConfig.enabled) {
                this.strategyInstances[strategyName] = new Strategy(strategyName, strategyConfig);
                this.logger.info(`Estrategia ${strategyName} inicializada`);
            }
        }
    }
    
    /**
     * Inicializa las métricas de rendimiento
     */
    initializePerformanceMetrics() {
        for (const strategyName in this.strategyInstances) {
            this.strategyPerformance[strategyName] = {
                totalOpportunities: 0,
                executedTrades: 0,
                successfulTrades: 0,
                failedTrades: 0,
                totalProfit: 0,
                averageProfit: 0,
                winRate: 0,
                averageExecutionTime: 0,
                lastUsed: null,
                score: 0
            };
        }
    }
    
    /**
     * Busca oportunidades de arbitraje básico
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findBasicArbitrage(prices, pair) {
        const strategy = this.strategyInstances['BASIC'];
        if (!strategy) return [];
        
        const opportunities = [];
        const exchanges = Object.keys(prices);
        
        if (exchanges.length < 2) return opportunities;
        
        // Encontrar el precio más bajo y más alto
        let lowestPrice = Infinity;
        let highestPrice = -Infinity;
        let buyExchange = null;
        let sellExchange = null;
        
        for (const exchange of exchanges) {
            const price = prices[exchange];
            
            if (price < lowestPrice) {
                lowestPrice = price;
                buyExchange = exchange;
            }
            
            if (price > highestPrice) {
                highestPrice = price;
                sellExchange = exchange;
            }
        }
        
        // Calcular ganancia potencial
        const profitPercentage = ((highestPrice - lowestPrice) / lowestPrice) * 100;
        
        // Verificar si cumple con el mínimo requerido
        if (profitPercentage >= strategy.config.minProfitPercentage && buyExchange !== sellExchange) {
            opportunities.push({
                type: 'basic',
                strategy: 'BASIC',
                pair,
                exchanges: [buyExchange, sellExchange],
                buyExchange,
                sellExchange,
                buyPrice: lowestPrice,
                sellPrice: highestPrice,
                profitPercentage,
                investmentAmount: this.calculateInvestmentAmount('BASIC', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('BASIC', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['BASIC'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje triangular
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findTriangularArbitrage(prices, pair) {
        const strategy = this.strategyInstances['TRIANGULAR'];
        if (!strategy) return [];
        
        const opportunities = [];
        
        // En una implementación real, aquí buscaríamos oportunidades triangulares
        // Para esta implementación, simularemos algunas oportunidades
        
        if (Math.random() < 0.03) { // 3% de probabilidad
            const exchanges = Object.keys(prices);
            if (exchanges.length === 0) return opportunities;
            
            const exchange = exchanges[Math.floor(Math.random() * exchanges.length)];
            const profitPercentage = strategy.config.minProfitPercentage + Math.random() * 0.5;
            
            // Simular ruta triangular
            const baseCurrency = pair.split('/')[1]; // USDT
            const quoteCurrency = pair.split('/')[0]; // BTC
            const intermediateCurrency = 'ETH'; // Moneda intermedia
            
            opportunities.push({
                type: 'triangular',
                strategy: 'TRIANGULAR',
                pair,
                exchange,
                route: [
                    { pair: `${baseCurrency}/${intermediateCurrency}`, action: 'buy' },
                    { pair: `${quoteCurrency}/${intermediateCurrency}`, action: 'sell' },
                    { pair: pair, action: 'sell' }
                ],
                profitPercentage,
                investmentAmount: this.calculateInvestmentAmount('TRIANGULAR', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('TRIANGULAR', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['TRIANGULAR'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Busca oportunidades de arbitraje estadístico
     * @param {Object} prices - Precios por exchange
     * @param {string} pair - Par de trading
     * @returns {Array} - Oportunidades encontradas
     */
    findStatisticalArbitrage(prices, pair) {
        const strategy = this.strategyInstances['STATISTICAL'];
        if (!strategy) return [];
        
        const opportunities = [];
        
        // En una implementación real, aquí analizaríamos patrones estadísticos
        // Para esta implementación, simularemos algunas oportunidades
        
        if (Math.random() < 0.02) { // 2% de probabilidad
            const exchanges = Object.keys(prices);
            if (exchanges.length < 2) return opportunities;
            
            const exchange1 = exchanges[Math.floor(Math.random() * exchanges.length)];
            let exchange2 = exchanges[Math.floor(Math.random() * exchanges.length)];
            while (exchange2 === exchange1 && exchanges.length > 1) {
                exchange2 = exchanges[Math.floor(Math.random() * exchanges.length)];
            }
            
            const profitPercentage = strategy.config.minProfitPercentage + Math.random() * 0.3;
            const zScore = strategy.config.zScoreThreshold + Math.random();
            
            opportunities.push({
                type: 'statistical',
                strategy: 'STATISTICAL',
                pair,
                exchanges: [exchange1, exchange2],
                buyExchange: exchange1,
                sellExchange: exchange2,
                buyPrice: prices[exchange1],
                sellPrice: prices[exchange2],
                profitPercentage,
                zScore,
                meanReversion: true,
                investmentAmount: this.calculateInvestmentAmount('STATISTICAL', profitPercentage),
                timestamp: new Date(),
                confidence: this.calculateConfidence('STATISTICAL', profitPercentage)
            });
            
            // Actualizar métricas
            this.strategyPerformance['STATISTICAL'].totalOpportunities++;
        }
        
        return opportunities;
    }
    
    /**
     * Calcula la cantidad de inversión para una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {number} profitPercentage - Porcentaje de ganancia esperada
     * @returns {number} - Cantidad de inversión
     */
    calculateInvestmentAmount(strategyName, profitPercentage) {
        const strategy = this.strategies[strategyName];
        if (!strategy) return 100; // Valor por defecto
        
        const maxInvestmentPercentage = strategy.maxInvestmentPercentage || 0.1;
        const baseAmount = 1000; // Balance base simulado
        
        // Ajustar inversión según la ganancia esperada
        let investmentMultiplier = 1;
        if (profitPercentage > 1.0) {
            investmentMultiplier = 1.5;
        } else if (profitPercentage > 0.5) {
            investmentMultiplier = 1.2;
        }
        
        return baseAmount * maxInvestmentPercentage * investmentMultiplier;
    }
    
    /**
     * Calcula la confianza en una oportunidad
     * @param {string} strategyName - Nombre de la estrategia
     * @param {number} profitPercentage - Porcentaje de ganancia esperada
     * @returns {number} - Nivel de confianza (0-1)
     */
    calculateConfidence(strategyName, profitPercentage) {
        const strategy = this.strategies[strategyName];
        if (!strategy) return 0.5;
        
        const minProfit = strategy.minProfitPercentage || 0.1;
        
        // Confianza base según la estrategia
        let baseConfidence;
        switch (strategyName) {
            case 'BASIC':
                baseConfidence = 0.8;
                break;
            case 'TRIANGULAR':
                baseConfidence = 0.7;
                break;
            case 'STATISTICAL':
                baseConfidence = 0.6;
                break;
            case 'ML':
                baseConfidence = 0.9;
                break;
            default:
                baseConfidence = 0.5;
        }
        
        // Ajustar confianza según la ganancia
        const profitMultiplier = Math.min(profitPercentage / minProfit, 3);
        const confidence = Math.min(baseConfidence * profitMultiplier, 1.0);
        
        return confidence;
    }
    
    /**
     * Establece la estrategia activa
     * @param {string} strategyName - Nombre de la estrategia
     */
    setActiveStrategy(strategyName) {
        if (!this.strategyInstances[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no disponible`);
        }
        
        const previousStrategy = this.activeStrategy;
        this.activeStrategy = strategyName;
        
        // Registrar cambio de estrategia
        this.strategyHistory.push({
            timestamp: new Date(),
            previousStrategy,
            newStrategy: strategyName,
            reason: 'Manual'
        });
        
        // Mantener solo los últimos 100 cambios
        if (this.strategyHistory.length > 100) {
            this.strategyHistory.shift();
        }
        
        this.emit('strategyChanged', {
            previousStrategy,
            newStrategy: strategyName
        });
        
        this.logger.info(`Estrategia cambiada de ${previousStrategy} a ${strategyName}`);
    }
    
    /**
     * Actualiza las métricas de rendimiento de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} tradeResult - Resultado de la operación
     */
    updateStrategyPerformance(strategyName, tradeResult) {
        if (!this.strategyPerformance[strategyName]) {
            return;
        }
        
        const performance = this.strategyPerformance[strategyName];
        
        performance.executedTrades++;
        performance.lastUsed = new Date();
        
        if (tradeResult.success) {
            performance.successfulTrades++;
            performance.totalProfit += tradeResult.profit;
        } else {
            performance.failedTrades++;
        }
        
        // Calcular métricas derivadas
        performance.winRate = performance.successfulTrades / performance.executedTrades;
        performance.averageProfit = performance.totalProfit / performance.executedTrades;
        
        // Calcular puntuación de la estrategia
        performance.score = this.calculateStrategyScore(strategyName);
        
        this.logger.info(`Rendimiento actualizado para ${strategyName}: Win Rate: ${(performance.winRate * 100).toFixed(2)}%`);
    }
    
    /**
     * Calcula la puntuación de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @returns {number} - Puntuación de la estrategia (0-100)
     */
    calculateStrategyScore(strategyName) {
        const performance = this.strategyPerformance[strategyName];
        if (!performance || performance.executedTrades === 0) {
            return 50; // Puntuación neutral
        }
        
        // Factores para la puntuación
        const winRateWeight = 0.4;
        const profitWeight = 0.3;
        const opportunityWeight = 0.2;
        const recentUsageWeight = 0.1;
        
        // Normalizar win rate (0-100)
        const winRateScore = performance.winRate * 100;
        
        // Normalizar ganancia promedio (0-100)
        const profitScore = Math.min(Math.max(performance.averageProfit * 10, 0), 100);
        
        // Normalizar oportunidades (0-100)
        const maxOpportunities = Math.max(...Object.values(this.strategyPerformance).map(p => p.totalOpportunities));
        const opportunityScore = maxOpportunities > 0 ? (performance.totalOpportunities / maxOpportunities) * 100 : 50;
        
        // Puntuación por uso reciente (0-100)
        const daysSinceLastUse = performance.lastUsed ? 
            (Date.now() - performance.lastUsed.getTime()) / (1000 * 60 * 60 * 24) : 30;
        const recentUsageScore = Math.max(100 - daysSinceLastUse * 3, 0);
        
        // Calcular puntuación final
        const score = (
            winRateScore * winRateWeight +
            profitScore * profitWeight +
            opportunityScore * opportunityWeight +
            recentUsageScore * recentUsageWeight
        );
        
        return Math.round(score);
    }
    
    /**
     * Recomienda la mejor estrategia basada en el rendimiento
     * @returns {string} - Nombre de la estrategia recomendada
     */
    recommendBestStrategy() {
        let bestStrategy = this.activeStrategy;
        let bestScore = 0;
        
        for (const strategyName in this.strategyPerformance) {
            const score = this.strategyPerformance[strategyName].score;
            
            if (score > bestScore) {
                bestScore = score;
                bestStrategy = strategyName;
            }
        }
        
        return bestStrategy;
    }
    
    /**
     * Obtiene estadísticas de todas las estrategias
     * @returns {Object} - Estadísticas de estrategias
     */
    getStrategyStatistics() {
        const stats = {
            activeStrategy: this.activeStrategy,
            totalStrategies: Object.keys(this.strategyInstances).length,
            performance: { ...this.strategyPerformance },
            recommendations: {
                bestStrategy: this.recommendBestStrategy(),
                worstStrategy: this.getWorstStrategy()
            },
            recentChanges: this.strategyHistory.slice(-10)
        };
        
        return stats;
    }
    
    /**
     * Obtiene la estrategia con peor rendimiento
     * @returns {string} - Nombre de la estrategia con peor rendimiento
     */
    getWorstStrategy() {
        let worstStrategy = this.activeStrategy;
        let worstScore = 100;
        
        for (const strategyName in this.strategyPerformance) {
            const score = this.strategyPerformance[strategyName].score;
            
            if (score < worstScore) {
                worstScore = score;
                worstStrategy = strategyName;
            }
        }
        
        return worstStrategy;
    }
    
    /**
     * Habilita o deshabilita una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {boolean} enabled - Estado de habilitación
     */
    setStrategyEnabled(strategyName, enabled) {
        if (!this.strategies[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no existe`);
        }
        
        this.strategies[strategyName].enabled = enabled;
        
        if (enabled && !this.strategyInstances[strategyName]) {
            // Inicializar estrategia si se habilita
            this.strategyInstances[strategyName] = new Strategy(strategyName, this.strategies[strategyName]);
            this.initializePerformanceMetrics();
        } else if (!enabled && this.strategyInstances[strategyName]) {
            // Remover estrategia si se deshabilita
            delete this.strategyInstances[strategyName];
            
            // Si era la estrategia activa, cambiar a otra
            if (this.activeStrategy === strategyName) {
                const availableStrategies = Object.keys(this.strategyInstances);
                if (availableStrategies.length > 0) {
                    this.setActiveStrategy(availableStrategies[0]);
                }
            }
        }
        
        this.logger.info(`Estrategia ${strategyName} ${enabled ? 'habilitada' : 'deshabilitada'}`);
    }
    
    /**
     * Obtiene la configuración de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @returns {Object} - Configuración de la estrategia
     */
    getStrategyConfig(strategyName) {
        return this.strategies[strategyName] || null;
    }
    
    /**
     * Actualiza la configuración de una estrategia
     * @param {string} strategyName - Nombre de la estrategia
     * @param {Object} newConfig - Nueva configuración
     */
    updateStrategyConfig(strategyName, newConfig) {
        if (!this.strategies[strategyName]) {
            throw new Error(`Estrategia ${strategyName} no existe`);
        }
        
        this.strategies[strategyName] = { ...this.strategies[strategyName], ...newConfig };
        
        // Actualizar instancia si existe
        if (this.strategyInstances[strategyName]) {
            this.strategyInstances[strategyName].updateConfig(newConfig);
        }
        
        this.logger.info(`Configuración de estrategia ${strategyName} actualizada`);
    }
}

/**
 * Clase Strategy
 * Representa una estrategia individual
 */
class Strategy {
    constructor(name, config) {
        this.name = name;
        this.config = config;
        this.isActive = false;
        this.lastExecution = null;
    }
    
    /**
     * Actualiza la configuración de la estrategia
     * @param {Object} newConfig - Nueva configuración
     */
    updateConfig(newConfig) {
        this.config = { ...this.config, ...newConfig };
    }
    
    /**
     * Ejecuta la estrategia
     * @param {Object} marketData - Datos del mercado
     * @returns {Array} - Oportunidades encontradas
     */
    execute(marketData) {
        this.lastExecution = new Date();
        // Implementación específica de cada estrategia
        return [];
    }
}
module.exports = StrategyManager

-------------------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-frontend",
  "version": "1.0.0",
  "private": true,
  "description": "Frontend React para el bot de arbitraje CEX con IA",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-router-dom": "^6.23.0",
    "bootstrap": "^5.3.6",
    "bootstrap-icons": "^1.13.1",
    "react-scripts": "^5.0.1"
  },
  "keywords": [
    "arbitrage",
    "cryptocurrency",
    "trading",
    "bot",
    "ai",
    "machine-learning"
  ],
  "author": "Tu Nombre",
  "license": "MIT",
  "proxy": "http://localhost:8888",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

---------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-frontend",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cexs-arbitrage-frontend",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "bootstrap": "^5.3.6",
        "bootstrap-icons": "^1.13.1",
        "react": "^18.0.0",
        "react-dom": "^18.0.0",
        "react-router-dom": "^6.23.0",
        "react-scripts": "^5.0.1"
      }
    },
    "node_modules/@alloc/quick-lru": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
      "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.27.5.tgz",
      "integrity": "sha512-KiRAp/VoJaWkkte84TvUd9qjdbZAdiqyvMxrGl1N6vzFogKmaLgoM3L1kgtLicp2HP5fBJS8JrZKLVIZGVJAVg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.27.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.27.4.tgz",
      "integrity": "sha512-bXYxrXFubeYdvB0NhD/NBB3Qi6aZeV20GOWVI47t2dkecCEoneR4NPVcb7abpXDEvejgrUfFtG6vG/zxAKmg+g==",
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.4",
        "@babel/parser": "^7.27.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.27.4",
        "@babel/types": "^7.27.3",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/eslint-parser": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/eslint-parser/-/eslint-parser-7.27.5.tgz",
      "integrity": "sha512-HLkYQfRICudzcOtjGwkPvGc5nF1b4ljLZh1IRDj50lRZ718NAKVgQpIAUX8bfg6u/yuSKY3L7E0YzIV+OxrB8Q==",
      "license": "MIT",
      "dependencies": {
        "@nicolo-ribaudo/eslint-scope-5-internals": "5.1.1-v1",
        "eslint-visitor-keys": "^2.1.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || >=14.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.11.0",
        "eslint": "^7.5.0 || ^8.0.0 || ^9.0.0"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/eslint-visitor-keys": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-2.1.0.tgz",
      "integrity": "sha512-0rSmRBzXgDzIsD6mGdJgevzgezI534Cer5L/vyMX0kHzT/jiB43jRhd9YUlMGYLQy2zprNmoT8qasCGtY+QaKw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@babel/eslint-parser/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.27.5.tgz",
      "integrity": "sha512-ZGhA37l0e/g2s1Cnzdix0O3aLYm66eF8aufiVteOgnwxgnRP8GoyMj7VWsgWnQbVKXyge7hqrFh2K2TQM6t1Hw==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.5",
        "@babel/types": "^7.27.3",
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.27.3.tgz",
      "integrity": "sha512-fXSwMQqitTGeHLBC08Eq5yXz2m37E4pJX1qAU1+2cNedz/ifv/bVXft90VeSav5nFO61EcNgwr0aJxbyPaWBPg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.27.1.tgz",
      "integrity": "sha512-QwGAmuvM17btKU5VqXfb+Giw4JcN0hjuufz3DYnpeVDvZLAObloM77bhMXiqry3Iio+Ai4phVRDwl6WU10+r5A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/traverse": "^7.27.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-regexp-features-plugin/-/helper-create-regexp-features-plugin-7.27.1.tgz",
      "integrity": "sha512-uVDC72XVf8UbrH5qQTc18Agb8emwjTiZrQE11Nv3CuBEZmVvTwwE9CBUEvHku06gQCAyYf8Nv6ja1IN+6LMbxQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "regexpu-core": "^6.2.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-create-regexp-features-plugin/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-define-polyfill-provider": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.4.tgz",
      "integrity": "sha512-jljfR1rGnXXNWnmQg2K3+bvhkxB51Rl32QRaOTuwwjviGrHzIbSc8+x9CpraDtbT7mfyjXObULP4w/adunNwAw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.22.6",
        "@babel/helper-plugin-utils": "^7.22.5",
        "debug": "^4.1.1",
        "lodash.debounce": "^4.0.8",
        "resolve": "^1.14.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.27.1.tgz",
      "integrity": "sha512-E5chM8eWjTp/aNoVpcbfM7mLxu9XGLWYise2eBKGQomAk/Mb4XoxyqXTZbuTohbsl8EKqdlMhnDI2CCLfcs9wA==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.27.1.tgz",
      "integrity": "sha512-URMGH08NzYFhubNSGJrpUEphGKQwMQYBySzat5cAByY1/YgIRkULnIy3tAMeszlL/so2HbeilYloUmSpd7GdVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-remap-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-remap-async-to-generator/-/helper-remap-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-7fiA521aVw8lSPeI4ZOD3vRFkoqkJcS+z4hFo82bFSH/2tNd6eJ5qCVMS5OzDmZh/kaHQeBaeyxK6wljcPtveA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-wrap-function": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.27.1.tgz",
      "integrity": "sha512-7EHz6qDZc8RYS5ElPoShMheWvEgERonFCs7IAonWLLUTXW59DP14bCZt89/GKyreYn8g3S83m21FelHKbeDCKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-member-expression-to-functions": "^7.27.1",
        "@babel/helper-optimise-call-expression": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-skip-transparent-expression-wrappers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-skip-transparent-expression-wrappers/-/helper-skip-transparent-expression-wrappers-7.27.1.tgz",
      "integrity": "sha512-Tub4ZKEXqbPjXgWLl2+3JpQAYBJ8+ikpQ2Ocj/q/r0LwE3UhENh7EUabyHjz2kCEsrRY83ew2DQdHluuiDQFzg==",
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-wrap-function": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-wrap-function/-/helper-wrap-function-7.27.1.tgz",
      "integrity": "sha512-NFJK2sHUvrjo8wAU/nQTWU890/zB2jj0qBcCbZbbf+005cAsv6tMjXz31fBign6M5ov1o0Bllu+9nbqkfsjjJQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.1",
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.27.6.tgz",
      "integrity": "sha512-muE8Tt8M22638HU31A3CgfSUciwz1fhATfoVai05aPXGor//CdWDCbnlY1yvBPo07njuVOCNGCSp/GTt12lIug==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.27.5.tgz",
      "integrity": "sha512-OsQd175SxWkGlzbny8J3K8TnnDD0N3lrIUtB92xwyRpzaenGZhxDvxN/JgU00U3CDZNj9tPuDJ5H0WS4Nt3vKg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.27.3"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-firefox-class-in-computed-class-key": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-firefox-class-in-computed-class-key/-/plugin-bugfix-firefox-class-in-computed-class-key-7.27.1.tgz",
      "integrity": "sha512-QPG3C9cCVRQLxAVwmefEmwdTanECuUBMQZ/ym5kiw3XKCGA7qkuQLcjWWHcrD/GKbn/WmJwaezfuuAOcyKlRPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-class-field-initializer-scope": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-class-field-initializer-scope/-/plugin-bugfix-safari-class-field-initializer-scope-7.27.1.tgz",
      "integrity": "sha512-qNeq3bCKnGgLkEXUuFry6dPlGfCdQNZbn7yUAPCInwAJHMU7THJfrBSozkcWq5sNM6RcF3S8XyQL2A52KNR9IA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression/-/plugin-bugfix-safari-id-destructuring-collision-in-function-expression-7.27.1.tgz",
      "integrity": "sha512-g4L7OYun04N1WyqMNjldFwlfPCLVkgB54A/YCXICZYBsvJJE3kByKv9c9+R/nAfmIfjl2rKYLNyMHboYbZaWaA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining/-/plugin-bugfix-v8-spread-parameters-in-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-oO02gcONcD5O1iTLi/6frMJBIwWEHceWGSGqrpCmEL8nogiS6J9PBlE48CaK20/Jx1LuRml9aDftLgdjXT8+Cw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.13.0"
      }
    },
    "node_modules/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly/-/plugin-bugfix-v8-static-class-fields-redefine-readonly-7.27.1.tgz",
      "integrity": "sha512-6BpaYGDavZqkI6yT+KSPdpZFfpnd68UKXbcjI9pJ13pvHhPrCKWOOLp+ysvMeA+DxnhuPpgIaRpxRxo5A9t5jw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-class-properties": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-class-properties/-/plugin-proposal-class-properties-7.18.6.tgz",
      "integrity": "sha512-cumfXOF0+nzZrrN8Rf0t7M+tF6sZc7vhQwYQck9q1/5w2OExlD+b4v4RpMJFaV1Z7WcDRgO6FqvxqxGlwo+RHQ==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-class-properties instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-decorators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.27.1.tgz",
      "integrity": "sha512-DTxe4LBPrtFdsWzgpmbBKevg3e9PBy+dXRt19kSbucbZvL2uqtdqwwpluL1jfxYE0wIDTFp1nTy/q6gNLsxXrg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-decorators": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-nullish-coalescing-operator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-nullish-coalescing-operator/-/plugin-proposal-nullish-coalescing-operator-7.18.6.tgz",
      "integrity": "sha512-wQxQzxYeJqHcfppzBDnm1yAY0jSRkUXR2z8RePZYrKwMKgMlE8+Z6LUno+bd6LvbGh8Gltvy74+9pIYkr+XkKA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-nullish-coalescing-operator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-numeric-separator": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-numeric-separator/-/plugin-proposal-numeric-separator-7.18.6.tgz",
      "integrity": "sha512-ozlZFogPqoLm8WBr5Z8UckIoE4YQ5KESVcNudyXOR8uqIkliTEgJ3RoketfG6pmzLdeZF0H/wjE9/cCEitBl7Q==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-numeric-separator instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-optional-chaining": {
      "version": "7.21.0",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-optional-chaining/-/plugin-proposal-optional-chaining-7.21.0.tgz",
      "integrity": "sha512-p4zeefM72gpmEe2fkUr/OnOXpWEf8nAgk7ZYVqqfFiyIG7oFfVZcCrU64hWn5xp4tQ9LkV4bTIa5rD0KANpKNA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-optional-chaining instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.20.0",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-methods": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-methods/-/plugin-proposal-private-methods-7.18.6.tgz",
      "integrity": "sha512-nutsvktDItsNn4rpGItSNV2sz1XwS+nfU0Rg8aCx3W3NOKVzdMjJRu0O5OkgDp3ZGICSTbgRpxZoWsxoKRvbeA==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-private-methods instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.0-placeholder-for-preset-env.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.0-placeholder-for-preset-env.2.tgz",
      "integrity": "sha512-SOSkfJDddaM7mak6cPEpswyTRnuRltl429hMraQEglW+OkovnCzsiszTmsrlY//qLFjCpQDFRvjdm2wA5pPm9w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-decorators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.27.1.tgz",
      "integrity": "sha512-YMq8Z87Lhl8EGkmb0MwYkt36QnxC+fzCgrl66ereamPlYToRpIk5nUjKUY3QKLWq8mwUB1BgbeXcTJhZOCDg5A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-flow": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-flow/-/plugin-syntax-flow-7.27.1.tgz",
      "integrity": "sha512-p9OkPbZ5G7UT1MofwYFigGebnrzGJacoBSQM0/6bi/PUMVE+qlWDD/OalvQKbwgQzU6dl0xAv6r4X7Jme0RYxA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-assertions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-assertions/-/plugin-syntax-import-assertions-7.27.1.tgz",
      "integrity": "sha512-UT/Jrhw57xg4ILHLFnzFpPDlMbcdEicaAtjPQpbj9wa8T4r5KVWCimHcL/460g8Ht0DMxDyjsLgiWSkVjnwPFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-unicode-sets-regex": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-unicode-sets-regex/-/plugin-syntax-unicode-sets-regex-7.18.6.tgz",
      "integrity": "sha512-727YkEAPwSIQTv5im8QHz3upqp92JTWhidIC81Tdx4VJYIte/VndKf1qKrfnnhPLiPghStWfvC/iFaMCQu7Nqg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-arrow-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-arrow-functions/-/plugin-transform-arrow-functions-7.27.1.tgz",
      "integrity": "sha512-8Z4TGic6xW70FKThA5HYEKKyBpOOsucTOD1DjU3fZxDg+K3zBJcXMFnt/4yQiZnf5+MiOMSXQ9PaEK/Ilh1DeA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-generator-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.27.1.tgz",
      "integrity": "sha512-eST9RrwlpaoJBDHShc+DS2SG4ATTi2MYNb4OxYkf3n+7eb49LWpnS+HSpVfW4x927qQwgk8A2hGNVaajAEw0EA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-async-to-generator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-to-generator/-/plugin-transform-async-to-generator-7.27.1.tgz",
      "integrity": "sha512-NREkZsZVJS4xmTr8qzE5y8AfIPqsdQfRuUiLRTEzb7Qii8iFWCyDKaUV2c0rCuh4ljDZ98ALHP/PetiBV2nddA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-remap-async-to-generator": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoped-functions": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoped-functions/-/plugin-transform-block-scoped-functions-7.27.1.tgz",
      "integrity": "sha512-cnqkuOtZLapWYZUYM5rVIdv1nXYuFVIltZ6ZJ7nIj585QsjKM5dhL2Fu/lICXZ1OyIAFc7Qy+bvDAtTXqGrlhg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-block-scoping": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-block-scoping/-/plugin-transform-block-scoping-7.27.5.tgz",
      "integrity": "sha512-JF6uE2s67f0y2RZcm2kpAUEbD50vH62TyWVebxwHAlbSdM49VqPz8t4a1uIjp4NIOIZ4xzLfjY5emt/RCyC7TQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-properties/-/plugin-transform-class-properties-7.27.1.tgz",
      "integrity": "sha512-D0VcalChDMtuRvJIu3U/fwWjf8ZMykz5iZsg77Nuj821vCKI3zCyRLwRdWbsuJ/uRwZhZ002QtCqIkwC/ZkvbA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-class-static-block": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-class-static-block/-/plugin-transform-class-static-block-7.27.1.tgz",
      "integrity": "sha512-s734HmYU78MVzZ++joYM+NkJusItbdRcbm+AGRgJCt3iA+yux0QpD9cBVdz3tKyrjVYWRl7j0mHSmv4lhV0aoA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.12.0"
      }
    },
    "node_modules/@babel/plugin-transform-classes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-classes/-/plugin-transform-classes-7.27.1.tgz",
      "integrity": "sha512-7iLhfFAubmpeJe/Wo2TVuDrykh/zlWXLzPNdL0Jqn/Xu8R3QQ8h9ff8FQoISZOsw74/HFqFI7NX63HN7QFIHKA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1",
        "@babel/traverse": "^7.27.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-computed-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-computed-properties/-/plugin-transform-computed-properties-7.27.1.tgz",
      "integrity": "sha512-lj9PGWvMTVksbWiDT2tW68zGS/cyo4AkZ/QTp0sQT0mjPopCmrSkzxeXkznjqBxzDI6TclZhOJbBmbBLjuOZUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/template": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-destructuring": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-destructuring/-/plugin-transform-destructuring-7.27.3.tgz",
      "integrity": "sha512-s4Jrok82JpiaIprtY2nHsYmrThKvvwgHwjgd7UMiYhZaN0asdXNLr0y+NjTfkA7SyQE5i2Fb7eawUOZmLvyqOA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-dotall-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dotall-regex/-/plugin-transform-dotall-regex-7.27.1.tgz",
      "integrity": "sha512-gEbkDVGRvjj7+T1ivxrfgygpT7GUd4vmODtYpbs0gZATdkX8/iSnOtZSxiZnsgm1YjTgjI6VKBGSJJevkrclzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-keys": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-keys/-/plugin-transform-duplicate-keys-7.27.1.tgz",
      "integrity": "sha512-MTyJk98sHvSs+cvZ4nOauwTTG1JeonDjSGvGGUNHreGQns+Mpt6WX/dVzWBHgg+dYZhkC4X+zTDfkTU+Vy9y7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-duplicate-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-duplicate-named-capturing-groups-regex/-/plugin-transform-duplicate-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-hkGcueTEzuhB30B3eJCbCYeCaaEQOmQR0AdvzpD4LoN0GXMWzzGSuRrxR2xTnCrvNbVwK9N6/jQ92GSLfiZWoQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-dynamic-import": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-dynamic-import/-/plugin-transform-dynamic-import-7.27.1.tgz",
      "integrity": "sha512-MHzkWQcEmjzzVW9j2q8LGjwGWpG2mjwaaB0BNQwst3FIjqsg8Ct/mIZlvSPJvfi9y2AC8mi/ktxbFVL9pZ1I4A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-exponentiation-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-exponentiation-operator/-/plugin-transform-exponentiation-operator-7.27.1.tgz",
      "integrity": "sha512-uspvXnhHvGKf2r4VVtBpeFnuDWsJLQ6MF6lGJLC89jBR1uoVeqM416AZtTuhTezOfgHicpJQmoD5YUakO/YmXQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-export-namespace-from": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-export-namespace-from/-/plugin-transform-export-namespace-from-7.27.1.tgz",
      "integrity": "sha512-tQvHWSZ3/jH2xuq/vZDy0jNn+ZdXJeM8gHvX4lnJmsc3+50yPlWdZXIc5ay+umX+2/tJIqHqiEqcJvxlmIvRvQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-flow-strip-types": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-flow-strip-types/-/plugin-transform-flow-strip-types-7.27.1.tgz",
      "integrity": "sha512-G5eDKsu50udECw7DL2AcsysXiQyB7Nfg521t2OAJ4tbfTJ27doHLeF/vlI1NZGlLdbb/v+ibvtL1YBQqYOwJGg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-flow": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-for-of": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-for-of/-/plugin-transform-for-of-7.27.1.tgz",
      "integrity": "sha512-BfbWFFEJFQzLCQ5N8VocnCtA8J1CLkNTe2Ms2wocj75dd6VpiqS5Z5quTYcUoo4Yq+DN0rtikODccuv7RU81sw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-function-name": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-function-name/-/plugin-transform-function-name-7.27.1.tgz",
      "integrity": "sha512-1bQeydJF9Nr1eBCMMbC+hdwmRlsv5XYOMu03YSWFwNs0HsAmtSxxF1fyuYPqemVldVyFmlCU7w8UE14LupUSZQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-json-strings": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-json-strings/-/plugin-transform-json-strings-7.27.1.tgz",
      "integrity": "sha512-6WVLVJiTjqcQauBhn1LkICsR2H+zm62I3h9faTDKt1qP4jn2o72tSvqMwtGFKGTpojce0gJs+76eZ2uCHRZh0Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-literals/-/plugin-transform-literals-7.27.1.tgz",
      "integrity": "sha512-0HCFSepIpLTkLcsi86GG3mTUzxV5jpmbv97hTETW3yzrAij8aqlD36toB1D0daVFJM8NK6GvKO0gslVQmm+zZA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-logical-assignment-operators": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-logical-assignment-operators/-/plugin-transform-logical-assignment-operators-7.27.1.tgz",
      "integrity": "sha512-SJvDs5dXxiae4FbSL1aBJlG4wvl594N6YEVVn9e3JGulwioy6z3oPjx/sQBO3Y4NwUu5HNix6KJ3wBZoewcdbw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-member-expression-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-member-expression-literals/-/plugin-transform-member-expression-literals-7.27.1.tgz",
      "integrity": "sha512-hqoBX4dcZ1I33jCSWcXrP+1Ku7kdqXf1oeah7ooKOIiAdKQ+uqftgCFNOSzA5AMS2XIHEYeGFg4cKRCdpxzVOQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-amd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-amd/-/plugin-transform-modules-amd-7.27.1.tgz",
      "integrity": "sha512-iCsytMg/N9/oFq6n+gFTvUYDZQOMK5kEdeYxmxt91fcJGycfxVP9CnrxoliM0oumFERba2i8ZtwRUCMhvP1LnA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-commonjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-commonjs/-/plugin-transform-modules-commonjs-7.27.1.tgz",
      "integrity": "sha512-OJguuwlTYlN0gBZFRPqwOGNWssZjfIUdS7HMYtN8c1KmwpwHFBwTeFZrg9XZa+DFTitWOW5iTAG7tyCUPsCCyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-systemjs": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.27.1.tgz",
      "integrity": "sha512-w5N1XzsRbc0PQStASMksmUeqECuzKuTJer7kFagK8AXgpCMkeDMO5S+aaFb7A51ZYDF7XI34qsTX+fkHiIm5yA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-modules-umd": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-umd/-/plugin-transform-modules-umd-7.27.1.tgz",
      "integrity": "sha512-iQBE/xC5BV1OxJbp6WG7jq9IWiD+xxlZhLrdwpPkTX3ydmXdvoCpyfJN7acaIBZaOqTfr76pgzqBJflNbeRK+w==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-transforms": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-named-capturing-groups-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-named-capturing-groups-regex/-/plugin-transform-named-capturing-groups-regex-7.27.1.tgz",
      "integrity": "sha512-SstR5JYy8ddZvD6MhV0tM/j16Qds4mIpJTOd1Yu9J9pJjH93bxHECF7pgtc28XvkzTD6Pxcm/0Z73Hvk7kb3Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-new-target": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-new-target/-/plugin-transform-new-target-7.27.1.tgz",
      "integrity": "sha512-f6PiYeqXQ05lYq3TIfIDu/MtliKUbNwkGApPUvyo6+tc7uaR4cPjPe7DFPr15Uyycg2lZU6btZ575CuQoYh7MQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-nullish-coalescing-operator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-nullish-coalescing-operator/-/plugin-transform-nullish-coalescing-operator-7.27.1.tgz",
      "integrity": "sha512-aGZh6xMo6q9vq1JGcw58lZ1Z0+i0xB2x0XaauNIUXd6O1xXc3RwoWEBlsTQrY4KQ9Jf0s5rgD6SiNkaUdJegTA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-numeric-separator": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-numeric-separator/-/plugin-transform-numeric-separator-7.27.1.tgz",
      "integrity": "sha512-fdPKAcujuvEChxDBJ5c+0BTaS6revLV7CJL08e4m3de8qJfNIuCc2nc7XJYOjBoTMJeqSmwXJ0ypE14RCjLwaw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-rest-spread": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.27.3.tgz",
      "integrity": "sha512-7ZZtznF9g4l2JCImCo5LNKFHB5eXnN39lLtLY5Tg+VkR0jwOt7TBciMckuiQIOIW7L5tkQOCh3bVGYeXgMx52Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.27.3",
        "@babel/plugin-transform-parameters": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-object-super": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-super/-/plugin-transform-object-super-7.27.1.tgz",
      "integrity": "sha512-SFy8S9plRPbIcxlJ8A6mT/CxFdJx/c04JEctz4jf8YZaVS2px34j7NXRrlGlHkN/M2gnpL37ZpGRGVFLd3l8Ng==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-replace-supers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-catch-binding": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-catch-binding/-/plugin-transform-optional-catch-binding-7.27.1.tgz",
      "integrity": "sha512-txEAEKzYrHEX4xSZN4kJ+OfKXFVSWKB2ZxM9dpcE3wT7smwkNmXo5ORRlVzMVdJbD+Q8ILTgSD7959uj+3Dm3Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-optional-chaining": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-optional-chaining/-/plugin-transform-optional-chaining-7.27.1.tgz",
      "integrity": "sha512-BQmKPPIuc8EkZgNKsv0X4bPmOoayeu4F1YCwx2/CfmDSXDbp7GnzlUH+/ul5VGfRg1AoFPsrIThlEBj2xb4CAg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-parameters": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-parameters/-/plugin-transform-parameters-7.27.1.tgz",
      "integrity": "sha512-018KRk76HWKeZ5l4oTj2zPpSh+NbGdt0st5S6x0pga6HgrjBOJb24mMDHorFopOOd6YHkLgOZ+zaCjZGPO4aKg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-methods": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-methods/-/plugin-transform-private-methods-7.27.1.tgz",
      "integrity": "sha512-10FVt+X55AjRAYI9BrdISN9/AQWHqldOeZDUoLyif1Kn05a56xVBXb8ZouL8pZ9jem8QpXaOt8TS7RHUIS+GPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-private-property-in-object": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-private-property-in-object/-/plugin-transform-private-property-in-object-7.27.1.tgz",
      "integrity": "sha512-5J+IhqTi1XPa0DXF83jYOaARrX+41gOewWbkPyjMNRDqgOCqdffGh8L3f/Ek5utaEBZExjSAzcyjmV9SSAWObQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-property-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-property-literals/-/plugin-transform-property-literals-7.27.1.tgz",
      "integrity": "sha512-oThy3BCuCha8kDZ8ZkgOg2exvPYUlprMukKQXI1r1pJ47NCvxfkEy8vK+r/hT9nF0Aa4H1WUPZZjHTFtAhGfmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-constant-elements": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-constant-elements/-/plugin-transform-react-constant-elements-7.27.1.tgz",
      "integrity": "sha512-edoidOjl/ZxvYo4lSBOQGDSyToYVkTAwyVoa2tkuYTSmjrB1+uAedoL5iROVLXkxH+vRgA7uP4tMg2pUJpZ3Ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-display-name": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-display-name/-/plugin-transform-react-display-name-7.27.1.tgz",
      "integrity": "sha512-p9+Vl3yuHPmkirRrg021XiP+EETmPMQTLr6Ayjj85RLNEbb3Eya/4VI0vAdzQG9SEAl2Lnt7fy5lZyMzjYoZQQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx/-/plugin-transform-react-jsx-7.27.1.tgz",
      "integrity": "sha512-2KH4LWGSrJIkVf5tSiBFYuXDAoWRq2MMwgivCf+93dd0GQi8RXLjKA/0EvRnVV5G0hrHczsquXuD01L8s6dmBw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/plugin-syntax-jsx": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-development": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-development/-/plugin-transform-react-jsx-development-7.27.1.tgz",
      "integrity": "sha512-ykDdF5yI4f1WrAolLqeF3hmYU12j9ntLQl/AOG1HAS21jxyg1Q0/J/tpREuYLfatGdGmXp/3yS0ZA76kOlVq9Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-transform-react-jsx": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-pure-annotations": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-pure-annotations/-/plugin-transform-react-pure-annotations-7.27.1.tgz",
      "integrity": "sha512-JfuinvDOsD9FVMTHpzA/pBLisxpv1aSf+OIV8lgH3MuWrks19R27e6a6DipIg4aX1Zm9Wpb04p8wljfKrVSnPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regenerator": {
      "version": "7.27.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regenerator/-/plugin-transform-regenerator-7.27.5.tgz",
      "integrity": "sha512-uhB8yHerfe3MWnuLAhEbeQ4afVoqv8BQsPqrTv7e/jZ9y00kJL6l9a/f4OWaKxotmjzewfEyXE1vgDJenkQ2/Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-regexp-modifiers": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-regexp-modifiers/-/plugin-transform-regexp-modifiers-7.27.1.tgz",
      "integrity": "sha512-TtEciroaiODtXvLZv4rmfMhkCv8jx3wgKpL68PuiPh2M4fvz5jhsA7697N1gMvkvr/JTF13DrFYyEbY9U7cVPA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-reserved-words": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-reserved-words/-/plugin-transform-reserved-words-7.27.1.tgz",
      "integrity": "sha512-V2ABPHIJX4kC7HegLkYoDpfg9PVmuWy/i6vUM5eGK22bx4YVFD3M5F0QQnWQoDs6AGsUWTVOopBiMFQgHaSkVw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime": {
      "version": "7.27.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.27.4.tgz",
      "integrity": "sha512-D68nR5zxU64EUzV8i7T3R5XP0Xhrou/amNnddsRQssx6GrTLdZl1rLxyjtVZBd+v/NVX4AbTPOB5aU8thAZV1A==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "babel-plugin-polyfill-corejs2": "^0.4.10",
        "babel-plugin-polyfill-corejs3": "^0.11.0",
        "babel-plugin-polyfill-regenerator": "^0.6.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-runtime/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/plugin-transform-shorthand-properties": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-shorthand-properties/-/plugin-transform-shorthand-properties-7.27.1.tgz",
      "integrity": "sha512-N/wH1vcn4oYawbJ13Y/FxcQrWk63jhfNa7jef0ih7PHSIHX2LB7GWE1rkPrOnka9kwMxb6hMl19p7lidA+EHmQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-spread": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-spread/-/plugin-transform-spread-7.27.1.tgz",
      "integrity": "sha512-kpb3HUqaILBJcRFVhFUs6Trdd4mkrzcGXss+6/mxUd273PfbWqSDHRzMT2234gIg2QYfAjvXLSquP1xECSg09Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-sticky-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-sticky-regex/-/plugin-transform-sticky-regex-7.27.1.tgz",
      "integrity": "sha512-lhInBO5bi/Kowe2/aLdBAawijx+q1pQzicSgnkB6dUPc1+RC8QmJHKf2OjvU+NZWitguJHEaEmbV6VWEouT58g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-template-literals": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-template-literals/-/plugin-transform-template-literals-7.27.1.tgz",
      "integrity": "sha512-fBJKiV7F2DxZUkg5EtHKXQdbsbURW3DZKQUWphDum0uRP6eHGGa/He9mc0mypL680pb+e/lDIthRohlv8NCHkg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typeof-symbol": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typeof-symbol/-/plugin-transform-typeof-symbol-7.27.1.tgz",
      "integrity": "sha512-RiSILC+nRJM7FY5srIyc4/fGIwUhyDuuBSdWn4y6yT6gm652DpCHZjIipgn6B7MQ1ITOUnAKWixEUjQRIBIcLw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.27.1.tgz",
      "integrity": "sha512-Q5sT5+O4QUebHdbwKedFBEwRLb02zJ7r4A5Gg2hUoLuU3FjdMcyqcywqUrLCaDsFCxzokf7u9kuy7qz51YUuAg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.27.1",
        "@babel/helper-create-class-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-skip-transparent-expression-wrappers": "^7.27.1",
        "@babel/plugin-syntax-typescript": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-escapes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-escapes/-/plugin-transform-unicode-escapes-7.27.1.tgz",
      "integrity": "sha512-Ysg4v6AmF26k9vpfFuTZg8HRfVWzsh1kVfowA23y9j/Gu6dOuahdUVhkLqpObp3JIv27MLSii6noRnuKN8H0Mg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-property-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-property-regex/-/plugin-transform-unicode-property-regex-7.27.1.tgz",
      "integrity": "sha512-uW20S39PnaTImxp39O5qFlHLS9LJEmANjMG7SxIhap8rCHqu0Ik+tLEPX5DKmHn6CsWQ7j3lix2tFOa5YtL12Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-regex/-/plugin-transform-unicode-regex-7.27.1.tgz",
      "integrity": "sha512-xvINq24TRojDuyt6JGtHmkVkrfVV3FPT16uytxImLeBZqW3/H52yN+kM1MGuyPkIQxrzKwPHs5U/MP3qKyzkGw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-unicode-sets-regex": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-unicode-sets-regex/-/plugin-transform-unicode-sets-regex-7.27.1.tgz",
      "integrity": "sha512-EtkOujbc4cgvb0mlpQefi4NTPBzhSIevblFevACNLUspmrALgmEBdL/XfnyyITfd8fKBZrZys92zOWcik7j9Tw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-regexp-features-plugin": "^7.27.1",
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/preset-env": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.27.2.tgz",
      "integrity": "sha512-Ma4zSuYSlGNRlCLO+EAzLnCmJK2vdstgv+n7aUP+/IKZrOfWHOJVdSJtuub8RzHTj3ahD37k5OKJWvzf16TQyQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-bugfix-firefox-class-in-computed-class-key": "^7.27.1",
        "@babel/plugin-bugfix-safari-class-field-initializer-scope": "^7.27.1",
        "@babel/plugin-bugfix-safari-id-destructuring-collision-in-function-expression": "^7.27.1",
        "@babel/plugin-bugfix-v8-spread-parameters-in-optional-chaining": "^7.27.1",
        "@babel/plugin-bugfix-v8-static-class-fields-redefine-readonly": "^7.27.1",
        "@babel/plugin-proposal-private-property-in-object": "7.21.0-placeholder-for-preset-env.2",
        "@babel/plugin-syntax-import-assertions": "^7.27.1",
        "@babel/plugin-syntax-import-attributes": "^7.27.1",
        "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
        "@babel/plugin-transform-arrow-functions": "^7.27.1",
        "@babel/plugin-transform-async-generator-functions": "^7.27.1",
        "@babel/plugin-transform-async-to-generator": "^7.27.1",
        "@babel/plugin-transform-block-scoped-functions": "^7.27.1",
        "@babel/plugin-transform-block-scoping": "^7.27.1",
        "@babel/plugin-transform-class-properties": "^7.27.1",
        "@babel/plugin-transform-class-static-block": "^7.27.1",
        "@babel/plugin-transform-classes": "^7.27.1",
        "@babel/plugin-transform-computed-properties": "^7.27.1",
        "@babel/plugin-transform-destructuring": "^7.27.1",
        "@babel/plugin-transform-dotall-regex": "^7.27.1",
        "@babel/plugin-transform-duplicate-keys": "^7.27.1",
        "@babel/plugin-transform-duplicate-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-dynamic-import": "^7.27.1",
        "@babel/plugin-transform-exponentiation-operator": "^7.27.1",
        "@babel/plugin-transform-export-namespace-from": "^7.27.1",
        "@babel/plugin-transform-for-of": "^7.27.1",
        "@babel/plugin-transform-function-name": "^7.27.1",
        "@babel/plugin-transform-json-strings": "^7.27.1",
        "@babel/plugin-transform-literals": "^7.27.1",
        "@babel/plugin-transform-logical-assignment-operators": "^7.27.1",
        "@babel/plugin-transform-member-expression-literals": "^7.27.1",
        "@babel/plugin-transform-modules-amd": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-modules-systemjs": "^7.27.1",
        "@babel/plugin-transform-modules-umd": "^7.27.1",
        "@babel/plugin-transform-named-capturing-groups-regex": "^7.27.1",
        "@babel/plugin-transform-new-target": "^7.27.1",
        "@babel/plugin-transform-nullish-coalescing-operator": "^7.27.1",
        "@babel/plugin-transform-numeric-separator": "^7.27.1",
        "@babel/plugin-transform-object-rest-spread": "^7.27.2",
        "@babel/plugin-transform-object-super": "^7.27.1",
        "@babel/plugin-transform-optional-catch-binding": "^7.27.1",
        "@babel/plugin-transform-optional-chaining": "^7.27.1",
        "@babel/plugin-transform-parameters": "^7.27.1",
        "@babel/plugin-transform-private-methods": "^7.27.1",
        "@babel/plugin-transform-private-property-in-object": "^7.27.1",
        "@babel/plugin-transform-property-literals": "^7.27.1",
        "@babel/plugin-transform-regenerator": "^7.27.1",
        "@babel/plugin-transform-regexp-modifiers": "^7.27.1",
        "@babel/plugin-transform-reserved-words": "^7.27.1",
        "@babel/plugin-transform-shorthand-properties": "^7.27.1",
        "@babel/plugin-transform-spread": "^7.27.1",
        "@babel/plugin-transform-sticky-regex": "^7.27.1",
        "@babel/plugin-transform-template-literals": "^7.27.1",
        "@babel/plugin-transform-typeof-symbol": "^7.27.1",
        "@babel/plugin-transform-unicode-escapes": "^7.27.1",
        "@babel/plugin-transform-unicode-property-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-regex": "^7.27.1",
        "@babel/plugin-transform-unicode-sets-regex": "^7.27.1",
        "@babel/preset-modules": "0.1.6-no-external-plugins",
        "babel-plugin-polyfill-corejs2": "^0.4.10",
        "babel-plugin-polyfill-corejs3": "^0.11.0",
        "babel-plugin-polyfill-regenerator": "^0.6.1",
        "core-js-compat": "^3.40.0",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-env/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/preset-modules": {
      "version": "0.1.6-no-external-plugins",
      "resolved": "https://registry.npmjs.org/@babel/preset-modules/-/preset-modules-0.1.6-no-external-plugins.tgz",
      "integrity": "sha512-HrcgcIESLm9aIR842yhJ5RWan/gebQUJ6E/E5+rf0y9o6oj7w0Br+sWuL6kEQ/o/AdfvR1Je9jG18/gnpwjEyA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@babel/types": "^7.4.4",
        "esutils": "^2.0.2"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/@babel/preset-react": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/preset-react/-/preset-react-7.27.1.tgz",
      "integrity": "sha512-oJHWh2gLhU9dW9HHr42q0cI0/iHHXTLGe39qvpAZZzagHy0MzYLCnCVV0symeRvzmjHyVU7mw2K06E6u/JwbhA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-transform-react-display-name": "^7.27.1",
        "@babel/plugin-transform-react-jsx": "^7.27.1",
        "@babel/plugin-transform-react-jsx-development": "^7.27.1",
        "@babel/plugin-transform-react-pure-annotations": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/preset-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.27.1.tgz",
      "integrity": "sha512-l7WfQfX0WK4M0v2RudjuQK4u99BS6yLHYEmdtVPP7lKV013zr9DygFuWNlnbvQ9LR+LS0Egz/XAvGx5U9MX0fQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1",
        "@babel/helper-validator-option": "^7.27.1",
        "@babel/plugin-syntax-jsx": "^7.27.1",
        "@babel/plugin-transform-modules-commonjs": "^7.27.1",
        "@babel/plugin-transform-typescript": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.27.6.tgz",
      "integrity": "sha512-vbavdySgbTTrmFE+EsiqUTzlOr5bzlnJtUv9PynGCAKvfQqjIXbvFdumPM/GxMDfyuGMJaJAU6TO4zc1Jf1i8Q==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.27.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.27.4.tgz",
      "integrity": "sha512-oNcu2QbHqts9BtOWJosOVJapWjBDSxGCpFvikNR5TGDYDQf3JwpIoMzIKrvfoti93cLfPJEG4tH9SPVeyCGgdA==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.27.3",
        "@babel/parser": "^7.27.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.27.3",
        "debug": "^4.3.1",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.27.6",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.27.6.tgz",
      "integrity": "sha512-ETyHEk2VHHvl9b9jZP5IHPavHYk57EhanlRRuae9XCpb/j5bDCbPPMOBfCWhnl/7EDJz0jEMCi/RhccCE8r1+Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "license": "MIT"
    },
    "node_modules/@csstools/normalize.css": {
      "version": "12.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/normalize.css/-/normalize.css-12.1.1.tgz",
      "integrity": "sha512-YAYeJ+Xqh7fUou1d1j9XHl44BmsuThiTr4iNrgCQ3J27IbhXsxXDGZ1cXv8Qvs99d4rBbLiSKy3+WZiet32PcQ==",
      "license": "CC0-1.0"
    },
    "node_modules/@csstools/postcss-cascade-layers": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-cascade-layers/-/postcss-cascade-layers-1.1.1.tgz",
      "integrity": "sha512-+KdYrpKC5TgomQr2DlZF4lDEpHcoxnj5IGddYYfBWJAKfj1JtuHUIqMa+E1pJJ+z3kvDViWMqyqPlG4Ja7amQA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.2",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-color-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-color-function/-/postcss-color-function-1.1.1.tgz",
      "integrity": "sha512-Bc0f62WmHdtRDjf5f3e2STwRAl89N2CLb+9iAwzrv4L2hncrbDwnQD9PCq0gtAt7pOI2leIV08HIBUd4jxD8cw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-font-format-keywords": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-font-format-keywords/-/postcss-font-format-keywords-1.0.1.tgz",
      "integrity": "sha512-ZgrlzuUAjXIOc2JueK0X5sZDjCtgimVp/O5CEqTcs5ShWBa6smhWYbS0x5cVc/+rycTDbjjzoP0KTDnUneZGOg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-hwb-function": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-hwb-function/-/postcss-hwb-function-1.0.2.tgz",
      "integrity": "sha512-YHdEru4o3Rsbjmu6vHy4UKOXZD+Rn2zmkAmLRfPet6+Jz4Ojw8cbWxe1n42VaXQhD3CQUXXTooIy8OkVbUcL+w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-ic-unit": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-ic-unit/-/postcss-ic-unit-1.0.1.tgz",
      "integrity": "sha512-Ot1rcwRAaRHNKC9tAqoqNZhjdYBzKk1POgWfhN4uCOE47ebGcLRqXjKkApVDpjifL6u2/55ekkpnFcp+s/OZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-is-pseudo-class": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-is-pseudo-class/-/postcss-is-pseudo-class-2.0.7.tgz",
      "integrity": "sha512-7JPeVVZHd+jxYdULl87lvjgvWldYu+Bc62s9vD/ED6/QTGjy0jy0US/f6BG53sVMTBJ1lzKZFpYmofBN9eaRiA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-nested-calc": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-nested-calc/-/postcss-nested-calc-1.0.0.tgz",
      "integrity": "sha512-JCsQsw1wjYwv1bJmgjKSoZNvf7R6+wuHDAbi5f/7MbFhl2d/+v+TvBTU4BJH3G1X1H87dHl0mh6TfYogbT/dJQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-normalize-display-values": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-normalize-display-values/-/postcss-normalize-display-values-1.0.1.tgz",
      "integrity": "sha512-jcOanIbv55OFKQ3sYeFD/T0Ti7AMXc9nM1hZWu8m/2722gOTxFg7xYu4RDLJLeZmPUVQlGzo4jhzvTUq3x4ZUw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-oklab-function": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-oklab-function/-/postcss-oklab-function-1.1.1.tgz",
      "integrity": "sha512-nJpJgsdA3dA9y5pgyb/UfEzE7W5Ka7u0CX0/HIMVBNWzWemdcTH3XwANECU6anWv/ao4vVNLTMxhiPNZsTK6iA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-progressive-custom-properties": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-progressive-custom-properties/-/postcss-progressive-custom-properties-1.3.0.tgz",
      "integrity": "sha512-ASA9W1aIy5ygskZYuWams4BzafD12ULvSypmaLJT2jvQ8G0M3I8PRQhC0h7mG0Z3LI05+agZjqSR9+K9yaQQjA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/@csstools/postcss-stepped-value-functions": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-stepped-value-functions/-/postcss-stepped-value-functions-1.0.1.tgz",
      "integrity": "sha512-dz0LNoo3ijpTOQqEJLY8nyaapl6umbmDcgj4AD0lgVQ572b2eqA1iGZYTTWhrcrHztWDDRAX2DGYyw2VBjvCvQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-text-decoration-shorthand": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-text-decoration-shorthand/-/postcss-text-decoration-shorthand-1.0.0.tgz",
      "integrity": "sha512-c1XwKJ2eMIWrzQenN0XbcfzckOLLJiczqy+YvfGmzoVXd7pT9FfObiSEfzs84bpE/VqfpEuAZ9tCRbZkZxxbdw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-trigonometric-functions": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-trigonometric-functions/-/postcss-trigonometric-functions-1.0.2.tgz",
      "integrity": "sha512-woKaLO///4bb+zZC2s80l+7cm07M7268MsyG3M0ActXXEFi6SuhvriQYcb58iiKGbjwwIU7n45iRLEHypB47Og==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/postcss-unset-value": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@csstools/postcss-unset-value/-/postcss-unset-value-1.0.2.tgz",
      "integrity": "sha512-c8J4roPBILnelAsdLr4XOAR/GsTm0GJi4XpcfvoWk3U6KiTCqiFYc63KhRMQQX35jYMp4Ao8Ij9+IZRgMfJp1g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/@csstools/selector-specificity": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@csstools/selector-specificity/-/selector-specificity-2.2.0.tgz",
      "integrity": "sha512-+OJ9konv95ClSTOJCmMZqpd5+YGsB2S+x6w3E1oaM8UuR5j8nTNHYSz8c9BEPGDOCMQYIEEGlVPj/VY64iTbGw==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^14 || ^16 || >=18"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss-selector-parser": "^6.0.10"
      }
    },
    "node_modules/@eslint-community/eslint-utils": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.7.0.tgz",
      "integrity": "sha512-dyybb3AcajC7uha6CvhdVRJqaKyn7w2YKqKyAN37NKYgZT36w+iRb0Dymmc5qEJ549c/S31cMMSFd75bteCpCw==",
      "license": "MIT",
      "dependencies": {
        "eslint-visitor-keys": "^3.4.3"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
      }
    },
    "node_modules/@eslint-community/regexpp": {
      "version": "4.12.1",
      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
      "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
      }
    },
    "node_modules/@eslint/eslintrc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
      "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^6.12.4",
        "debug": "^4.3.2",
        "espree": "^9.6.0",
        "globals": "^13.19.0",
        "ignore": "^5.2.0",
        "import-fresh": "^3.2.1",
        "js-yaml": "^4.1.0",
        "minimatch": "^3.1.2",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/@eslint/eslintrc/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@eslint/eslintrc/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@eslint/js": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",
      "integrity": "sha512-d9zaMRSTIKDLhctzH12MtXvJKSSUhaHcjV+2Z+GK+EEY7XKpP5yR4x+N3TAcHTcu963nIr+TMcCb4DBCYX1z6Q==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/@humanwhocodes/config-array": {
      "version": "0.13.0",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.13.0.tgz",
      "integrity": "sha512-DZLEEqFWQFiyK6h5YIeynKx7JlvCYWL0cImfSRXZ9l4Sg2efkFGTuFf6vzXjK1cq6IYkU+Eg/JizXw+TD2vRNw==",
      "deprecated": "Use @eslint/config-array instead",
      "license": "Apache-2.0",
      "dependencies": {
        "@humanwhocodes/object-schema": "^2.0.3",
        "debug": "^4.3.1",
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=10.10.0"
      }
    },
    "node_modules/@humanwhocodes/module-importer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.22"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/nzakas"
      }
    },
    "node_modules/@humanwhocodes/object-schema": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-2.0.3.tgz",
      "integrity": "sha512-93zYdMES/c1D69yZiKDBj0V24vqNzB/koF26KPaagAfd3P/4gUlh3Dys5ogAK+Exi9QyzlD8x/08Zt7wIKcDcA==",
      "deprecated": "Use @eslint/object-schema instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-27.5.1.tgz",
      "integrity": "sha512-kZ/tNpS3NXn0mlXXXPNuDZnb4c0oZ20r4K5eemM2k30ZC3G0T02nXUvyhf5YdbXWHPEJLc9qGLxEZ216MdL+Zg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-27.5.1.tgz",
      "integrity": "sha512-AK6/UTrvQD0Cd24NSqmIA6rKsu0tKIxfiCducZvqxYdmMisOYAsdItspT+fQDQYARPf8XgjAFZi0ogW2agH5nQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/reporters": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^27.5.1",
        "jest-config": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-resolve-dependencies": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "jest-watcher": "^27.5.1",
        "micromatch": "^4.0.4",
        "rimraf": "^3.0.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-27.5.1.tgz",
      "integrity": "sha512-/WQjhPJe3/ghaol/4Bq480JKXV/Rfw8nQdN7f41fM8VDHLcxKXou6QyXAh3EFr9/bVG3x74z1NWDkP87EiY8gA==",
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-27.5.1.tgz",
      "integrity": "sha512-/aPowoolwa07k7/oM3aASneNeBGCmGQsc3ugN4u6s4C/+s5M64MFo/+djTdiwcbQlRfFElGuDXWzaWj6QgKObQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@sinonjs/fake-timers": "^8.0.1",
        "@types/node": "*",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-27.5.1.tgz",
      "integrity": "sha512-ZEJNB41OBQQgGzgyInAv0UUfDDj3upmHydjieSxFvTRuZElrx7tXg/uVQ5hYVEwiXs3+aMsAeEc9X7xiSKCm4Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/types": "^27.5.1",
        "expect": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-27.5.1.tgz",
      "integrity": "sha512-cPXh9hWIlVJMQkVk84aIvXuBB4uQQmFqZiacloFuGiP3ah1sbCxCosidXFDfqG8+6fO1oR2dTJTlsOy4VFmUfw==",
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.2",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^5.1.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-haste-map": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "slash": "^3.0.0",
        "source-map": "^0.6.0",
        "string-length": "^4.0.1",
        "terminal-link": "^2.0.0",
        "v8-to-istanbul": "^8.1.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/reporters/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/schemas": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-28.1.3.tgz",
      "integrity": "sha512-/l/VWsdt/aBXgjshLWOFyFt3IVdYypu5y2Wn2rOO1un6nkqIn8SLXzgIMYXFyYsRWDyF5EthmKJMIdJvk08grg==",
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.24.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-27.5.1.tgz",
      "integrity": "sha512-y9NIHUYF3PJRlHk98NdC/N1gl88BL08aQQgu4k4ZopQkCw9t9cV8mtl3TV8b/YCB8XaVTFrmUTAJvjsntDireg==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9",
        "source-map": "^0.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/source-map/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-27.5.1.tgz",
      "integrity": "sha512-EW35l2RYFUcUQxFJz5Cv5MTOxlJIQs4I7gxzi2zVU7PJhOwfYq1MdC5nhSmYjX1gmMmLPvB3sIaC+BkcHRBfag==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-27.5.1.tgz",
      "integrity": "sha512-LCheJF7WB2+9JuCS7VB/EmGIdQuhtqjRNI9A43idHv3E4KltCTsPsLxvdaubFHSYwY/fNjMWjl6vNRhDiN7vpQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-runtime": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-27.5.1.tgz",
      "integrity": "sha512-ipON6WtYgl/1329g5AIJVbUuEh0wZVbdpGwC99Jw4LwuoBNS95MVphU6zOeD9pDkon+LLbFL7lOQRapbB8SCHw==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.1.0",
        "@jest/types": "^27.5.1",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^1.4.0",
        "fast-json-stable-stringify": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "source-map": "^0.6.1",
        "write-file-atomic": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jest/transform/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/@jest/transform/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-27.5.1.tgz",
      "integrity": "sha512-Cx46iJ9QpwQTjIdq5VJu2QTMMs3QlEjI0x1QbBP5W1+nMzyc2XmimiRR/CbX9TO0cPTeUlxWMOu8mslYsJ8DEw==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^16.0.0",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz",
      "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@leichtgewicht/ip-codec": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@leichtgewicht/ip-codec/-/ip-codec-2.0.5.tgz",
      "integrity": "sha512-Vo+PSpZG2/fmgmiNzYK9qWRh8h/CHrwD0mo1h1DzL4yzHNSfWYujGTYsWGreD000gcgmZ7K4Ys6Tx9TxtsKdDw==",
      "license": "MIT"
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals": {
      "version": "5.1.1-v1",
      "resolved": "https://registry.npmjs.org/@nicolo-ribaudo/eslint-scope-5-internals/-/eslint-scope-5-internals-5.1.1-v1.tgz",
      "integrity": "sha512-54/JRvkLIzzDWshCWfuhadfrfZVPiElY8Fcgmg1HroEly/EDSszzhBAsarCux+D/kOslTRquNzuyGSmUSTTHGg==",
      "license": "MIT",
      "dependencies": {
        "eslint-scope": "5.1.1"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@nicolo-ribaudo/eslint-scope-5-internals/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@pmmmwh/react-refresh-webpack-plugin": {
      "version": "0.5.16",
      "resolved": "https://registry.npmjs.org/@pmmmwh/react-refresh-webpack-plugin/-/react-refresh-webpack-plugin-0.5.16.tgz",
      "integrity": "sha512-kLQc9xz6QIqd2oIYyXRUiAp79kGpFBm3fEM9ahfG1HI0WI5gdZ2OVHWdmZYnwODt7ISck+QuQ6sBPrtvUBML7Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-html": "^0.0.9",
        "core-js-pure": "^3.23.3",
        "error-stack-parser": "^2.0.6",
        "html-entities": "^2.1.0",
        "loader-utils": "^2.0.4",
        "schema-utils": "^4.2.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">= 10.13"
      },
      "peerDependencies": {
        "@types/webpack": "4.x || 5.x",
        "react-refresh": ">=0.10.0 <1.0.0",
        "sockjs-client": "^1.4.0",
        "type-fest": ">=0.17.0 <5.0.0",
        "webpack": ">=4.43.0 <6.0.0",
        "webpack-dev-server": "3.x || 4.x || 5.x",
        "webpack-hot-middleware": "2.x",
        "webpack-plugin-serve": "0.x || 1.x"
      },
      "peerDependenciesMeta": {
        "@types/webpack": {
          "optional": true
        },
        "sockjs-client": {
          "optional": true
        },
        "type-fest": {
          "optional": true
        },
        "webpack-dev-server": {
          "optional": true
        },
        "webpack-hot-middleware": {
          "optional": true
        },
        "webpack-plugin-serve": {
          "optional": true
        }
      }
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@remix-run/router": {
      "version": "1.23.0",
      "resolved": "https://registry.npmjs.org/@remix-run/router/-/router-1.23.0.tgz",
      "integrity": "sha512-O3rHJzAQKamUz1fvE0Qaw0xSFqsA/yafi2iqeE0pvdFtCO1viYx8QL6f3Ln/aCCTLxs68SLf0KPM9eSeM8yBnA==",
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "11.2.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-11.2.1.tgz",
      "integrity": "sha512-yc2n43jcqVyGE2sqV5/YCmocy9ArjVAP/BeXyTtADTBBX6V0e5UMqwO8CdQ0kzjb6zu5P1qMzsScCMRvE9OlVg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "builtin-modules": "^3.1.0",
        "deepmerge": "^4.2.2",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/plugin-replace": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-replace/-/plugin-replace-2.4.2.tgz",
      "integrity": "sha512-IGcu+cydlUMZ5En85jxHH4qj2hta/11BHq95iHEyb2sbgiN0eCdzvUcHw5gt9pBL5lTi4JDYJ1acCoMGpTvEZg==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "magic-string": "^0.25.7"
      },
      "peerDependencies": {
        "rollup": "^1.20.0 || ^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "license": "MIT"
    },
    "node_modules/@rtsao/scc": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@rtsao/scc/-/scc-1.1.0.tgz",
      "integrity": "sha512-zt6OdqaDoOnJ1ZYsCYGt9YmWzDXl4vQdKTyJev62gFhRGKdx7mcT54V9KIjg+d2wi9EXsPvAPKe7i7WjfVWB8g==",
      "license": "MIT"
    },
    "node_modules/@rushstack/eslint-patch": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/@rushstack/eslint-patch/-/eslint-patch-1.11.0.tgz",
      "integrity": "sha512-zxnHvoMQVqewTJr/W4pKjF0bMGiKJv1WX7bSrkl46Hg0QjESbzBROWK0Wg4RphzSOS5Jiy7eFimmM3UgMrMZbQ==",
      "license": "MIT"
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.24.51",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.24.51.tgz",
      "integrity": "sha512-1P1OROm/rdubP5aFDSZQILU0vrLCJ4fvHt6EoqHEM+2D/G5MK3bIaymUKLit8Js9gbns5UyJnkP/TZROLw4tUA==",
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "1.8.6",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-1.8.6.tgz",
      "integrity": "sha512-Ky+XkAkqPZSm3NLBeUng77EBQl3cmeJhITaGHdYH8kjVB+aun3S4XBRti2zt17mtt0mIUDiNxYeoJm6drVvBJQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-8.1.0.tgz",
      "integrity": "sha512-OAPJUAtgeINhh/TAlUID4QTs53Njm7xzddaVlEs/SXwgtiD1tW22zAB/W1wdqfrpmikgaWQ9Fw6Ws+hsiRm5Vg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^1.7.0"
      }
    },
    "node_modules/@surma/rollup-plugin-off-main-thread": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/@surma/rollup-plugin-off-main-thread/-/rollup-plugin-off-main-thread-2.2.3.tgz",
      "integrity": "sha512-lR8q/9W7hZpMWweNiAKU7NQerBnzQQLvi8qnTDU/fxItPhtZVMbPV3lbCwjhIlNBe9Bbr5V+KHshvWmVSG9cxQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "ejs": "^3.1.6",
        "json5": "^2.2.0",
        "magic-string": "^0.25.0",
        "string.prototype.matchall": "^4.0.6"
      }
    },
    "node_modules/@svgr/babel-plugin-add-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-add-jsx-attribute/-/babel-plugin-add-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-ZFf2gs/8/6B8PnSofI0inYXr2SDNTDScPXhN7k5EqD4aZ3gi6u+rbmZHVB8IM3wDyx8ntKACZbtXSm7oZGRqVg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-attribute": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-attribute/-/babel-plugin-remove-jsx-attribute-5.4.0.tgz",
      "integrity": "sha512-yaS4o2PgUtwLFGTKbsiAy6D0o3ugcUhWK0Z45umJ66EPWunAz9fuFw2gJuje6wqQvQWOTJvIahUwndOXb7QCPg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-remove-jsx-empty-expression": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-remove-jsx-empty-expression/-/babel-plugin-remove-jsx-empty-expression-5.0.1.tgz",
      "integrity": "sha512-LA72+88A11ND/yFIMzyuLRSMJ+tRKeYKeQ+mR3DcAZ5I4h5CPWN9AHyUzJbWSYp/u2u0xhmgOe0+E41+GjEueA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-replace-jsx-attribute-value": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-replace-jsx-attribute-value/-/babel-plugin-replace-jsx-attribute-value-5.0.1.tgz",
      "integrity": "sha512-PoiE6ZD2Eiy5mK+fjHqwGOS+IXX0wq/YDtNyIgOrc6ejFnxN4b13pRpiIPbtPwHEc+NT2KCjteAcq33/F1Y9KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-dynamic-title": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-dynamic-title/-/babel-plugin-svg-dynamic-title-5.4.0.tgz",
      "integrity": "sha512-zSOZH8PdZOpuG1ZVx/cLVePB2ibo3WPpqo7gFIjLV9a0QsuQAzJiwwqmuEdTaW2pegyBE17Uu15mOgOcgabQZg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-svg-em-dimensions": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-svg-em-dimensions/-/babel-plugin-svg-em-dimensions-5.4.0.tgz",
      "integrity": "sha512-cPzDbDA5oT/sPXDCUYoVXEmm3VIoAWAPT6mSPTJNbQaBNUuEKVKyGH93oDY4e42PYHRW67N5alJx/eEol20abw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-react-native-svg": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-react-native-svg/-/babel-plugin-transform-react-native-svg-5.4.0.tgz",
      "integrity": "sha512-3eYP/SaopZ41GHwXma7Rmxcv9uRslRDTY1estspeB1w1ueZWd/tPlMfEOoccYpEMZU3jD4OU7YitnXcF5hLW2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-plugin-transform-svg-component": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-plugin-transform-svg-component/-/babel-plugin-transform-svg-component-5.5.0.tgz",
      "integrity": "sha512-q4jSH1UUvbrsOtlo/tKcgSeiCHRSBdXoIoqX1pgcKK/aU3JD27wmMKwGtpB8qRYUYoyXvfGxUVKchLuR5pB3rQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/babel-preset": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/babel-preset/-/babel-preset-5.5.0.tgz",
      "integrity": "sha512-4FiXBjvQ+z2j7yASeGPEi8VD/5rrGQk4Xrq3EdJmoZgz/tpqChpo5hgXDvmEauwtvOc52q8ghhZK4Oy7qph4ig==",
      "license": "MIT",
      "dependencies": {
        "@svgr/babel-plugin-add-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-attribute": "^5.4.0",
        "@svgr/babel-plugin-remove-jsx-empty-expression": "^5.0.1",
        "@svgr/babel-plugin-replace-jsx-attribute-value": "^5.0.1",
        "@svgr/babel-plugin-svg-dynamic-title": "^5.4.0",
        "@svgr/babel-plugin-svg-em-dimensions": "^5.4.0",
        "@svgr/babel-plugin-transform-react-native-svg": "^5.4.0",
        "@svgr/babel-plugin-transform-svg-component": "^5.5.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/core": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/core/-/core-5.5.0.tgz",
      "integrity": "sha512-q52VOcsJPvV3jO1wkPtzTuKlvX7Y3xIcWRpCMtBF3MrteZJtBfQw/+u0B1BHy5ColpQc1/YVTrPEtSYIMNZlrQ==",
      "license": "MIT",
      "dependencies": {
        "@svgr/plugin-jsx": "^5.5.0",
        "camelcase": "^6.2.0",
        "cosmiconfig": "^7.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/hast-util-to-babel-ast": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/hast-util-to-babel-ast/-/hast-util-to-babel-ast-5.5.0.tgz",
      "integrity": "sha512-cAaR/CAiZRB8GP32N+1jocovUtvlj0+e65TB50/6Lcime+EA49m/8l+P2ko+XPJ4dw3xaPS3jOL4F2X4KWxoeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.12.6"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-jsx": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-jsx/-/plugin-jsx-5.5.0.tgz",
      "integrity": "sha512-V/wVh33j12hGh05IDg8GpIUXbjAPnTdPTKuP4VNLggnwaHMPNQNae2pRnyTAILWCQdz5GyMqtO488g7CKM8CBA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@svgr/babel-preset": "^5.5.0",
        "@svgr/hast-util-to-babel-ast": "^5.5.0",
        "svg-parser": "^2.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/plugin-svgo": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/plugin-svgo/-/plugin-svgo-5.5.0.tgz",
      "integrity": "sha512-r5swKk46GuQl4RrVejVwpeeJaydoxkdwkM1mBKOgJLBUJPGaLci6ylg/IjhrRsREKDkr4kbMWdgOtbXEh0fyLQ==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "deepmerge": "^4.2.2",
        "svgo": "^1.2.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@svgr/webpack": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/@svgr/webpack/-/webpack-5.5.0.tgz",
      "integrity": "sha512-DOBOK255wfQxguUta2INKkzPj6AIS6iafZYiYmHn6W3pHlycSRRlvWKCfLDG10fXfLWqE3DJHgRUOyJYmARa7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/plugin-transform-react-constant-elements": "^7.12.1",
        "@babel/preset-env": "^7.12.1",
        "@babel/preset-react": "^7.12.5",
        "@svgr/core": "^5.5.0",
        "@svgr/plugin-jsx": "^5.5.0",
        "@svgr/plugin-svgo": "^5.5.0",
        "loader-utils": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/gregberge"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-1.1.2.tgz",
      "integrity": "sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@trysound/sax": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@trysound/sax/-/sax-0.2.0.tgz",
      "integrity": "sha512-L7z9BgrNEcYyUYtF+HaEfiS5ebkh9jXqbszz7pC0hRBPaatV0XjSD3+eHrpqFemQfgwiFF0QPIarnIihIDn7OA==",
      "license": "ISC",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.6",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.6.tgz",
      "integrity": "sha512-HLFeCYgz89uk22N5Qg3dvGvsv46B8GLvKKo1zKG4NybA8U2DiEO3w9lqGg29t/tfLRJpJ6iQxnVw4OnB7MoM9g==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/bonjour": {
      "version": "3.5.13",
      "resolved": "https://registry.npmjs.org/@types/bonjour/-/bonjour-3.5.13.tgz",
      "integrity": "sha512-z9fJ5Im06zvUL548KvYNecEVlA7cVDkGUi6kZusb04mpyEFKCIZJvloCcmpmLaIahDpOQGHaHmG6imtPMmPXGQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect-history-api-fallback": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@types/connect-history-api-fallback/-/connect-history-api-fallback-1.5.4.tgz",
      "integrity": "sha512-n6Cr2xS1h4uAulPRdlw6Jl6s1oG8KrVilPN2yUITEs+K48EzMJJ3W1xy8K5eWuFvjp3R74AOIGSmp2UfBJ8HFw==",
      "license": "MIT",
      "dependencies": {
        "@types/express-serve-static-core": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/eslint": {
      "version": "8.56.12",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.56.12.tgz",
      "integrity": "sha512-03ruubjWyOHlmljCVoxSuNDdmfZDzsrrz0P2LeJsOXr+ZwFQ+0yQIwNCwt/GYhV7Z31fgtXJTAEs+FYlEL851g==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.7",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz",
      "integrity": "sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT"
    },
    "node_modules/@types/express": {
      "version": "4.17.23",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.23.tgz",
      "integrity": "sha512-Crp6WY9aTYP3qPi2wGDo9iUe/rceX01UMhnF1jmwDcKCFM6cx7YhGP/Mpr3y9AASpfHixIG0E6azCcL5OcDHsQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-5.0.6.tgz",
      "integrity": "sha512-3xhRnjJPkULekpSzgtoNYYcTWgEZkp4myc+Saevii5JPnHNvHMRlBSHDbs7Bh1iPPoVTERHEZXyhyLbMEsExsA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/express/node_modules/@types/express-serve-static-core": {
      "version": "4.19.6",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.19.6.tgz",
      "integrity": "sha512-N4LZ2xG7DatVqhCZzOGb1Yi5lMbXSZcmdLDe9EzSndPV2HpWYWzRbaerl2n27irrm94EPpprqa8KpskPT085+A==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/@types/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-oh/6byDPnL1zeNXFrDXFLyZjkr1MsBG667IM792caf1L2UPOOMf65NFzjUH/ltyfwjAGfs1rsX1eftK0jC/KIg==",
      "license": "MIT"
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.5.tgz",
      "integrity": "sha512-r8Tayk8HJnX0FztbZN7oVqGccWgw98T/0neJphO91KkmOzug1KkofZURD4UaD5uH8AqcFLfdPErnBod0u71/qg==",
      "license": "MIT"
    },
    "node_modules/@types/http-proxy": {
      "version": "1.17.16",
      "resolved": "https://registry.npmjs.org/@types/http-proxy/-/http-proxy-1.17.16.tgz",
      "integrity": "sha512-sdWoUajOB1cd0A8cRRQ1cfyWNbmFKLAqBB89Y8x5iYyG/mkJHc0YUH8pdWBy2omi9qtCpiIgGjuwO0dQST2l5w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/json5": {
      "version": "0.0.29",
      "resolved": "https://registry.npmjs.org/@types/json5/-/json5-0.0.29.tgz",
      "integrity": "sha512-dRLjCWHYg4oaA77cxO64oO+7JwCwnIzkZPdrrC71jQmQtlhM556pwKo5bUzqvZndkVbeFLIIi+9TC40JNF5hNQ==",
      "license": "MIT"
    },
    "node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/node": {
      "version": "24.0.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.1.tgz",
      "integrity": "sha512-MX4Zioh39chHlDJbKmEgydJDS3tspMP/lnQC67G3SWsTnb9NeYVWOjkxpOSy4oMfPs4StcWHwBrvUb4ybfnuaw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.8.0"
      }
    },
    "node_modules/@types/node-forge": {
      "version": "1.3.11",
      "resolved": "https://registry.npmjs.org/@types/node-forge/-/node-forge-1.3.11.tgz",
      "integrity": "sha512-FQx220y22OKNTqaByeBGqHWYz4cl94tpcxeFdvBo3wjG6XPBuZ0BNgNZRV5J5TFmmcsJ4IzsLkmGRiQbnYsBEQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/parse-json": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/parse-json/-/parse-json-4.0.2.tgz",
      "integrity": "sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==",
      "license": "MIT"
    },
    "node_modules/@types/prettier": {
      "version": "2.7.3",
      "resolved": "https://registry.npmjs.org/@types/prettier/-/prettier-2.7.3.tgz",
      "integrity": "sha512-+68kP9yzs4LMp7VNh8gdzMSPZFL44MLGqiHWvttYJe+6qnuVr4Ek9wSBQoveqY/r+LwjCcU29kNVkidwim+kYA==",
      "license": "MIT"
    },
    "node_modules/@types/q": {
      "version": "1.5.8",
      "resolved": "https://registry.npmjs.org/@types/q/-/q-1.5.8.tgz",
      "integrity": "sha512-hroOstUScF6zhIi+5+x0dzqrHA1EJi+Irri6b1fxolMTqqHIV/Cg77EtnQcZqZCu8hR3mX2BzIxN4/GzI68Kfw==",
      "license": "MIT"
    },
    "node_modules/@types/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-eOunJqu0K1923aExK6y8p6fsihYEn/BYuQ4g0CxAAgFc4b/ZLN4CrsRZ55srTdqoiLzU2B2evC+apEIxprEzkQ==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==",
      "license": "MIT"
    },
    "node_modules/@types/semver": {
      "version": "7.7.0",
      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.7.0.tgz",
      "integrity": "sha512-k107IF4+Xr7UHjwDc7Cfd6PRQfbdkiRabXGRjo07b4WyPahFBZCZ1sE+BNxYIJPPg73UkfOsVOLwqVc/6ETrIA==",
      "license": "MIT"
    },
    "node_modules/@types/send": {
      "version": "0.17.5",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.5.tgz",
      "integrity": "sha512-z6F2D3cOStZvuk2SaP6YrwkNO65iTZcwA2ZkSABegdkAh/lf+Aa/YQndZVfmEXT5vgAp6zv06VQ3ejSVjAny4w==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/serve-index": {
      "version": "1.9.4",
      "resolved": "https://registry.npmjs.org/@types/serve-index/-/serve-index-1.9.4.tgz",
      "integrity": "sha512-qLpGZ/c2fhSs5gnYsQxtDEq3Oy8SXPClIXkW5ghvAvsNuVSA8k+gCONcUCS/UjLEYvYps+e8uBtfgXgvhwfNug==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "*"
      }
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.8",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.8.tgz",
      "integrity": "sha512-roei0UY3LhpOJvjbIP6ZZFngyLKl5dskOtDhxY5THRSpO+ZI+nzJ+m5yUMzGrp89YRa7lvknKkMYjqQFGwA7Sg==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/node": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/sockjs": {
      "version": "0.3.36",
      "resolved": "https://registry.npmjs.org/@types/sockjs/-/sockjs-0.3.36.tgz",
      "integrity": "sha512-MK9V6NzAS1+Ud7JV9lJLFqW85VbC9dq3LmwZCuBe4wBDgKC0Kj/jd8Xl+nSviU+Qc3+m7umHHyHg//2KSa0a0Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "license": "MIT"
    },
    "node_modules/@types/trusted-types": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/@types/trusted-types/-/trusted-types-2.0.7.tgz",
      "integrity": "sha512-ScaPdn1dQczgbl0QFTeTOmVHFULt394XJgOQNoyVhZ6r2vLnMLJfBPd53SB52T/3G36VI1/g2MZaX0cwDuXsfw==",
      "license": "MIT"
    },
    "node_modules/@types/ws": {
      "version": "8.18.1",
      "resolved": "https://registry.npmjs.org/@types/ws/-/ws-8.18.1.tgz",
      "integrity": "sha512-ThVF6DCVhA8kUGy+aazFQ4kXQ7E1Ty7A3ypFOe0IcJV8O/M511G99AW24irKrW56Wt44yG9+ij8FaqoBGkuBXg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/yargs": {
      "version": "16.0.9",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-16.0.9.tgz",
      "integrity": "sha512-tHhzvkFXZQeTECenFoRljLBYPZJ7jAVxqqtEI0qTLOmuultnFp4I9yKE17vTuhf7BkhCu7I4XuemPgikDVuYqA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "license": "MIT"
    },
    "node_modules/@typescript-eslint/eslint-plugin": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.62.0.tgz",
      "integrity": "sha512-TiZzBSJja/LbhNPvk6yc0JrX9XqhQ0hdh6M2svYfsHGejaKFIAGd9MQ+ERIMzLGlN/kZoYIgdxFV0PuljTKXag==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/regexpp": "^4.4.0",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/type-utils": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "natural-compare-lite": "^1.4.0",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "@typescript-eslint/parser": "^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/experimental-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-5.62.0.tgz",
      "integrity": "sha512-RTXpeB3eMkpoclG3ZHft6vG/Z30azNHuqY6wKPBHlVMZFuEvrtlEDe8gMqDb+SO+9hjC/pLekeSCryf9vMZlCw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/parser": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.62.0.tgz",
      "integrity": "sha512-VlJEV0fOQ7BExOsHYAGrgbEiZoi8D+Bl2+f6V2RrXerRSylnp+ZBHmPvaIa8cz0Ajx7WO7Z5RqfgYg7ED1nRhA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/scope-manager": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.62.0.tgz",
      "integrity": "sha512-VXuvVvZeQCQb5Zgf4HAxc04q5j+WrNAtNh9OwCsCgpKqESMTu3tF/jhZ3xG6T4NZwWl65Bg8KuS2uEvhSfLl0w==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/type-utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.62.0.tgz",
      "integrity": "sha512-xsSQreu+VnfbqQpW5vnCJdq1Z3Q0U31qiWmRhr98ONQmcp/yhiPJFPq8MXiJVLiksmOKSjIldZzkebzHuCGzew==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/typescript-estree": "5.62.0",
        "@typescript-eslint/utils": "5.62.0",
        "debug": "^4.3.4",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/types": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.62.0.tgz",
      "integrity": "sha512-87NVngcbVXUahrRTqIK27gD2t5Cu1yuCXxbLcFtCzZGlfyVWWh8mLHkoxzjsB6DDNnvdL+fW8MiwPEJyGJQDgQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@typescript-eslint/typescript-estree": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.62.0.tgz",
      "integrity": "sha512-CmcQ6uY7b9y694lKdRB8FEel7JbU/40iSAPomu++SjLMntB+2Leay2LO6i8VnJk58MtE9/nQSFIH6jpyRWyYzA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/visitor-keys": "5.62.0",
        "debug": "^4.3.4",
        "globby": "^11.1.0",
        "is-glob": "^4.0.3",
        "semver": "^7.3.7",
        "tsutils": "^3.21.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/@typescript-eslint/utils": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.62.0.tgz",
      "integrity": "sha512-n8oxjeb5aIbPFEtmQxQYOLI0i9n5ySBEY/ZEHHZqKQSFnxio1rv6dthascc9dLuwrL0RC5mPCxB7vnAVGAYWAQ==",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@types/json-schema": "^7.0.9",
        "@types/semver": "^7.3.12",
        "@typescript-eslint/scope-manager": "5.62.0",
        "@typescript-eslint/types": "5.62.0",
        "@typescript-eslint/typescript-estree": "5.62.0",
        "eslint-scope": "^5.1.1",
        "semver": "^7.3.7"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      },
      "peerDependencies": {
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/@typescript-eslint/utils/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@typescript-eslint/utils/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/@typescript-eslint/visitor-keys": {
      "version": "5.62.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.62.0.tgz",
      "integrity": "sha512-07ny+LHRzQXepkGg6w0mFY41fVUNBrL2Roj/++7V1txKugfjm/Ci/qSND03r2RhlJhJYMcTn9AhhSSqQp0Ysyw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/types": "5.62.0",
        "eslint-visitor-keys": "^3.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/typescript-eslint"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "license": "ISC"
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz",
      "integrity": "sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz",
      "integrity": "sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz",
      "integrity": "sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz",
      "integrity": "sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz",
      "integrity": "sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.13.2",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz",
      "integrity": "sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz",
      "integrity": "sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/wasm-gen": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz",
      "integrity": "sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==",
      "license": "MIT",
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz",
      "integrity": "sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz",
      "integrity": "sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==",
      "license": "MIT"
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz",
      "integrity": "sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/helper-wasm-section": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-opt": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1",
        "@webassemblyjs/wast-printer": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz",
      "integrity": "sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz",
      "integrity": "sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz",
      "integrity": "sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz",
      "integrity": "sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==",
      "license": "MIT",
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0"
    },
    "node_modules/abab": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
      "integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
      "deprecated": "Use your platform's native atob() and btoa() methods instead",
      "license": "BSD-3-Clause"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/accepts/node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-globals": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/acorn-globals/-/acorn-globals-6.0.0.tgz",
      "integrity": "sha512-ZQl7LOWaF5ePqqcX4hLuv/bLXYQNfNWw2c0/yX/TsPRKamzHcTGQnlCjHT3TsmkOUVEPS3crCxiPfdzE/Trlhg==",
      "license": "MIT",
      "dependencies": {
        "acorn": "^7.1.1",
        "acorn-walk": "^7.1.1"
      }
    },
    "node_modules/acorn-globals/node_modules/acorn": {
      "version": "7.4.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.4.1.tgz",
      "integrity": "sha512-nQyp0o1/mNdbTO1PO6kHkwSrmgZ0MT/jCCpNiwbUjGoRN4dlBhqJtoQuCnEOKzgTVwg0ZWiCoQy6SxMebQVh8A==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "license": "MIT",
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-7.2.0.tgz",
      "integrity": "sha512-OPdCF6GsMIP+Az+aWfAAOEt2/+iVDKE7oy6lJ098aoe59oAmK76qV6Gw60SbZ8jHuG2wH058GF4pLFbYamYrVA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/address": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/address/-/address-1.2.2.tgz",
      "integrity": "sha512-4B/qKCfeE/ODUaAUpSwfzazo5x29WD4r3vXiWsB7I2mSDAihwEqKO+g8GELZUQSSAo5e1XTYh3ZVfLyxBc12nA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/adjust-sourcemap-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz",
      "integrity": "sha512-OXwN5b9pCUXNQHJpwwD2qP40byEmSgzj8B4ydSN0uMNYWiFmJ6x6KwUllMmfk8Rwu/HJDFR7U8ubsWBoN0Xp0A==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "regex-parser": "^2.2.11"
      },
      "engines": {
        "node": ">=8.9"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/ajv-keywords": {
      "version": "3.5.2",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-3.5.2.tgz",
      "integrity": "sha512-5p6WTN0DdTGVQk6VjcEju19IgaHudalcfabD7yhDGeA6bcQnmL+CpveLJq/3hvfwd1aof6L386Ougkx6RfyMIQ==",
      "license": "MIT",
      "peerDependencies": {
        "ajv": "^6.9.1"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-html": {
      "version": "0.0.9",
      "resolved": "https://registry.npmjs.org/ansi-html/-/ansi-html-0.0.9.tgz",
      "integrity": "sha512-ozbS3LuenHVxNRh/wdnN16QapUHzauqSomAl1jwwJRRsGwFwtj644lIhxfWu0Fy0acCij2+AEgHvjscq3dlVXg==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-html-community": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ansi-html-community/-/ansi-html-community-0.0.8.tgz",
      "integrity": "sha512-1APHAyr3+PCamwNw3bXCPp4HFLONZt/yIH0sZp0/469KWNTEy+qN5jQ3GVX6DMZ1UXAi34yVwtTeaG/HpBuuzw==",
      "engines": [
        "node >= 0.8.0"
      ],
      "license": "Apache-2.0",
      "bin": {
        "ansi-html": "bin/ansi-html"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha512-7UvmKalWRt1wgjL1RrGxoSJW/0QZFIegpeGvZG9kjp8vrRu55XTHbwnqq2GpXm9uLbcuhxm3IqX9OB4MZR1b2A==",
      "license": "MIT"
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/arg": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/arg/-/arg-5.0.2.tgz",
      "integrity": "sha512-PYjyFOLKQ9y57JvQ6QLo8dAgNqswh8M1RMJYdQduT6xbWSgK36P/Z/v+p888pM69jMMfS8Xd8F6I1kQ/I9HUGg==",
      "license": "MIT"
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/aria-query": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.2.tgz",
      "integrity": "sha512-COROpnaoap1E2F000S62r6A60uHZnmlvomhfyT2DlTcrY1OrBKn2UhH7qn5wTC9zMvD0AY7csdPSNwKP+7WiQw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array-includes": {
      "version": "3.1.9",
      "resolved": "https://registry.npmjs.org/array-includes/-/array-includes-3.1.9.tgz",
      "integrity": "sha512-FmeCCAenzH0KH381SPT5FZmiA/TmpndpcaShhfgEN9eCVjnFBqq3l1xrI42y8+PPLI6hypzou4GXw00WHmPBLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.24.0",
        "es-object-atoms": "^1.1.1",
        "get-intrinsic": "^1.3.0",
        "is-string": "^1.1.1",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-union": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/array.prototype.findlast": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/array.prototype.findlast/-/array.prototype.findlast-1.2.5.tgz",
      "integrity": "sha512-CVvd6FHg1Z3POpBLxO6E6zr+rSKEQ9L6rZHAaY7lLfhKsWYUBBOuMs0e9o24oopj6H+geRCX0YJ+TJLBK2eHyQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.findlastindex": {
      "version": "1.2.6",
      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.6.tgz",
      "integrity": "sha512-F/TKATkzseUExPlfvmwQKGITM3DGTK+vkAsCZoDc5daVygbJBnjEUCbgkAvVFsgfXfX4YIqZ/27G3k3tdXrTxQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-shim-unscopables": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flat": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flat/-/array.prototype.flat-1.3.3.tgz",
      "integrity": "sha512-rwG/ja1neyLqCuGZ5YYrznA62D4mZXg0i1cIskIUKSiqF3Cje9/wXAls9B9s1Wa2fomMsIv8czB8jZcPmxCXFg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.flatmap": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/array.prototype.flatmap/-/array.prototype.flatmap-1.3.3.tgz",
      "integrity": "sha512-Y7Wt51eKJSyi80hFrJCePGGNo5ktJCslFuboqJsbf57CCPcm5zztluPlc4/aD8sWsKvlwatezpV4U1efk8kpjg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.reduce": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/array.prototype.reduce/-/array.prototype.reduce-1.0.8.tgz",
      "integrity": "sha512-DwuEqgXFBwbmZSRqt3BpQigWNUoqw9Ml2dTWdF3B2zQlQX4OeUE0zyuzX0fX0IbTvjdkZbcBTU3idgpO78qkTw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-array-method-boxes-properly": "^1.0.0",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "is-string": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array.prototype.tosorted": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/array.prototype.tosorted/-/array.prototype.tosorted-1.1.4.tgz",
      "integrity": "sha512-p6Fx8B7b7ZhL/gmUsAy0D15WhvDccw3mnGNbZpi3pmeJdxtWsj2jEaI4Y6oo3XiHfzuSgPwKc04MYt6KgvC/wA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3",
        "es-errors": "^1.3.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "license": "MIT"
    },
    "node_modules/ast-types-flow": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.8.tgz",
      "integrity": "sha512-OH/2E5Fg20h2aPrbe+QL8JZQFko0YZaF+j4mnQ7BGhfavO7OpSLa8a0y9sBwomHdSbkhTS8TQNayBfnW5DwbvQ==",
      "license": "MIT"
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/autoprefixer": {
      "version": "10.4.21",
      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.21.tgz",
      "integrity": "sha512-O+A6LWV5LDHSJD3LjHYoNi4VLsj/Whi7k6zG12xTYaU4cQ8oxQGckXNX8cRHK5yOZ/ppVHe0ZBXGzSV9jXdVbQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/autoprefixer"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.24.4",
        "caniuse-lite": "^1.0.30001702",
        "fraction.js": "^4.3.7",
        "normalize-range": "^0.1.2",
        "picocolors": "^1.1.1",
        "postcss-value-parser": "^4.2.0"
      },
      "bin": {
        "autoprefixer": "bin/autoprefixer"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/axe-core": {
      "version": "4.10.3",
      "resolved": "https://registry.npmjs.org/axe-core/-/axe-core-4.10.3.tgz",
      "integrity": "sha512-Xm7bpRXnDSX2YE2YFfBk2FnF0ep6tmG7xPh8iHee8MIcrgq762Nkce856dYtJYLkuIoYZvGfTs/PbZhideTcEg==",
      "license": "MPL-2.0",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/axobject-query": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/axobject-query/-/axobject-query-4.1.0.tgz",
      "integrity": "sha512-qIj0G9wZbMGNLjLmg1PT6v2mE9AH2zlnADJD/2tC6E00hgmhUOfEB6greHPAfLRSufHqROIUTkw6E+M3lH0PTQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/babel-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-27.5.1.tgz",
      "integrity": "sha512-cdQ5dXjGRd0IBRATiQ4mZGlGlRE8kJpjPOixdNRdT+m3UcNqmYWN6rK6nvtXYfY3D76cb8s/O1Ss8ea24PIwcg==",
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-loader": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/babel-loader/-/babel-loader-8.4.1.tgz",
      "integrity": "sha512-nXzRChX+Z1GoE6yWavBQg6jDslyFF3SDjl2paADuoQtQW10JqShJt62R6eJQ5m/pjJFDT8xgKIWSP85OY8eXeA==",
      "license": "MIT",
      "dependencies": {
        "find-cache-dir": "^3.3.1",
        "loader-utils": "^2.0.4",
        "make-dir": "^3.1.0",
        "schema-utils": "^2.6.5"
      },
      "engines": {
        "node": ">= 8.9"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "webpack": ">=2"
      }
    },
    "node_modules/babel-loader/node_modules/schema-utils": {
      "version": "2.7.1",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.1.tgz",
      "integrity": "sha512-SHiNtMOUGWBQJwzISiVYKu82GiV4QYGePp3odlY1tuKO7gPtphAT5R/py0fA6xtbgLL/RvtJZnU9b8s0F1q0Xg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.5",
        "ajv": "^6.12.4",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-27.5.1.tgz",
      "integrity": "sha512-50wCwD5EMNW4aRpOwtqzyZHIewTYNxLA4nhB+09d8BIssfNfzBRhkBIHiaPv1Si226TQSvp8gxAJm2iY2qs2hQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.0.0",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/babel-plugin-macros": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/babel-plugin-macros/-/babel-plugin-macros-3.1.0.tgz",
      "integrity": "sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==",
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5",
        "cosmiconfig": "^7.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">=10",
        "npm": ">=6"
      }
    },
    "node_modules/babel-plugin-named-asset-import": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/babel-plugin-named-asset-import/-/babel-plugin-named-asset-import-0.3.8.tgz",
      "integrity": "sha512-WXiAc++qo7XcJ1ZnTYGtLxmBCVbddAml3CEXgWaBzNzLNoxtQ8AiGEFDMOhot9XjTCQbvP5E77Fj9Gk924f00Q==",
      "license": "MIT",
      "peerDependencies": {
        "@babel/core": "^7.1.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2": {
      "version": "0.4.13",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.13.tgz",
      "integrity": "sha512-3sX/eOms8kd3q2KZ6DAhKPc0dgm525Gqq5NtWKZ7QYYZEv57OQ54KtblzJzH1lQF/eQxO8KjWGIK9IPUJNus5g==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.22.6",
        "@babel/helper-define-polyfill-provider": "^0.6.4",
        "semver": "^6.3.1"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs2/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-polyfill-corejs3": {
      "version": "0.11.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.11.1.tgz",
      "integrity": "sha512-yGCqvBT4rwMczo28xkH/noxJ6MZ4nJfkVYdoDaC/utLtWrXxv27HVrzAeSbqR8SxDsp46n0YF47EbHoixy6rXQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.3",
        "core-js-compat": "^3.40.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-polyfill-regenerator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-regenerator/-/babel-plugin-polyfill-regenerator-0.6.4.tgz",
      "integrity": "sha512-7gD3pRadPrbjhjLyxebmx/WrFYcuSjZ0XbdUujQMZ/fcE9oeewk2U/7PCvez84UeuK3oSjmPZ0Ch0dlupQvGzw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-define-polyfill-provider": "^0.6.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
      }
    },
    "node_modules/babel-plugin-transform-react-remove-prop-types": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/babel-plugin-transform-react-remove-prop-types/-/babel-plugin-transform-react-remove-prop-types-0.4.24.tgz",
      "integrity": "sha512-eqj0hVcJUR57/Ug2zE1Yswsw4LhuqqHhD+8v120T1cl3kjg76QwtyBrdIk4WVwK+lAhBJVYCd/v+4nc4y+8JsA==",
      "license": "MIT"
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-27.5.1.tgz",
      "integrity": "sha512-Nptf2FzlPCWYuJg41HBqXVT8ym6bXOevuCTbhxlUpjwtysGaIWFvDEjp4y+G7fl13FgOdjs7P/DmErqH7da0Ag==",
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^27.5.1",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-react-app": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-react-app/-/babel-preset-react-app-10.1.0.tgz",
      "integrity": "sha512-f9B1xMdnkCIqe+2dHrJsoQFRz7reChaAHE/65SdaykPklQqhme2WaC08oD3is77x9ff98/9EazAKFDZv5rFEQg==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/plugin-proposal-class-properties": "^7.16.0",
        "@babel/plugin-proposal-decorators": "^7.16.4",
        "@babel/plugin-proposal-nullish-coalescing-operator": "^7.16.0",
        "@babel/plugin-proposal-numeric-separator": "^7.16.0",
        "@babel/plugin-proposal-optional-chaining": "^7.16.0",
        "@babel/plugin-proposal-private-methods": "^7.16.0",
        "@babel/plugin-proposal-private-property-in-object": "^7.16.7",
        "@babel/plugin-transform-flow-strip-types": "^7.16.0",
        "@babel/plugin-transform-react-display-name": "^7.16.0",
        "@babel/plugin-transform-runtime": "^7.16.4",
        "@babel/preset-env": "^7.16.4",
        "@babel/preset-react": "^7.16.0",
        "@babel/preset-typescript": "^7.16.0",
        "@babel/runtime": "^7.16.3",
        "babel-plugin-macros": "^3.1.0",
        "babel-plugin-transform-react-remove-prop-types": "^0.4.24"
      }
    },
    "node_modules/babel-preset-react-app/node_modules/@babel/plugin-proposal-private-property-in-object": {
      "version": "7.21.11",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-private-property-in-object/-/plugin-proposal-private-property-in-object-7.21.11.tgz",
      "integrity": "sha512-0QZ8qP/3RLDVBwBFoWAwCtgcDZJVwA5LUJRZU8x2YFfKNuFq161wK3cuGrALu5yiPu+vzwTAg/sMWVNeWeNyaw==",
      "deprecated": "This proposal has been merged to the ECMAScript standard and thus this plugin is no longer maintained. Please use @babel/plugin-transform-private-property-in-object instead.",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-create-class-features-plugin": "^7.21.0",
        "@babel/helper-plugin-utils": "^7.20.2",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/batch": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/batch/-/batch-0.6.1.tgz",
      "integrity": "sha512-x+VAiMRL6UPkx+kudNvxTl6hB2XNNCG2r+7wixVfIYwu/2HKRXimwQyaumLjMveWvT2Hkd/cAJw+QBMfJ/EKVw==",
      "license": "MIT"
    },
    "node_modules/bfj": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/bfj/-/bfj-7.1.0.tgz",
      "integrity": "sha512-I6MMLkn+anzNdCUp9hMRyui1HaNEUCco50lxbvNS4+EyXg8lN3nJ48PjPWtbH8UVS9CuMoaKE9U2V3l29DaRQw==",
      "license": "MIT",
      "dependencies": {
        "bluebird": "^3.7.2",
        "check-types": "^11.2.3",
        "hoopy": "^0.1.4",
        "jsonpath": "^1.1.1",
        "tryer": "^1.0.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/body-parser/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/body-parser/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/body-parser/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/bonjour-service": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/bonjour-service/-/bonjour-service-1.3.0.tgz",
      "integrity": "sha512-3YuAUiSkWykd+2Azjgyxei8OWf8thdn8AITIog2M4UICzoqfjlqr64WIjEXZllf/W6vK1goqleSR6brGomxQqA==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "multicast-dns": "^7.2.5"
      }
    },
    "node_modules/boolbase": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
      "license": "ISC"
    },
    "node_modules/bootstrap": {
      "version": "5.3.6",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-5.3.6.tgz",
      "integrity": "sha512-jX0GAcRzvdwISuvArXn3m7KZscWWFAf1MKBcnzaN02qWMb3jpMoUX4/qgeiGzqyIb4ojulRzs89UCUmGcFSzTA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "@popperjs/core": "^2.11.8"
      }
    },
    "node_modules/bootstrap-icons": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/bootstrap-icons/-/bootstrap-icons-1.13.1.tgz",
      "integrity": "sha512-ijombt4v6bv5CLeXvRWKy7CuM3TRTuPEuGaGKvTV5cz65rQSY8RQ2JcHt6b90cBBAC7s8fsf2EkQDldzCoXUjw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browser-process-hrtime": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/browser-process-hrtime/-/browser-process-hrtime-1.0.0.tgz",
      "integrity": "sha512-9o5UecI3GhkpM6DrXr69PblIuWxPKk9Y0jHBRhdocZ2y7YECBFCsHm79Pr3OyR2AvjhDkabFJaDJMYRazHgsow==",
      "license": "BSD-2-Clause"
    },
    "node_modules/browserslist": {
      "version": "4.25.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.0.tgz",
      "integrity": "sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001718",
        "electron-to-chromium": "^1.5.160",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camel-case": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/camel-case/-/camel-case-4.1.2.tgz",
      "integrity": "sha512-gxGWBrTT1JuMx6R+o5PTXMmUnhnVzLQ9SNutD4YqKtI6ap897t3tKECYla6gCWEkplXnlNybEkZg9GEGxKFCgw==",
      "license": "MIT",
      "dependencies": {
        "pascal-case": "^3.1.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/camelcase-css": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/camelcase-css/-/camelcase-css-2.0.1.tgz",
      "integrity": "sha512-QOSvevhslijgYwRx6Rv7zKdMF8lbRmx+uQGx2+vDc+KI/eBnsy9kit5aj23AgGu3pa4t9AgwbnXWqS+iOY+2aA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/caniuse-api": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/caniuse-api/-/caniuse-api-3.0.0.tgz",
      "integrity": "sha512-bsTwuIg/BZZK/vreVTYYbSWoe2F+71P7K5QGEX+pT250DZbfU1MQ5prOKpPR+LL6uWKK3KMwMCAS74QB3Um1uw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.0.0",
        "caniuse-lite": "^1.0.0",
        "lodash.memoize": "^4.1.2",
        "lodash.uniq": "^4.5.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001723",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001723.tgz",
      "integrity": "sha512-1R/elMjtehrFejxwmexeXAtae5UO9iSyFn6G/I806CYC/BLyyBk1EPhrKBkWhy6wM6Xnm47dSJQec+tLJ39WHw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/case-sensitive-paths-webpack-plugin": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/case-sensitive-paths-webpack-plugin/-/case-sensitive-paths-webpack-plugin-2.4.0.tgz",
      "integrity": "sha512-roIFONhcxog0JSSWbvVAh3OocukmSgpqOH6YpMkCvav/ySIV3JKg4Dc8vYtQjYi/UxpNE36r/9v+VqTQqgkYmw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/check-types": {
      "version": "11.2.3",
      "resolved": "https://registry.npmjs.org/check-types/-/check-types-11.2.3.tgz",
      "integrity": "sha512-+67P1GkJRaxQD6PKK0Et9DhwQB+vGg3PM5+aavopCpZT1lj9jeqfvpgTLAWErNj8qApkkmXlu/Ug74kmhagkXg==",
      "license": "MIT"
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chokidar/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
      "license": "MIT"
    },
    "node_modules/clean-css": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-5.3.3.tgz",
      "integrity": "sha512-D5J+kHaVb/wKSFcyyV75uCn8fiY4sV38XJoe4CUyGQ+mOU/fMVYUdH1hJC+CJQ5uY3EnW27SbJYS4X8BiLrAFg==",
      "license": "MIT",
      "dependencies": {
        "source-map": "~0.6.0"
      },
      "engines": {
        "node": ">= 10.0"
      }
    },
    "node_modules/clean-css/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/coa": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/coa/-/coa-2.0.2.tgz",
      "integrity": "sha512-q5/jG+YQnSy4nRTV4F7lPepBJZ8qBNJJDBuJdoejDyLXgmL7IEo+Le2JDZudFTFt7mrCqIRaSjws4ygRCTCAXA==",
      "license": "MIT",
      "dependencies": {
        "@types/q": "^1.5.1",
        "chalk": "^2.4.1",
        "q": "^1.1.2"
      },
      "engines": {
        "node": ">= 4.0"
      }
    },
    "node_modules/coa/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/coa/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/coa/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/coa/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/coa/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "license": "MIT"
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/colord": {
      "version": "2.9.3",
      "resolved": "https://registry.npmjs.org/colord/-/colord-2.9.3.tgz",
      "integrity": "sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==",
      "license": "MIT"
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-8.3.0.tgz",
      "integrity": "sha512-OkTL9umf+He2DZkUq8f8J9of7yL6RJKI24dVITBmNfZBmri9zYZQrKkuXiKhyfPSu8tUhnVBB1iKXevvnlR4Ww==",
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/common-tags": {
      "version": "1.8.2",
      "resolved": "https://registry.npmjs.org/common-tags/-/common-tags-1.8.2.tgz",
      "integrity": "sha512-gk/Z852D2Wtb//0I+kRFNKKE9dIIVirjoqPoA1wJU+XePVXZfGeBpk45+A1rKO4Q43prqWBNY/MiIeRLbPWUaA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
      "license": "MIT"
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "license": "MIT",
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/compression": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/compression/-/compression-1.8.0.tgz",
      "integrity": "sha512-k6WLKfunuqCYD3t6AsuPGvQWaKwuLLh2/xHNcX4qE+vIfDNXpSqnrhwA7O53R7WVQUnt8dVAIW+YHr7xTgOgGA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "compressible": "~2.0.18",
        "debug": "2.6.9",
        "negotiator": "~0.6.4",
        "on-headers": "~1.0.2",
        "safe-buffer": "5.2.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/compression/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/compression/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT"
    },
    "node_modules/confusing-browser-globals": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/confusing-browser-globals/-/confusing-browser-globals-1.0.11.tgz",
      "integrity": "sha512-JsPKdmh8ZkmnHxDk55FZ1TqVLvEQTvoByJZRN9jzI0UjxK/QgAmsphz7PGtqgPieQZ/CQcHWXCR7ATDNhGe+YA==",
      "license": "MIT"
    },
    "node_modules/connect-history-api-fallback": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/connect-history-api-fallback/-/connect-history-api-fallback-2.0.0.tgz",
      "integrity": "sha512-U73+6lQFmfiNPrYbXqr6kZ1i1wiRqXnp2nhMsINseWXO8lDau0LGEffJ8kQi4EjLZympVgRdvqjAgiZ1tgzDDA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/core-js": {
      "version": "3.43.0",
      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.43.0.tgz",
      "integrity": "sha512-N6wEbTTZSYOY2rYAn85CuvWWkCK6QweMn7/4Nr3w+gDBeBhk/x4EJeY6FPo4QzDoJZxVTv8U7CMvgWk6pOHHqA==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-compat": {
      "version": "3.43.0",
      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.43.0.tgz",
      "integrity": "sha512-2GML2ZsCc5LR7hZYz4AXmjQw8zuy2T//2QntwdnpuYI7jteT6GVYJL7F6C2C57R7gSYrcqVW3lAALefdbhBLDA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.25.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-js-pure": {
      "version": "3.43.0",
      "resolved": "https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.43.0.tgz",
      "integrity": "sha512-i/AgxU2+A+BbJdMxh3v7/vxi2SbFqxiFmg6VsDwYB4jkucrd1BZNA9a9gphC0fYMG5IBSgQcbQnk865VCLe7xA==",
      "hasInstallScript": true,
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/core-js"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cosmiconfig": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-7.1.0.tgz",
      "integrity": "sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.2.1",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.10.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto-random-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/crypto-random-string/-/crypto-random-string-2.0.0.tgz",
      "integrity": "sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/css-blank-pseudo": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/css-blank-pseudo/-/css-blank-pseudo-3.0.3.tgz",
      "integrity": "sha512-VS90XWtsHGqoM0t4KpH053c4ehxZ2E6HtGI7x68YFV0pTo/QmkV/YFA+NnlvK8guxZVNWGQhVNJGC39Q8XF4OQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-blank-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-declaration-sorter": {
      "version": "6.4.1",
      "resolved": "https://registry.npmjs.org/css-declaration-sorter/-/css-declaration-sorter-6.4.1.tgz",
      "integrity": "sha512-rtdthzxKuyq6IzqX6jEcIzQF/YqccluefyCYheovBOLhFT/drQA9zj/UbRAa9J7C0o6EG6u3E6g+vKkay7/k3g==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >=14"
      },
      "peerDependencies": {
        "postcss": "^8.0.9"
      }
    },
    "node_modules/css-has-pseudo": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/css-has-pseudo/-/css-has-pseudo-3.0.4.tgz",
      "integrity": "sha512-Vse0xpR1K9MNlp2j5w1pgWIJtm1a8qS0JwS9goFYcImjlHEmywP9VUF05aGBXzGpDJF86QXk4L0ypBmwPhGArw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "bin": {
        "css-has-pseudo": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-loader": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.11.0.tgz",
      "integrity": "sha512-CTJ+AEQJjq5NzLga5pE39qdiSV56F8ywCIsqNIRF0r7BDgWsN25aazToqAFg7ZrtA/U016xudB3ffgweORxX7g==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.1.0",
        "postcss": "^8.4.33",
        "postcss-modules-extract-imports": "^3.1.0",
        "postcss-modules-local-by-default": "^4.0.5",
        "postcss-modules-scope": "^3.2.0",
        "postcss-modules-values": "^4.0.0",
        "postcss-value-parser": "^4.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/css-minimizer-webpack-plugin/-/css-minimizer-webpack-plugin-3.4.1.tgz",
      "integrity": "sha512-1u6D71zeIfgngN2XNRJefc/hY7Ybsxd74Jm4qngIXyUEk7fss3VUzuHxLAq/R8NAba4QU9OUSaMZlbpRc7bM4Q==",
      "license": "MIT",
      "dependencies": {
        "cssnano": "^5.0.6",
        "jest-worker": "^27.0.2",
        "postcss": "^8.3.5",
        "schema-utils": "^4.0.0",
        "serialize-javascript": "^6.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "@parcel/css": {
          "optional": true
        },
        "clean-css": {
          "optional": true
        },
        "csso": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        }
      }
    },
    "node_modules/css-minimizer-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-prefers-color-scheme": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/css-prefers-color-scheme/-/css-prefers-color-scheme-6.0.3.tgz",
      "integrity": "sha512-4BqMbZksRkJQx2zAjrokiGMd07RqOa2IxIrrN10lyBe9xhn9DEvjUK79J6jkeiv9D9hQFXKb6g1jwU62jziJZA==",
      "license": "CC0-1.0",
      "bin": {
        "css-prefers-color-scheme": "dist/cli.cjs"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/css-select": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-4.3.0.tgz",
      "integrity": "sha512-wPpOYtnsVontu2mODhA19JrqWxNsfdatRKd64kmpRbQgh1KtItko5sTnEpPdpSaJszTOhEMlF/RPz28qj4HqhQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.0.1",
        "domhandler": "^4.3.1",
        "domutils": "^2.8.0",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css-select-base-adapter": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/css-select-base-adapter/-/css-select-base-adapter-0.1.1.tgz",
      "integrity": "sha512-jQVeeRG70QI08vSTwf1jHxp74JoZsr2XSgETae8/xC8ovSnL2WF87GTLO86Sbwdt2lK4Umg4HnnwMO4YF3Ce7w==",
      "license": "MIT"
    },
    "node_modules/css-tree": {
      "version": "1.0.0-alpha.37",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.0.0-alpha.37.tgz",
      "integrity": "sha512-DMxWJg0rnz7UgxKT0Q1HU/L9BeJI0M6ksor0OgqOnF+aRCDWg/N2641HmVyU9KVIu0OVVWOb2IpC9A+BJRnejg==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.4",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/css-tree/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/css-what": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.1.0.tgz",
      "integrity": "sha512-HTUrgRJ7r4dsZKU6GjmpfRK1O76h97Z8MfS1G0FozR+oF2kG6Vfe8JE6zwrkbxigziPHinCJ+gCPjA9EaBDtRw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/cssdb": {
      "version": "7.11.2",
      "resolved": "https://registry.npmjs.org/cssdb/-/cssdb-7.11.2.tgz",
      "integrity": "sha512-lhQ32TFkc1X4eTefGfYPvgovRSzIMofHkigfH8nWtyRL4XJLsRhJFreRvEgKzept7x1rjBuy3J/MurXLaFxW/A==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        }
      ],
      "license": "CC0-1.0"
    },
    "node_modules/cssesc": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
      "license": "MIT",
      "bin": {
        "cssesc": "bin/cssesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/cssnano": {
      "version": "5.1.15",
      "resolved": "https://registry.npmjs.org/cssnano/-/cssnano-5.1.15.tgz",
      "integrity": "sha512-j+BKgDcLDQA+eDifLx0EO4XSA56b7uut3BQFH+wbSaSTuGLuiyTa/wbRYthUXX8LC9mLg+WWKe8h+qJuwTAbHw==",
      "license": "MIT",
      "dependencies": {
        "cssnano-preset-default": "^5.2.14",
        "lilconfig": "^2.0.3",
        "yaml": "^1.10.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/cssnano"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-preset-default": {
      "version": "5.2.14",
      "resolved": "https://registry.npmjs.org/cssnano-preset-default/-/cssnano-preset-default-5.2.14.tgz",
      "integrity": "sha512-t0SFesj/ZV2OTylqQVOrFgEh5uanxbO6ZAdeCrNsUQ6fVuXwYTxJPNAGvGTxHbD68ldIJNec7PyYZDBrfDQ+6A==",
      "license": "MIT",
      "dependencies": {
        "css-declaration-sorter": "^6.3.1",
        "cssnano-utils": "^3.1.0",
        "postcss-calc": "^8.2.3",
        "postcss-colormin": "^5.3.1",
        "postcss-convert-values": "^5.1.3",
        "postcss-discard-comments": "^5.1.2",
        "postcss-discard-duplicates": "^5.1.0",
        "postcss-discard-empty": "^5.1.1",
        "postcss-discard-overridden": "^5.1.0",
        "postcss-merge-longhand": "^5.1.7",
        "postcss-merge-rules": "^5.1.4",
        "postcss-minify-font-values": "^5.1.0",
        "postcss-minify-gradients": "^5.1.1",
        "postcss-minify-params": "^5.1.4",
        "postcss-minify-selectors": "^5.2.1",
        "postcss-normalize-charset": "^5.1.0",
        "postcss-normalize-display-values": "^5.1.0",
        "postcss-normalize-positions": "^5.1.1",
        "postcss-normalize-repeat-style": "^5.1.1",
        "postcss-normalize-string": "^5.1.0",
        "postcss-normalize-timing-functions": "^5.1.0",
        "postcss-normalize-unicode": "^5.1.1",
        "postcss-normalize-url": "^5.1.0",
        "postcss-normalize-whitespace": "^5.1.1",
        "postcss-ordered-values": "^5.1.3",
        "postcss-reduce-initial": "^5.1.2",
        "postcss-reduce-transforms": "^5.1.0",
        "postcss-svgo": "^5.1.0",
        "postcss-unique-selectors": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/cssnano-utils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cssnano-utils/-/cssnano-utils-3.1.0.tgz",
      "integrity": "sha512-JQNR19/YZhz4psLX/rQ9M83e3z2Wf/HdJbryzte4a3NSuafyp9w/I4U+hx5C2S9g41qlstH7DEWnZaaj83OuEA==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/csso": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/csso/-/csso-4.2.0.tgz",
      "integrity": "sha512-wvlcdIbf6pwKEk7vHj8/Bkc0B4ylXZruLvOgs9doS5eOsOpuodOV2zJChSpkp+pRpYQLQMeF04nr3Z68Sta9jA==",
      "license": "MIT",
      "dependencies": {
        "css-tree": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/csso/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/csso/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cssom": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.4.4.tgz",
      "integrity": "sha512-p3pvU7r1MyyqbTk+WbNJIgJjG2VmTIaB10rI93LzVPrmDJKkzKYMtxxyAvQXR/NS6otuzveI7+7BBq3SjBS2mw==",
      "license": "MIT"
    },
    "node_modules/cssstyle": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-2.3.0.tgz",
      "integrity": "sha512-AZL67abkUzIuvcHqk7c09cezpGNcxUxU4Ioi/05xHk4DQeTkWmGYftIE6ctU6AEt+Gn4n1lDStOtj7FKycP71A==",
      "license": "MIT",
      "dependencies": {
        "cssom": "~0.3.6"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cssstyle/node_modules/cssom": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/cssom/-/cssom-0.3.8.tgz",
      "integrity": "sha512-b0tGHbfegbhPJpxpiBPU2sCkigAqtM9O121le6bbOlgyV+NyGyCmVfJ6QW9eRjz8CpNfWEOYBIMIGRYkLwsIYg==",
      "license": "MIT"
    },
    "node_modules/damerau-levenshtein": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/damerau-levenshtein/-/damerau-levenshtein-1.0.8.tgz",
      "integrity": "sha512-sdQSFB7+llfUcQHUQO3+B8ERRj0Oa4w9POWMI/puGtuf7gFywGmkaLCElnudfTiKZV+NvHqL0ifzdrI8Ro7ESA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/data-urls": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-2.0.0.tgz",
      "integrity": "sha512-X5eWTSXO/BJmpdIKCRuKUgSCgAN0OwliVK3yPKbwIWU1Tdw5BRajxlzMidvh+gwko9AfQ9zIj52pzF91Q3YAvQ==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.3",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.5.0",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.5.0.tgz",
      "integrity": "sha512-8vDa8Qxvr/+d94hSh5P3IJwI5t8/c0KsMp+g8bNw9cY2icONa5aPfvKeieW1WlG0WQYwwhJ7mjui2xtiePQSXw==",
      "license": "MIT"
    },
    "node_modules/dedent": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-0.7.0.tgz",
      "integrity": "sha512-Q6fKUPqnAHAyhiUgFU7BUzLiv0kd8saH9al7tnu5Q/okj6dnupxyTgFIBjVzJATdfIAm9NAsvXNzjaKa+bxVyA==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "license": "MIT"
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/default-gateway": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/default-gateway/-/default-gateway-6.0.3.tgz",
      "integrity": "sha512-fwSOJsbbNzZ/CUFpqFBqYfYNLj1NbMPm8MMCIzHjC83iSJRBEGmDUxU+WP661BaBQImeC2yHwXtz+P/O9o+XEg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "execa": "^5.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-lazy-prop": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
      "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
      "license": "MIT"
    },
    "node_modules/detect-port-alt": {
      "version": "1.1.6",
      "resolved": "https://registry.npmjs.org/detect-port-alt/-/detect-port-alt-1.1.6.tgz",
      "integrity": "sha512-5tQykt+LqfJFBEYaDITx7S7cR7mJ/zQmLXZ2qt5w04ainYZw6tBf9dBunMjVeVOdYVRUzUOE4HkY5J7+uttb5Q==",
      "license": "MIT",
      "dependencies": {
        "address": "^1.0.1",
        "debug": "^2.6.0"
      },
      "bin": {
        "detect": "bin/detect-port",
        "detect-port": "bin/detect-port"
      },
      "engines": {
        "node": ">= 4.2.1"
      }
    },
    "node_modules/detect-port-alt/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/detect-port-alt/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/didyoumean": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/didyoumean/-/didyoumean-1.2.2.tgz",
      "integrity": "sha512-gxtyfqMg7GKyhQmb056K7M3xszy/myH8w+B4RT+QXBQsvAOdc3XymqDDPHx1BgPgsdAA5SIifona89YtRATDzw==",
      "license": "Apache-2.0"
    },
    "node_modules/diff-sequences": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-27.5.1.tgz",
      "integrity": "sha512-k1gCAXAsNgLwEL+Y8Wvl+M6oEFj5bgazfZULpS5CneoPPXRaCCW7dm+q21Ky2VEE5X+VeRDBVg1Pcvvsr4TtNQ==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dlv": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/dlv/-/dlv-1.1.3.tgz",
      "integrity": "sha512-+HlytyjlPKnIG8XuRG8WvmBP8xs8P71y+SKKS6ZXWoEgLuePxtDoUEiH7WkdePWrQ5JBpE6aoVqfZfJUQkjXwA==",
      "license": "MIT"
    },
    "node_modules/dns-packet": {
      "version": "5.6.1",
      "resolved": "https://registry.npmjs.org/dns-packet/-/dns-packet-5.6.1.tgz",
      "integrity": "sha512-l4gcSouhcgIKRvyy99RNVOgxXiicE+2jZoNmaNmZ6JXiGajBOJAesk1OBlJuM5k2c+eudGdLxDqXuPCKIj6kpw==",
      "license": "MIT",
      "dependencies": {
        "@leichtgewicht/ip-codec": "^2.0.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/dom-converter": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/dom-converter/-/dom-converter-0.2.0.tgz",
      "integrity": "sha512-gd3ypIPfOMr9h5jIKq8E3sHOTCjeirnl0WK5ZdS1AW0Odt0b1PaWaHdJ4Qk4klv+YB9aJBS7mESXjFoDQPu6DA==",
      "license": "MIT",
      "dependencies": {
        "utila": "~0.4"
      }
    },
    "node_modules/dom-serializer": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-1.4.1.tgz",
      "integrity": "sha512-VHwB3KfrcOOkelEG2ZOfxqLZdfkil8PtJi4P8N2MMXucZq2yLp75ClViUlOVwyoHEDjYU433Aq+5zWP61+RGag==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.2.0",
        "entities": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "BSD-2-Clause"
    },
    "node_modules/domexception": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/domexception/-/domexception-2.0.1.tgz",
      "integrity": "sha512-yxJ2mFy/sibVQlu5qHjOkf9J3K6zgmCxgJ94u2EdvDOV09H+32LtRswEcUsmUWN72pVLOEnTSRaIVVzVQgS0dg==",
      "deprecated": "Use your platform's native DOMException instead",
      "license": "MIT",
      "dependencies": {
        "webidl-conversions": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domexception/node_modules/webidl-conversions": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-5.0.0.tgz",
      "integrity": "sha512-VlZwKPCkYKxQgeSbH5EyngOmRp7Ww7I9rQLERETtf5ofd9pGeswWiOtogpEO850jziPRarreGxn5QIiTqpb2wA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/domhandler": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-4.3.1.tgz",
      "integrity": "sha512-GrwoxYN+uWlzO8uhUXRl0P+kHE4GtVPfYzVLcUxPL7KNdHKj66vvlhiweIHqYYXWlw+T8iLMp42Lm67ghw4WMQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "domelementtype": "^2.2.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-2.8.0.tgz",
      "integrity": "sha512-w96Cjofp72M5IIhpjgobBimYEfoPjx1Vx0BSX9P30WBdZW2WIKU0T1Bd0kz2eNZ9ikjKgHbEyKx8BB6H1L3h3A==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "^1.0.1",
        "domelementtype": "^2.2.0",
        "domhandler": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/dot-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/dot-case/-/dot-case-3.0.4.tgz",
      "integrity": "sha512-Kv5nKlh6yRrdrGvxeJ2e5y2eRUpkUosIW4A2AS38zwSz27zu7ufDwQPi5Jhs3XAlGNetl3bmnGhQsMtkKJnj3w==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/dotenv": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-10.0.0.tgz",
      "integrity": "sha512-rlBi9d8jpv9Sf1klPjNfFAuWDjKLwTIJJ/VxtoTwIR6hnZxcEOQCZg2oIL3MWBYw5GpUDKOEnND7LXTbIpQ03Q==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/dotenv-expand": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/dotenv-expand/-/dotenv-expand-5.1.0.tgz",
      "integrity": "sha512-YXQl1DSa4/PQyRfgrv6aoNjhasp/p4qs9FjJ4q4cQk+8m4r6k4ZSiEyytKG8f8W9gi8WsQtIObNmKd+tMzNTmA==",
      "license": "BSD-2-Clause"
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==",
      "license": "MIT"
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "license": "MIT"
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/ejs": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/ejs/-/ejs-3.1.10.tgz",
      "integrity": "sha512-UeJmFfOrAQS8OJWPZ4qtgHyWExa088/MtK5UEyoJGFH67cDEXkZSviOiKRCZ4Xij0zxI3JECgYs3oKx+AizQBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "jake": "^10.8.5"
      },
      "bin": {
        "ejs": "bin/cli.js"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.167",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.167.tgz",
      "integrity": "sha512-LxcRvnYO5ez2bMOFpbuuVuAI5QNeY1ncVytE/KXaL6ZNfzX1yPlAO0nSOyIHx2fVAuUprMqPs/TdVhUFZy7SIQ==",
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.8.1.tgz",
      "integrity": "sha512-uDfvUjVrfGJJhymx/kz6prltenw1u7WrCg1oa94zYY8xxVpLLUu045LAT0dhDZdXG58/EpPL/5kA180fQ/qudg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "license": "MIT"
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "5.18.1",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.1.tgz",
      "integrity": "sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/entities": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.2.0.tgz",
      "integrity": "sha512-p92if5Nz619I0w+akJrLZH0MX0Pb5DX39XOwQTtXSdQQOaYH03S1uIQp4mhOZtAXrxq4ViO67YTiLBo2638o9A==",
      "license": "BSD-2-Clause",
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-stack-parser": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/error-stack-parser/-/error-stack-parser-2.1.4.tgz",
      "integrity": "sha512-Sk5V6wVazPhq5MhpO+AUxJn5x7XSXGl1R93Vn7i+zS15KDVxQijejNCrz8340/2bgLBjR9GtEG8ZVKONDjcqGQ==",
      "license": "MIT",
      "dependencies": {
        "stackframe": "^1.3.4"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-array-method-boxes-properly": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz",
      "integrity": "sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==",
      "license": "MIT"
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-iterator-helpers": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/es-iterator-helpers/-/es-iterator-helpers-1.2.1.tgz",
      "integrity": "sha512-uDn+FE1yrDzyC0pCo961B2IHbdM8y/ACZsKD4dG6WqrjV53BADjwa7D+1aom2rsNVfLyDgU/eigvlJGJ08OQ4w==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-set-tostringtag": "^2.0.3",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.6",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "iterator.prototype": "^1.1.4",
        "safe-array-concat": "^1.1.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "license": "MIT"
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/escodegen": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
      "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=6.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/escodegen/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint": {
      "version": "8.57.1",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.1.tgz",
      "integrity": "sha512-ypowyDxpVSYpkXr9WPv2PAZCtNip1Mv5KTW0SCurXv/9iOpcrH9PaqUElksqEB6pChqHGDRCFTyrZlGhnLNGiA==",
      "deprecated": "This version is no longer supported. Please see https://eslint.org/version-support for other options.",
      "license": "MIT",
      "dependencies": {
        "@eslint-community/eslint-utils": "^4.2.0",
        "@eslint-community/regexpp": "^4.6.1",
        "@eslint/eslintrc": "^2.1.4",
        "@eslint/js": "8.57.1",
        "@humanwhocodes/config-array": "^0.13.0",
        "@humanwhocodes/module-importer": "^1.0.1",
        "@nodelib/fs.walk": "^1.2.8",
        "@ungap/structured-clone": "^1.2.0",
        "ajv": "^6.12.4",
        "chalk": "^4.0.0",
        "cross-spawn": "^7.0.2",
        "debug": "^4.3.2",
        "doctrine": "^3.0.0",
        "escape-string-regexp": "^4.0.0",
        "eslint-scope": "^7.2.2",
        "eslint-visitor-keys": "^3.4.3",
        "espree": "^9.6.1",
        "esquery": "^1.4.2",
        "esutils": "^2.0.2",
        "fast-deep-equal": "^3.1.3",
        "file-entry-cache": "^6.0.1",
        "find-up": "^5.0.0",
        "glob-parent": "^6.0.2",
        "globals": "^13.19.0",
        "graphemer": "^1.4.0",
        "ignore": "^5.2.0",
        "imurmurhash": "^0.1.4",
        "is-glob": "^4.0.0",
        "is-path-inside": "^3.0.3",
        "js-yaml": "^4.1.0",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.4.1",
        "lodash.merge": "^4.6.2",
        "minimatch": "^3.1.2",
        "natural-compare": "^1.4.0",
        "optionator": "^0.9.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "bin": {
        "eslint": "bin/eslint.js"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-config-react-app": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/eslint-config-react-app/-/eslint-config-react-app-7.0.1.tgz",
      "integrity": "sha512-K6rNzvkIeHaTd8m/QEh1Zko0KI7BACWkkneSs6s9cKZC/J27X3eZR6Upt1jkmZ/4FK+XUOPPxMEN7+lbUXfSlA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@babel/eslint-parser": "^7.16.3",
        "@rushstack/eslint-patch": "^1.1.0",
        "@typescript-eslint/eslint-plugin": "^5.5.0",
        "@typescript-eslint/parser": "^5.5.0",
        "babel-preset-react-app": "^10.0.1",
        "confusing-browser-globals": "^1.0.11",
        "eslint-plugin-flowtype": "^8.0.3",
        "eslint-plugin-import": "^2.25.3",
        "eslint-plugin-jest": "^25.3.0",
        "eslint-plugin-jsx-a11y": "^6.5.1",
        "eslint-plugin-react": "^7.27.1",
        "eslint-plugin-react-hooks": "^4.3.0",
        "eslint-plugin-testing-library": "^5.0.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "eslint": "^8.0.0"
      }
    },
    "node_modules/eslint-import-resolver-node": {
      "version": "0.3.9",
      "resolved": "https://registry.npmjs.org/eslint-import-resolver-node/-/eslint-import-resolver-node-0.3.9.tgz",
      "integrity": "sha512-WFj2isz22JahUv+B788TlO3N6zL3nNJGU8CcZbPZvVEkBPaJdCV4vy5wyghty5ROFbCRnm132v8BScu5/1BQ8g==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7",
        "is-core-module": "^2.13.0",
        "resolve": "^1.22.4"
      }
    },
    "node_modules/eslint-import-resolver-node/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-module-utils": {
      "version": "2.12.0",
      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.12.0.tgz",
      "integrity": "sha512-wALZ0HFoytlyh/1+4wuZ9FJCD/leWHQzzrxJ8+rebyReSLk7LApMyd3WJaLVoN+D5+WIdJyDK1c6JnE65V4Zyg==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.2.7"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-module-utils/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-flowtype": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/eslint-plugin-flowtype/-/eslint-plugin-flowtype-8.0.3.tgz",
      "integrity": "sha512-dX8l6qUL6O+fYPtpNRideCFSpmWOUVx5QcaGLVqe/vlDiBSe4vYljDWDETwnyFzpl7By/WVIu6rcrniCgH9BqQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "lodash": "^4.17.21",
        "string-natural-compare": "^3.0.1"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@babel/plugin-syntax-flow": "^7.14.5",
        "@babel/plugin-transform-react-jsx": "^7.14.9",
        "eslint": "^8.1.0"
      }
    },
    "node_modules/eslint-plugin-import": {
      "version": "2.31.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-import/-/eslint-plugin-import-2.31.0.tgz",
      "integrity": "sha512-ixmkI62Rbc2/w8Vfxyh1jQRTdRTF52VxwRVHl/ykPAmqG+Nb7/kNn+byLP0LxPgI7zWA16Jt82SybJInmMia3A==",
      "license": "MIT",
      "dependencies": {
        "@rtsao/scc": "^1.1.0",
        "array-includes": "^3.1.8",
        "array.prototype.findlastindex": "^1.2.5",
        "array.prototype.flat": "^1.3.2",
        "array.prototype.flatmap": "^1.3.2",
        "debug": "^3.2.7",
        "doctrine": "^2.1.0",
        "eslint-import-resolver-node": "^0.3.9",
        "eslint-module-utils": "^2.12.0",
        "hasown": "^2.0.2",
        "is-core-module": "^2.15.1",
        "is-glob": "^4.0.3",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "object.groupby": "^1.0.3",
        "object.values": "^1.2.0",
        "semver": "^6.3.1",
        "string.prototype.trimend": "^1.0.8",
        "tsconfig-paths": "^3.15.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-import/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-jest": {
      "version": "25.7.0",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jest/-/eslint-plugin-jest-25.7.0.tgz",
      "integrity": "sha512-PWLUEXeeF7C9QGKqvdSbzLOiLTx+bno7/HC9eefePfEb257QFHg7ye3dh80AZVkaa/RQsBB1Q/ORQvg2X7F0NQ==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/experimental-utils": "^5.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      },
      "peerDependencies": {
        "@typescript-eslint/eslint-plugin": "^4.0.0 || ^5.0.0",
        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
      },
      "peerDependenciesMeta": {
        "@typescript-eslint/eslint-plugin": {
          "optional": true
        },
        "jest": {
          "optional": true
        }
      }
    },
    "node_modules/eslint-plugin-jsx-a11y": {
      "version": "6.10.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-jsx-a11y/-/eslint-plugin-jsx-a11y-6.10.2.tgz",
      "integrity": "sha512-scB3nz4WmG75pV8+3eRUQOHZlNSUhFNq37xnpgRkCCELU3XMvXAxLk1eqWWyE22Ki4Q01Fnsw9BA3cJHDPgn2Q==",
      "license": "MIT",
      "dependencies": {
        "aria-query": "^5.3.2",
        "array-includes": "^3.1.8",
        "array.prototype.flatmap": "^1.3.2",
        "ast-types-flow": "^0.0.8",
        "axe-core": "^4.10.0",
        "axobject-query": "^4.1.0",
        "damerau-levenshtein": "^1.0.8",
        "emoji-regex": "^9.2.2",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^3.3.5",
        "language-tags": "^1.0.9",
        "minimatch": "^3.1.2",
        "object.fromentries": "^2.0.8",
        "safe-regex-test": "^1.0.3",
        "string.prototype.includes": "^2.0.1"
      },
      "engines": {
        "node": ">=4.0"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9"
      }
    },
    "node_modules/eslint-plugin-react": {
      "version": "7.37.5",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react/-/eslint-plugin-react-7.37.5.tgz",
      "integrity": "sha512-Qteup0SqU15kdocexFNAJMvCJEfa2xUKNV4CC1xsVMrIIqEy3SQ/rqyxCWNzfrd3/ldy6HMlD2e0JDVpDg2qIA==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.8",
        "array.prototype.findlast": "^1.2.5",
        "array.prototype.flatmap": "^1.3.3",
        "array.prototype.tosorted": "^1.1.4",
        "doctrine": "^2.1.0",
        "es-iterator-helpers": "^1.2.1",
        "estraverse": "^5.3.0",
        "hasown": "^2.0.2",
        "jsx-ast-utils": "^2.4.1 || ^3.0.0",
        "minimatch": "^3.1.2",
        "object.entries": "^1.1.9",
        "object.fromentries": "^2.0.8",
        "object.values": "^1.2.1",
        "prop-types": "^15.8.1",
        "resolve": "^2.0.0-next.5",
        "semver": "^6.3.1",
        "string.prototype.matchall": "^4.0.12",
        "string.prototype.repeat": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      },
      "peerDependencies": {
        "eslint": "^3 || ^4 || ^5 || ^6 || ^7 || ^8 || ^9.7"
      }
    },
    "node_modules/eslint-plugin-react-hooks": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/eslint-plugin-react-hooks/-/eslint-plugin-react-hooks-4.6.2.tgz",
      "integrity": "sha512-QzliNJq4GinDBcD8gPB5v0wh6g8q3SUi6EFF0x8N/BL9PoVs0atuGc47ozMRyOWAKdwaZ5OnbOEa3WR+dSGKuQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "eslint": "^3.0.0 || ^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0-0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/doctrine": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-2.1.0.tgz",
      "integrity": "sha512-35mSku4ZXK0vfCuHEDAwt55dg2jNajHZ1odvF+8SSr82EsZY4QmXfuWso8oEd8zRhVObSN18aM0CjSdoBX7zIw==",
      "license": "Apache-2.0",
      "dependencies": {
        "esutils": "^2.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/resolve": {
      "version": "2.0.0-next.5",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-2.0.0-next.5.tgz",
      "integrity": "sha512-U7WjGVG9sH8tvjW5SmGbQuui75FiyjAX72HX15DwBBwF9dNiQZRQAg9nnPhYy+TUnE0+VcrttuvNI8oSxZcocA==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.13.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/eslint-plugin-react/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/eslint-plugin-testing-library": {
      "version": "5.11.1",
      "resolved": "https://registry.npmjs.org/eslint-plugin-testing-library/-/eslint-plugin-testing-library-5.11.1.tgz",
      "integrity": "sha512-5eX9e1Kc2PqVRed3taaLnAAqPZGEX75C+M/rXzUAI3wIg/ZxzUm1OVAwfe/O+vE+6YXOLetSe9g5GKD2ecXipw==",
      "license": "MIT",
      "dependencies": {
        "@typescript-eslint/utils": "^5.58.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0",
        "npm": ">=6"
      },
      "peerDependencies": {
        "eslint": "^7.5.0 || ^8.0.0"
      }
    },
    "node_modules/eslint-scope": {
      "version": "7.2.2",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "license": "Apache-2.0",
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/eslint-webpack-plugin": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/eslint-webpack-plugin/-/eslint-webpack-plugin-3.2.0.tgz",
      "integrity": "sha512-avrKcGncpPbPSUHX6B3stNGzkKFto3eL+DKM4+VyMrVnhPc3vRczVlCq3uhuFOdRvDHTVXuzwk1ZKUrqDQHQ9w==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint": "^7.29.0 || ^8.4.1",
        "jest-worker": "^28.0.2",
        "micromatch": "^4.0.5",
        "normalize-path": "^3.0.0",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "eslint": "^7.0.0 || ^8.0.0",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/jest-worker": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-28.1.3.tgz",
      "integrity": "sha512-CqRA220YV/6jCo8VWvAt1KKx6eek1VIHMPeLEbpcfSfkEeWyBNppynM/o6q+Wmw+sOhos2ml34wZbSX3G13//g==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/eslint-webpack-plugin/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/eslint/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/eslint/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/globals": {
      "version": "13.24.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
      "integrity": "sha512-AhO5QUcj8llrbG09iWhPU2B204J1xnPeL8kQmVorSsy+Sjj1sk8gIyh6cUocGmH4L0UuhAJy+hJMRA4mgA4mFQ==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.20.2"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/eslint/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint/node_modules/type-fest": {
      "version": "0.20.2",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/esquery": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.6.0.tgz",
      "integrity": "sha512-ca9pw9fomFcKPvFLXhBKUK90ZvGibiGOvRJNbjljY7s7uq/5YO4BOzcYtJqExdx99rF6aAcnRxHmcUHcz6sQsg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "estraverse": "^5.1.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expect": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/expect/-/expect-27.5.1.tgz",
      "integrity": "sha512-E1q5hSUG2AmYQwQJ041nvgpkODHQvB+RKlB4IYdru6uJsyFTRyZAP463M+1lINorwbqAmUggi6+WwkD8lCS/Dw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/express/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fast-glob/node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "license": "MIT"
    },
    "node_modules/fast-uri": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/file-entry-cache": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
      "license": "MIT",
      "dependencies": {
        "flat-cache": "^3.0.4"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/file-loader": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/file-loader/-/file-loader-6.2.0.tgz",
      "integrity": "sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==",
      "license": "MIT",
      "dependencies": {
        "loader-utils": "^2.0.0",
        "schema-utils": "^3.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/file-loader/node_modules/schema-utils": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.3.0.tgz",
      "integrity": "sha512-pN/yOAvcC+5rQ5nERGuwrjLlYvLTbCibnZ1I7B1LaiAz9BRBlE9GMgE/eqV30P7aJQUf7Ddimy/RsbYO/GrVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.8",
        "ajv": "^6.12.5",
        "ajv-keywords": "^3.5.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/filelist": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/filelist/-/filelist-1.0.4.tgz",
      "integrity": "sha512-w1cEuf3S+DrLCQL7ET6kz+gmlJdbq9J7yXCSjK/OZCPA+qEN1WyF4ZAf0YYJa4/shHJra2t/d/r8SV4Ji+x+8Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.0.1"
      }
    },
    "node_modules/filelist/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/filelist/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/filesize": {
      "version": "8.0.7",
      "resolved": "https://registry.npmjs.org/filesize/-/filesize-8.0.7.tgz",
      "integrity": "sha512-pjmC+bkIF8XI7fWaH8KxHcZL3DPybs1roSKP4rKDvy20tAWwIObE4+JIseG2byfGKhud5ZnM4YSGKBz7Sh0ndQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/finalhandler/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/finalhandler/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/find-cache-dir": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
      "license": "MIT",
      "dependencies": {
        "commondir": "^1.0.1",
        "make-dir": "^3.0.2",
        "pkg-dir": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat-cache": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.2.0.tgz",
      "integrity": "sha512-CYcENa+FtcUKLmhhqyctpclsq7QF38pKjZHsGNiSQF5r4FtoKDWabFDl3hzaEQMvT1LHEysw5twgLvpYYb4vbw==",
      "license": "MIT",
      "dependencies": {
        "flatted": "^3.2.9",
        "keyv": "^4.5.3",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^10.12.0 || >=12.0.0"
      }
    },
    "node_modules/flatted": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.3.tgz",
      "integrity": "sha512-GX+ysw4PBCz0PzosHDepZGANEuFCMLrnRTiEy9McGjmkCQYwRq4A/X786G/fjM/+OjsWSU1ZrY5qyARZmO/uwg==",
      "license": "ISC"
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/fork-ts-checker-webpack-plugin/-/fork-ts-checker-webpack-plugin-6.5.3.tgz",
      "integrity": "sha512-SbH/l9ikmMWycd5puHJKTkZJKddF4iRLyW3DeZ08HTI7NGyLS38MXd/KGgeWumQO7YNQbW2u/NtPT2YowbPaGQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.8.3",
        "@types/json-schema": "^7.0.5",
        "chalk": "^4.1.0",
        "chokidar": "^3.4.2",
        "cosmiconfig": "^6.0.0",
        "deepmerge": "^4.2.2",
        "fs-extra": "^9.0.0",
        "glob": "^7.1.6",
        "memfs": "^3.1.2",
        "minimatch": "^3.0.4",
        "schema-utils": "2.7.0",
        "semver": "^7.3.2",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=10",
        "yarn": ">=1.0.0"
      },
      "peerDependencies": {
        "eslint": ">= 6",
        "typescript": ">= 2.7",
        "vue-template-compiler": "*",
        "webpack": ">= 4"
      },
      "peerDependenciesMeta": {
        "eslint": {
          "optional": true
        },
        "vue-template-compiler": {
          "optional": true
        }
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/cosmiconfig": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-6.0.0.tgz",
      "integrity": "sha512-xb3ZL6+L8b9JLLCx3ZdoZy4+2ECphCMo2PwqgP1tlfVq6M6YReyzBJtvWWtbDSpNr9hn96pkCiZqUcFEc+54Qg==",
      "license": "MIT",
      "dependencies": {
        "@types/parse-json": "^4.0.0",
        "import-fresh": "^3.1.0",
        "parse-json": "^5.0.0",
        "path-type": "^4.0.0",
        "yaml": "^1.7.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/schema-utils": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-2.7.0.tgz",
      "integrity": "sha512-0ilKFI6QQF5nxDZLFn2dMjvc4hjg/Wkg7rHd3jK6/A4a1Hl9VFdQWvgB1UMGoU94pad1P/8N7fMcEnLnSiju8A==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.4",
        "ajv": "^6.12.2",
        "ajv-keywords": "^3.4.1"
      },
      "engines": {
        "node": ">= 8.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/fork-ts-checker-webpack-plugin/node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/form-data": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.3.tgz",
      "integrity": "sha512-q5YBMeWy6E2Un0nMGWMgI65MAKtaylxfNJGJxpGh45YDciZB4epbWpaAfImil6CPAPTYB4sh0URQNDRIZG5F2w==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "mime-types": "^2.1.35"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fraction.js": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/fraction.js/-/fraction.js-4.3.7.tgz",
      "integrity": "sha512-ZsDfxO51wGAXREY55a7la9LScWpwv9RxIrYABrlvOFBlH/ShPnrtsXeuUIfXKKOVicNxQ+o8JTbJvjS4M89yew==",
      "license": "MIT",
      "engines": {
        "node": "*"
      },
      "funding": {
        "type": "patreon",
        "url": "https://github.com/sponsors/rawify"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs-monkey": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/fs-monkey/-/fs-monkey-1.0.6.tgz",
      "integrity": "sha512-b1FMfwetIKymC0eioW7mTywihSQE4oLzQn1dB6rZB5fx/3NpNEdAWeCSMB+60/AeT0TCXsxzAlcYVEFCTAksWg==",
      "license": "Unlicense"
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-own-enumerable-property-symbols": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/get-own-enumerable-property-symbols/-/get-own-enumerable-property-symbols-3.0.2.tgz",
      "integrity": "sha512-I0UBV/XOz1XkIJHEUDMZAbzCThU/H8DxmSfmdGcKPnVhu2VfFqr34jr9777IyaTYvxjedWhqVIilEDsCdP5G6g==",
      "license": "ISC"
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.3"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/global-modules": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-2.0.0.tgz",
      "integrity": "sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==",
      "license": "MIT",
      "dependencies": {
        "global-prefix": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-3.0.0.tgz",
      "integrity": "sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==",
      "license": "MIT",
      "dependencies": {
        "ini": "^1.3.5",
        "kind-of": "^6.0.2",
        "which": "^1.3.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/global-prefix/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/globby": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
      "license": "MIT",
      "dependencies": {
        "array-union": "^2.1.0",
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.9",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphemer": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/graphemer/-/graphemer-1.4.0.tgz",
      "integrity": "sha512-EtKwoO6kxCL9WO5xipiHTZlSzBm7WLT627TqC/uVRd0HKmq8NXyebnNYxDoBi7wt8eTWrUrKXCOVaFq9x1kgag==",
      "license": "MIT"
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "license": "MIT",
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/handle-thing": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/handle-thing/-/handle-thing-2.0.1.tgz",
      "integrity": "sha512-9Qn4yBxelxoh2Ow62nP+Ka/kMnOXRi8BXnRaUwezLNhqelnN49xKz4F/dPP8OYLxLxq6JDtZb2i9XznUQbNPTg==",
      "license": "MIT"
    },
    "node_modules/harmony-reflect": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/harmony-reflect/-/harmony-reflect-1.6.2.tgz",
      "integrity": "sha512-HIp/n38R9kQjDEziXyDTuW3vvoxxyxjxFzXLrBr18uB47GnSt+G9D29fqrpM5ZkspMcPICud3XsBJQ4Y2URg8g==",
      "license": "(Apache-2.0 OR MPL-1.1)"
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/he": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/he/-/he-1.2.0.tgz",
      "integrity": "sha512-F/1DnUGPopORZi0ni+CvrCgHQ5FyEAHRLSApuYWMmrbSwoN2Mn/7k+Gl38gJnR7yyDZk6WLXwiGod1JOWNDKGw==",
      "license": "MIT",
      "bin": {
        "he": "bin/he"
      }
    },
    "node_modules/hoopy": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/hoopy/-/hoopy-0.1.4.tgz",
      "integrity": "sha512-HRcs+2mr52W0K+x8RzcLzuPPmVIKMSv97RGHy0Ea9y/mpcaK+xTrjICA04KAHi4GRzxliNqNJEFYWHghy3rSfQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/hpack.js": {
      "version": "2.1.6",
      "resolved": "https://registry.npmjs.org/hpack.js/-/hpack.js-2.1.6.tgz",
      "integrity": "sha512-zJxVehUdMGIKsRaNt7apO2Gqp0BdqW5yaiGHXXmbpvxgBYVZnAql+BJb4RO5ad2MgpbZKn5G6nMnegrH1FcNYQ==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.1",
        "obuf": "^1.0.0",
        "readable-stream": "^2.0.1",
        "wbuf": "^1.1.0"
      }
    },
    "node_modules/hpack.js/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/hpack.js/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/hpack.js/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/html-encoding-sniffer": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-2.0.1.tgz",
      "integrity": "sha512-D5JbOMBIR/TVZkubHT+OyT2705QvogUW4IBn6nHd756OwieSF9aDYFj4dv6HHEVGYbHaLETa3WggZYWWMyy3ZQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^1.0.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/html-entities": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.6.0.tgz",
      "integrity": "sha512-kig+rMn/QOVRvr7c86gQ8lWXq+Hkv6CbAH1hLu+RG338StTpE8Z0b44SDVaqVu7HGKf27frdmUYEs9hTUX/cLQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/mdevils"
        },
        {
          "type": "patreon",
          "url": "https://patreon.com/mdevils"
        }
      ],
      "license": "MIT"
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "license": "MIT"
    },
    "node_modules/html-minifier-terser": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/html-minifier-terser/-/html-minifier-terser-6.1.0.tgz",
      "integrity": "sha512-YXxSlJBZTP7RS3tWnQw74ooKa6L9b9i9QYXY21eUEvhZ3u9XLfv6OnFsQq6RxkhHygsaUMvYsZRV5rU/OVNZxw==",
      "license": "MIT",
      "dependencies": {
        "camel-case": "^4.1.2",
        "clean-css": "^5.2.2",
        "commander": "^8.3.0",
        "he": "^1.2.0",
        "param-case": "^3.0.4",
        "relateurl": "^0.2.7",
        "terser": "^5.10.0"
      },
      "bin": {
        "html-minifier-terser": "cli.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/html-webpack-plugin": {
      "version": "5.6.3",
      "resolved": "https://registry.npmjs.org/html-webpack-plugin/-/html-webpack-plugin-5.6.3.tgz",
      "integrity": "sha512-QSf1yjtSAsmf7rYBV7XX86uua4W/vkhIt0xNXKbsi2foEeW7vjJQz4bhnpL3xH+l1ryl1680uNv968Z+X6jSYg==",
      "license": "MIT",
      "dependencies": {
        "@types/html-minifier-terser": "^6.0.0",
        "html-minifier-terser": "^6.0.2",
        "lodash": "^4.17.21",
        "pretty-error": "^4.0.0",
        "tapable": "^2.0.0"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/html-webpack-plugin"
      },
      "peerDependencies": {
        "@rspack/core": "0.x || 1.x",
        "webpack": "^5.20.0"
      },
      "peerDependenciesMeta": {
        "@rspack/core": {
          "optional": true
        },
        "webpack": {
          "optional": true
        }
      }
    },
    "node_modules/htmlparser2": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-6.1.0.tgz",
      "integrity": "sha512-gyyPk6rgonLFEDGoeRgQNaEUvdJ4ktTmmUh/h2t7s+M8oPpIPxgNACWa+6ESR57kXstwqPiCut0V8NRpcwgU7A==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "domhandler": "^4.0.0",
        "domutils": "^2.5.2",
        "entities": "^2.0.0"
      }
    },
    "node_modules/http-deceiver": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/http-deceiver/-/http-deceiver-1.2.7.tgz",
      "integrity": "sha512-LmpOGxTfbpgtGVxJrj5k7asXHCgNZp5nLfp+hWc8QQRqtb7fUy6kRY3BO1h9ddF6yIPYUARgxGOwB42DnxIaNw==",
      "license": "MIT"
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.10",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.10.tgz",
      "integrity": "sha512-Pysuw9XpUq5dVc/2SMHpuTY01RFl8fttgcyunjL7eEMhGM3cI4eOmiCycJDVCo/7O7ClfQD3SaI6ftDzqOXYMA==",
      "license": "MIT"
    },
    "node_modules/http-proxy": {
      "version": "1.18.1",
      "resolved": "https://registry.npmjs.org/http-proxy/-/http-proxy-1.18.1.tgz",
      "integrity": "sha512-7mz/721AbnJwIVbnaSv1Cz3Am0ZLT/UBwkC92VlxhXv/k/BBQfM2fXElQNC27BVGr0uwUpplYPQM9LnaBMR5NQ==",
      "license": "MIT",
      "dependencies": {
        "eventemitter3": "^4.0.0",
        "follow-redirects": "^1.0.0",
        "requires-port": "^1.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz",
      "integrity": "sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-middleware": {
      "version": "2.0.9",
      "resolved": "https://registry.npmjs.org/http-proxy-middleware/-/http-proxy-middleware-2.0.9.tgz",
      "integrity": "sha512-c1IyJYLYppU574+YI7R4QyX2ystMtVXZwIdzazUIPIJsHuWNd+mho2j+bKoHftndicGj9yh+xjd+l0yj7VeT1Q==",
      "license": "MIT",
      "dependencies": {
        "@types/http-proxy": "^1.17.8",
        "http-proxy": "^1.18.1",
        "is-glob": "^4.0.1",
        "is-plain-obj": "^3.0.0",
        "micromatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "@types/express": "^4.17.13"
      },
      "peerDependenciesMeta": {
        "@types/express": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/icss-utils": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/icss-utils/-/icss-utils-5.1.0.tgz",
      "integrity": "sha512-soFhflCVWLfRNOPU3iv5Z9VUdT44xFRbzjLsEzSr5AQmgqPMTHdU3PMT1Cf1ssx8fLNJDA1juftYl+PUcv3MqA==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/identity-obj-proxy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/identity-obj-proxy/-/identity-obj-proxy-3.0.0.tgz",
      "integrity": "sha512-00n6YnVHKrinT9t0d9+5yZC6UBNJANpYEQvL2LlX6Ab9lnmxzIRcEmTPuyGScvl1+jKuCICX1Z0Ab1pPKKdikA==",
      "license": "MIT",
      "dependencies": {
        "harmony-reflect": "^1.4.6"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/ignore": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.3.2.tgz",
      "integrity": "sha512-hsBTNUqQTDwkWtcdYI2i06Y/nUBEsNEDJKjWdigLvegy8kDuJAS8uRlpkkcQpyEXL0Z/pjDy5HBmMjRCJ2gq+g==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/immer": {
      "version": "9.0.21",
      "resolved": "https://registry.npmjs.org/immer/-/immer-9.0.21.tgz",
      "integrity": "sha512-bc4NBHqOqSfRW7POMkHd51LvClaeMXpm8dx0e8oE2GORbq5aRK7Bxl4FyzVLdGtLmvLKL7BTDBG5ACQm4HWjTA==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/immer"
      }
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-fresh/node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-2.2.0.tgz",
      "integrity": "sha512-Ag3wB2o37wslZS19hZqorUnrnzSkpOVy+IiiDEiTqNubEYpYuHWIf6K4psgN2ZWKExS4xhVCrRVfb/wfW8fWJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-docker": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
      "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
      "license": "MIT",
      "bin": {
        "is-docker": "cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha512-51ypPSPCoTEIN9dy5Oy+h4pShgJmPCygKfyRCISBI+JoWT/2oJvK8QPxmwv7b/p239jXrm9M1mlQbyKJ5A152g==",
      "license": "MIT"
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-obj": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-obj/-/is-obj-1.0.1.tgz",
      "integrity": "sha512-l4RyHgRqGN4Y3+9JHVrNqO+tN0rV5My76uW5/nuO4K1b6vw5G8d/cmFjP9tRfEsdhZNt0IFdZuK/c2Vr4Nb+Qg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-path-inside": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-3.0.0.tgz",
      "integrity": "sha512-gwsOE28k+23GP1B6vFl1oVh/WOzmawBrKwo5Ev6wMKzPkaXaCDIQKzLnvsA42DRlbVTWorkgTKIviAKCWkfUwA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
      "license": "MIT"
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-regexp": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-regexp/-/is-regexp-1.0.0.tgz",
      "integrity": "sha512-7zjFAPO4/gwyQAAgRRmqeEeyIICSdmCqa3tsVHMdBzaXXRiqopZL4Cyghg/XulGWrtABTpbnYYzzIRffLkP4oA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-root": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-root/-/is-root-2.1.0.tgz",
      "integrity": "sha512-AGOriNp96vNBd3HtU+RzFEc75FfR5ymiYv8E553I71SCeXBiMsVDUtdio1OEFvrPyLIQ9tVR5RxXIFe5PUFjMg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-wsl": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
      "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
      "license": "MIT",
      "dependencies": {
        "is-docker": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/iterator.prototype": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/iterator.prototype/-/iterator.prototype-1.1.5.tgz",
      "integrity": "sha512-H0dkQoCa3b2VEeKQBOxFph+JAbcrQdE7KC0UkqwpLmv2EC4P41QXP+rqo9wYodACiG5/WM5s9oDApTU8utwj9g==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "get-proto": "^1.0.0",
        "has-symbols": "^1.1.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jake": {
      "version": "10.9.2",
      "resolved": "https://registry.npmjs.org/jake/-/jake-10.9.2.tgz",
      "integrity": "sha512-2P4SQ0HrLQ+fw6llpLnOaGAvN2Zu6778SJMrCUwns4fOoG9ayrTiZk3VV8sCPkVZF8ab0zksVpS8FDY5pRCNBA==",
      "license": "Apache-2.0",
      "dependencies": {
        "async": "^3.2.3",
        "chalk": "^4.0.2",
        "filelist": "^1.0.4",
        "minimatch": "^3.1.2"
      },
      "bin": {
        "jake": "bin/cli.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest/-/jest-27.5.1.tgz",
      "integrity": "sha512-Yn0mADZB89zTtjkPJEXwrac3LHudkQMR+Paqa8uxJHCBr9agxztUifWCyiYrjhMPBoUVBjyny0I7XH6ozDr7QQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "import-local": "^3.0.2",
        "jest-cli": "^27.5.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-27.5.1.tgz",
      "integrity": "sha512-buBLMiByfWGCoMsLLzGUUSpAmIAGnbR2KJoMN10ziLhOLvP4e0SlypHnAel8iqQXTrcbmfEY9sSqae5sgUsTvw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "execa": "^5.0.0",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-27.5.1.tgz",
      "integrity": "sha512-D95R7x5UtlMA5iBYsOHFFbMD/GVA4R/Kdq15f7xYWUfWHBto9NYRsOvnSauTgdF+ogCpJ4tyKOXhUifxS65gdw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^0.7.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-27.5.1.tgz",
      "integrity": "sha512-Hc6HOOwYq4/74/c62dEE3r5elx8wjYqxY0r0G/nFrLDPMFRu6RA/u8qINOIkvhxG7mMQ5EJsOGfRpI8L6eFUVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "import-local": "^3.0.2",
        "jest-config": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "prompts": "^2.0.1",
        "yargs": "^16.2.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-27.5.1.tgz",
      "integrity": "sha512-5sAsjm6tGdsVbW9ahcChPAFCk4IlkQUknH5AvKjuLTSlcO/wCZKyFdn7Rg0EkC+OGgWODEy2hDpWB1PgzH0JNA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.8.0",
        "@jest/test-sequencer": "^27.5.1",
        "@jest/types": "^27.5.1",
        "babel-jest": "^27.5.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.1",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-jasmine2": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runner": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "peerDependencies": {
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-diff": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-27.5.1.tgz",
      "integrity": "sha512-m0NvkX55LDt9T4mctTEgnZk3fmEg3NRYutvMPWM/0iPnkFj2wIeF45O1718cMSOFO1vINkqmxqD8vE37uTEbqw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-27.5.1.tgz",
      "integrity": "sha512-rl7hlABeTsRYxKiUfpHrQrG4e2obOiTQWfMEH3PxPjOtdsfLQO4ReWSZaQ7DETm4xu07rl4q/h4zcKXyU0/OzQ==",
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-27.5.1.tgz",
      "integrity": "sha512-1Ff6p+FbhT/bXQnEouYy00bkNSY7OUpfIcmdl8vZ31A1UUaurOLPA8a8BbJOF2RDUElwJhmeaV7LnagI+5UwNQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-jsdom": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-jsdom/-/jest-environment-jsdom-27.5.1.tgz",
      "integrity": "sha512-TFBvkTC1Hnnnrka/fUb56atfDtJ9VMZ94JkjTbggl1PEpwrYtUBKMezB3inLmWqQsXYLcMwNoDQwoBTAvFfsfw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1",
        "jsdom": "^16.6.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-27.5.1.tgz",
      "integrity": "sha512-Jt4ZUnxdOsTGwSRAfKEnE6BcwsSPNOijjwifq5sDFSA2kesnXTvNqKHYgM0hDq3549Uf/KzdXNYn4wMZJPlFLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "jest-mock": "^27.5.1",
        "jest-util": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-27.5.1.tgz",
      "integrity": "sha512-2KY95ksYSaK7DMBWQn6dQz3kqAf3BB64y2udeG+hv4KfSOb9qwcYQstTJc1KCbsix+wLZWZYN8t7nwX3GOBLRw==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-27.5.1.tgz",
      "integrity": "sha512-7GgkZ4Fw4NFbMSDSpZwXeBiIbx+t/46nJ2QitkOjvwPYyZmqttu2TDSimMHP1EkPOi4xUZAN1doE5Vd25H4Jng==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/graceful-fs": "^4.1.2",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^27.5.1",
        "jest-serializer": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "micromatch": "^4.0.4",
        "walker": "^1.0.7"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-jasmine2": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-jasmine2/-/jest-jasmine2-27.5.1.tgz",
      "integrity": "sha512-jtq7VVyG8SqAorDpApwiJJImd0V2wv1xzdheGHRGyuT7gZm6gG47QEskOlzsN1PG/6WNaCo5pmwMHDf3AkG2pQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "expect": "^27.5.1",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "pretty-format": "^27.5.1",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-27.5.1.tgz",
      "integrity": "sha512-POXfWAMvfU6WMUXftV4HolnJfnPOGEu10fscNCA76KBpRRhcMN2c8d3iT2pxQS3HLbA+5X4sOUPzYO2NUyIlHQ==",
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-27.5.1.tgz",
      "integrity": "sha512-z2uTx/T6LBaCoNWNFWwChLBKYxTMcGBRjAt+2SbP929/Fflb9aa5LGma654Rz8z9HLxsrUaYzxE9T/EFIL/PAw==",
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-27.5.1.tgz",
      "integrity": "sha512-rMyFe1+jnyAAf+NHwTclDz0eAaLkVDdKVHHBFWsBWHnnh5YeJMNWWsv7AbFYXfK3oTqvL7VTWkhNLu1jX24D+g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^27.5.1",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^27.5.1",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-27.5.1.tgz",
      "integrity": "sha512-K4jKbY1d4ENhbrG2zuPWaQBvDly+iZ2yAW+T1fATN78hc0sInwn7wZB8XtlNnvHug5RMwV897Xm4LqmPM4e2Og==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-27.5.1.tgz",
      "integrity": "sha512-4bfKq2zie+x16okqDXjXn9ql2B0dScQu+vcwe4TvFVhkVyuWLqpZrZtXxLLWoXYgn0E87I6r6GRYHF7wFZBUvg==",
      "license": "MIT",
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-27.5.1.tgz",
      "integrity": "sha512-FFDy8/9E6CV83IMbDpcjOhumAQPDyETnU2KZ1O98DwTnz8AOBsW/Xv3GySr1mOZdItLR+zDZ7I/UdTFbgSOVCw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^27.5.1",
        "jest-validate": "^27.5.1",
        "resolve": "^1.20.0",
        "resolve.exports": "^1.1.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-27.5.1.tgz",
      "integrity": "sha512-QQOOdY4PE39iawDn5rzbIePNigfe5B9Z91GDD1ae/xNDlu9kaat8QQ5EKnNmVWPV54hUdxCVwwj6YMgR2O7IOg==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-snapshot": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-27.5.1.tgz",
      "integrity": "sha512-g4NPsM4mFCOwFKXO4p/H/kWGdJp9V8kURY2lX8Me2drgXqG7rrZAx5kv+5H7wtt/cdFIjhqYx1HrlqWHaOvDaQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^27.5.1",
        "@jest/environment": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.8.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^27.5.1",
        "jest-environment-jsdom": "^27.5.1",
        "jest-environment-node": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-leak-detector": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-runtime": "^27.5.1",
        "jest-util": "^27.5.1",
        "jest-worker": "^27.5.1",
        "source-map-support": "^0.5.6",
        "throat": "^6.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-27.5.1.tgz",
      "integrity": "sha512-o7gxw3Gf+H2IGt8fv0RiyE1+r83FJBRruoA+FXrlHw6xEyBsU8ugA6IPfTdVyA0w8HClpbK+DGJxH59UrNMx8A==",
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^27.5.1",
        "@jest/fake-timers": "^27.5.1",
        "@jest/globals": "^27.5.1",
        "@jest/source-map": "^27.5.1",
        "@jest/test-result": "^27.5.1",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "execa": "^5.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-mock": "^27.5.1",
        "jest-regex-util": "^27.5.1",
        "jest-resolve": "^27.5.1",
        "jest-snapshot": "^27.5.1",
        "jest-util": "^27.5.1",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-serializer": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-serializer/-/jest-serializer-27.5.1.tgz",
      "integrity": "sha512-jZCyo6iIxO1aqUxpuBlwTDMkzOAJS4a3eYz3YzgxxVQFwLeSA7Jfq5cbqCY+JLvTDrWirgusI/0KwxKMgrdf7w==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-27.5.1.tgz",
      "integrity": "sha512-yYykXI5a0I31xX67mgeLw1DZ0bJB+gpq5IpSuCAoyDi0+BhgU/RIrL+RTzDmkNTchvDFWKP8lp+w/42Z3us5sA==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.7.2",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/traverse": "^7.7.2",
        "@babel/types": "^7.0.0",
        "@jest/transform": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/babel__traverse": "^7.0.4",
        "@types/prettier": "^2.1.5",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^27.5.1",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^27.5.1",
        "jest-get-type": "^27.5.1",
        "jest-haste-map": "^27.5.1",
        "jest-matcher-utils": "^27.5.1",
        "jest-message-util": "^27.5.1",
        "jest-util": "^27.5.1",
        "natural-compare": "^1.4.0",
        "pretty-format": "^27.5.1",
        "semver": "^7.3.2"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-27.5.1.tgz",
      "integrity": "sha512-Kv2o/8jNvX1MQ0KGtw480E/w4fBCDOnH6+6DmeKi6LZUIlKA5kwY0YNdlzaWTiVgxqAqik11QyxDOKk543aKXw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-27.5.1.tgz",
      "integrity": "sha512-thkNli0LYTmOI1tDB3FI1S1RTp/Bqyd9pTarJwL87OIBFuqEb5Apv5EaApEudYg4g86e3CT6kM0RowkhtEnCBQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^27.5.1",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^27.5.1",
        "leven": "^3.1.0",
        "pretty-format": "^27.5.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-watch-typeahead": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/jest-watch-typeahead/-/jest-watch-typeahead-1.1.0.tgz",
      "integrity": "sha512-Va5nLSJTN7YFtC2jd+7wsoe1pNe5K4ShLux/E5iHEwlB9AxaxmggY7to9KUqKojhaJw3aXqt5WAb4jGPOolpEw==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.3.1",
        "chalk": "^4.0.0",
        "jest-regex-util": "^28.0.0",
        "jest-watcher": "^28.0.0",
        "slash": "^4.0.0",
        "string-length": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "peerDependencies": {
        "jest": "^27.0.0 || ^28.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-28.1.3.tgz",
      "integrity": "sha512-QPAkP5EwKdK/bxIr6C1I4Vs0rm2nHiANzj/Z5X2JQkrZo6IqvC4ldZ9K95tF0HdidhA8Bo6egxSzUFPYKcEXLw==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^28.1.3",
        "jest-util": "^28.1.3",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/console/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/test-result": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-28.1.3.tgz",
      "integrity": "sha512-kZAkxnSE+FqE8YjW8gNuoVkkC9I7S1qmenl8sGcDOLropASP+BkcGKwhXoyqQuGOGeYY0y/ixjrd/iERpEXHNg==",
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@jest/types": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-28.1.3.tgz",
      "integrity": "sha512-RyjiyMUZrKz/c+zlMFO1pm70DcIlST8AeWTkoUdZevew44wcNZQHsEVOiCVtgVnlFFD82FPaXycys58cf2muVQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/emittery": {
      "version": "0.10.2",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.10.2.tgz",
      "integrity": "sha512-aITqOwnLanpHLNXZJENbOgjUBeHocD+xsSJmNrjovKBW5HbSpW3d1pEls7GFQPUWXiwG9+0P4GtHfEqC/4M0Iw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-28.1.3.tgz",
      "integrity": "sha512-PFdn9Iewbt575zKPf1286Ht9EPoJmYT7P0kY+RibeYZ2XtOr53pDLEFoTWXbd1h4JiGiWpTBC84fc8xMXQMb7g==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^28.1.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^28.1.3",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-message-util/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-regex-util": {
      "version": "28.0.2",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-28.0.2.tgz",
      "integrity": "sha512-4s0IgyNIy0y9FK+cjoVYoxamT7Zeo7MhzqRGx7YDYmaQn1wucY9rotiGkBzzcMXTtjrCAP/f7f+E0F7+fxPNdw==",
      "license": "MIT",
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-util": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-28.1.3.tgz",
      "integrity": "sha512-XdqfpHwpcSRko/C35uLYFM2emRAltIIKZiJ9eAmhjsj0CqZMa0p1ib0R5fWIqGhn1a103DebTbpqIaP1qCQ6tQ==",
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-28.1.3.tgz",
      "integrity": "sha512-t4qcqj9hze+jviFPUN3YAtAEeFnr/azITXQEMARf5cMwKY2SMBRnCQTXLixTl20OR6mLh9KLMrgVJgJISym+1g==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^28.1.3",
        "@jest/types": "^28.1.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.10.2",
        "jest-util": "^28.1.3",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/jest-watcher/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/pretty-format": {
      "version": "28.1.3",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-28.1.3.tgz",
      "integrity": "sha512-8gFb/To0OmxHR9+ZTb14Df2vNxdGCX8g1xWGUTqUw5TiZvcQf5sHKObd5UcPyLLyowNwDAMTF3XWOG1B6mxl1Q==",
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^28.1.3",
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || ^16.10.0 || >=17.0.0"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "license": "MIT"
    },
    "node_modules/jest-watch-typeahead/node_modules/slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-5.0.1.tgz",
      "integrity": "sha512-9Ep08KAMUn0OadnVaBuRdE2l615CQ508kr0XMadjClfYpdCyvrbFp6Taebo8yyxokQ4viUd/xPPUA4FGgUa0ow==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^2.0.0",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/string-length/node_modules/char-regex": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-2.0.2.tgz",
      "integrity": "sha512-cbGOjAptfM2LVmWhwRFHEKTPkLwNddVmuqYZQt895yXwAsWsXObCG+YN4DGQ/JBtT4GP1a1lPPdio2z413LmTg==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/jest-watch-typeahead/node_modules/strip-ansi/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/jest-watcher": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-27.5.1.tgz",
      "integrity": "sha512-z676SuD6Z8o8qbmEGhoEUFOM1+jfEiL3DXHK/xgEiG2EyNYfFG60jluWcupY6dATjfEsKQuibReS1djInQnoVw==",
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^27.5.1",
        "@jest/types": "^27.5.1",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "jest-util": "^27.5.1",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jiti": {
      "version": "1.21.7",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-1.21.7.tgz",
      "integrity": "sha512-/imKNG4EbWNrVjoNC/1H5/9GFy+tqjGBHCaSsN+P2RnPqjsLmv6UD3Ej+Kj8nBWaRAwyk7kK5ZUc+OEatnTR3A==",
      "license": "MIT",
      "bin": {
        "jiti": "bin/jiti.js"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsdom": {
      "version": "16.7.0",
      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-16.7.0.tgz",
      "integrity": "sha512-u9Smc2G1USStM+s/x1ru5Sxrl6mPYCbByG1U/hUmqaVsm4tbNyS7CicOSRyuGQYZhTu0h84qkZZQ/I+dzizSVw==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "acorn": "^8.2.4",
        "acorn-globals": "^6.0.0",
        "cssom": "^0.4.4",
        "cssstyle": "^2.3.0",
        "data-urls": "^2.0.0",
        "decimal.js": "^10.2.1",
        "domexception": "^2.0.1",
        "escodegen": "^2.0.0",
        "form-data": "^3.0.0",
        "html-encoding-sniffer": "^2.0.1",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-potential-custom-element-name": "^1.0.1",
        "nwsapi": "^2.2.0",
        "parse5": "6.0.1",
        "saxes": "^5.0.1",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^4.0.0",
        "w3c-hr-time": "^1.0.2",
        "w3c-xmlserializer": "^2.0.0",
        "webidl-conversions": "^6.1.0",
        "whatwg-encoding": "^1.0.5",
        "whatwg-mimetype": "^2.3.0",
        "whatwg-url": "^8.5.0",
        "ws": "^7.4.6",
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "canvas": "^2.5.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT"
    },
    "node_modules/json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/jsonpath": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/jsonpath/-/jsonpath-1.1.1.tgz",
      "integrity": "sha512-l6Cg7jRpixfbgoWgkrl77dgEj8RPvND0wMH6TwQmi9Qs4TFfS9u5cUFnbeKTwj5ga5Y3BTGGNI28k117LJ009w==",
      "license": "MIT",
      "dependencies": {
        "esprima": "1.2.2",
        "static-eval": "2.0.2",
        "underscore": "1.12.1"
      }
    },
    "node_modules/jsonpath/node_modules/esprima": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-1.2.2.tgz",
      "integrity": "sha512-+JpPZam9w5DuJ3Q67SqsMGtiHKENSMRVoxvArfJZK01/BfLEObtZ6orJa/MtoGNR/rfMgp5837T41PAmTwAv/A==",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jsx-ast-utils": {
      "version": "3.3.5",
      "resolved": "https://registry.npmjs.org/jsx-ast-utils/-/jsx-ast-utils-3.3.5.tgz",
      "integrity": "sha512-ZZow9HBI5O6EPgSJLUb8n2NKgmVWTwCvHGwFuJlMjvLFqlGG6pjirPhtdsseaLZjSibD8eegzmYpUZwoIlj2cQ==",
      "license": "MIT",
      "dependencies": {
        "array-includes": "^3.1.6",
        "array.prototype.flat": "^1.3.1",
        "object.assign": "^4.1.4",
        "object.values": "^1.1.6"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/klona": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/klona/-/klona-2.0.6.tgz",
      "integrity": "sha512-dhG34DXATL5hSxJbIexCft8FChFXtmskoZYnoPWjXQuebWYCNkVeV3KkGegCK9CP1oswI/vQibS2GY7Em/sJJA==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/language-subtag-registry": {
      "version": "0.3.23",
      "resolved": "https://registry.npmjs.org/language-subtag-registry/-/language-subtag-registry-0.3.23.tgz",
      "integrity": "sha512-0K65Lea881pHotoGEa5gDlMxt3pctLi2RplBb7Ezh4rRdLEOtgi7n4EwK9lamnUCkKBqaeKRVebTq6BAxSkpXQ==",
      "license": "CC0-1.0"
    },
    "node_modules/language-tags": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/language-tags/-/language-tags-1.0.9.tgz",
      "integrity": "sha512-MbjN408fEndfiQXbFQ1vnd+1NoLDsnQW41410oQBXiyXDMYH5z505juWa4KUE1LqxRC7DgOgZDbKLxHIwm27hA==",
      "license": "MIT",
      "dependencies": {
        "language-subtag-registry": "^0.3.20"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/launch-editor": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/launch-editor/-/launch-editor-2.10.0.tgz",
      "integrity": "sha512-D7dBRJo/qcGX9xlvt/6wUYzQxjh5G1RvZPgPv8vi4KRU99DVQL/oW7tnVOCCTm2HGeo3C5HvGE5Yrh6UBoZ0vA==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^1.0.0",
        "shell-quote": "^1.8.1"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/levn": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1",
        "type-check": "~0.4.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/lilconfig": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-2.1.0.tgz",
      "integrity": "sha512-utWOt/GHzuUxnLKxB6dk81RoOeoNeHgbrXiuGk4yyF5qlRz+iIVWu56E2fqGHFrXz0QNUhLB/8nKqvRH66JKGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.debounce": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/lodash.debounce/-/lodash.debounce-4.0.8.tgz",
      "integrity": "sha512-FT1yDzDYEoYWhnSGnpE/4Kj1fLZkDFyqRb7fNt6FdYOSxlUWAtp42Eh6Wb0rGIv/m9Bgo7x4GhQbm5Ys4SG5ow==",
      "license": "MIT"
    },
    "node_modules/lodash.memoize": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/lodash.memoize/-/lodash.memoize-4.1.2.tgz",
      "integrity": "sha512-t7j+NzmgnQzTAYXcsHYLgimltOV1MXHtlOWf6GjL9Kj8GK5FInw5JotxvbOs+IvV1/Dzo04/fCGfLVs7aXb4Ag==",
      "license": "MIT"
    },
    "node_modules/lodash.merge": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
      "license": "MIT"
    },
    "node_modules/lodash.sortby": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/lodash.sortby/-/lodash.sortby-4.7.0.tgz",
      "integrity": "sha512-HDWXG8isMntAyRF5vZ7xKuEvOhT4AhlRt/3czTSjvGUxjYCBVRQY48ViDHyfYz9VIoBkW4TMGQNapx+l3RUwdA==",
      "license": "MIT"
    },
    "node_modules/lodash.uniq": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.uniq/-/lodash.uniq-4.5.0.tgz",
      "integrity": "sha512-xfBaXQd9ryd9dlSDvnvI0lvxfLJlYAZzXomUYzLKtUeOQvOP5piqAWuGtrhWeqaXK9hhoM/iyJc5AV+XfsX3HQ==",
      "license": "MIT"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lower-case": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/lower-case/-/lower-case-2.0.2.tgz",
      "integrity": "sha512-7fm3l3NAF9WfN6W3JOmf5drwpVqX78JtoGJ3A6W0a6ZnldM41w2fV5D490psKFTpMds8TJse/eHLFFsNHHjHgg==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.3"
      }
    },
    "node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/make-dir": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
      "license": "MIT",
      "dependencies": {
        "semver": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mdn-data": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.4.tgz",
      "integrity": "sha512-iV3XNKw06j5Q7mi6h+9vbx23Tv7JkjEVgKHW4pimwyDGWm0OIQntJJ+u1C6mg6mK1EaTv42XQ7w76yuzH7M2cA==",
      "license": "CC0-1.0"
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memfs": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/memfs/-/memfs-3.5.3.tgz",
      "integrity": "sha512-UERzLsxzllchadvbPs5aolHh65ISpKpM+ccLbOJ8/vvpBKmAWf+la7dXFy7Mr0ySHbdHrFv5kGFCUHHe6GFEmw==",
      "license": "Unlicense",
      "dependencies": {
        "fs-monkey": "^1.0.4"
      },
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT"
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mini-css-extract-plugin": {
      "version": "2.9.2",
      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.9.2.tgz",
      "integrity": "sha512-GJuACcS//jtq4kCtd5ii/M0SZf7OZRH+BxdqXZHaJfb8TJiVl+NgQRPwiYt2EuqeSkNydn/7vP+bcE27C5mb9w==",
      "license": "MIT",
      "dependencies": {
        "schema-utils": "^4.0.0",
        "tapable": "^2.2.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
      "license": "ISC"
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/multicast-dns": {
      "version": "7.2.5",
      "resolved": "https://registry.npmjs.org/multicast-dns/-/multicast-dns-7.2.5.tgz",
      "integrity": "sha512-2eznPJP8z2BFLX50tf0LuODrpINqP1RVIm/CObbTcBRITQgmC/TjcREF1NeTBzIcR5XO/ukWo+YHOjBbFwIupg==",
      "license": "MIT",
      "dependencies": {
        "dns-packet": "^5.2.2",
        "thunky": "^1.0.2"
      },
      "bin": {
        "multicast-dns": "cli.js"
      }
    },
    "node_modules/mz": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/mz/-/mz-2.7.0.tgz",
      "integrity": "sha512-z81GNO7nnYMEhrGh9LeymoE4+Yr0Wn5McHIZMK5cfQCl+NDX08sCZgUc9/6MHni9IWuFLm1Z3HTCXu2z9fN62Q==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0",
        "object-assign": "^4.0.1",
        "thenify-all": "^1.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "license": "MIT"
    },
    "node_modules/natural-compare-lite": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz",
      "integrity": "sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT"
    },
    "node_modules/no-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/no-case/-/no-case-3.0.4.tgz",
      "integrity": "sha512-fgAN3jGAh+RoxUGZHTSOLJIqUc2wmoBwGR4tbpNAKmmovFoWq0OdRkb0VkldReO2a2iBT/OEulG9XSUc10r3zg==",
      "license": "MIT",
      "dependencies": {
        "lower-case": "^2.0.2",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-range": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/normalize-range/-/normalize-range-0.1.2.tgz",
      "integrity": "sha512-bdok/XvKII3nUpklnV6P2hxtMNrCboOjAcyBuQnWEhO665FwrSNRxU+AqpsyvO6LgGYPspN+lu5CLtw4jPRKNA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/nth-check": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/fb55/nth-check?sponsor=1"
      }
    },
    "node_modules/nwsapi": {
      "version": "2.2.20",
      "resolved": "https://registry.npmjs.org/nwsapi/-/nwsapi-2.2.20.tgz",
      "integrity": "sha512-/ieB+mDe4MrrKMT8z+mQL8klXydZWGR5Dowt4RAGKbJ3kIGEx3X4ljUo+6V73IXtUPWgfOlU5B9MlGxFO5T+cA==",
      "license": "MIT"
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.entries": {
      "version": "1.1.9",
      "resolved": "https://registry.npmjs.org/object.entries/-/object.entries-1.1.9.tgz",
      "integrity": "sha512-8u/hfXFRBD1O0hPUjioLhoWFHRmt6tKA4/vZPyckBr18l1KE9uHrFaFaUi8MDRTpi4uak2goyPTSNJLXX2k2Hw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.fromentries": {
      "version": "2.0.8",
      "resolved": "https://registry.npmjs.org/object.fromentries/-/object.fromentries-2.0.8.tgz",
      "integrity": "sha512-k6E21FzySsSK5a21KRADBd/NGneRegFO5pLHfdQLpRDETUNJueLXs3WCzyQ3tFRDYgbq3KHGXfTbi2bs8WQ6rQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.getownpropertydescriptors": {
      "version": "2.1.8",
      "resolved": "https://registry.npmjs.org/object.getownpropertydescriptors/-/object.getownpropertydescriptors-2.1.8.tgz",
      "integrity": "sha512-qkHIGe4q0lSYMv0XI4SsBTJz3WaURhLvd0lKSgtVuOsJ2krg4SgMw3PIRQFMp07yi++UR3se2mkcLqsBNpBb/A==",
      "license": "MIT",
      "dependencies": {
        "array.prototype.reduce": "^1.0.6",
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2",
        "es-object-atoms": "^1.0.0",
        "gopd": "^1.0.1",
        "safe-array-concat": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.8"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object.groupby": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.3.tgz",
      "integrity": "sha512-+Lhy3TQTuzXI5hevh8sBGqbmurHbbIjAi0Z4S63nthVLmLxfbj4T54a4CfZrXIrt9iP4mVAPYMo/v99taj3wjQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.values": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/object.values/-/object.values-1.2.1.tgz",
      "integrity": "sha512-gXah6aZrcUxjWg2zR2MwouP2eHlCBzdV4pygudehaKXSGW4v2AsRQUK+lwwXhii6KFZcunEnmSUoYp5CXibxtA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/obuf": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/obuf/-/obuf-1.1.2.tgz",
      "integrity": "sha512-PX1wu0AmAdPqOL1mWhqmlOd8kOIZQwGZw6rh7uby9fTc5lhaOWFLX3I6R1hrF9k3zUY40e6igsLGkDXK92LJNg==",
      "license": "MIT"
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/open": {
      "version": "8.4.2",
      "resolved": "https://registry.npmjs.org/open/-/open-8.4.2.tgz",
      "integrity": "sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==",
      "license": "MIT",
      "dependencies": {
        "define-lazy-prop": "^2.0.0",
        "is-docker": "^2.1.1",
        "is-wsl": "^2.2.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/optionator": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.4.tgz",
      "integrity": "sha512-6IpQ7mKUxRcZNLIObR0hz7lxsapSSIYNZJwXPGeF0mTVqGKFIXj1DQcMoT22S3ROcLyY/rz0PWaWZ9ayWmad9g==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "^0.1.3",
        "fast-levenshtein": "^2.0.6",
        "levn": "^0.4.1",
        "prelude-ls": "^1.2.1",
        "type-check": "^0.4.0",
        "word-wrap": "^1.2.5"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-retry": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
      "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
      "license": "MIT",
      "dependencies": {
        "@types/retry": "0.12.0",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "license": "BlueOak-1.0.0"
    },
    "node_modules/param-case": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/param-case/-/param-case-3.0.4.tgz",
      "integrity": "sha512-RXlj7zCYokReqWpOPH9oYivUzLYZ5vAPIfEmCTNViosC78F8F0H9y7T7gG2M39ymgutxF5gcFEsyZQSph9Bp3A==",
      "license": "MIT",
      "dependencies": {
        "dot-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse5": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-6.0.1.tgz",
      "integrity": "sha512-Ofn/CTFzRGTTxwpNEs9PP93gXShHcTq255nzRYSKe8AkVpZY7e1fpmTfOyoIvjP5HG7Z2ZM7VS9PPhQGW2pOpw==",
      "license": "MIT"
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/pascal-case": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pascal-case/-/pascal-case-3.1.2.tgz",
      "integrity": "sha512-uWlGT3YSnK9x3BQJaOdcZwrnV6hPpd8jFH1/ucpiLRPh/2zCVJKS19E4GvYHvaCcACn3foXZ0cLB9Wrx1KGe5g==",
      "license": "MIT",
      "dependencies": {
        "no-case": "^3.0.4",
        "tslib": "^2.0.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "license": "ISC"
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/pkg-up/-/pkg-up-3.1.0.tgz",
      "integrity": "sha512-nDywThFk1i4BQK4twPQ6TA4RT8bDY96yeuCVBWL3ePARCiEKDRSrNGbFIgUJpLp+XeIR65v8ra7WuJOFUBtkMA==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pkg-up/node_modules/find-up": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
      "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/locate-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
      "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^3.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/p-locate": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
      "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pkg-up/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.5",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.5.tgz",
      "integrity": "sha512-d/jtm+rdNT8tpXuHY5MMtcbJFBkhXE6593XVR9UoGCH8jSFGci7jGvMGH5RYd5PBJW+00NZQt6gf7CbagJCrhg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postcss-attribute-case-insensitive": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-attribute-case-insensitive/-/postcss-attribute-case-insensitive-5.0.2.tgz",
      "integrity": "sha512-XIidXV8fDr0kKt28vqki84fRK8VW8eTuIa4PChv2MqKuT6C9UjmSKzen6KaWhWEoYvwxFCa7n/tC1SZ3tyq4SQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-browser-comments": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-browser-comments/-/postcss-browser-comments-4.0.0.tgz",
      "integrity": "sha512-X9X9/WN3KIvY9+hNERUqX9gncsgBA25XaeR+jshHz2j8+sYyHktHw1JdKuMjeLpGktXidqDhA7b/qm1mrBDmgg==",
      "license": "CC0-1.0",
      "engines": {
        "node": ">=8"
      },
      "peerDependencies": {
        "browserslist": ">=4",
        "postcss": ">=8"
      }
    },
    "node_modules/postcss-calc": {
      "version": "8.2.4",
      "resolved": "https://registry.npmjs.org/postcss-calc/-/postcss-calc-8.2.4.tgz",
      "integrity": "sha512-SmWMSJmB8MRnnULldx0lQIyhSNvuDl9HfrZkaqqE/WHAhToYsAvDq+yAsA/kIyINDszOp3Rh0GFoNuH5Ypsm3Q==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9",
        "postcss-value-parser": "^4.2.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.2"
      }
    },
    "node_modules/postcss-clamp": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/postcss-clamp/-/postcss-clamp-4.1.0.tgz",
      "integrity": "sha512-ry4b1Llo/9zz+PKC+030KUnPITTJAHeOwjfAyyB60eT0AorGLdzp52s31OsPRHRf8NchkgFoG2y6fCfn1IV1Ow==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": ">=7.6.0"
      },
      "peerDependencies": {
        "postcss": "^8.4.6"
      }
    },
    "node_modules/postcss-color-functional-notation": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/postcss-color-functional-notation/-/postcss-color-functional-notation-4.2.4.tgz",
      "integrity": "sha512-2yrTAUZUab9s6CpxkxC4rVgFEVaR6/2Pipvi6qcgvnYiVqZcbDHEoBDhrXzyb7Efh2CCfHQNtcqWcIruDTIUeg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-color-hex-alpha": {
      "version": "8.0.4",
      "resolved": "https://registry.npmjs.org/postcss-color-hex-alpha/-/postcss-color-hex-alpha-8.0.4.tgz",
      "integrity": "sha512-nLo2DCRC9eE4w2JmuKgVA3fGL3d01kGq752pVALF68qpGLmx2Qrk91QTKkdUqqp45T1K1XV8IhQpcu1hoAQflQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-color-rebeccapurple": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/postcss-color-rebeccapurple/-/postcss-color-rebeccapurple-7.1.1.tgz",
      "integrity": "sha512-pGxkuVEInwLHgkNxUc4sdg4g3py7zUeCQ9sMfwyHAT+Ezk8a4OaaVZ8lIY5+oNqA/BXXgLyXv0+5wHP68R79hg==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-colormin": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/postcss-colormin/-/postcss-colormin-5.3.1.tgz",
      "integrity": "sha512-UsWQG0AqTFQmpBegeLLc1+c3jIqBNB0zlDGRWR+dQ3pRKJL1oeMzyqmH3o2PIfn9MBdNrVPWhDbT769LxCTLJQ==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "colord": "^2.9.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-convert-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-convert-values/-/postcss-convert-values-5.1.3.tgz",
      "integrity": "sha512-82pC1xkJZtcJEfiLw6UXnXVXScgtBrjlO5CBmuDQc+dlb88ZYheFsjTn40+zBVi3DkfF7iezO0nJUPLcJK3pvA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-custom-media": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/postcss-custom-media/-/postcss-custom-media-8.0.2.tgz",
      "integrity": "sha512-7yi25vDAoHAkbhAzX9dHx2yc6ntS4jQvejrNcC+csQJAXjj15e7VcWfMgLqBNAbOvqi5uIa9huOVwdHbf+sKqg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-custom-properties": {
      "version": "12.1.11",
      "resolved": "https://registry.npmjs.org/postcss-custom-properties/-/postcss-custom-properties-12.1.11.tgz",
      "integrity": "sha512-0IDJYhgU8xDv1KY6+VgUwuQkVtmYzRwu+dMjnmdMafXYv86SWqfxkc7qdDvWS38vsjaEtv8e0vGOUQrAiMBLpQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-custom-selectors": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/postcss-custom-selectors/-/postcss-custom-selectors-6.0.3.tgz",
      "integrity": "sha512-fgVkmyiWDwmD3JbpCmB45SvvlCD6z9CG6Ie6Iere22W5aHea6oWa7EM2bpnv2Fj3I94L3VbtvX9KqwSi5aFzSg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.3"
      }
    },
    "node_modules/postcss-dir-pseudo-class": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/postcss-dir-pseudo-class/-/postcss-dir-pseudo-class-6.0.5.tgz",
      "integrity": "sha512-eqn4m70P031PF7ZQIvSgy9RSJ5uI2171O/OO/zcRNYpJbvaeKFUlar1aJ7rmgiQtbm0FSPsRewjpdS0Oew7MPA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-discard-comments": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-discard-comments/-/postcss-discard-comments-5.1.2.tgz",
      "integrity": "sha512-+L8208OVbHVF2UQf1iDmRcbdjJkuBF6IS29yBDSiWUIzpYaAhtNl6JYnYm12FnkeCwQqF5LeklOu6rAqgfBZqQ==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-duplicates": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-duplicates/-/postcss-discard-duplicates-5.1.0.tgz",
      "integrity": "sha512-zmX3IoSI2aoenxHV6C7plngHWWhUOV3sP1T8y2ifzxzbtnuhk1EdPwm0S1bIUNaJ2eNbWeGLEwzw8huPD67aQw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-empty": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-discard-empty/-/postcss-discard-empty-5.1.1.tgz",
      "integrity": "sha512-zPz4WljiSuLWsI0ir4Mcnr4qQQ5e1Ukc3i7UfE2XcrwKK2LIPIqE5jxMRxO6GbI3cv//ztXDsXwEWT3BHOGh3A==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-discard-overridden": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-discard-overridden/-/postcss-discard-overridden-5.1.0.tgz",
      "integrity": "sha512-21nOL7RqWR1kasIVdKs8HNqQJhFxLsyRfAnUDm4Fe4t4mCWL9OJiHvlHPjcd8zc5Myu89b/7wZDnOSjFgeWRtw==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-double-position-gradients": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/postcss-double-position-gradients/-/postcss-double-position-gradients-3.1.2.tgz",
      "integrity": "sha512-GX+FuE/uBR6eskOK+4vkXgT6pDkexLokPaz/AbJna9s5Kzp/yl488pKPjhy0obB475ovfT1Wv8ho7U/cHNaRgQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-env-function": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/postcss-env-function/-/postcss-env-function-4.0.6.tgz",
      "integrity": "sha512-kpA6FsLra+NqcFnL81TnsU+Z7orGtDTxcOhl6pwXeEq1yFPpRMkCDpHhrz8CFQDr/Wfm0jLiNQ1OsGGPjlqPwA==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-flexbugs-fixes": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/postcss-flexbugs-fixes/-/postcss-flexbugs-fixes-5.0.2.tgz",
      "integrity": "sha512-18f9voByak7bTktR2QgDveglpn9DTbBWPUzSOe9g0N4WR/2eSt6Vrcbf0hmspvMI6YWGywz6B9f7jzpFNJJgnQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.4"
      }
    },
    "node_modules/postcss-focus-visible": {
      "version": "6.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-visible/-/postcss-focus-visible-6.0.4.tgz",
      "integrity": "sha512-QcKuUU/dgNsstIK6HELFRT5Y3lbrMLEOwG+A4s5cA+fx3A3y/JTq3X9LaOj3OC3ALH0XqyrgQIgey/MIZ8Wczw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-focus-within": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-focus-within/-/postcss-focus-within-5.0.4.tgz",
      "integrity": "sha512-vvjDN++C0mu8jz4af5d52CB184ogg/sSxAFS+oUJQq2SuCe7T5U2iIsVJtsCp2d6R4j0jr5+q3rPkBVZkXD9fQ==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.9"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-font-variant": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-font-variant/-/postcss-font-variant-5.0.0.tgz",
      "integrity": "sha512-1fmkBaCALD72CK2a9i468mA/+tr9/1cBxRRMXOUaZqO43oWPR5imcyPjXwuv7PXbCid4ndlP5zWhidQVVa3hmA==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-gap-properties": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/postcss-gap-properties/-/postcss-gap-properties-3.0.5.tgz",
      "integrity": "sha512-IuE6gKSdoUNcvkGIqdtjtcMtZIFyXZhmFd5RUlg97iVEvp1BZKV5ngsAjCjrVy+14uhGBQl9tzmi1Qwq4kqVOg==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-image-set-function": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/postcss-image-set-function/-/postcss-image-set-function-4.0.7.tgz",
      "integrity": "sha512-9T2r9rsvYzm5ndsBE8WgtrMlIT7VbtTfE7b3BQnudUqnBcBo7L758oc+o+pdj/dUV0l5wjwSdjeOH2DZtfv8qw==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-import": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-15.1.0.tgz",
      "integrity": "sha512-hpr+J05B2FVYUAXHeK1YyI267J/dDDhMU6B6civm8hSY1jYJnBXxzKDKDswzJmtLHryrjhnDjqqp/49t8FALew==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.0.0",
        "read-cache": "^1.0.0",
        "resolve": "^1.1.7"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-initial": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-initial/-/postcss-initial-4.0.1.tgz",
      "integrity": "sha512-0ueD7rPqX8Pn1xJIjay0AZeIuDoF+V+VvMt/uOnn+4ezUKhZM/NokDeP6DwMNyIoYByuN/94IQnt5FEkaN59xQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.0"
      }
    },
    "node_modules/postcss-js": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/postcss-js/-/postcss-js-4.0.1.tgz",
      "integrity": "sha512-dDLF8pEO191hJMtlHFPRa8xsizHaM82MLfNkUHdUtVEV3tgTp5oj+8qbEqYM57SLfc74KSbw//4SeJma2LRVIw==",
      "license": "MIT",
      "dependencies": {
        "camelcase-css": "^2.0.1"
      },
      "engines": {
        "node": "^12 || ^14 || >= 16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      },
      "peerDependencies": {
        "postcss": "^8.4.21"
      }
    },
    "node_modules/postcss-lab-function": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/postcss-lab-function/-/postcss-lab-function-4.2.1.tgz",
      "integrity": "sha512-xuXll4isR03CrQsmxyz92LJB2xX9n+pZJ5jE9JgcnmsCammLyKdlzrBin+25dy6wIjfhJpKBAN80gsTlCgRk2w==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-progressive-custom-properties": "^1.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-load-config": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/postcss-load-config/-/postcss-load-config-4.0.2.tgz",
      "integrity": "sha512-bSVhyJGL00wMVoPUzAVAnbEoWyqRxkjv64tUl427SKnPrENtq6hJwUojroMz2VB+Q1edmi4IfrAPpami5VVgMQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "lilconfig": "^3.0.0",
        "yaml": "^2.3.4"
      },
      "engines": {
        "node": ">= 14"
      },
      "peerDependencies": {
        "postcss": ">=8.0.9",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "postcss": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/postcss-load-config/node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/postcss-load-config/node_modules/yaml": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
      "license": "ISC",
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14.6"
      }
    },
    "node_modules/postcss-loader": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-6.2.1.tgz",
      "integrity": "sha512-WbbYpmAaKcux/P66bZ40bpWsBucjx/TTgVVzRZ9yUO8yQfVBlameJ0ZGVaPfH64hNSBh63a+ICP5nqOpBA0w+Q==",
      "license": "MIT",
      "dependencies": {
        "cosmiconfig": "^7.0.0",
        "klona": "^2.0.5",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "postcss": "^7.0.0 || ^8.0.1",
        "webpack": "^5.0.0"
      }
    },
    "node_modules/postcss-logical": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/postcss-logical/-/postcss-logical-5.0.4.tgz",
      "integrity": "sha512-RHXxplCeLh9VjinvMrZONq7im4wjWGlRJAqmAVLXyZaXwfDWP73/oq4NdIp+OZwhQUMj0zjqDfM5Fj7qby+B4g==",
      "license": "CC0-1.0",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/postcss-media-minmax": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/postcss-media-minmax/-/postcss-media-minmax-5.0.0.tgz",
      "integrity": "sha512-yDUvFf9QdFZTuCUg0g0uNSHVlJ5X1lSzDZjPSFaiCWvjgsvu8vEVxtahPrLMinIDEEGnx6cBe6iqdx5YWz08wQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-merge-longhand": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/postcss-merge-longhand/-/postcss-merge-longhand-5.1.7.tgz",
      "integrity": "sha512-YCI9gZB+PLNskrK0BB3/2OzPnGhPkBEwmwhfYk1ilBHYVAZB7/tkTHFBAnCrvBBOmeYyMYw3DMjT55SyxMBzjQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "stylehacks": "^5.1.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-merge-rules": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-merge-rules/-/postcss-merge-rules-5.1.4.tgz",
      "integrity": "sha512-0R2IuYpgU93y9lhVbO/OylTtKMVcHb67zjWIfCiKR9rWL3GUk1677LAqD/BcHizukdZEjT8Ru3oHRoAYoJy44g==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0",
        "cssnano-utils": "^3.1.0",
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-font-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-minify-font-values/-/postcss-minify-font-values-5.1.0.tgz",
      "integrity": "sha512-el3mYTgx13ZAPPirSVsHqFzl+BBBDrXvbySvPGFnQcTI4iNslrPaFq4muTkLZmKlGk4gyFAYUBMH30+HurREyA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-gradients": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-gradients/-/postcss-minify-gradients-5.1.1.tgz",
      "integrity": "sha512-VGvXMTpCEo4qHTNSa9A0a3D+dxGFZCYwR6Jokk+/3oB6flu2/PnPXAh2x7x52EkY5xlIHLm+Le8tJxe/7TNhzw==",
      "license": "MIT",
      "dependencies": {
        "colord": "^2.9.1",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-params": {
      "version": "5.1.4",
      "resolved": "https://registry.npmjs.org/postcss-minify-params/-/postcss-minify-params-5.1.4.tgz",
      "integrity": "sha512-+mePA3MgdmVmv6g+30rn57USjOGSAyuxUmkfiWpzalZ8aiBkdPYjXWtHuwJGm1v5Ojy0Z0LaSYhHaLJQB0P8Jw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-minify-selectors": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/postcss-minify-selectors/-/postcss-minify-selectors-5.2.1.tgz",
      "integrity": "sha512-nPJu7OjZJTsVUmPdm2TcaiohIwxP+v8ha9NehQ2ye9szv4orirRU3SDdtUmKH+10nzn0bAyOXZ0UEr7OpvLehg==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-modules-extract-imports": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-extract-imports/-/postcss-modules-extract-imports-3.1.0.tgz",
      "integrity": "sha512-k3kNe0aNFQDAZGbin48pL2VNidTF0w4/eASDsxlyspobzU3wZQLOGj7L9gfRe0Jo9/4uud09DsjFNH7winGv8Q==",
      "license": "ISC",
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.2.0.tgz",
      "integrity": "sha512-5kcJm/zk+GJDSfw+V/42fJ5fhjL5YbFDl8nVdXkJPLLW+Vf9mTD5Xe0wqIaDnLuL2U6cDNpTr+UQ+v2HWIBhzw==",
      "license": "MIT",
      "dependencies": {
        "icss-utils": "^5.0.0",
        "postcss-selector-parser": "^7.0.0",
        "postcss-value-parser": "^4.1.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-local-by-default/node_modules/postcss-selector-parser": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz",
      "integrity": "sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-modules-scope": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.2.1.tgz",
      "integrity": "sha512-m9jZstCVaqGjTAuny8MdgE88scJnCiQSlSrOWcTQgM2t32UBe+MUmFSO5t7VMSfAf/FJKImAxBav8ooCHJXCJA==",
      "license": "ISC",
      "dependencies": {
        "postcss-selector-parser": "^7.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-modules-scope/node_modules/postcss-selector-parser": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-7.1.0.tgz",
      "integrity": "sha512-8sLjZwK0R+JlxlYcTuVnyT2v+htpdrjDOKuMcOVdYjt52Lh8hWRYpxBPoKx/Zg+bcjc3wx6fmQevMmUztS/ccA==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-modules-values": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-modules-values/-/postcss-modules-values-4.0.0.tgz",
      "integrity": "sha512-RDxHkAiEGI78gS2ofyvCsu7iycRv7oqw5xMWn9iMoR0N/7mf9D50ecQqUo5BZ9Zh2vH4bCUR/ktCqbB9m8vJjQ==",
      "license": "ISC",
      "dependencies": {
        "icss-utils": "^5.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >= 14"
      },
      "peerDependencies": {
        "postcss": "^8.1.0"
      }
    },
    "node_modules/postcss-nested": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nested/-/postcss-nested-6.2.0.tgz",
      "integrity": "sha512-HQbt28KulC5AJzG+cZtj9kvKB93CFCdLvog1WFLf1D+xmMvPGlBstkpTEZfK5+AN9hfJocyBFCNiqyS48bpgzQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.1.1"
      },
      "engines": {
        "node": ">=12.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.14"
      }
    },
    "node_modules/postcss-nesting": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/postcss-nesting/-/postcss-nesting-10.2.0.tgz",
      "integrity": "sha512-EwMkYchxiDiKUhlJGzWsD9b2zvq/r2SSubcRrgP+jujMXFzqvANLt16lJANC+5uZ6hjI7lpRmI6O8JIl+8l1KA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/selector-specificity": "^2.0.0",
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-normalize": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize/-/postcss-normalize-10.0.1.tgz",
      "integrity": "sha512-+5w18/rDev5mqERcG3W5GZNMJa1eoYYNGo8gB7tEwaos0ajk3ZXAI4mHGcNT47NE+ZnZD1pEpUOFLvltIwmeJA==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/normalize.css": "*",
        "postcss-browser-comments": "^4",
        "sanitize.css": "*"
      },
      "engines": {
        "node": ">= 12"
      },
      "peerDependencies": {
        "browserslist": ">= 4",
        "postcss": ">= 8"
      }
    },
    "node_modules/postcss-normalize-charset": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-charset/-/postcss-normalize-charset-5.1.0.tgz",
      "integrity": "sha512-mSgUJ+pd/ldRGVx26p2wz9dNZ7ji6Pn8VWBajMXFf8jk7vUoSrZ2lt/wZR7DtlZYKesmZI680qjr2CeFF2fbUg==",
      "license": "MIT",
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-display-values": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-display-values/-/postcss-normalize-display-values-5.1.0.tgz",
      "integrity": "sha512-WP4KIM4o2dazQXWmFaqMmcvsKmhdINFblgSeRgn8BJ6vxaMyaJkwAzpPpuvSIoG/rmX3M+IrRZEz2H0glrQNEA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-positions": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-positions/-/postcss-normalize-positions-5.1.1.tgz",
      "integrity": "sha512-6UpCb0G4eofTCQLFVuI3EVNZzBNPiIKcA1AKVka+31fTVySphr3VUgAIULBhxZkKgwLImhzMR2Bw1ORK+37INg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-repeat-style": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-repeat-style/-/postcss-normalize-repeat-style-5.1.1.tgz",
      "integrity": "sha512-mFpLspGWkQtBcWIRFLmewo8aC3ImN2i/J3v8YCFUwDnPu3Xz4rLohDO26lGjwNsQxB3YF0KKRwspGzE2JEuS0g==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-string": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-string/-/postcss-normalize-string-5.1.0.tgz",
      "integrity": "sha512-oYiIJOf4T9T1N4i+abeIc7Vgm/xPCGih4bZz5Nm0/ARVJ7K6xrDlLwvwqOydvyL3RHNf8qZk6vo3aatiw/go3w==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-timing-functions": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-timing-functions/-/postcss-normalize-timing-functions-5.1.0.tgz",
      "integrity": "sha512-DOEkzJ4SAXv5xkHl0Wa9cZLF3WCBhF3o1SKVxKQAa+0pYKlueTpCgvkFAHfk+Y64ezX9+nITGrDZeVGgITJXjg==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-unicode": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-unicode/-/postcss-normalize-unicode-5.1.1.tgz",
      "integrity": "sha512-qnCL5jzkNUmKVhZoENp1mJiGNPcsJCs1aaRmURmeJGES23Z/ajaln+EPTD+rBeNkSryI+2WTdW+lwcVdOikrpA==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-url": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-normalize-url/-/postcss-normalize-url-5.1.0.tgz",
      "integrity": "sha512-5upGeDO+PVthOxSmds43ZeMeZfKH+/DKgGRD7TElkkyS46JXAUhMzIKiCa7BabPeIy3AQcTkXwVVN7DbqsiCew==",
      "license": "MIT",
      "dependencies": {
        "normalize-url": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-normalize-whitespace": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-normalize-whitespace/-/postcss-normalize-whitespace-5.1.1.tgz",
      "integrity": "sha512-83ZJ4t3NUDETIHTa3uEg6asWjSBYL5EdkVB0sDncx9ERzOKBVJIUeDO9RyA9Zwtig8El1d79HBp0JEi8wvGQnA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-opacity-percentage": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/postcss-opacity-percentage/-/postcss-opacity-percentage-1.1.3.tgz",
      "integrity": "sha512-An6Ba4pHBiDtyVpSLymUUERMo2cU7s+Obz6BTrS+gxkbnSBNKSuD0AVUc+CpBMrpVPKKfoVz0WQCX+Tnst0i4A==",
      "funding": [
        {
          "type": "kofi",
          "url": "https://ko-fi.com/mrcgrtz"
        },
        {
          "type": "liberapay",
          "url": "https://liberapay.com/mrcgrtz"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-ordered-values": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/postcss-ordered-values/-/postcss-ordered-values-5.1.3.tgz",
      "integrity": "sha512-9UO79VUhPwEkzbb3RNpqqghc6lcYej1aveQteWY+4POIwlqkYE21HKWaLDF6lWNuqCobEAyTovVhtI32Rbv2RQ==",
      "license": "MIT",
      "dependencies": {
        "cssnano-utils": "^3.1.0",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-overflow-shorthand": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-overflow-shorthand/-/postcss-overflow-shorthand-3.0.4.tgz",
      "integrity": "sha512-otYl/ylHK8Y9bcBnPLo3foYFLL6a6Ak+3EQBPOTR7luMYCOsiVTUk1iLvNf6tVPNGXcoL9Hoz37kpfriRIFb4A==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-page-break": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/postcss-page-break/-/postcss-page-break-3.0.4.tgz",
      "integrity": "sha512-1JGu8oCjVXLa9q9rFTo4MbeeA5FMe00/9C7lN4va606Rdb+HkxXtXsmEDrIraQ11fGz/WvKWa8gMuCKkrXpTsQ==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8"
      }
    },
    "node_modules/postcss-place": {
      "version": "7.0.5",
      "resolved": "https://registry.npmjs.org/postcss-place/-/postcss-place-7.0.5.tgz",
      "integrity": "sha512-wR8igaZROA6Z4pv0d+bvVrvGY4GVHihBCBQieXFY3kuSuMyOmEnnfFzHl/tQuqHZkfkIVBEbDvYcFfHmpSet9g==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-preset-env": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/postcss-preset-env/-/postcss-preset-env-7.8.3.tgz",
      "integrity": "sha512-T1LgRm5uEVFSEF83vHZJV2z19lHg4yJuZ6gXZZkqVsqv63nlr6zabMH3l4Pc01FQCyfWVrh2GaUeCVy9Po+Aag==",
      "license": "CC0-1.0",
      "dependencies": {
        "@csstools/postcss-cascade-layers": "^1.1.1",
        "@csstools/postcss-color-function": "^1.1.1",
        "@csstools/postcss-font-format-keywords": "^1.0.1",
        "@csstools/postcss-hwb-function": "^1.0.2",
        "@csstools/postcss-ic-unit": "^1.0.1",
        "@csstools/postcss-is-pseudo-class": "^2.0.7",
        "@csstools/postcss-nested-calc": "^1.0.0",
        "@csstools/postcss-normalize-display-values": "^1.0.1",
        "@csstools/postcss-oklab-function": "^1.1.1",
        "@csstools/postcss-progressive-custom-properties": "^1.3.0",
        "@csstools/postcss-stepped-value-functions": "^1.0.1",
        "@csstools/postcss-text-decoration-shorthand": "^1.0.0",
        "@csstools/postcss-trigonometric-functions": "^1.0.2",
        "@csstools/postcss-unset-value": "^1.0.2",
        "autoprefixer": "^10.4.13",
        "browserslist": "^4.21.4",
        "css-blank-pseudo": "^3.0.3",
        "css-has-pseudo": "^3.0.4",
        "css-prefers-color-scheme": "^6.0.3",
        "cssdb": "^7.1.0",
        "postcss-attribute-case-insensitive": "^5.0.2",
        "postcss-clamp": "^4.1.0",
        "postcss-color-functional-notation": "^4.2.4",
        "postcss-color-hex-alpha": "^8.0.4",
        "postcss-color-rebeccapurple": "^7.1.1",
        "postcss-custom-media": "^8.0.2",
        "postcss-custom-properties": "^12.1.10",
        "postcss-custom-selectors": "^6.0.3",
        "postcss-dir-pseudo-class": "^6.0.5",
        "postcss-double-position-gradients": "^3.1.2",
        "postcss-env-function": "^4.0.6",
        "postcss-focus-visible": "^6.0.4",
        "postcss-focus-within": "^5.0.4",
        "postcss-font-variant": "^5.0.0",
        "postcss-gap-properties": "^3.0.5",
        "postcss-image-set-function": "^4.0.7",
        "postcss-initial": "^4.0.1",
        "postcss-lab-function": "^4.2.1",
        "postcss-logical": "^5.0.4",
        "postcss-media-minmax": "^5.0.0",
        "postcss-nesting": "^10.2.0",
        "postcss-opacity-percentage": "^1.1.2",
        "postcss-overflow-shorthand": "^3.0.4",
        "postcss-page-break": "^3.0.4",
        "postcss-place": "^7.0.5",
        "postcss-pseudo-class-any-link": "^7.1.6",
        "postcss-replace-overflow-wrap": "^4.0.0",
        "postcss-selector-not": "^6.0.1",
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-pseudo-class-any-link": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/postcss-pseudo-class-any-link/-/postcss-pseudo-class-any-link-7.1.6.tgz",
      "integrity": "sha512-9sCtZkO6f/5ML9WcTLcIyV1yz9D1rf0tWc+ulKcvV30s0iZKS/ONyETvoWsr6vnrmW+X+KmuK3gV/w5EWnT37w==",
      "license": "CC0-1.0",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-reduce-initial": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/postcss-reduce-initial/-/postcss-reduce-initial-5.1.2.tgz",
      "integrity": "sha512-dE/y2XRaqAi6OvjzD22pjTUQ8eOfc6m/natGHgKFBK9DxFmIm69YmaRVQrGgFlEfc1HePIurY0TmDeROK05rIg==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "caniuse-api": "^3.0.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-reduce-transforms": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-reduce-transforms/-/postcss-reduce-transforms-5.1.0.tgz",
      "integrity": "sha512-2fbdbmgir5AvpW9RLtdONx1QoYG2/EtqpNQbFASDlixBbAYuTcJ0dECwlqNqH7VbaUnEnh8SrxOe2sRIn24XyQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-replace-overflow-wrap": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/postcss-replace-overflow-wrap/-/postcss-replace-overflow-wrap-4.0.0.tgz",
      "integrity": "sha512-KmF7SBPphT4gPPcKZc7aDkweHiKEEO8cla/GjcBK+ckKxiZslIu3C4GCRW3DNfL0o7yW7kMQu9xlZ1kXRXLXtw==",
      "license": "MIT",
      "peerDependencies": {
        "postcss": "^8.0.3"
      }
    },
    "node_modules/postcss-selector-not": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/postcss-selector-not/-/postcss-selector-not-6.0.1.tgz",
      "integrity": "sha512-1i9affjAe9xu/y9uqWH+tD4r6/hDaXJruk8xn2x1vzxC2U3J3LKO3zJW4CyxlNhA56pADJ/djpEwpH1RClI2rQ==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.10"
      },
      "engines": {
        "node": "^12 || ^14 || >=16"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/csstools"
      },
      "peerDependencies": {
        "postcss": "^8.2"
      }
    },
    "node_modules/postcss-selector-parser": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.1.2.tgz",
      "integrity": "sha512-Q8qQfPiZ+THO/3ZrOrO0cJJKfpYCagtMUkXbnEfmgUjwXg6z/WBeOyS9APBBPCTSiDV+s4SwQGu8yFsiMRIudg==",
      "license": "MIT",
      "dependencies": {
        "cssesc": "^3.0.0",
        "util-deprecate": "^1.0.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/postcss-svgo": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/postcss-svgo/-/postcss-svgo-5.1.0.tgz",
      "integrity": "sha512-D75KsH1zm5ZrHyxPakAxJWtkyXew5qwS70v56exwvw542d9CRtTo78K0WeFxZB4G7JXKKMbEZtZayTGdIky/eA==",
      "license": "MIT",
      "dependencies": {
        "postcss-value-parser": "^4.2.0",
        "svgo": "^2.7.0"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-svgo/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/postcss-svgo/node_modules/css-tree": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-1.1.3.tgz",
      "integrity": "sha512-tRpdppF7TRazZrjJ6v3stzv93qxRcSsFmW6cX0Zm2NVKpxE1WV1HblnghVv9TreireHkqI/VDEsfolRF1p6y7Q==",
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.0.14",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/mdn-data": {
      "version": "2.0.14",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.14.tgz",
      "integrity": "sha512-dn6wd0uw5GsdswPFfsgMp5NSB0/aDe6fK94YJV/AJDYXL6HVLWBsxeq7js7Ad+mU2K9LAlwpk6kN2D5mwCPVow==",
      "license": "CC0-1.0"
    },
    "node_modules/postcss-svgo/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/postcss-svgo/node_modules/svgo": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-2.8.0.tgz",
      "integrity": "sha512-+N/Q9kV1+F+UeWYoSiULYo4xYSDQlTgb+ayMobAXPwMnLvop7oxKMo9OzIrX5x3eS4L4f2UHhc9axXwY8DpChg==",
      "license": "MIT",
      "dependencies": {
        "@trysound/sax": "0.2.0",
        "commander": "^7.2.0",
        "css-select": "^4.1.3",
        "css-tree": "^1.1.3",
        "csso": "^4.2.0",
        "picocolors": "^1.0.0",
        "stable": "^0.1.8"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/postcss-unique-selectors": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/postcss-unique-selectors/-/postcss-unique-selectors-5.1.1.tgz",
      "integrity": "sha512-5JiODlELrz8L2HwxfPnhOWZYWDxVHWL83ufOv84NrcgipI7TaeRsatAhK4Tr2/ZiYldpK/wBvw5BD3qfaK96GA==",
      "license": "MIT",
      "dependencies": {
        "postcss-selector-parser": "^6.0.5"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/postcss-value-parser": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
      "license": "MIT"
    },
    "node_modules/prelude-ls": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/pretty-bytes": {
      "version": "5.6.0",
      "resolved": "https://registry.npmjs.org/pretty-bytes/-/pretty-bytes-5.6.0.tgz",
      "integrity": "sha512-FFw039TmrBqFK8ma/7OL3sDz/VytdtJr044/QUJtH0wK9lb9jLq9tJyIxUwtQJHwar2BqtiA4iCWSwo9JLkzFg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pretty-error": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pretty-error/-/pretty-error-4.0.0.tgz",
      "integrity": "sha512-AoJ5YMAcXKYxKhuJGdcvse+Voc6v1RgnsR3nWcYU7q4t6z0Q6T86sv5Zq8VIRbOWWFpvdGE83LtdSMNd+6Y0xw==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.17.20",
        "renderkid": "^3.0.0"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/promise": {
      "version": "8.3.0",
      "resolved": "https://registry.npmjs.org/promise/-/promise-8.3.0.tgz",
      "integrity": "sha512-rZPNPKTOYVNEEKFaq1HqTgOwZD+4/YHS5ukLzQCypkj+OkYx7iv0mA91lJlpPPZ8vMau3IIGj5Qlwrx+8iiSmg==",
      "license": "MIT",
      "dependencies": {
        "asap": "~2.0.6"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/prop-types": {
      "version": "15.8.1",
      "resolved": "https://registry.npmjs.org/prop-types/-/prop-types-15.8.1.tgz",
      "integrity": "sha512-oj87CgZICdulUohogVAR7AjlC0327U4el4L6eAvOqCeudMDVU0NThNaV+b9Df4dXgSP1gXMTnPdhfe/2qDH5cg==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.4.0",
        "object-assign": "^4.1.1",
        "react-is": "^16.13.1"
      }
    },
    "node_modules/prop-types/node_modules/react-is": {
      "version": "16.13.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-16.13.1.tgz",
      "integrity": "sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-addr/node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/psl": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/lupomontero"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/q": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/q/-/q-1.5.1.tgz",
      "integrity": "sha512-kV/CThkXo6xyFEZUugw/+pIOywXcDbFYgSct5cT3gqlbkBE1SJdwy6UQoZvodiWF/ckQLZyDE/Bu1M6gVu5lVw==",
      "deprecated": "You or someone you depend on is using Q, the JavaScript Promise library that gave JavaScript developers strong feelings about promises. They can almost certainly migrate to the native JavaScript promise now. Thank you literally everyone for joining me in this bet against the odds. Be excellent to each other.\n\n(For a CapTP with native promises, see @endo/eventual-send and @endo/captp)",
      "license": "MIT",
      "engines": {
        "node": ">=0.6.0",
        "teleport": ">=0.2.0"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT"
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/raf": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/raf/-/raf-3.4.1.tgz",
      "integrity": "sha512-Sq4CW4QhwOHE8ucn6J34MqtZCeWFP2aQSmrlroYgqAV1PjStIhJXxYuTgUIfkEk7zTLjmIjLmU5q+fbD1NnOJA==",
      "license": "MIT",
      "dependencies": {
        "performance-now": "^2.1.0"
      }
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/raw-body/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react/-/react-18.3.1.tgz",
      "integrity": "sha512-wS+hAgJShR0KhEvPJArfuPVN1+Hz1t0Y6n5jLrGQbkb4urgPE/0Rve+1kMB1v/oWgHgm4WIcV+i7F2pTVj+2iQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-app-polyfill": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/react-app-polyfill/-/react-app-polyfill-3.0.0.tgz",
      "integrity": "sha512-sZ41cxiU5llIB003yxxQBYrARBqe0repqPTTYBTmMqTz9szeBbE37BehCE891NZsmdZqqP+xWKdT3eo3vOzN8w==",
      "license": "MIT",
      "dependencies": {
        "core-js": "^3.19.2",
        "object-assign": "^4.1.1",
        "promise": "^8.1.0",
        "raf": "^3.4.1",
        "regenerator-runtime": "^0.13.9",
        "whatwg-fetch": "^3.6.2"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils": {
      "version": "12.0.1",
      "resolved": "https://registry.npmjs.org/react-dev-utils/-/react-dev-utils-12.0.1.tgz",
      "integrity": "sha512-84Ivxmr17KjUupyqzFode6xKhjwuEJDROWKJy/BthkL7Wn6NJ8h4WE6k/exAv6ImS+0oZLRRW5j/aINMHyeGeQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.0",
        "address": "^1.1.2",
        "browserslist": "^4.18.1",
        "chalk": "^4.1.2",
        "cross-spawn": "^7.0.3",
        "detect-port-alt": "^1.1.6",
        "escape-string-regexp": "^4.0.0",
        "filesize": "^8.0.6",
        "find-up": "^5.0.0",
        "fork-ts-checker-webpack-plugin": "^6.5.0",
        "global-modules": "^2.0.0",
        "globby": "^11.0.4",
        "gzip-size": "^6.0.0",
        "immer": "^9.0.7",
        "is-root": "^2.1.0",
        "loader-utils": "^3.2.0",
        "open": "^8.4.0",
        "pkg-up": "^3.1.0",
        "prompts": "^2.4.2",
        "react-error-overlay": "^6.0.11",
        "recursive-readdir": "^2.2.2",
        "shell-quote": "^1.7.3",
        "strip-ansi": "^6.0.1",
        "text-table": "^0.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/react-dev-utils/node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/loader-utils": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-3.3.1.tgz",
      "integrity": "sha512-FMJTLMXfCLMLfJxcX9PFqX5qD88Z5MRGaZCVzfuqeZSPsyiBzs+pahDQjbIWz2QIzPZz0NX9Zy4FX3lmK6YHIg==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/react-dev-utils/node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dev-utils/node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react-dom": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.3.1.tgz",
      "integrity": "sha512-5m4nQKp+rZRb09LNH59GM4BxTh9251/ylbKIbpe7TpGxfJ+9kv6BLkLBXIjjspbgbnIBNqlI23tRnTWT0snUIw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.2"
      },
      "peerDependencies": {
        "react": "^18.3.1"
      }
    },
    "node_modules/react-error-overlay": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/react-error-overlay/-/react-error-overlay-6.1.0.tgz",
      "integrity": "sha512-SN/U6Ytxf1QGkw/9ve5Y+NxBbZM6Ht95tuXNMKs8EJyFa/Vy/+Co3stop3KBHARfn/giv+Lj1uUnTfOJ3moFEQ==",
      "license": "MIT"
    },
    "node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "license": "MIT"
    },
    "node_modules/react-refresh": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.11.0.tgz",
      "integrity": "sha512-F27qZr8uUqwhWZboondsPx8tnC3Ct3SxZA3V5WyEvujRyyNv0VYPhoBg1gZ8/MV5tubQp76Trw8lTv9hzRBa+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-router": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router/-/react-router-6.30.1.tgz",
      "integrity": "sha512-X1m21aEmxGXqENEPG3T6u0Th7g0aS4ZmoNynhbs+Cn+q+QGTLt+d5IQ2bHAXKzKcxGJjxACpVbnYQSCRcfxHlQ==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8"
      }
    },
    "node_modules/react-router-dom": {
      "version": "6.30.1",
      "resolved": "https://registry.npmjs.org/react-router-dom/-/react-router-dom-6.30.1.tgz",
      "integrity": "sha512-llKsgOkZdbPU1Eg3zK8lCn+sjD9wMRZZPuzmdWWX5SUs8OFkN5HnFVC0u5KMeMaC9aoancFI/KoLuKPqN+hxHw==",
      "license": "MIT",
      "dependencies": {
        "@remix-run/router": "1.23.0",
        "react-router": "6.30.1"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "peerDependencies": {
        "react": ">=16.8",
        "react-dom": ">=16.8"
      }
    },
    "node_modules/react-scripts": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/react-scripts/-/react-scripts-5.0.1.tgz",
      "integrity": "sha512-8VAmEm/ZAwQzJ+GOMLbBsTdDKOpuZh7RPs0UymvBR2vRk4iZWCskjbFnxqjrzoIvlNNRZ3QJFx6/qDSi6zSnaQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.16.0",
        "@pmmmwh/react-refresh-webpack-plugin": "^0.5.3",
        "@svgr/webpack": "^5.5.0",
        "babel-jest": "^27.4.2",
        "babel-loader": "^8.2.3",
        "babel-plugin-named-asset-import": "^0.3.8",
        "babel-preset-react-app": "^10.0.1",
        "bfj": "^7.0.2",
        "browserslist": "^4.18.1",
        "camelcase": "^6.2.1",
        "case-sensitive-paths-webpack-plugin": "^2.4.0",
        "css-loader": "^6.5.1",
        "css-minimizer-webpack-plugin": "^3.2.0",
        "dotenv": "^10.0.0",
        "dotenv-expand": "^5.1.0",
        "eslint": "^8.3.0",
        "eslint-config-react-app": "^7.0.1",
        "eslint-webpack-plugin": "^3.1.1",
        "file-loader": "^6.2.0",
        "fs-extra": "^10.0.0",
        "html-webpack-plugin": "^5.5.0",
        "identity-obj-proxy": "^3.0.0",
        "jest": "^27.4.3",
        "jest-resolve": "^27.4.2",
        "jest-watch-typeahead": "^1.0.0",
        "mini-css-extract-plugin": "^2.4.5",
        "postcss": "^8.4.4",
        "postcss-flexbugs-fixes": "^5.0.2",
        "postcss-loader": "^6.2.1",
        "postcss-normalize": "^10.0.1",
        "postcss-preset-env": "^7.0.1",
        "prompts": "^2.4.2",
        "react-app-polyfill": "^3.0.0",
        "react-dev-utils": "^12.0.1",
        "react-refresh": "^0.11.0",
        "resolve": "^1.20.0",
        "resolve-url-loader": "^4.0.0",
        "sass-loader": "^12.3.0",
        "semver": "^7.3.5",
        "source-map-loader": "^3.0.0",
        "style-loader": "^3.3.1",
        "tailwindcss": "^3.0.2",
        "terser-webpack-plugin": "^5.2.5",
        "webpack": "^5.64.4",
        "webpack-dev-server": "^4.6.0",
        "webpack-manifest-plugin": "^4.0.2",
        "workbox-webpack-plugin": "^6.4.1"
      },
      "bin": {
        "react-scripts": "bin/react-scripts.js"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      },
      "peerDependencies": {
        "react": ">= 16",
        "typescript": "^3.2.1 || ^4"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/read-cache": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/read-cache/-/read-cache-1.0.0.tgz",
      "integrity": "sha512-Owdv/Ft7IjOgm/i0xvNDZ1LrRANRfew4b2prF3OWMQLxLfu3bS8FVhCsrSCMK4lR56Y9ya+AThoTpDCTxCmpRA==",
      "license": "MIT",
      "dependencies": {
        "pify": "^2.3.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/recursive-readdir": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/recursive-readdir/-/recursive-readdir-2.2.3.tgz",
      "integrity": "sha512-8HrF5ZsXk5FAH9dgsx3BlUer73nIhuj+9OrQwEbLTPOBzGkL1lsFCR01am+v+0m2Cmbs1nP12hLDl5FA7EszKA==",
      "license": "MIT",
      "dependencies": {
        "minimatch": "^3.0.5"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regenerate": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
      "integrity": "sha512-zrceR/XhGYU/d/opr2EKO7aRHUeiBI8qjtfHqADTwZd6Szfy16la6kqD0MIUs5z5hx6AaKa+PixpPrR289+I0A==",
      "license": "MIT"
    },
    "node_modules/regenerate-unicode-properties": {
      "version": "10.2.0",
      "resolved": "https://registry.npmjs.org/regenerate-unicode-properties/-/regenerate-unicode-properties-10.2.0.tgz",
      "integrity": "sha512-DqHn3DwbmmPVzeKj9woBadqmXxLvQoQIwu7nopMc72ztvxVmVk2SBhSnx67zuye5TP+lJsb/TBQsjLKhnDf3MA==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regenerator-runtime": {
      "version": "0.13.11",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.11.tgz",
      "integrity": "sha512-kY1AZVr2Ra+t+piVaJ4gxaFaReZVH40AKNo7UCX6W+dEwBo/2oZJzqfuN1qLq1oL45o56cPaTXELwrTh8Fpggg==",
      "license": "MIT"
    },
    "node_modules/regex-parser": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/regex-parser/-/regex-parser-2.3.1.tgz",
      "integrity": "sha512-yXLRqatcCuKtVHsWrNg0JL3l1zGfdXeEvDa0bdu4tCDQw0RpMDZsqbkyRTUnKMR0tXF627V2oEWjBEaEdqTwtQ==",
      "license": "MIT"
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexpu-core": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/regexpu-core/-/regexpu-core-6.2.0.tgz",
      "integrity": "sha512-H66BPQMrv+V16t8xtmq+UC0CBpiTBA60V8ibS1QVReIp8T1z8hwFxqcGzm9K6lgsN7sB5edVH8a+ze6Fqm4weA==",
      "license": "MIT",
      "dependencies": {
        "regenerate": "^1.4.2",
        "regenerate-unicode-properties": "^10.2.0",
        "regjsgen": "^0.8.0",
        "regjsparser": "^0.12.0",
        "unicode-match-property-ecmascript": "^2.0.0",
        "unicode-match-property-value-ecmascript": "^2.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/regjsgen": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/regjsgen/-/regjsgen-0.8.0.tgz",
      "integrity": "sha512-RvwtGe3d7LvWiDQXeQw8p5asZUmfU1G/l6WbUXeHta7Y2PEIvBTwH6E2EfmYUK8pxcxEdEmaomqyp0vZZ7C+3Q==",
      "license": "MIT"
    },
    "node_modules/regjsparser": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/regjsparser/-/regjsparser-0.12.0.tgz",
      "integrity": "sha512-cnE+y8bz4NhMjISKbgeVJtqNbtf5QpjZP+Bslo+UqkIt9QPnX9q095eiRRASJG1/tz6dlNr6Z5NsBiWYokp6EQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "jsesc": "~3.0.2"
      },
      "bin": {
        "regjsparser": "bin/parser"
      }
    },
    "node_modules/regjsparser/node_modules/jsesc": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.0.2.tgz",
      "integrity": "sha512-xKqzzWXDttJuOcawBt4KnKHHIf5oQ/Cxax+0PWFG+DFDgHNAdi+TXECADI+RYiFUMmx8792xsMbbgXj4CwnP4g==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/relateurl": {
      "version": "0.2.7",
      "resolved": "https://registry.npmjs.org/relateurl/-/relateurl-0.2.7.tgz",
      "integrity": "sha512-G08Dxvm4iDN3MLM0EsP62EDV9IuhXPR6blNz6Utcp7zyV3tr4HVNINt6MpaRWbxoOHT3Q7YN2P+jaHX8vUbgog==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/renderkid": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/renderkid/-/renderkid-3.0.0.tgz",
      "integrity": "sha512-q/7VIQA8lmM1hF+jn+sFSPWGlMkSAeNYcPLmDQx2zzuiDfaLrOmumR8iaUKlenFgh0XRPIUeSPlH3A+AW3Z5pg==",
      "license": "MIT",
      "dependencies": {
        "css-select": "^4.1.3",
        "dom-converter": "^0.2.0",
        "htmlparser2": "^6.1.0",
        "lodash": "^4.17.21",
        "strip-ansi": "^6.0.1"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-url-loader": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-url-loader/-/resolve-url-loader-4.0.0.tgz",
      "integrity": "sha512-05VEMczVREcbtT7Bz+C+96eUO5HDNvdthIiMB34t7FcF8ehcu4wC0sSgPUubs3XW2Q3CNLJk/BJrCU9wVRymiA==",
      "license": "MIT",
      "dependencies": {
        "adjust-sourcemap-loader": "^4.0.0",
        "convert-source-map": "^1.7.0",
        "loader-utils": "^2.0.0",
        "postcss": "^7.0.35",
        "source-map": "0.6.1"
      },
      "engines": {
        "node": ">=8.9"
      },
      "peerDependencies": {
        "rework": "1.0.1",
        "rework-visit": "1.0.0"
      },
      "peerDependenciesMeta": {
        "rework": {
          "optional": true
        },
        "rework-visit": {
          "optional": true
        }
      }
    },
    "node_modules/resolve-url-loader/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/resolve-url-loader/node_modules/picocolors": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-0.2.1.tgz",
      "integrity": "sha512-cMlDqaLEqfSaW8Z7N5Jw+lyIW869EzT73/F5lhtY9cLGoVxSXznfgfXMO0Z5K0o0Q2TkTXq+0KFsdnSe3jDViA==",
      "license": "ISC"
    },
    "node_modules/resolve-url-loader/node_modules/postcss": {
      "version": "7.0.39",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-7.0.39.tgz",
      "integrity": "sha512-yioayjNbHn6z1/Bywyb2Y4s3yvDAeXGOyxqD+LnVOinq6Mdmd++SW2wUNVzavyyHxd6+DxzWGIuosg6P1Rj8uA==",
      "license": "MIT",
      "dependencies": {
        "picocolors": "^0.2.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/postcss/"
      }
    },
    "node_modules/resolve-url-loader/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve.exports": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-1.1.1.tgz",
      "integrity": "sha512-/NtpHNDN7jWhAaQ9BvBUYZ6YTXsRBgfqWFWP7BZBaoMJO/I3G5OFzvTuWNlZC3aPjins1F+TNrLKsGbH4rfsRQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "2.79.2",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.79.2.tgz",
      "integrity": "sha512-fS6iqSPZDs3dr/y7Od6y5nha8dW1YnbgtsyotCVvoFGKbERG++CVRFv1meyGDE1SNItQA8BrnCw7ScdAhRJ3XQ==",
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rollup-plugin-terser": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/rollup-plugin-terser/-/rollup-plugin-terser-7.0.2.tgz",
      "integrity": "sha512-w3iIaU4OxcF52UUXiZNsNeuXIMDvFrr+ZXK6bFZ0Q60qyVfq4uLptoS4bbq3paG3x216eQllFZX7zt6TIImguQ==",
      "deprecated": "This package has been deprecated and is no longer maintained. Please use @rollup/plugin-terser",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "jest-worker": "^26.2.1",
        "serialize-javascript": "^4.0.0",
        "terser": "^5.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.0.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/jest-worker": {
      "version": "26.6.2",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-26.6.2.tgz",
      "integrity": "sha512-KWYVV1c4i+jbMpaBC+U++4Va0cp8OisU185o73T1vo99hqi7w8tSJfUXYswwqqrjzwxa6KpRK54WhPvwf5w6PQ==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/rollup-plugin-terser/node_modules/serialize-javascript": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-4.0.0.tgz",
      "integrity": "sha512-GaNA54380uFefWghODBWEGisLZFj00nS5ACs6yHa9nLqlLpVLO8ChDGeKRjZnV4Nh4n0Qi7nhYZD/9fCPzEqkw==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/sanitize.css": {
      "version": "13.0.0",
      "resolved": "https://registry.npmjs.org/sanitize.css/-/sanitize.css-13.0.0.tgz",
      "integrity": "sha512-ZRwKbh/eQ6w9vmTjkuG0Ioi3HBwPFce0O+v//ve+aOq1oeCy7jMV2qzzAlpsNuqpqCBjjriM1lbtZbF/Q8jVyA==",
      "license": "CC0-1.0"
    },
    "node_modules/sass-loader": {
      "version": "12.6.0",
      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-12.6.0.tgz",
      "integrity": "sha512-oLTaH0YCtX4cfnJZxKSLAyglED0naiYfNG1iXfU5w1LNZ+ukoA5DtyDIN5zmKVZwYNJP4KRc5Y3hkWga+7tYfA==",
      "license": "MIT",
      "dependencies": {
        "klona": "^2.0.4",
        "neo-async": "^2.6.2"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "fibers": ">= 3.1.0",
        "node-sass": "^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0",
        "sass": "^1.3.0",
        "sass-embedded": "*",
        "webpack": "^5.0.0"
      },
      "peerDependenciesMeta": {
        "fibers": {
          "optional": true
        },
        "node-sass": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        }
      }
    },
    "node_modules/sax": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/sax/-/sax-1.2.4.tgz",
      "integrity": "sha512-NqVDv9TpANUjFm0N8uM5GxL36UgKi9/atZw+x7YFnQ8ckwFGKrl4xX4yWtrey3UJm5nP1kUbnYgLopqWNSRhWw==",
      "license": "ISC"
    },
    "node_modules/saxes": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-5.0.1.tgz",
      "integrity": "sha512-5LBh1Tls8c9xgGjw3QrMwETmTMVk0oFgvrFSvWx62llR2hcEInrKNZ2GZCCuuy2lvWrdl5jhbpeqc5hRYKFOcw==",
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/scheduler": {
      "version": "0.23.2",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.2.tgz",
      "integrity": "sha512-UOShsPwz7NrMUqhR6t0hWjFduvOzbtv7toDH1/hIrfRNIDBnnBWd0CwJTGvTpngVlmwGCdP9/Zl/tVrDqcuYzQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/schema-utils": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.2.tgz",
      "integrity": "sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==",
      "license": "MIT",
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/schema-utils/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/schema-utils/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/schema-utils/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/select-hose": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/select-hose/-/select-hose-2.0.0.tgz",
      "integrity": "sha512-mEugaLK+YfkijB4fx0e6kImuJdCIt2LxCRcbEYPqRGCs4F2ogyfZU5IAZRdjCP8JPq2AtdNoC/Dux63d9Kiryg==",
      "license": "MIT"
    },
    "node_modules/selfsigned": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/selfsigned/-/selfsigned-2.4.1.tgz",
      "integrity": "sha512-th5B4L2U+eGLq1TVh7zNRGBapioSORUeymIydxgFpwww9d2qyKvtuPU2jJuHvYAwwqi2Y596QBL3eEqcPEYL8Q==",
      "license": "MIT",
      "dependencies": {
        "@types/node-forge": "^1.3.0",
        "node-forge": "^1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/send/node_modules/debug/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve-index": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/serve-index/-/serve-index-1.9.1.tgz",
      "integrity": "sha512-pXHfKNP4qujrtteMrSBb0rc8HJ9Ms/GrXwcUtUtD5s4ewDJI8bT3Cz2zTVRMKtri49pLx2e0Ya8ziP5Ya2pZZw==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "batch": "0.6.1",
        "debug": "2.6.9",
        "escape-html": "~1.0.3",
        "http-errors": "~1.6.2",
        "mime-types": "~2.1.17",
        "parseurl": "~1.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/serve-index/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/serve-index/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/http-errors": {
      "version": "1.6.3",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.6.3.tgz",
      "integrity": "sha512-lks+lVC8dgGyh97jxvxeYTWQFvh4uw4yC12gVl63Cg30sjPX4wuGcdkICVXDAESr6OJGjqGA8Iz5mkeN6zlD7A==",
      "license": "MIT",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.0",
        "statuses": ">= 1.4.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-index/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/serve-index/node_modules/setprototypeof": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.0.tgz",
      "integrity": "sha512-BvE/TwpZX4FXExxOxZyRGQQv651MSwmWKZGqvmPcRIjDqWub67kTKuIMx43cZZrS/cBBzwBcNDWoFxt2XEFIpQ==",
      "license": "ISC"
    },
    "node_modules/serve-index/node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.8.3",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.3.tgz",
      "integrity": "sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/sockjs": {
      "version": "0.3.24",
      "resolved": "https://registry.npmjs.org/sockjs/-/sockjs-0.3.24.tgz",
      "integrity": "sha512-GJgLTZ7vYb/JtPSSZ10hsOYIvEYsjbNU+zPdIHcUaWVNUEPivzxku31865sSSud0Da0W4lEeOPlmw93zLQchuQ==",
      "license": "MIT",
      "dependencies": {
        "faye-websocket": "^0.11.3",
        "uuid": "^8.3.2",
        "websocket-driver": "^0.7.4"
      }
    },
    "node_modules/source-list-map": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/source-list-map/-/source-list-map-2.0.1.tgz",
      "integrity": "sha512-qnQ7gVMxGNxsiL4lEuJwe/To8UnK7fAnmbGEEH8RpLouuKbeEm0lhbQVFIrNSuB+G7tVrAlVsZgETT5nljf+Iw==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
      "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-loader": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/source-map-loader/-/source-map-loader-3.0.2.tgz",
      "integrity": "sha512-BokxPoLjyl3iOrgkWaakaxqnelAJSS+0V+De0kKIq6lyWrXuiPgYTGp6z3iHmqljKAaLXwZa+ctD8GccRJeVvg==",
      "license": "MIT",
      "dependencies": {
        "abab": "^2.0.5",
        "iconv-lite": "^0.6.3",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/source-map-support/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "deprecated": "Please use @jridgewell/sourcemap-codec instead",
      "license": "MIT"
    },
    "node_modules/spdy": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/spdy/-/spdy-4.0.2.tgz",
      "integrity": "sha512-r46gZQZQV+Kl9oItvl1JZZqJKGr+oEkB08A6BzkiR7593/7IbtuncXHd2YoYeTsG4157ZssMu9KYvUHLcjcDoA==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "handle-thing": "^2.0.0",
        "http-deceiver": "^1.2.7",
        "select-hose": "^2.0.0",
        "spdy-transport": "^3.0.0"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/spdy-transport": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/spdy-transport/-/spdy-transport-3.0.0.tgz",
      "integrity": "sha512-hsLVFE5SjA6TCisWeJXFKniGGOpBgMLmerfO2aCyCU5s7nJ/rpAepqmFifv/GCbSbueEeAJJnmSQ2rKC/g8Fcw==",
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.0",
        "detect-node": "^2.0.4",
        "hpack.js": "^2.1.6",
        "obuf": "^1.1.2",
        "readable-stream": "^3.0.6",
        "wbuf": "^1.7.3"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/stable": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/stable/-/stable-0.1.8.tgz",
      "integrity": "sha512-ji9qxRnOVfcuLDySj9qzhGSEFVobyt1kIOSkj1qZzYLzq7Tos/oUUWvotUPQLlrsidqsK6tBH89Bc9kL5zHA6w==",
      "deprecated": "Modern JS already guarantees Array#sort() is a stable sort, so this library is deprecated. See the compatibility table on MDN: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#browser_compatibility",
      "license": "MIT"
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/stackframe": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/stackframe/-/stackframe-1.3.4.tgz",
      "integrity": "sha512-oeVtt7eWQS+Na6F//S4kJ2K2VbRlS9D43mAlMyVpVWovy9o+jfgH8O9agzANzaiLjclA0oYzUXEM4PurhSUChw==",
      "license": "MIT"
    },
    "node_modules/static-eval": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/static-eval/-/static-eval-2.0.2.tgz",
      "integrity": "sha512-N/D219Hcr2bPjLxPiV+TQE++Tsmrady7TqAJugLy7Xk1EumfDWS/f5dtBbkRCGE7wKKXuYockQoj8Rm2/pVKyg==",
      "license": "MIT",
      "dependencies": {
        "escodegen": "^1.8.1"
      }
    },
    "node_modules/static-eval/node_modules/escodegen": {
      "version": "1.14.3",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.3.tgz",
      "integrity": "sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^4.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=4.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/static-eval/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/static-eval/node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "license": "MIT",
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/static-eval/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/static-eval/node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-natural-compare": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/string-natural-compare/-/string-natural-compare-3.0.1.tgz",
      "integrity": "sha512-n3sPwynL1nwKi3WJ6AIsClwBMa0zTi54fn2oLU6ndfTSIO05xaznjSf15PcBZU6FNWbmN5Q6cxT4V5hGvB4taw==",
      "license": "MIT"
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string-width/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/string.prototype.includes": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/string.prototype.includes/-/string.prototype.includes-2.0.1.tgz",
      "integrity": "sha512-o7+c9bW6zpAdJHTtujeePODAhkuicdAryFsfVKwA+wGw89wJ4GTY484WTucM9hLtDEOpOvI+aHnzqnC5lHp4Rg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.3"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string.prototype.matchall": {
      "version": "4.0.12",
      "resolved": "https://registry.npmjs.org/string.prototype.matchall/-/string.prototype.matchall-4.0.12.tgz",
      "integrity": "sha512-6CC9uyBL+/48dYizRf7H7VAYCMCNTBeM78x/VTUe9bFEaxBepPJDa1Ow99LqI/1yF7kuy7Q3cQsYMrcjGUcskA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.6",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "internal-slot": "^1.1.0",
        "regexp.prototype.flags": "^1.5.3",
        "set-function-name": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.repeat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/string.prototype.repeat/-/string.prototype.repeat-1.0.0.tgz",
      "integrity": "sha512-0u/TldDbKD8bFCQ/4f5+mNRrXwZ8hg2w7ZR8wa16e8z9XpePWl3eGEcUD0OXpEH/VJH/2G3gjUtR3ZOiBe2S/w==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.5"
      }
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/stringify-object": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/stringify-object/-/stringify-object-3.3.0.tgz",
      "integrity": "sha512-rHqiFh1elqCQ9WPLIC8I0Q/g/wj5J1eMkyoiD6eoQApWHP0FtlK7rqnhmabL5VUY9JQCcqwwvlOaSuutekgyrw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "get-own-enumerable-property-symbols": "^3.0.0",
        "is-obj": "^1.0.1",
        "is-regexp": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-comments/-/strip-comments-2.0.1.tgz",
      "integrity": "sha512-ZprKx+bBLXv067WTCALv8SSz5l2+XhpYCsVtSqlMnkAXMWDq+/ekVbl1ghqP9rUHTzv6sm/DwCOiYutU/yp1fw==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/style-loader": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/style-loader/-/style-loader-3.3.4.tgz",
      "integrity": "sha512-0WqXzrsMTyb8yjZJHDqwmnwRJvhALK9LfRtRc6B4UTWe8AijYLZYZ9thuJTZc2VfQWINADW/j+LiJnfy2RoC1w==",
      "license": "MIT",
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/stylehacks": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/stylehacks/-/stylehacks-5.1.1.tgz",
      "integrity": "sha512-sBpcd5Hx7G6seo7b1LkpttvTz7ikD0LlH5RmdcBNb6fFR0Fl7LQwHDFr300q4cwUqi+IYrFGmsIHieMBfnN/Bw==",
      "license": "MIT",
      "dependencies": {
        "browserslist": "^4.21.4",
        "postcss-selector-parser": "^6.0.4"
      },
      "engines": {
        "node": "^10 || ^12 || >=14.0"
      },
      "peerDependencies": {
        "postcss": "^8.2.15"
      }
    },
    "node_modules/sucrase": {
      "version": "3.35.0",
      "resolved": "https://registry.npmjs.org/sucrase/-/sucrase-3.35.0.tgz",
      "integrity": "sha512-8EbVDiu9iN/nESwxeSxDKe0dunta1GOlHufmSSXxMD2z2/tMZpDMpvXQGsc+ajGo8y2uYUmixaSRUc/QPoQ0GA==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.2",
        "commander": "^4.0.0",
        "glob": "^10.3.10",
        "lines-and-columns": "^1.1.6",
        "mz": "^2.7.0",
        "pirates": "^4.0.1",
        "ts-interface-checker": "^0.1.9"
      },
      "bin": {
        "sucrase": "bin/sucrase",
        "sucrase-node": "bin/sucrase-node"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/sucrase/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/sucrase/node_modules/commander": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
      "integrity": "sha512-NOKm8xhkzAjzFx8B2v5OAHT+u5pRQc2UCa2Vq9jYL/31o2wi9mxBA7LIFs3sV5VSC49z6pEhfbMULvShKj26WA==",
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/sucrase/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/sucrase/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-hyperlinks": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/supports-hyperlinks/-/supports-hyperlinks-2.3.0.tgz",
      "integrity": "sha512-RpsAZlpWcDwOPQA22aCH4J0t7L8JmAvsCxfOSEwm7cQs3LshN36QaTkwd70DnBOXDWGssw2eUoc8CaRWT0XunA==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0",
        "supports-color": "^7.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/svg-parser": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/svg-parser/-/svg-parser-2.0.4.tgz",
      "integrity": "sha512-e4hG1hRwoOdRb37cIMSgzNsxyzKfayW6VOflrwvR+/bzrkyxY/31WkbgnQpgtrNp1SdpJvpUAGTa/ZoiPNDuRQ==",
      "license": "MIT"
    },
    "node_modules/svgo": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/svgo/-/svgo-1.3.2.tgz",
      "integrity": "sha512-yhy/sQYxR5BkC98CY7o31VGsg014AKLEPxdfhora76l36hD9Rdy5NZA/Ocn6yayNPgSamYdtX2rFJdcv07AYVw==",
      "deprecated": "This SVGO version is no longer supported. Upgrade to v2.x.x.",
      "license": "MIT",
      "dependencies": {
        "chalk": "^2.4.1",
        "coa": "^2.0.2",
        "css-select": "^2.0.0",
        "css-select-base-adapter": "^0.1.1",
        "css-tree": "1.0.0-alpha.37",
        "csso": "^4.0.2",
        "js-yaml": "^3.13.1",
        "mkdirp": "~0.5.1",
        "object.values": "^1.1.0",
        "sax": "~1.2.4",
        "stable": "^0.1.8",
        "unquote": "~1.1.1",
        "util.promisify": "~1.0.0"
      },
      "bin": {
        "svgo": "bin/svgo"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/svgo/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/svgo/node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
      "license": "MIT"
    },
    "node_modules/svgo/node_modules/css-select": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-2.1.0.tgz",
      "integrity": "sha512-Dqk7LQKpwLoH3VovzZnkzegqNSuAziQyNZUcrdDM401iY+R5NkGBXGmtO05/yaXQziALuPogeG0b7UAgjnTJTQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^3.2.1",
        "domutils": "^1.7.0",
        "nth-check": "^1.0.2"
      }
    },
    "node_modules/svgo/node_modules/css-what": {
      "version": "3.4.2",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-3.4.2.tgz",
      "integrity": "sha512-ACUm3L0/jiZTqfzRM3Hi9Q8eZqd6IK37mMWPLz9PJxkLWllYeRf+EHUSHYEtFop2Eqytaq1FizFVh7XfBnXCDQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/svgo/node_modules/dom-serializer": {
      "version": "0.2.2",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-0.2.2.tgz",
      "integrity": "sha512-2/xPb3ORsQ42nHYiSunXkDjPLBaEj/xTwUO4B7XCZQTRk7EBtTOPaygh10YAAh2OI1Qrp6NWfpAhzswj0ydt9g==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.0.1",
        "entities": "^2.0.0"
      }
    },
    "node_modules/svgo/node_modules/domutils": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-1.7.0.tgz",
      "integrity": "sha512-Lgd2XcJ/NjEw+7tFvfKxOzCYKZsdct5lczQ2ZaQY8Djz7pfAD3Gbp8ySJWtreII/vDlMVmxwa6pHmdxIYgttDg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "0",
        "domelementtype": "1"
      }
    },
    "node_modules/svgo/node_modules/domutils/node_modules/domelementtype": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-1.3.1.tgz",
      "integrity": "sha512-BSKB+TSpMpFI/HOxCNr1O8aMOTZ8hT3pM3GQ0w/mWRmkhEDSFJkkyzz4XQsBV44BChwGkrDfMyjVD0eA2aFV3w==",
      "license": "BSD-2-Clause"
    },
    "node_modules/svgo/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/svgo/node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/svgo/node_modules/nth-check": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-1.0.2.tgz",
      "integrity": "sha512-WeBOdju8SnzPN5vTUJYxYUxLeXpCaVP5i5e0LF8fg7WORF2Wd7wFX/pk0tYZk7s8T+J7VLy0Da6J1+wCT0AtHg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "~1.0.0"
      }
    },
    "node_modules/svgo/node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
      "license": "MIT"
    },
    "node_modules/tailwindcss": {
      "version": "3.4.17",
      "resolved": "https://registry.npmjs.org/tailwindcss/-/tailwindcss-3.4.17.tgz",
      "integrity": "sha512-w33E2aCvSDP0tW9RZuNXadXlkHXqFzSkQew/aIa2i/Sj8fThxwovwlXHSPXTbAHwEIhBFXAedUhP2tueAKP8Og==",
      "license": "MIT",
      "dependencies": {
        "@alloc/quick-lru": "^5.2.0",
        "arg": "^5.0.2",
        "chokidar": "^3.6.0",
        "didyoumean": "^1.2.2",
        "dlv": "^1.1.3",
        "fast-glob": "^3.3.2",
        "glob-parent": "^6.0.2",
        "is-glob": "^4.0.3",
        "jiti": "^1.21.6",
        "lilconfig": "^3.1.3",
        "micromatch": "^4.0.8",
        "normalize-path": "^3.0.0",
        "object-hash": "^3.0.0",
        "picocolors": "^1.1.1",
        "postcss": "^8.4.47",
        "postcss-import": "^15.1.0",
        "postcss-js": "^4.0.1",
        "postcss-load-config": "^4.0.2",
        "postcss-nested": "^6.2.0",
        "postcss-selector-parser": "^6.1.2",
        "resolve": "^1.22.8",
        "sucrase": "^3.35.0"
      },
      "bin": {
        "tailwind": "lib/cli.js",
        "tailwindcss": "lib/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tailwindcss/node_modules/lilconfig": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/lilconfig/-/lilconfig-3.1.3.tgz",
      "integrity": "sha512-/vlFKAoH5Cgt3Ie+JLhRbwOsCQePABiU3tJ1egGvyQ+33R/vcwM2Zl2QR/LzjsBeItPt3oSVXapn+m4nQDvpzw==",
      "license": "MIT",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/antonk52"
      }
    },
    "node_modules/tapable": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tempy": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tempy/-/tempy-0.6.0.tgz",
      "integrity": "sha512-G13vtMYPT/J8A4X2SjdtBTphZlrp1gKv6hZiOjw14RCWg6GbHuQBGtjlx75xLbYV/wEc0D7G5K4rxKP/cXk8Bw==",
      "license": "MIT",
      "dependencies": {
        "is-stream": "^2.0.0",
        "temp-dir": "^2.0.0",
        "type-fest": "^0.16.0",
        "unique-string": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/tempy/node_modules/type-fest": {
      "version": "0.16.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.16.0.tgz",
      "integrity": "sha512-eaBzG6MxNzEn9kiwvtre90cXaNLkmadMWa1zQMs3XORCXNbsH/OewwbxC5ia9dCxIxnTAsSxXJaa/p5y8DlvJg==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terminal-link": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/terminal-link/-/terminal-link-2.1.1.tgz",
      "integrity": "sha512-un0FmiRUQNr5PJqy9kP7c40F5BOfpGlYTrxonDChEZB7pzZxRNp/bt+ymiy9/npwXya9KH99nJ/GXFIiUkYGFQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^4.2.1",
        "supports-hyperlinks": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/terser": {
      "version": "5.42.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.42.0.tgz",
      "integrity": "sha512-UYCvU9YQW2f/Vwl+P0GfhxJxbUGLwd+5QrrGgLajzWAtC/23AX0vcise32kkP7Eu0Wu9VlzzHAXkLObgjQfFlQ==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.14.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.14",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "jest-worker": "^27.4.5",
        "schema-utils": "^4.3.0",
        "serialize-javascript": "^6.0.2",
        "terser": "^5.31.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/terser/node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT"
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
      "license": "MIT"
    },
    "node_modules/thenify": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.1.tgz",
      "integrity": "sha512-RVZSIV5IG10Hk3enotrhvz0T9em6cyHBLkH/YAZuKqd8hRkKhSfCGIcP2KUY0EPxndzANBmNllzWPwak+bheSw==",
      "license": "MIT",
      "dependencies": {
        "any-promise": "^1.0.0"
      }
    },
    "node_modules/thenify-all": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/thenify-all/-/thenify-all-1.6.0.tgz",
      "integrity": "sha512-RNxQH/qI8/t3thXJDwcstUO4zeqo64+Uy/+sNVRBx4Xn2OX+OZ9oP+iJnNFqplFra2ZUVeKCSa2oVWi3T4uVmA==",
      "license": "MIT",
      "dependencies": {
        "thenify": ">= 3.1.0 < 4"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/throat": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/throat/-/throat-6.0.2.tgz",
      "integrity": "sha512-WKexMoJj3vEuK0yFEapj8y64V0A6xcuPuK9Gt1d0R+dzCSJc0lHqQytAbSB4cDAK0dWh4T0E2ETkoLE2WZ41OQ==",
      "license": "MIT"
    },
    "node_modules/thunky": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/thunky/-/thunky-1.1.0.tgz",
      "integrity": "sha512-eHY7nBftgThBqOyHGVN+l8gF0BucP09fMo0oO/Lb0w1OF80dJv+lDVpXG60WMQvkcxAkNybKsrEIE3ZtKGmPrA==",
      "license": "MIT"
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tough-cookie/node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/tr46": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-2.1.0.tgz",
      "integrity": "sha512-15Ih7phfcdP5YxqiB+iDtLoaTz4Nd35+IiAv0kQ5FNKHzXgdWqPoTIqEDDJmXceQt4JZk6lVPT8lnDlPpGDppw==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tryer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tryer/-/tryer-1.0.1.tgz",
      "integrity": "sha512-c3zayb8/kWWpycWYg87P71E1S1ZL6b6IJxfb5fvsUgsf0S2MVGaDhDXXjDMpdCpfWXqptc+4mXwmiy1ypXqRAA==",
      "license": "MIT"
    },
    "node_modules/ts-interface-checker": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/ts-interface-checker/-/ts-interface-checker-0.1.13.tgz",
      "integrity": "sha512-Y/arvbn+rrz3JCKl9C4kVNfTfSm2/mEp5FSz5EsZSANGPSlQrpRI5M4PKF+mJnE52jOO90PnPSc3Ur3bTQw0gA==",
      "license": "Apache-2.0"
    },
    "node_modules/tsconfig-paths": {
      "version": "3.15.0",
      "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
      "integrity": "sha512-2Ac2RgzDe/cn48GvOe3M+o82pEFewD3UPbyoUHHdKasHwJKjds4fLXWf/Ux5kATBKN20oaFGu+jbElp1pos0mg==",
      "license": "MIT",
      "dependencies": {
        "@types/json5": "^0.0.29",
        "json5": "^1.0.2",
        "minimist": "^1.2.6",
        "strip-bom": "^3.0.0"
      }
    },
    "node_modules/tsconfig-paths/node_modules/json5": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/json5/-/json5-1.0.2.tgz",
      "integrity": "sha512-g1MWMLBiz8FKi1e4w0UyVL3w+iJceWAFBAaBnnGKOpNa5f8TLktkbre1+s6oICydWAm+HRUGTmI+//xv2hvXYA==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.0"
      },
      "bin": {
        "json5": "lib/cli.js"
      }
    },
    "node_modules/tsconfig-paths/node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tsutils": {
      "version": "3.21.0",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^1.8.1"
      },
      "engines": {
        "node": ">= 6"
      },
      "peerDependencies": {
        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
      }
    },
    "node_modules/tsutils/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "license": "0BSD"
    },
    "node_modules/type-check": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
      "license": "MIT",
      "dependencies": {
        "prelude-ls": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typedarray-to-buffer": {
      "version": "3.1.5",
      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
      "license": "MIT",
      "dependencies": {
        "is-typedarray": "^1.0.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "license": "Apache-2.0",
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/underscore": {
      "version": "1.12.1",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.12.1.tgz",
      "integrity": "sha512-hEQt0+ZLDVUMhebKxL4x1BTtDY7bavVofhZ9KZ4aI26X9SRaE+Y3m83XUL1UP2jn8ynjndwCCpEHdUG+9pP1Tw==",
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
      "license": "MIT"
    },
    "node_modules/unicode-canonical-property-names-ecmascript": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unicode-canonical-property-names-ecmascript/-/unicode-canonical-property-names-ecmascript-2.0.1.tgz",
      "integrity": "sha512-dA8WbNeb2a6oQzAQ55YlT5vQAWGV9WXOsi3SskE3bcCdM0P4SDd+24zS/OCacdRq5BkdsRj9q3Pg6YyQoxIGqg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-ecmascript": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-ecmascript/-/unicode-match-property-ecmascript-2.0.0.tgz",
      "integrity": "sha512-5kaZCrbp5mmbz5ulBkDkbY0SsPOjKqVS35VpL9ulMPfSl0J0Xsm+9Evphv9CoIZFwre7aJoa94AY6seMKGVN5Q==",
      "license": "MIT",
      "dependencies": {
        "unicode-canonical-property-names-ecmascript": "^2.0.0",
        "unicode-property-aliases-ecmascript": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-match-property-value-ecmascript": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/unicode-match-property-value-ecmascript/-/unicode-match-property-value-ecmascript-2.2.0.tgz",
      "integrity": "sha512-4IehN3V/+kkr5YeSSDDQG8QLqO26XpL2XP3GQtqwlT/QYSECAwFztxVHjlbh0+gjJ3XmNLS0zDsbgs9jWKExLg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unicode-property-aliases-ecmascript": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/unicode-property-aliases-ecmascript/-/unicode-property-aliases-ecmascript-2.1.0.tgz",
      "integrity": "sha512-6t3foTQI9qne+OZoVQB/8x8rk2k1eVy1gRXhV3oFQ5T6R1dqQ1xtin3XqSlx3+ATBkliTaR/hHyJBm+LVPNM8w==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/unique-string": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/unique-string/-/unique-string-2.0.0.tgz",
      "integrity": "sha512-uNaeirEPvpZWSgzwsPGtU2zVSTrn/8L5q/IexZmH0eH6SA73CmAA5U4GwORTxQAZs95TAXLNqeLoPPNO5gZfWg==",
      "license": "MIT",
      "dependencies": {
        "crypto-random-string": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/unquote": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/unquote/-/unquote-1.1.1.tgz",
      "integrity": "sha512-vRCqFv6UhXpWxZPyGDh/F3ZpNv8/qo7w6iufLpQg9aKnQ71qM4B5KiI7Mia9COcjEhrO9LueHpMYjYzsWH3OIg==",
      "license": "MIT"
    },
    "node_modules/upath": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/upath/-/upath-1.2.0.tgz",
      "integrity": "sha512-aZwGpamFO61g3OlfT7OQCHqhGnW43ieH9WZeP7QxN/G/jS4jfqUkZxoryvJgVPEcrl5NL/ggHsSmLMHuH64Lhg==",
      "license": "MIT",
      "engines": {
        "node": ">=4",
        "yarn": "*"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/util.promisify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/util.promisify/-/util.promisify-1.0.1.tgz",
      "integrity": "sha512-g9JpC/3He3bm38zsLupWryXHoEcS22YHthuPQSJdMy6KNrzIRzWqcsHzD/WUnqe45whVou4VIsPew37DoXWNrA==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.1.3",
        "es-abstract": "^1.17.2",
        "has-symbols": "^1.0.1",
        "object.getownpropertydescriptors": "^2.1.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/utila": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/utila/-/utila-0.4.0.tgz",
      "integrity": "sha512-Z0DbgELS9/L/75wZbro8xAnT50pBVFQZ+hUEueGDU5FN51YSCYM+jdxsfCiHjwNP/4LCDD0i/graKpeBnOXKRA==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-8.1.1.tgz",
      "integrity": "sha512-FGtKtv3xIpR6BYhvgH8MI/y78oT7d8Au3ww4QIxymrCtZEh5b8gCw2siywE+puhEmuWKDtmfrvF5UlB298ut3w==",
      "license": "ISC",
      "dependencies": {
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^1.6.0",
        "source-map": "^0.7.3"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/v8-to-istanbul/node_modules/convert-source-map": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
      "license": "MIT"
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/w3c-hr-time": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/w3c-hr-time/-/w3c-hr-time-1.0.2.tgz",
      "integrity": "sha512-z8P5DvDNjKDoFIHK7q8r8lackT6l+jo/Ye3HOle7l9nICP9lf1Ci25fy9vHd0JOWewkIFzXIEig3TdKT7JQ5fQ==",
      "deprecated": "Use your platform's native performance.now() and performance.timeOrigin.",
      "license": "MIT",
      "dependencies": {
        "browser-process-hrtime": "^1.0.0"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-2.0.0.tgz",
      "integrity": "sha512-4tzD0mF8iSiMiNs30BiLO3EpfGLZUT2MSX/G+o7ZywDzliWQ3OPtTZ0PTC3B3ca1UAf4cJMHB+2Bf56EriJuRA==",
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.4.tgz",
      "integrity": "sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==",
      "license": "MIT",
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/wbuf": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/wbuf/-/wbuf-1.7.3.tgz",
      "integrity": "sha512-O84QOnr0icsbFGLS0O3bI5FswxzRr8/gHwWkDlQFskhSPryQXvrTMxjxGP4+iWYoauLoBvfDpkrOauZ+0iZpDA==",
      "license": "MIT",
      "dependencies": {
        "minimalistic-assert": "^1.0.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-6.1.0.tgz",
      "integrity": "sha512-qBIvFLGiBpLjfwmYAaHPXsn+ho5xZnGvyGvsarywGNc8VyQJUMHJ8OBKGGrPER0okBeMDaan4mNBlgBROxuI8w==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=10.4"
      }
    },
    "node_modules/webpack": {
      "version": "5.99.9",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.99.9.tgz",
      "integrity": "sha512-brOPwM3JnmOa+7kd3NsmOUOwbDAj8FT9xDsG3IW0MgbN9yZV7Oi/s/+MNQ/EcSMqw7qfoRyXPoeEWT8zLVdVGg==",
      "license": "MIT",
      "dependencies": {
        "@types/eslint-scope": "^3.7.7",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "@webassemblyjs/ast": "^1.14.1",
        "@webassemblyjs/wasm-edit": "^1.14.1",
        "@webassemblyjs/wasm-parser": "^1.14.1",
        "acorn": "^8.14.0",
        "browserslist": "^4.24.0",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.1",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^4.3.2",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.3.11",
        "watchpack": "^2.4.1",
        "webpack-sources": "^3.2.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-middleware": {
      "version": "5.3.4",
      "resolved": "https://registry.npmjs.org/webpack-dev-middleware/-/webpack-dev-middleware-5.3.4.tgz",
      "integrity": "sha512-BVdTqhhs+0IfoeAf7EoH5WE+exCmqGerHfDM0IL096Px60Tq2Mn9MAbnaGUe6HiMa41KMCYF19gyzZmBcq/o4Q==",
      "license": "MIT",
      "dependencies": {
        "colorette": "^2.0.10",
        "memfs": "^3.4.3",
        "mime-types": "^2.1.31",
        "range-parser": "^1.2.1",
        "schema-utils": "^4.0.0"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.0.0 || ^5.0.0"
      }
    },
    "node_modules/webpack-dev-server": {
      "version": "4.15.2",
      "resolved": "https://registry.npmjs.org/webpack-dev-server/-/webpack-dev-server-4.15.2.tgz",
      "integrity": "sha512-0XavAZbNJ5sDrCbkpWL8mia0o5WPOd2YGtxrEiZkBK9FjLppIUK2TgxK6qGD2P3hUXTJNNPVibrerKcx5WkR1g==",
      "license": "MIT",
      "dependencies": {
        "@types/bonjour": "^3.5.9",
        "@types/connect-history-api-fallback": "^1.3.5",
        "@types/express": "^4.17.13",
        "@types/serve-index": "^1.9.1",
        "@types/serve-static": "^1.13.10",
        "@types/sockjs": "^0.3.33",
        "@types/ws": "^8.5.5",
        "ansi-html-community": "^0.0.8",
        "bonjour-service": "^1.0.11",
        "chokidar": "^3.5.3",
        "colorette": "^2.0.10",
        "compression": "^1.7.4",
        "connect-history-api-fallback": "^2.0.0",
        "default-gateway": "^6.0.3",
        "express": "^4.17.3",
        "graceful-fs": "^4.2.6",
        "html-entities": "^2.3.2",
        "http-proxy-middleware": "^2.0.3",
        "ipaddr.js": "^2.0.1",
        "launch-editor": "^2.6.0",
        "open": "^8.0.9",
        "p-retry": "^4.5.0",
        "rimraf": "^3.0.2",
        "schema-utils": "^4.0.0",
        "selfsigned": "^2.1.1",
        "serve-index": "^1.9.1",
        "sockjs": "^0.3.24",
        "spdy": "^4.0.2",
        "webpack-dev-middleware": "^5.3.4",
        "ws": "^8.13.0"
      },
      "bin": {
        "webpack-dev-server": "bin/webpack-dev-server.js"
      },
      "engines": {
        "node": ">= 12.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^4.37.0 || ^5.0.0"
      },
      "peerDependenciesMeta": {
        "webpack": {
          "optional": true
        },
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-dev-server/node_modules/ws": {
      "version": "8.18.2",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.2.tgz",
      "integrity": "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-manifest-plugin": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/webpack-manifest-plugin/-/webpack-manifest-plugin-4.1.1.tgz",
      "integrity": "sha512-YXUAwxtfKIJIKkhg03MKuiFAD72PlrqCiwdwO4VEXdRO5V0ORCNwaOwAZawPZalCbmH9kBDmXnNeQOw+BIEiow==",
      "license": "MIT",
      "dependencies": {
        "tapable": "^2.0.0",
        "webpack-sources": "^2.2.0"
      },
      "engines": {
        "node": ">=12.22.0"
      },
      "peerDependencies": {
        "webpack": "^4.44.2 || ^5.47.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/webpack-manifest-plugin/node_modules/webpack-sources": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-2.3.1.tgz",
      "integrity": "sha512-y9EI9AO42JjEcrTJFOYmVywVZdKVUfOvDUPsJea5GIr1JOEGFVqwlY2K098fFoIjOkDzHn2AjRvM8dsBZu+gCA==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.1",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.3.2.tgz",
      "integrity": "sha512-ykKKus8lqlgXX/1WjudpIEjqsafjOTcOJqxnAbMLAu/KCsDCJ6GBtvscewvTkrn24HsnvFwrSCbenFrhtcCsAA==",
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/webpack/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-encoding": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-1.0.5.tgz",
      "integrity": "sha512-b5lim54JOPN9HtzvK9HFXvBma/rnfFeqsic0hSpjtDbVxR3dJKLc+KB4V6GgiGOvl7CY/KNh8rxSo9DKQrnUEw==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.4.24"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-fetch": {
      "version": "3.6.20",
      "resolved": "https://registry.npmjs.org/whatwg-fetch/-/whatwg-fetch-3.6.20.tgz",
      "integrity": "sha512-EqhiFU6daOA8kpjOWTL0olhVOF3i7OrFzSYiGsEMB8GcXS+RrzauAERX65xMeNWVqxA6HXH2m69Z9LaKKdisfg==",
      "license": "MIT"
    },
    "node_modules/whatwg-mimetype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-2.3.0.tgz",
      "integrity": "sha512-M4yMwr6mAnQz76TbJm914+gPpB/nCwvZbJU28cUD6dR004SAxDLOOSUaB1JDRqLtaOV/vi0IC5lEAGFgrjGv/g==",
      "license": "MIT"
    },
    "node_modules/whatwg-url": {
      "version": "8.7.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-8.7.0.tgz",
      "integrity": "sha512-gAojqb/m9Q8a5IV96E3fHJM70AzCkgt4uXYX2O7EmuyOnLrViCQlsEBmF9UQIu3/aeAIp2U17rtbpZWNntQqdg==",
      "license": "MIT",
      "dependencies": {
        "lodash": "^4.7.0",
        "tr46": "^2.1.0",
        "webidl-conversions": "^6.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-background-sync": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-background-sync/-/workbox-background-sync-6.6.0.tgz",
      "integrity": "sha512-jkf4ZdgOJxC9u2vztxLuPT/UjlH7m/nWRQ/MgGL0v8BJHoZdVGJd18Kck+a0e55wGXdqyHO+4IQTk0685g4MUw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-broadcast-update": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-broadcast-update/-/workbox-broadcast-update-6.6.0.tgz",
      "integrity": "sha512-nm+v6QmrIFaB/yokJmQ/93qIJ7n72NICxIwQwe5xsZiV2aI93MGGyEyzOzDPVz5THEr5rC3FJSsO3346cId64Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-build": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-build/-/workbox-build-6.6.0.tgz",
      "integrity": "sha512-Tjf+gBwOTuGyZwMz2Nk/B13Fuyeo0Q84W++bebbVsfr9iLkDSo6j6PST8tET9HYA58mlRXwlMGpyWO8ETJiXdQ==",
      "license": "MIT",
      "dependencies": {
        "@apideck/better-ajv-errors": "^0.3.1",
        "@babel/core": "^7.11.1",
        "@babel/preset-env": "^7.11.0",
        "@babel/runtime": "^7.11.2",
        "@rollup/plugin-babel": "^5.2.0",
        "@rollup/plugin-node-resolve": "^11.2.1",
        "@rollup/plugin-replace": "^2.4.1",
        "@surma/rollup-plugin-off-main-thread": "^2.2.3",
        "ajv": "^8.6.0",
        "common-tags": "^1.8.0",
        "fast-json-stable-stringify": "^2.1.0",
        "fs-extra": "^9.0.1",
        "glob": "^7.1.6",
        "lodash": "^4.17.20",
        "pretty-bytes": "^5.3.0",
        "rollup": "^2.43.1",
        "rollup-plugin-terser": "^7.0.0",
        "source-map": "^0.8.0-beta.0",
        "stringify-object": "^3.3.0",
        "strip-comments": "^2.0.1",
        "tempy": "^0.6.0",
        "upath": "^1.2.0",
        "workbox-background-sync": "6.6.0",
        "workbox-broadcast-update": "6.6.0",
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-google-analytics": "6.6.0",
        "workbox-navigation-preload": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-range-requests": "6.6.0",
        "workbox-recipes": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0",
        "workbox-streams": "6.6.0",
        "workbox-sw": "6.6.0",
        "workbox-window": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/workbox-build/node_modules/@apideck/better-ajv-errors": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@apideck/better-ajv-errors/-/better-ajv-errors-0.3.6.tgz",
      "integrity": "sha512-P+ZygBLZtkp0qqOAJJVX4oX/sFo5JR3eBWwwuqHHhK0GIgQOKWrAfiAaWX0aArHkRWHMuggFEgAZNxVPwPZYaA==",
      "license": "MIT",
      "dependencies": {
        "json-schema": "^0.4.0",
        "jsonpointer": "^5.0.0",
        "leven": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "peerDependencies": {
        "ajv": ">=8"
      }
    },
    "node_modules/workbox-build/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/workbox-build/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/workbox-build/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/workbox-build/node_modules/source-map": {
      "version": "0.8.0-beta.0",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.8.0-beta.0.tgz",
      "integrity": "sha512-2ymg6oRBpebeZi9UUNsgQ89bhx01TcTkmNTGnNO88imTmbSgy4nfujrgVEFKWpMTEGA11EDkTt7mqObTPdigIA==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "whatwg-url": "^7.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/workbox-build/node_modules/tr46": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-1.0.1.tgz",
      "integrity": "sha512-dTpowEjclQ7Kgx5SdBkqRzVhERQXov8/l9Ft9dVM9fmg0W0KQSVaXX9T4i6twCPNtYiZM53lpSSUAwJbFPOHxA==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/workbox-build/node_modules/webidl-conversions": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-4.0.2.tgz",
      "integrity": "sha512-YQ+BmxuTgd6UXZW3+ICGfyqRyHXVlD5GtQr5+qjiNW7bF0cqrzX500HVXPBOvgXb5YnzDd+h0zqyv61KUD7+Sg==",
      "license": "BSD-2-Clause"
    },
    "node_modules/workbox-build/node_modules/whatwg-url": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-7.1.0.tgz",
      "integrity": "sha512-WUu7Rg1DroM7oQvGWfOiAK21n74Gg+T4elXEQYkOhtyLeWiJFoOGLXPKI/9gzIie9CtwVLm8wtw6YJdKyxSjeg==",
      "license": "MIT",
      "dependencies": {
        "lodash.sortby": "^4.7.0",
        "tr46": "^1.0.1",
        "webidl-conversions": "^4.0.2"
      }
    },
    "node_modules/workbox-cacheable-response": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-cacheable-response/-/workbox-cacheable-response-6.6.0.tgz",
      "integrity": "sha512-JfhJUSQDwsF1Xv3EV1vWzSsCOZn4mQ38bWEBR3LdvOxSPgB65gAM6cS2CX8rkkKHRgiLrN7Wxoyu+TuH67kHrw==",
      "deprecated": "workbox-background-sync@6.6.0",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-core": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-core/-/workbox-core-6.6.0.tgz",
      "integrity": "sha512-GDtFRF7Yg3DD859PMbPAYPeJyg5gJYXuBQAC+wyrWuuXgpfoOrIQIvFRZnQ7+czTIQjIr1DhLEGFzZanAT/3bQ==",
      "license": "MIT"
    },
    "node_modules/workbox-expiration": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-expiration/-/workbox-expiration-6.6.0.tgz",
      "integrity": "sha512-baplYXcDHbe8vAo7GYvyAmlS4f6998Jff513L4XvlzAOxcl8F620O91guoJ5EOf5qeXG4cGdNZHkkVAPouFCpw==",
      "license": "MIT",
      "dependencies": {
        "idb": "^7.0.1",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-google-analytics": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-google-analytics/-/workbox-google-analytics-6.6.0.tgz",
      "integrity": "sha512-p4DJa6OldXWd6M9zRl0H6vB9lkrmqYFkRQ2xEiNdBFp9U0LhsGO7hsBscVEyH9H2/3eZZt8c97NB2FD9U2NJ+Q==",
      "deprecated": "It is not compatible with newer versions of GA starting with v4, as long as you are using GAv3 it should be ok, but the package is not longer being maintained",
      "license": "MIT",
      "dependencies": {
        "workbox-background-sync": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-navigation-preload": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-navigation-preload/-/workbox-navigation-preload-6.6.0.tgz",
      "integrity": "sha512-utNEWG+uOfXdaZmvhshrh7KzhDu/1iMHyQOV6Aqup8Mm78D286ugu5k9MFD9SzBT5TcwgwSORVvInaXWbvKz9Q==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-precaching": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-precaching/-/workbox-precaching-6.6.0.tgz",
      "integrity": "sha512-eYu/7MqtRZN1IDttl/UQcSZFkHP7dnvr/X3Vn6Iw6OsPMruQHiVjjomDFCNtd8k2RdjLs0xiz9nq+t3YVBcWPw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-range-requests": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-range-requests/-/workbox-range-requests-6.6.0.tgz",
      "integrity": "sha512-V3aICz5fLGq5DpSYEU8LxeXvsT//mRWzKrfBOIxzIdQnV/Wj7R+LyJVTczi4CQ4NwKhAaBVaSujI1cEjXW+hTw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-recipes": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-recipes/-/workbox-recipes-6.6.0.tgz",
      "integrity": "sha512-TFi3kTgYw73t5tg73yPVqQC8QQjxJSeqjXRO4ouE/CeypmP2O/xqmB/ZFBBQazLTPxILUQ0b8aeh0IuxVn9a6A==",
      "license": "MIT",
      "dependencies": {
        "workbox-cacheable-response": "6.6.0",
        "workbox-core": "6.6.0",
        "workbox-expiration": "6.6.0",
        "workbox-precaching": "6.6.0",
        "workbox-routing": "6.6.0",
        "workbox-strategies": "6.6.0"
      }
    },
    "node_modules/workbox-routing": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-routing/-/workbox-routing-6.6.0.tgz",
      "integrity": "sha512-x8gdN7VDBiLC03izAZRfU+WKUXJnbqt6PG9Uh0XuPRzJPpZGLKce/FkOX95dWHRpOHWLEq8RXzjW0O+POSkKvw==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-strategies": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-strategies/-/workbox-strategies-6.6.0.tgz",
      "integrity": "sha512-eC07XGuINAKUWDnZeIPdRdVja4JQtTuc35TZ8SwMb1ztjp7Ddq2CJ4yqLvWzFWGlYI7CG/YGqaETntTxBGdKgQ==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/workbox-streams": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-streams/-/workbox-streams-6.6.0.tgz",
      "integrity": "sha512-rfMJLVvwuED09CnH1RnIep7L9+mj4ufkTyDPVaXPKlhi9+0czCu+SJggWCIFbPpJaAZmp2iyVGLqS3RUmY3fxg==",
      "license": "MIT",
      "dependencies": {
        "workbox-core": "6.6.0",
        "workbox-routing": "6.6.0"
      }
    },
    "node_modules/workbox-sw": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-sw/-/workbox-sw-6.6.0.tgz",
      "integrity": "sha512-R2IkwDokbtHUE4Kus8pKO5+VkPHD2oqTgl+XJwh4zbF1HyjAbgNmK/FneZHVU7p03XUt9ICfuGDYISWG9qV/CQ==",
      "license": "MIT"
    },
    "node_modules/workbox-webpack-plugin": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-webpack-plugin/-/workbox-webpack-plugin-6.6.0.tgz",
      "integrity": "sha512-xNZIZHalboZU66Wa7x1YkjIqEy1gTR+zPM+kjrYJzqN7iurYZBctBLISyScjhkJKYuRrZUP0iqViZTh8rS0+3A==",
      "license": "MIT",
      "dependencies": {
        "fast-json-stable-stringify": "^2.1.0",
        "pretty-bytes": "^5.4.1",
        "upath": "^1.2.0",
        "webpack-sources": "^1.4.3",
        "workbox-build": "6.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "webpack": "^4.4.0 || ^5.9.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/workbox-webpack-plugin/node_modules/webpack-sources": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-1.4.3.tgz",
      "integrity": "sha512-lgTS3Xhv1lCOKo7SA5TjKXMjpSM4sBjNV5+q2bqesbSPs5FjGmU6jjtBSkX9b4qW87vDIsCIlUPOEhbZrMdjeQ==",
      "license": "MIT",
      "dependencies": {
        "source-list-map": "^2.0.0",
        "source-map": "~0.6.1"
      }
    },
    "node_modules/workbox-window": {
      "version": "6.6.0",
      "resolved": "https://registry.npmjs.org/workbox-window/-/workbox-window-6.6.0.tgz",
      "integrity": "sha512-L4N9+vka17d16geaJXXRjENLFldvkWy7JyGxElRD0JvBxvFEd8LOhr+uXCcar/NzAmIBRv9EZ+M+Qr4mOoBITw==",
      "license": "MIT",
      "dependencies": {
        "@types/trusted-types": "^2.0.2",
        "workbox-core": "6.6.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "is-typedarray": "^1.0.0",
        "signal-exit": "^3.0.2",
        "typedarray-to-buffer": "^3.1.5"
      }
    },
    "node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-3.0.0.tgz",
      "integrity": "sha512-A5CUptxDsvxKJEU3yO6DuWBSJz/qizqzJKOMIfUJHETbBw/sFaDxgd6fxm1ewUaM0jZ444Fc5vC5ROYurg/4Pw==",
      "license": "Apache-2.0"
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "license": "MIT"
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "1.10.2",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-1.10.2.tgz",
      "integrity": "sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==",
      "license": "ISC",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  }
}


------------------------------------------------------------------------------------------------------------------------------

ESTRUCTURE

backend
backend/routes
backend/routes/config.js
backend/routes/portafolio.js
backend/routes/risk.js
backend/src
backend/src/ai
backend/src/ai/ai-trading-advisor.js
backend/src/ai/ml-engine.js
backend/src/ai/trading-advisor.js

backend/src/alerts
backend/src/alerts/alert-manager.js
backend/src/alerts/email-manager.js

backend/src/backtesting
backend/src/backtesting/backtest-engine.js
backend/src/backtesting/backtester.js
backend/src/backtesting/historical-data-manager.js

backend/src/core
backend/src/core/AlertManager.js
backend/src/core/cex-arbitrage-bot.js
backend/src/core/StrategyManager.js

backend/src/css
backend/src/css/dashboard.css

backend/src/exchanges
backend/src/exchanges/exchange-manager.js
backend/src/exchanges/exchanges.js
backend/src/exchanges/real-price-fetcher.js

backend/src/mobile
backend/src/mobile/mobile-api-desable.js
backend/src/mobile/mobile-api.js

backend/src/portfolio
backend/src/portfolio/portfolio-manager.js

backend/src/risk
backend/src/risk/advanced-risk-manager.js

backend/src/scripts
backend/src/scripts/run-backtest.js

backend/src/services
backend/src/services/api.js
backend/src/services/apiRoutes.js

backend/src/strategies
backend/src/strategies/config.js
backend/src/strategies/risk-management.js
backend/src/strategies/strategy-manager.js

backend/.env
backend/arbitable_pairs.js
backend/arbitrage-bot.js
backend/arbitrageLogic.js
backend/binance-test.js
backend/bybit-test.js
backend/config.js
backend/debug-alert-manager.js
backend/debug-telegram.js
backend/Guía_de_Inicio_Rápido.txt
backend/main-bot-updated.js
backend/Manual_Completo_del_Bot_La_Biblia.txt
backend/package-lock.json
backend/package.json
backend/Script_de_Configuración_Rápida.js
backend/server.js
backend/test-email.js
backend/test-telegram.js
backend/TokenMonitor.js

frontend
frontend/public
frontend/public/components
frontend/public/components/AIPanel.jsx
frontend/public/components/App.jsx
frontend/public/components/ArbitrageOpportunities.jsx
frontend/public/components/AutoRebalance.jsx
frontend/public/components/BalanceChart.jsx
frontend/public/components/Controls.jsx
frontend/public/components/Header.jsx
frontend/public/components/ProfitChart.jsx
frontend/public/components/RiskAnalysis.jsx
frontend/public/components/Sidebar.jsx
frontend/public/components/SpecificPairs.jsx
frontend/public/components/StatusCard.jsx

frontend/public/js
frontend/public/js/advanced-dashboard.js
frontend/public/js/app.js
frontend/public/js/dashboard.js
frontend/public/js/mobile-api-client.js
frontend/public/js/risk-chart.js
frontend/public/js/strategies-manager.js
frontend/public/index.html
frontend/public/styles.ccs

frontend/src
frontend/src/ai
frontend/src/ai/ai-trading-advisor.js
frontend/src/ai/ml-engine.js
frontend/src/ai/trading-advisor.js

frontend/src/alerts
frontend/src/alerts/alert-manager.js
frontend/src/alerts/email-manager.js

frontend/src/backtesting
frontend/src/backtesting/backtest-engine.js
frontend/src/backtesting/backtester.js
frontend/src/backtesting/historical-data-manager.js

frontend/src/components
frontend/src/components/AlertBanner.jsx
frontend/src/components/Botcontrols.js
frontend/src/components/EditTokenDialog.jsx
frontend/src/components/IAPanel.jsx
frontend/src/components/Layout.jsx
frontend/src/components/OperationHistory.jsx
frontend/src/components/OpportunitiesPanel.jsx
frontend/src/components/Sidebar.jsx
frontend/src/components/StatusBadge.jsx
frontend/src/components/TokenPairsTable.jsx
frontend/src/components/TokenReviewTimer.jsx

frontend/src/contexts
frontend/src/contexts/AuthContext.jsx
frontend/src/contexts/BotContext.jsx

frontend/src/core
frontend/src/core/AlertManager.js
frontend/src/core/cex-arbitrage-bot.js
frontend/src/core/StrategyManager.js

frontend/src/css
frontend/src/css/center-dashboard.css
frontend/src/css/dashboard.css

frontend/src/data
frontend/src/data/pairs.json

frontend/src/exchanges
frontend/src/exchanges/exchange-manager.js
frontend/src/exchanges/exchanges.js
frontend/src/exchanges/real-price-fetcher.js

frontend/src/mobile
frontend/src/mobile/mobile-api-desable.js
frontend/src/mobile/mobile-api.js

frontend/src/pages
frontend/src/pages/AIPanel.jsx
frontend/src/pages/AlertsPanel.jsx
frontend/src/pages/AnomalyDetectionPanel.jsx
frontend/src/pages/ArbitragePanel.jsx
frontend/src/pages/BacktestingPanel.jsx
frontend/src/pages/BalancesRiskPanel.jsx
frontend/src/pages/CommissionPanel.jsx
frontend/src/pages/dashboard-pro.css
frontend/src/pages/dashboard.css
frontend/src/pages/Dashboard.jsx
frontend/src/pages/DepositAddressesPanel.jsx
frontend/src/pages/ExchangesPanel.jsx
frontend/src/pages/FeesPanel.jsx
frontend/src/pages/GeneralConfigPanel.jsx
frontend/src/pages/Login.jsx
frontend/src/pages/LogsPanel.jsx
frontend/src/pages/MetricsPanel.jsx
frontend/src/pages/mobile-api.js
frontend/src/pages/MobileApiPanel.jsx
frontend/src/pages/PairsPanel.jsx
frontend/src/pages/PortfolioPanel.jsx
frontend/src/pages/PricesPanel.jsx
frontend/src/pages/RebalancePanel.jsx
frontend/src/pages/RiskManagerPanel.jsx
frontend/src/pages/SecurityPanel.jsx
frontend/src/pages/SimulationSwitch.jsx
frontend/src/pages/StrategiesPanel.jsx
frontend/src/pages/StrategySelector.jsx
frontend/src/pages/TroubleshootingPanel.jsx

frontend/src/portfolio
frontend/src/portfolio/portfolio-manager.js

frontend/src/risk
frontend/src/risk/advanced-risk-manager.js

frontend/src/scripts
frontend/src/scripts/run-backtest.js

frontend/src/services
frontend/src/services/api.js

frontend/src/strategies
frontend/src/strategies/config.js
frontend/src/strategies/risk-management.js
frontend/src/strategies/strategy-manager.js

frontend/src/App.css
frontend/src/index.html
frontend/src/App.jsx
frontend/src/index.css
frontend/src/index.jsx
frontend/package-lock.json
frontend/package.json
archivos_bot_ultimate.js
Estructure.js
package-lock.json
README.md
test-binance.js

