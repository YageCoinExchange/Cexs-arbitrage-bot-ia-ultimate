
## üîî ALERTAS Y NOTIFICACIONES

### Configuraci√≥n de Alertas

```javascript
ALERTS: {
    ENABLED: true,
    
    // ===== CANALES DE NOTIFICACI√ìN =====
    CHANNELS: {
        EMAIL: {
            enabled: true,
            smtp: {
                host: "smtp.gmail.com",
                port: 587,
                secure: false,
                auth: {
                    user: "tu-email@gmail.com",
                    pass: "tu-app-password"
                }
            },
            from: "bot@tudominio.com",
            to: ["tu-email@gmail.com"]
        },
        
        TELEGRAM: {
            enabled: true,
            botToken: "TU_BOT_TOKEN_TELEGRAM",
            chatId: "TU_CHAT_ID",
            parseMode: "HTML"
        },
        
        DISCORD: {
            enabled: false,
            webhookUrl: "TU_WEBHOOK_DISCORD"
        },
        
        SLACK: {
            enabled: false,
            webhookUrl: "TU_WEBHOOK_SLACK"
        }
    },
    
    // ===== TIPOS DE ALERTAS =====
    ALERT_TYPES: {
        TRADE_EXECUTED: {
            enabled: true,
            priority: "medium",
            channels: ["email", "telegram"]
        },
        PROFIT_TARGET: {
            enabled: true,
            priority: "high",
            channels: ["email", "telegram"],
            threshold: 100 // Alertar cada $100 ganancia
        },
        RISK_WARNING: {
            enabled: true,
            priority: "high",
            channels: ["email", "telegram"]
        },
        DAILY_SUMMARY: {
            enabled: true,
            priority: "low",
            channels: ["email"],
            time: "23:59"
        }
    }
}
```

### üì± C√≥mo Configurar Notificaciones

1. **Configurar Email**:
   ```javascript
   EMAIL: {
       enabled: true,
       smtp: {
           host: "smtp.gmail.com",
           auth: {
               user: "tu-email@gmail.com",
               pass: "tu-app-password" // ‚Üê Usar App Password de Gmail
           }
       },
       to: ["email1@gmail.com", "email2@gmail.com"] // ‚Üê M√∫ltiples emails
   }
   ```

2. **Configurar Telegram**:
   - Crear bot con @BotFather
   - Obtener token del bot
   - Obtener chat ID enviando mensaje al bot
   ```javascript
   TELEGRAM: {
       enabled: true,
       botToken: "123456789:ABCdefGHIjklMNOpqrsTUVwxyz", // ‚Üê Token del bot
       chatId: "123456789" // ‚Üê Tu chat ID
   }
   ```

3. **Personalizar Alertas**:
   ```javascript
   PROFIT_TARGET: {
       enabled: true,
       threshold: 50, // ‚Üê Alertar cada $50 en lugar de $100
       channels: ["telegram"] // ‚Üê Solo por Telegram
   }
   ```

---

## ü§ñ INTELIGENCIA ARTIFICIAL

### Configuraci√≥n de IA

```javascript
AI_TRADING: {
    ENABLED: true,
    
    // ===== RUTAS DE MODELOS =====
    MODEL_PATH: "./models",
    
    // ===== DATOS DE ENTRENAMIENTO =====
    TRAINING_DATA_DAYS: 30,        // 30 d√≠as de datos
    PREDICTION_HORIZON: 3600,      // Predecir 1 hora adelante
    
    // ===== CARACTER√çSTICAS =====
    FEATURES: [
        "price",
        "volume", 
        "volatility",
        "spread",
        "momentum",
        "rsi",
        "macd"
    ],
    
    // ===== MODELOS =====
    MODELS: {
        PRICE_PREDICTION: {
            type: "lstm",
            epochs: 100,
            batchSize: 32,
            learningRate: 0.001
        },
        OPPORTUNITY_SCORING: {
            type: "random_forest",
            nEstimators: 100,
            maxDepth: 10
        },
        RISK_ASSESSMENT: {
            type: "gradient_boosting",
            nEstimators: 50,
            learningRate: 0.1
        }
    },
    
    // ===== AUTO-REENTRENAMIENTO =====
    AUTO_RETRAIN: true,
    RETRAIN_THRESHOLD: 0.1         // Reentrenar si precisi√≥n < 90%
}
```

### üß† C√≥mo Configurar la IA

1. **Habilitar/Deshabilitar IA**:
   ```javascript
   AI_TRADING: {
       ENABLED: false, // ‚Üê Deshabilitar IA completamente
   }
   ```

2. **Ajustar Datos de Entrenamiento**:
   ```javascript
   TRAINING_DATA_DAYS: 60,    // ‚Üê Usar 60 d√≠as de datos
   PREDICTION_HORIZON: 1800   // ‚Üê Predecir 30 minutos
   ```

3. **Modificar Caracter√≠sticas**:
   ```javascript
   FEATURES: [
       "price",
       "volume",
       "spread"  // ‚Üê Solo usar estas 3 caracter√≠sticas
   ]
   ```

---

## üìä BACKTESTING

### Configuraci√≥n de Backtesting

```javascript
BACKTESTING: {
    ENABLED: true,
    
    // ===== FUENTE DE DATOS =====
    DATA_SOURCE: "historical", // "historical" | "simulation"
    DEFAULT_PERIOD: 30,        // 30 d√≠as por defecto
    
    // ===== COSTOS DE TRADING =====
    COMMISSION_RATE: 0.001,    // 0.1% comisi√≥n
    SLIPPAGE_RATE: 0.0005,     // 0.05% slippage
    
    // ===== CAPITAL INICIAL =====
    INITIAL_CAPITAL: 10000,    // $10,000
    
    // ===== BENCHMARK =====
    BENCHMARK: "BTC",          // Comparar con BTC
    
    // ===== M√âTRICAS =====
    METRICS: [
        "total_return",
        "sharpe_ratio",
        "max_drawdown",
        "win_rate",
        "profit_factor"
    ],
    
    // ===== MONTE CARLO =====
    MONTE_CARLO_SIMULATIONS: 1000,
    CONFIDENCE_INTERVALS: [0.95, 0.99]
}
```

### üìà C√≥mo Usar el Backtesting

1. **Ejecutar Backtest B√°sico**:
   ```javascript
   // En el c√≥digo del bot
   const backtester = new BacktestEngine(config);
   
   const results = await backtester.runBacktest({
       strategy: 'basic',
       pairs: ['BTC/USDT', 'ETH/USDT'],
       startDate: new Date('2024-01-01'),
       endDate: new Date('2024-01-31')
   });
   ```

2. **Cambiar Per√≠odo de Prueba**:
   ```javascript
   DEFAULT_PERIOD: 90, // ‚Üê Probar con 90 d√≠as
   ```

3. **Ajustar Costos**:
   ```javascript
   COMMISSION_RATE: 0.0005, // ‚Üê Reducir comisi√≥n a 0.05%
   SLIPPAGE_RATE: 0.001     // ‚Üê Aumentar slippage a 0.1%
   ```

---

## üì± API M√ìVIL

### Configuraci√≥n de API M√≥vil

```javascript
MOBILE_API: {
    ENABLED: true,
    PORT: 3001,
    
    // ===== AUTENTICACI√ìN =====
    JWT_SECRET: "tu-jwt-secret-muy-seguro",
    JWT_EXPIRY: "24h",
    
    // ===== RATE LIMITING =====
    RATE_LIMIT: {
        windowMs: 15 * 60 * 1000, // 15 minutos
        max: 100                   // 100 requests por ventana
    },
    
    // ===== CORS =====
    CORS: {
        origin: ["http://localhost:3000", "https://tu-app.com"],
        credentials: true
    },
    
    // ===== ENDPOINTS =====
    ENDPOINTS: {
        STATUS: "/api/mobile/status",
        TRADES: "/api/mobile/trades",
        PORTFOLIO: "/api/mobile/portfolio",
        ALERTS: "/api/mobile/alerts",
        SETTINGS: "/api/mobile/settings"
    },
    
    // ===== NOTIFICACIONES PUSH =====
    PUSH_NOTIFICATIONS: {
        enabled: true,
        fcmServerKey: "TU_FCM_SERVER_KEY"
    }
}
```

### üì≤ C√≥mo Configurar la API M√≥vil

1. **Cambiar Puerto**:
   ```javascript
   PORT: 8080, // ‚Üê Cambiar a puerto 8080
   ```

2. **Configurar CORS**:
   ```javascript
   CORS: {
       origin: ["https://mi-app.com"], // ‚Üê Solo tu dominio
       credentials: true
   }
   ```

3. **Ajustar Rate Limiting**:
   ```javascript
   RATE_LIMIT: {
       windowMs: 5 * 60 * 1000, // ‚Üê 5 minutos
       max: 50                   // ‚Üê 50 requests m√°ximo
   }
   ```

---

## üñ•Ô∏è DASHBOARD WEB

### Configuraci√≥n del Dashboard

```javascript
DASHBOARD: {
    ENABLED: true,
    PORT: 3000,
    
    // ===== AUTENTICACI√ìN =====
    AUTH: {
        enabled: true,
        username: "admin",
        password: "admin123" // ‚Üê CAMBIAR ESTO
    },
    
    // ===== ACTUALIZACI√ìN =====
    UPDATE_INTERVAL: 5000,     // Actualizar cada 5 segundos
    
    // ===== GR√ÅFICOS =====
    CHARTS: {
        maxDataPoints: 100,    // M√°ximo 100 puntos en gr√°ficos
        timeframe: "1h"        // Timeframe por defecto
    },
    
    // ===== TEMA =====
    THEME: {
        darkMode: true,        // Modo oscuro por defecto
        primaryColor: "#007bff"
    }
}
```

### üé® C√≥mo Personalizar el Dashboard

1. **Cambiar Credenciales**:
   ```javascript
   AUTH: {
       enabled: true,
       username: "mi-usuario",     // ‚Üê Tu usuario
       password: "mi-password-seguro" // ‚Üê Tu password
   }
   ```

2. **Ajustar Actualizaci√≥n**:
   ```javascript
   UPDATE_INTERVAL: 2000, // ‚Üê Actualizar cada 2 segundos
   ```

3. **Personalizar Tema**:
   ```javascript
   THEME: {
       darkMode: false,           // ‚Üê Modo claro
       primaryColor: "#28a745"    // ‚Üê Color verde
   }
   ```

---

## üìù LOGS Y MONITOREO

### Configuraci√≥n de Logs

```javascript
LOGGING: {
    ENABLED: true,
    LEVEL: "info", // "error" | "warn" | "info" | "debug"
    
    // ===== ARCHIVOS DE LOG =====
    FILES: {
        error: "./logs/error.log",
        combined: "./logs/combined.log",
        trades: "./logs/trades.log"
    },
    
    // ===== ROTACI√ìN =====
    ROTATION: {
        maxSize: "20m",        // M√°ximo 20MB por archivo
        maxFiles: "14d"        // Mantener 14 d√≠as
    },
    
    // ===== FORMATO =====
    FORMAT: "json" // "json" | "simple"
}
```

### üìä Monitoreo y M√©tricas

```javascript
MONITORING: {
    ENABLED: true,
    
    // ===== M√âTRICAS =====
    METRICS: {
        trades_per_hour: true,
        profit_per_hour: true,
        error_rate: true,
        latency: true
    },
    
    // ===== HEALTH CHECKS =====
    HEALTH_CHECKS: {
        interval: 60000,       // Cada minuto
        endpoints: [
            "exchanges",
            "database",
            "ai_models"
        ]
    }
}
```

---

## üîí SEGURIDAD

### Configuraci√≥n de Seguridad

```javascript
SECURITY: {
    // ===== ENCRIPTACI√ìN =====
    ENCRYPTION: {
        algorithm: "aes-256-gcm",
        keyLength: 32
    },
    
    // ===== API KEYS =====
    API_SECURITY: {
        encryptKeys: true,     // Encriptar API keys
        rotateKeys: false,     // Rotar keys autom√°ticamente
        keyExpiry: 2592000     // 30 d√≠as
    },
    
    // ===== RATE LIMITING =====
    RATE_LIMITING: {
        enabled: true,
        requests_per_minute: 60
    },
    
    // ===== IP WHITELIST =====
    IP_WHITELIST: {
        enabled: false,
        allowed_ips: [
            "192.168.1.100",
            "10.0.0.50"
        ]
    }
}
```

### üõ°Ô∏è Mejores Pr√°cticas de Seguridad

1. **Cambiar Passwords por Defecto**:
   ```javascript
   AUTH: {
       username: "tu-usuario-unico",
       password: "Password-Muy-Seguro-123!"
   }
   ```

2. **Usar Variables de Entorno**:
   ```bash
   # .env
   BINANCE_API_KEY=tu_api_key_real
   BINANCE_API_SECRET=tu_api_secret_real
   JWT_SECRET=tu_jwt_secret_muy_largo_y_seguro
   ```

3. **Habilitar IP Whitelist**:
   ```javascript
   IP_WHITELIST: {
       enabled: true,
       allowed_ips: ["tu.ip.publica.aqui"]
   }
   ```

---

## üöÄ COMANDOS DE EJECUCI√ìN

### Iniciar el Bot

```bash
# Modo desarrollo
npm run dev

# Modo producci√≥n
npm start

# Con configuraci√≥n espec√≠fica
node src/server.js --config=production

# Solo simulaci√≥n
node src/server.js --mode=simulation

# Con estrategia espec√≠fica
node src/server.js --strategy=basic
```

### Scripts √ötiles

```bash
# Ejecutar backtest
npm run backtest

# Limpiar logs
npm run clean-logs

# Verificar configuraci√≥n
npm run check-config

# Actualizar modelos de IA
npm run update-models
```

---

## üîß TROUBLESHOOTING

### Problemas Comunes

1. **Error de API Keys**:
   ```
   Error: Invalid API key
   Soluci√≥n: Verificar que las API keys sean correctas y tengan permisos
   ```

2. **Conexi√≥n a Exchange**:
   ```
   Error: Connection timeout
   Soluci√≥n: Verificar conexi√≥n a internet y status del exchange
   ```

3. **Insuficientes Fondos**:
   ```
   Error: Insufficient balance
   Soluci√≥n: Verificar balances en exchanges y ajustar INITIAL_BALANCE
   ```

4. **Modelo de IA No Carga**:
   ```
   Error: Model not found
   Soluci√≥n: Ejecutar npm run update-models
   ```

### Logs de Debug

```javascript
// Habilitar logs detallados
LOGGING: {
    LEVEL: "debug", // ‚Üê Cambiar a debug
}

// Ver logs en tiempo real
tail -f logs/combined.log
```

### Verificar Estado

```bash
# Verificar que todo funcione
curl http://localhost:3001/api/mobile/health

# Verificar dashboard
curl http://localhost:3000/api/status
```

---

## üìû SOPORTE Y CONTACTO

### Archivos Importantes

- **Configuraci√≥n**: `/src/strategies/config.js`
- **Bot Principal**: `/src/strategies/arbitrage-bot.js`
- **Logs**: `/logs/`
- **Modelos IA**: `/models/`
- **Dashboard**: `/public/`

### Comandos de Emergencia

```bash
# Parar el bot inmediatamente
pkill -f "node src/server.js"

# Backup de configuraci√≥n
cp src/strategies/config.js config.backup.js

# Restaurar configuraci√≥n
cp config.backup.js src/strategies/config.js
```

---

## üìã CHECKLIST DE CONFIGURACI√ìN

### Antes de Iniciar

- [ ] Configurar API keys de exchanges
- [ ] Establecer balance inicial
- [ ] Configurar alertas (email/telegram)
- [ ] Verificar estrategias habilitadas
- [ ] Ajustar l√≠mites de riesgo
- [ ] Probar en modo simulaci√≥n
- [ ] Configurar monitoreo

### Configuraci√≥n M√≠nima

```javascript
// Configuraci√≥n b√°sica para empezar
const config = {
    TRADING_MODE: "simulation",
    TRADING_PAIRS: ["BTC/USDT"],
    EXCHANGES: {
        BINANCE: {
            enabled: true,
            apiKey: "TU_API_KEY",
            apiSecret: "TU_API_SECRET"
        }
    },
    STRATEGIES: {
        BASIC: {
            enabled: true,
            minProfitPercentage: 0.2
        }
    },
    RISK_MANAGEMENT: {
        MAX_DAILY_LOSS: 100,
        STOP_LOSS: { enabled: true, percentage: 0.02 }
    }
}
```

---

**¬°IMPORTANTE!** 

- Siempre probar en modo `simulation` antes de usar `live`
- Nunca compartir tus API keys
- Hacer backup de la configuraci√≥n antes de cambios importantes
- Monitorear los logs regularmente
- Empezar con cantidades peque√±as

---

*Este manual cubre todas las configuraciones posibles del bot. Gu√°rdalo como referencia y modifica seg√∫n tus necesidades.*
```

## 3. Archivo de Variables de Entorno

---------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-bot-ia",
  "version": "1.0.0",
  "description": "Bot de arbitraje CEX con IA avanzada",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "bot": "node main-bot-updated.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "arbitrage",
    "cryptocurrency",
    "trading",
    "bot",
    "ai",
    "machine-learning"
  ],
  "author": "Tu Nombre",
  "license": "MIT",
  "dependencies": {
    "@binance/connector": "^3.6.1",
    "axios": "^1.9.0",
    "bcryptjs": "^2.4.3",
    "body-parser": "^1.20.3",
    "bootstrap": "^5.3.6",
    "bootstrap-icons": "^1.13.1",
    "bybit-api": "^4.1.10",
    "ccxt": "^4.4.88",
    "chart.js": "^4.4.9",
    "cors": "^2.8.5",
    "crypto": "^1.0.1",
    "dotenv": "^16.5.0",
    "express": "^4.21.2",
    "express-rate-limit": "^7.1.5",
    "fs": "^0.0.1-security",
    "jsonwebtoken": "^9.0.2",
    "node-telegram-bot-api": "^0.64.0",
    "nodemailer": "^6.9.7",
    "path": "^0.12.7",
    "socket.io": "^4.7.4",
    "ws": "^8.14.2"
  },
  "devDependencies": {
    "nodemon": "^3.0.2"
  },
  "engines": {
    "node": ">=16.0.0"
  }
}

---------------------------------------------------------------------------------------------------------

{
  "name": "cexs-arbitrage-bot-ia",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "cexs-arbitrage-bot-ia",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "@binance/connector": "^3.6.1",
        "axios": "^1.9.0",
        "bcryptjs": "^2.4.3",
        "body-parser": "^1.20.3",
        "bootstrap": "^5.3.6",
        "bootstrap-icons": "^1.13.1",
        "bybit-api": "^4.1.10",
        "ccxt": "^4.4.88",
        "chart.js": "^4.4.9",
        "cors": "^2.8.5",
        "crypto": "^1.0.1",
        "dotenv": "^16.5.0",
        "express": "^4.21.2",
        "express-rate-limit": "^7.1.5",
        "fs": "^0.0.1-security",
        "jsonwebtoken": "^9.0.2",
        "node-telegram-bot-api": "^0.64.0",
        "nodemailer": "^6.9.7",
        "path": "^0.12.7",
        "socket.io": "^4.7.4",
        "ws": "^8.14.2"
      },
      "devDependencies": {
        "nodemon": "^3.0.2"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/@binance/connector": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/@binance/connector/-/connector-3.6.1.tgz",
      "integrity": "sha512-qWswMYRywaYOzH3ISVsvk2V0nkcpJT91sRohln2isPryMtHqxXPqiJ4GU8G9fKVL0Pcz8CfctKvqQx4gB3DGHA==",
      "license": "MIT",
      "dependencies": {
        "axios": "^1.7.4",
        "ws": "^8.17.1"
      },
      "engines": {
        "node": ">=12.22.3",
        "npm": ">=6.14.13"
      }
    },
    "node_modules/@cypress/request": {
      "version": "3.0.8",
      "resolved": "https://registry.npmjs.org/@cypress/request/-/request-3.0.8.tgz",
      "integrity": "sha512-h0NFgh1mJmm1nr4jCwkGHwKneVYKghUyWe6TMNrk0B9zsjAJxpg8C4/+BAcmLgCPa1vj1V8rNUaILl+zYRUWBQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~4.0.0",
        "http-signature": "~1.4.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "performance-now": "^2.1.0",
        "qs": "6.14.0",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "^5.0.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^8.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@cypress/request-promise": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@cypress/request-promise/-/request-promise-5.0.0.tgz",
      "integrity": "sha512-eKdYVpa9cBEw2kTBlHeu1PP16Blwtum6QHg/u9s/MoHkZfuo1pRGka1VlUHXF5kdew82BvOJVVGk0x8X0nbp+w==",
      "license": "ISC",
      "dependencies": {
        "bluebird": "^3.5.0",
        "request-promise-core": "1.1.3",
        "stealthy-require": "^1.1.1",
        "tough-cookie": "^4.1.3"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "@cypress/request": "^3.0.0"
      }
    },
    "node_modules/@cypress/request-promise/node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@cypress/request/node_modules/qs": {
      "version": "6.14.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/@discoveryjs/json-ext": {
      "version": "0.5.7",
      "resolved": "https://registry.npmjs.org/@discoveryjs/json-ext/-/json-ext-0.5.7.tgz",
      "integrity": "sha512-dBVuXR082gk3jsFp7Rd/JI4kytwGHecnCoTtXFb7DB6CNHp4rg5k1bhg0nWdLGLnOV71lmDzGQaLMy8iPLY0pw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.8",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.8.tgz",
      "integrity": "sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/set-array": "^1.2.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/source-map": {
      "version": "0.3.6",
      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz",
      "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.25"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.0.tgz",
      "integrity": "sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.25",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@kurkle/color": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@kurkle/color/-/color-0.3.4.tgz",
      "integrity": "sha512-M5UknZPHRu3DEDWoipU6sE8PdkZ6Z/S+v4dD+Ke8IaNlpdSQah50lz1KtcFBa2vsdOnwbbnxJwVM4wty6udA5w==",
      "license": "MIT"
    },
    "node_modules/@polka/url": {
      "version": "1.0.0-next.29",
      "resolved": "https://registry.npmjs.org/@polka/url/-/url-1.0.0-next.29.tgz",
      "integrity": "sha512-wwQAWhWSuHaag8c4q/KN/vCoeOJYshAIvMQwD4GpSb3OiZklFfvAgmj0VCBBImRpuF/aFgIRzllXlVX93Jevww==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@popperjs/core": {
      "version": "2.11.8",
      "resolved": "https://registry.npmjs.org/@popperjs/core/-/core-2.11.8.tgz",
      "integrity": "sha512-P1st0aksCrn9sGZhp8GMYwBnQsbvAWsZAX44oXNNvLHGqAOcoVxmjZiohstwQ7SqKnbR47akdNi+uleWD8+g6A==",
      "license": "MIT",
      "peer": true,
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/popperjs"
      }
    },
    "node_modules/@socket.io/component-emitter": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@socket.io/component-emitter/-/component-emitter-3.1.2.tgz",
      "integrity": "sha512-9BCxFwvbGg/RsZK9tjXd8s4UcwR0MWeFQ1XEKIQVVvAGJyINdrqKMcTRyLoK8Rse1GjzLV9cwjWV1olXRWEXVA==",
      "license": "MIT"
    },
    "node_modules/@types/cors": {
      "version": "2.8.19",
      "resolved": "https://registry.npmjs.org/@types/cors/-/cors-2.8.19.tgz",
      "integrity": "sha512-mFNylyeyqN93lfe/9CSxOGREz8cpzAhH+E93xJ4xWQf62V8sQ/24reV2nyzUWM6H6Xji+GGHpkbLe7pVoUEskg==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/eslint": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-9.6.1.tgz",
      "integrity": "sha512-FXx2pKgId/WyYo2jXw63kk7/+TY7u7AziEJxJAnSFzHlqTAS3Ync6SvgYAN/k4/PQpnnVuzoMuVnByKK2qp0ag==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/estree": "*",
        "@types/json-schema": "*"
      }
    },
    "node_modules/@types/eslint-scope": {
      "version": "3.7.7",
      "resolved": "https://registry.npmjs.org/@types/eslint-scope/-/eslint-scope-3.7.7.tgz",
      "integrity": "sha512-MzMFlSLBqNF2gcHWO0G1vP/YQyfvrxZ0bF+u7mzUdZ1/xK4A4sru+nraZz5i3iEIk1l1uyicaDVTB4QbbEkAYg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/eslint": "*",
        "@types/estree": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/node": {
      "version": "24.0.1",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.0.1.tgz",
      "integrity": "sha512-MX4Zioh39chHlDJbKmEgydJDS3tspMP/lnQC67G3SWsTnb9NeYVWOjkxpOSy4oMfPs4StcWHwBrvUb4ybfnuaw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.8.0"
      }
    },
    "node_modules/@webassemblyjs/ast": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ast/-/ast-1.14.1.tgz",
      "integrity": "sha512-nuBEDgQfm1ccRp/8bCQrx1frohyufl4JlbMMZ4P1wpeOfDhF6FQkxZJ1b/e+PLwr6X1Nhw6OLme5usuBWYBvuQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/helper-numbers": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/floating-point-hex-parser": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/floating-point-hex-parser/-/floating-point-hex-parser-1.13.2.tgz",
      "integrity": "sha512-6oXyTOzbKxGH4steLbLNOu71Oj+C8Lg34n6CqRvqfS2O71BxY6ByfMDRhBytzknj9yGUPVJ1qIKhRlAwO1AovA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-api-error": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-api-error/-/helper-api-error-1.13.2.tgz",
      "integrity": "sha512-U56GMYxy4ZQCbDZd6JuvvNV/WFildOjsaWD3Tzzvmw/mas3cXzRJPMjP83JqEsgSbyrmaGjBfDtV7KDXV9UzFQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-buffer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-buffer/-/helper-buffer-1.14.1.tgz",
      "integrity": "sha512-jyH7wtcHiKssDtFPRB+iQdxlDf96m0E39yb0k5uJVhFGleZFoNw1c4aeIcVUPPbXUVJ94wwnMOAqUHyzoEPVMA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-numbers": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-numbers/-/helper-numbers-1.13.2.tgz",
      "integrity": "sha512-FE8aCmS5Q6eQYcV3gI35O4J789wlQA+7JrqTTpJqn5emA4U2hvwJmvFRC0HODS+3Ye6WioDklgd6scJ3+PLnEA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/floating-point-hex-parser": "1.13.2",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/helper-wasm-bytecode": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-bytecode/-/helper-wasm-bytecode-1.13.2.tgz",
      "integrity": "sha512-3QbLKy93F0EAIXLh0ogEVR6rOubA9AoZ+WRYhNbFyuB70j3dRdwH9g+qXhLAO0kiYGlg3TxDV+I4rQTr/YNXkA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/helper-wasm-section": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/helper-wasm-section/-/helper-wasm-section-1.14.1.tgz",
      "integrity": "sha512-ds5mXEqTJ6oxRoqjhWDU83OgzAYjwsCV8Lo/N+oRsNDmx/ZDpqalmrtgOMkHwxsG0iI//3BwWAErYRHtgn0dZw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/wasm-gen": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/ieee754": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/ieee754/-/ieee754-1.13.2.tgz",
      "integrity": "sha512-4LtOzh58S/5lX4ITKxnAK2USuNEvpdVV9AlgGQb8rJDHaLeHciwG4zlGr0j/SNWlr7x3vO1lDEsuePvtcDNCkw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@xtuc/ieee754": "^1.2.0"
      }
    },
    "node_modules/@webassemblyjs/leb128": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/leb128/-/leb128-1.13.2.tgz",
      "integrity": "sha512-Lde1oNoIdzVzdkNEAWZ1dZ5orIbff80YPdHx20mrHwHrVNNTjNr8E3xz9BdpcGqRQbAEa+fkrCb+fRFTl/6sQw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webassemblyjs/utf8": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/utf8/-/utf8-1.13.2.tgz",
      "integrity": "sha512-3NQWGjKTASY1xV5m7Hr0iPeXD9+RDobLll3T9d2AO+g3my8xy5peVyjSag4I50mR1bBSN/Ct12lo+R9tJk0NZQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@webassemblyjs/wasm-edit": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-edit/-/wasm-edit-1.14.1.tgz",
      "integrity": "sha512-RNJUIQH/J8iA/1NzlE4N7KtyZNHi3w7at7hDjvRNm5rcUXa00z1vRz3glZoULfJ5mpvYhLybmVcwcjGrC1pRrQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/helper-wasm-section": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-opt": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1",
        "@webassemblyjs/wast-printer": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-gen": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-gen/-/wasm-gen-1.14.1.tgz",
      "integrity": "sha512-AmomSIjP8ZbfGQhumkNvgC33AY7qtMCXnN6bL2u2Js4gVCg8fp735aEiMSBbDR7UQIj90n4wKAFUSEd0QN2Ukg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wasm-opt": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-opt/-/wasm-opt-1.14.1.tgz",
      "integrity": "sha512-PTcKLUNvBqnY2U6E5bdOQcSM+oVP/PmrDY9NzowJjislEjwP/C4an2303MCVS2Mg9d3AJpIGdUFIQQWbPds0Sw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-buffer": "1.14.1",
        "@webassemblyjs/wasm-gen": "1.14.1",
        "@webassemblyjs/wasm-parser": "1.14.1"
      }
    },
    "node_modules/@webassemblyjs/wasm-parser": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wasm-parser/-/wasm-parser-1.14.1.tgz",
      "integrity": "sha512-JLBl+KZ0R5qB7mCnud/yyX08jWFw5MsoalJ1pQ4EdFlgj9VdXKGuENGsiCIjegI1W7p91rUlcB/LB5yRJKNTcQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@webassemblyjs/helper-api-error": "1.13.2",
        "@webassemblyjs/helper-wasm-bytecode": "1.13.2",
        "@webassemblyjs/ieee754": "1.13.2",
        "@webassemblyjs/leb128": "1.13.2",
        "@webassemblyjs/utf8": "1.13.2"
      }
    },
    "node_modules/@webassemblyjs/wast-printer": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/@webassemblyjs/wast-printer/-/wast-printer-1.14.1.tgz",
      "integrity": "sha512-kPSSXE6De1XOR820C90RIo2ogvZG+c3KiHzqUoO/F34Y2shGzesfqv7o57xrxovZJH/MetF5UjroJ/R/3isoiw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@webassemblyjs/ast": "1.14.1",
        "@xtuc/long": "4.2.2"
      }
    },
    "node_modules/@webpack-cli/configtest": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/configtest/-/configtest-1.2.0.tgz",
      "integrity": "sha512-4FB8Tj6xyVkyqjj1OaTqCjXYULB9FMkqQ8yGrZjRDrYh0nOE+7Lhs45WioWQQMV+ceFlE368Ukhe6xdvJM9Egg==",
      "license": "MIT",
      "optional": true,
      "peerDependencies": {
        "webpack": "4.x.x || 5.x.x",
        "webpack-cli": "4.x.x"
      }
    },
    "node_modules/@webpack-cli/info": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/info/-/info-1.5.0.tgz",
      "integrity": "sha512-e8tSXZpw2hPl2uMJY6fsMswaok5FdlGNRTktvFk2sD8RjH0hE2+XistawJx1vmKteh4NmGmNUrp+Tb2w+udPcQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "envinfo": "^7.7.3"
      },
      "peerDependencies": {
        "webpack-cli": "4.x.x"
      }
    },
    "node_modules/@webpack-cli/serve": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/@webpack-cli/serve/-/serve-1.7.0.tgz",
      "integrity": "sha512-oxnCNGj88fL+xzV+dacXs44HcDwf1ovs3AuEzvP7mqXw7fQntqIhQ1BRmynh4qEKQSSSRSWVyXRjmTbZIX9V2Q==",
      "license": "MIT",
      "optional": true,
      "peerDependencies": {
        "webpack-cli": "4.x.x"
      },
      "peerDependenciesMeta": {
        "webpack-dev-server": {
          "optional": true
        }
      }
    },
    "node_modules/@xtuc/ieee754": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/@xtuc/ieee754/-/ieee754-1.2.0.tgz",
      "integrity": "sha512-DX8nKgqcGwsc0eJSqYt5lwP4DH5FlHnmuWWBRy7X0NcaGR0ZtuyeESgMwTYVEtxmsNGY+qit4QYT/MIYTOTPeA==",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/@xtuc/long": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/@xtuc/long/-/long-4.2.2.tgz",
      "integrity": "sha512-NuHqBY1PB/D8xU6s/thBgOAiAP7HOYDQ32+BFZILJ8ivkUkAHQnWfn6WhL79Owj1qmUnoN/YPhktdIoucipkAQ==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/abab": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.6.tgz",
      "integrity": "sha512-j2afSsaIENvHZN2B8GOpF566vZ5WVk5opAiMTvWgaQT8DkbOqsTfvNAvHoRGU2zzP8cPoqys+xHTRDWW8L+/BA==",
      "deprecated": "Use your platform's native atob() and btoa() methods instead",
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.3.4",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.4.tgz",
      "integrity": "sha512-ueEepnujpqee2o5aIYnvHU6C0A42MNdsIDeqy5BydrkuC5R1ZuUFnm27EeFJGoEHJQgn3uleRvmTXaJgfXbt4g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "acorn": "^8.11.0"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/ajv": {
      "version": "6.12.6",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ajv-formats/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/array-buffer-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.2.tgz",
      "integrity": "sha512-LHE+8BuR7RYGDKvnrmcuSq3tDcKv9OFEXQt/HpbZhY7V6h0zlUXutnAD82GiFx9rdieCMjkvtcsPqBwgUl1Iiw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "is-array-buffer": "^3.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/array.prototype.findindex": {
      "version": "2.2.4",
      "resolved": "https://registry.npmjs.org/array.prototype.findindex/-/array.prototype.findindex-2.2.4.tgz",
      "integrity": "sha512-LLm4mhxa9v8j0A/RPnpQAP4svXToJFh+Hp1pNYl5ZD5qpB4zdx/D4YjpVcETkhFbUKWO3iGMVLvrOnnmkAJT6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.6",
        "es-object-atoms": "^1.0.0",
        "es-shim-unscopables": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/arraybuffer.prototype.slice": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.4.tgz",
      "integrity": "sha512-BNoCY6SXXPQ7gF2opIP4GBE+Xw7U+pHMYKuzjgCN3GwiaIR09UUeKfheyIry77QtrCBlC0KK0q5/TER/tYh3PQ==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.1",
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "is-array-buffer": "^3.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/asn1": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/asn1/-/asn1-0.2.6.tgz",
      "integrity": "sha512-ix/FxPn0MDjeyJ7i/yoHGFt/EX6LyNbxSEhPPXODPL+KB0VPk86UYfL0lMdy+KCnv+fmvIzySwaK5COwqVbWTQ==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": "~2.1.0"
      }
    },
    "node_modules/assert-plus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/assert-plus/-/assert-plus-1.0.0.tgz",
      "integrity": "sha512-NfJ4UzBCcQGLDlQq7nHxH+tv3kyZ0hHQqF5BO6J7tNJeP5do1llPr8dZ8zHonfhAu0PHAdMkSo+8o0wxg9lZWw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/async-function": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/async-function/-/async-function-1.0.0.tgz",
      "integrity": "sha512-hsU18Ae8CDTR6Kgu9DYf0EbCr/a5iGL0rytQDobUcdpYOKokk8LEjVphnXkDkgpi0wYVsqrXuP0bZxJaTqdgoA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/available-typed-arrays": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
      "license": "MIT",
      "dependencies": {
        "possible-typed-array-names": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/aws-sign2": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/aws-sign2/-/aws-sign2-0.7.0.tgz",
      "integrity": "sha512-08kcGqnYf/YmjoRhfxyu+CLxBjUtHLXLXX/vUfx9l2LYzG3c1m61nrpyFUZI6zeS+Li/wWMMidD9KgrqtGq3mA==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/aws4": {
      "version": "1.13.2",
      "resolved": "https://registry.npmjs.org/aws4/-/aws4-1.13.2.tgz",
      "integrity": "sha512-lHe62zvbTB5eEABUVi/AwVh0ZKY9rMMDhmm+eeyuuUQbQ3+J+fONVQOZyj+DdrvD4BY33uYniyRJ4UJIaSKAfw==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.9.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.9.0.tgz",
      "integrity": "sha512-re4CqKTJaURpzbLHtIi6XpDv20/CnpXOtjRY5/CU32L8gU8ek9UIivcfvSWvmKEngmVbrUtPpdDwWDWL7DNHvg==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog==",
      "license": "MIT",
      "engines": {
        "node": "^4.5.0 || >= 5.9"
      }
    },
    "node_modules/bcrypt-pbkdf": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/bcrypt-pbkdf/-/bcrypt-pbkdf-1.0.2.tgz",
      "integrity": "sha512-qeFIXtP4MSoi6NLqO12WfqARWWuCKi2Rn/9hJLEmtB5yTNr9DqFWkJRCf2qShWzPeAMRnOgCrq0sg/KLv5ES9w==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tweetnacl": "^0.14.3"
      }
    },
    "node_modules/bcryptjs": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/bcryptjs/-/bcryptjs-2.4.3.tgz",
      "integrity": "sha512-V/Hy/X9Vt7f3BbPJEi8BdVFMByHi+jNXrYkW3huaybV/kQ0KJg0Y6PkEMbn+zeT+i+SiKZ/HMqJGIIt4LZDqNQ==",
      "license": "MIT"
    },
    "node_modules/big.js": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/big.js/-/big.js-5.2.2.tgz",
      "integrity": "sha512-vyL2OymJxmarO8gxMr0mhChsO9QGwhynfuu4+MHTAW6czfq9humCB7rKpUjDd9YUiDPU4mzpyupFSvOClAwbmQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bl": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/bl/-/bl-1.2.3.tgz",
      "integrity": "sha512-pvcNpa0UU69UT341rO6AYy4FVAIkUHuZXRIWbq+zHnsVcRzDDjIAhGuuYoi0d//cwIwtt4pkpKycWEfjdV+vww==",
      "license": "MIT",
      "dependencies": {
        "readable-stream": "^2.3.5",
        "safe-buffer": "^5.1.1"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/bootstrap": {
      "version": "5.3.6",
      "resolved": "https://registry.npmjs.org/bootstrap/-/bootstrap-5.3.6.tgz",
      "integrity": "sha512-jX0GAcRzvdwISuvArXn3m7KZscWWFAf1MKBcnzaN02qWMb3jpMoUX4/qgeiGzqyIb4ojulRzs89UCUmGcFSzTA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT",
      "peerDependencies": {
        "@popperjs/core": "^2.11.8"
      }
    },
    "node_modules/bootstrap-icons": {
      "version": "1.13.1",
      "resolved": "https://registry.npmjs.org/bootstrap-icons/-/bootstrap-icons-1.13.1.tgz",
      "integrity": "sha512-ijombt4v6bv5CLeXvRWKy7CuM3TRTuPEuGaGKvTV5cz65rQSY8RQ2JcHt6b90cBBAC7s8fsf2EkQDldzCoXUjw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/twbs"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/bootstrap"
        }
      ],
      "license": "MIT"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.0",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.0.tgz",
      "integrity": "sha512-PJ8gYKeS5e/whHBh8xrwYK+dAvEj7JXtz6uTucnMRB8OiGTsKccFekoRrjajPBHV8oOY+2tI4uxeceSimKwMFA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "caniuse-lite": "^1.0.30001718",
        "electron-to-chromium": "^1.5.160",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/bybit-api": {
      "version": "4.1.10",
      "resolved": "https://registry.npmjs.org/bybit-api/-/bybit-api-4.1.10.tgz",
      "integrity": "sha512-Z0L2FJEKni6kL5gj9Ku2XssgtugTZ09h3Exb933HFvFvdLFA0quDiEHdVjWEEqZAR2VZFpIqFq1VsxAMmzUD5w==",
      "license": "MIT",
      "dependencies": {
        "axios": "^1.7.9",
        "isomorphic-ws": "^4.0.1",
        "ws": "^7.4.0"
      },
      "funding": {
        "type": "individual",
        "url": "https://github.com/sponsors/tiagosiebler"
      },
      "optionalDependencies": {
        "source-map-loader": "^2.0.0",
        "ts-loader": "^8.0.11",
        "webpack": "^5.4.0",
        "webpack-bundle-analyzer": "^4.1.0",
        "webpack-cli": "^4.2.0"
      }
    },
    "node_modules/bybit-api/node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/call-bind": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.8.tgz",
      "integrity": "sha512-oKlSFMcMwpUg2ednkhQ454wfWiU/ul3CkJe/PEHcTKuiX6RpbehUiFMXu13HalGZxfUwCQzZG747YXBn1im9ww==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.0",
        "es-define-property": "^1.0.0",
        "get-intrinsic": "^1.2.4",
        "set-function-length": "^1.2.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001723",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001723.tgz",
      "integrity": "sha512-1R/elMjtehrFejxwmexeXAtae5UO9iSyFn6G/I806CYC/BLyyBk1EPhrKBkWhy6wM6Xnm47dSJQec+tLJ39WHw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0",
      "optional": true
    },
    "node_modules/caseless": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/caseless/-/caseless-0.12.0.tgz",
      "integrity": "sha512-4tYFyifaFfGacoiObjJegolkwSU4xQNGbVgUiNYVUxbQ2x2lUsFvY4hVgVzGiIe6WLOPqycWXA40l+PWsxthUw==",
      "license": "Apache-2.0"
    },
    "node_modules/ccxt": {
      "version": "4.4.89",
      "resolved": "https://registry.npmjs.org/ccxt/-/ccxt-4.4.89.tgz",
      "integrity": "sha512-5iX8BcbVFo/APqZpVD58F+aL8etJi8Rr60yGIcM8Eu0tm19HpUDy08uHo7tJOaUKEqlds78GCbTmF6BVp5ECLA==",
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "ws": "^8.8.1"
      },
      "engines": {
        "node": ">=15.0.0"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chalk/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chart.js": {
      "version": "4.4.9",
      "resolved": "https://registry.npmjs.org/chart.js/-/chart.js-4.4.9.tgz",
      "integrity": "sha512-EyZ9wWKgpAU0fLJ43YAEIF8sr5F2W3LqbS40ZJyHIner2lY14ufqv2VMp69MAiZ2rpwxEUxEhIH/0U3xyRynxg==",
      "license": "MIT",
      "dependencies": {
        "@kurkle/color": "^0.3.0"
      },
      "engines": {
        "pnpm": ">=8"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/clone-deep": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz",
      "integrity": "sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-plain-object": "^2.0.4",
        "kind-of": "^6.0.2",
        "shallow-clone": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/crypto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/crypto/-/crypto-1.0.1.tgz",
      "integrity": "sha512-VxBKmeNcqQdiUQUW2Tzq0t377b54N2bMtXO/qiLa+6eRRmmC4qT3D4OnTGoT/U6O9aklQ/jTwbOtRMTTY8G0Ig==",
      "deprecated": "This package is no longer supported. It's now a built-in Node module. If you've depended on crypto, you should switch to the one that's built-in.",
      "license": "ISC"
    },
    "node_modules/dashdash": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/dashdash/-/dashdash-1.14.1.tgz",
      "integrity": "sha512-jRFi8UDGo6j+odZiEpjazZaWqEal3w/basFjQHQEwVtZJGDpxbH1MeYluwCS8Xq5wmLJooDlMgvVarmWfGM44g==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/data-view-buffer": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-buffer/-/data-view-buffer-1.0.2.tgz",
      "integrity": "sha512-EmKO5V3OLXh1rtK2wgXRansaK1/mtVdTUEiEI0W8RkvgT05kfxaH29PliLnpLP73yYO6142Q72QNa8Wx/A5CqQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/data-view-byte-length": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/data-view-byte-length/-/data-view-byte-length-1.0.2.tgz",
      "integrity": "sha512-tuhGbE6CfTM9+5ANGf+oQb72Ky/0+s3xKUpHvShfiz2RxMFgFPjsXuRLBVMtvMs15awe45SRb83D6wH4ew6wlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/inspect-js"
      }
    },
    "node_modules/data-view-byte-offset": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/data-view-byte-offset/-/data-view-byte-offset-1.0.1.tgz",
      "integrity": "sha512-BS8PfmtDGnrgYdOonGZQdLZslWIeCGFP9tpan0hi1Co2Zr2NKADsvGYA8XxuG/4UWgJ6Cjtv+YJnB6MM69QGlQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-data-view": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/debounce": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/debounce/-/debounce-1.2.1.tgz",
      "integrity": "sha512-XRRe6Glud4rd/ZGQfiV1ruXSfbvfJedlV9Y6zOlP+2K04vBYiJEte6stfFkCP03aMnY5tsipamumUjL14fofug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/dotenv": {
      "version": "16.5.0",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.5.0.tgz",
      "integrity": "sha512-m/C+AwOAr9/W1UOIZUo232ejMNnJAJtYQjUbHoNTBNTJSvqzzDh7vnrei3o3r3m9blf6ZoDkvcw0VmozNRFJxg==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/duplexer": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/duplexer/-/duplexer-0.1.2.tgz",
      "integrity": "sha512-jtD6YG370ZCIi/9GTaJKQxWTZD045+4R4hTk/x1UyoqadyJ9x9CgSi1RlVDQF8U2sxLLSnFkCaMihqljHIWgMg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/ecc-jsbn": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/ecc-jsbn/-/ecc-jsbn-0.1.2.tgz",
      "integrity": "sha512-eh9O+hwRHNbG4BLTjEl3nw044CkGm5X6LoaCf7LPp7UU8Qrt47JYNi6nPX8xjW97TKGKm1ouctg0QSpZe9qrnw==",
      "license": "MIT",
      "dependencies": {
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.1.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.167",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.167.tgz",
      "integrity": "sha512-LxcRvnYO5ez2bMOFpbuuVuAI5QNeY1ncVytE/KXaL6ZNfzX1yPlAO0nSOyIHx2fVAuUprMqPs/TdVhUFZy7SIQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/emojis-list": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/emojis-list/-/emojis-list-3.0.0.tgz",
      "integrity": "sha512-/kyM18EfinwXZbno9FyUGeFh87KC8HRQBQGildHZbEuRyWFOmv1U10o9BBp8XVZDVNNuQKyIGIu5ZYAAXJ0V2Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/engine.io": {
      "version": "6.6.4",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-6.6.4.tgz",
      "integrity": "sha512-ZCkIjSYNDyGn0R6ewHDtXgns/Zre/NT6Agvq1/WobF7JXgFff4SeDroKiCO3fNJreU9YG429Sc81o4w5ok/W5g==",
      "license": "MIT",
      "dependencies": {
        "@types/cors": "^2.8.12",
        "@types/node": ">=10.0.0",
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "~0.7.2",
        "cors": "~2.8.5",
        "debug": "~4.3.1",
        "engine.io-parser": "~5.2.1",
        "ws": "~8.17.1"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/engine.io-parser": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.3.tgz",
      "integrity": "sha512-HqD3yTBfnBxIrbnM1DoD6Pcq8NECnh8d4As1Qgh0z5Gg3jRRIqijury0CL3ghu/edArpUYiYqQiDUQBIs4np3Q==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/engine.io/node_modules/cookie": {
      "version": "0.7.2",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/engine.io/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/engine.io/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/engine.io/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/enhanced-resolve": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-4.5.0.tgz",
      "integrity": "sha512-Nv9m36S/vxpsI+Hc4/ZGRs0n9mXqSWGGq49zxb/cJfPAQMbUtttJAlNPS4AQzaBdw/pKskw5bMbekT/Y7W/Wlg==",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "memory-fs": "^0.5.0",
        "tapable": "^1.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/envinfo": {
      "version": "7.14.0",
      "resolved": "https://registry.npmjs.org/envinfo/-/envinfo-7.14.0.tgz",
      "integrity": "sha512-CO40UI41xDQzhLB1hWyqUKgFhs250pNcGbyGKe1l/e4FSaI/+YE4IMG76GDt0In67WLPACIITC+sOi08x4wIvg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "envinfo": "dist/cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/errno": {
      "version": "0.1.8",
      "resolved": "https://registry.npmjs.org/errno/-/errno-0.1.8.tgz",
      "integrity": "sha512-dJ6oBr5SQ1VSd9qkk7ByRgb/1SH4JZjCHSW/mr63/QcXO9zLVxvJ6Oy13nio03rxpSnVDDjFor75SjVeZWPW/A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "prr": "~1.0.1"
      },
      "bin": {
        "errno": "cli.js"
      }
    },
    "node_modules/es-abstract": {
      "version": "1.24.0",
      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.24.0.tgz",
      "integrity": "sha512-WSzPgsdLtTcQwm4CROfS5ju2Wa1QQcVeT37jFjYzdFz1r9ahadC8B8/a4qxJxM+09F18iumCdRmlr96ZYkQvEg==",
      "license": "MIT",
      "dependencies": {
        "array-buffer-byte-length": "^1.0.2",
        "arraybuffer.prototype.slice": "^1.0.4",
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "data-view-buffer": "^1.0.2",
        "data-view-byte-length": "^1.0.2",
        "data-view-byte-offset": "^1.0.1",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "es-set-tostringtag": "^2.1.0",
        "es-to-primitive": "^1.3.0",
        "function.prototype.name": "^1.1.8",
        "get-intrinsic": "^1.3.0",
        "get-proto": "^1.0.1",
        "get-symbol-description": "^1.1.0",
        "globalthis": "^1.0.4",
        "gopd": "^1.2.0",
        "has-property-descriptors": "^1.0.2",
        "has-proto": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "internal-slot": "^1.1.0",
        "is-array-buffer": "^3.0.5",
        "is-callable": "^1.2.7",
        "is-data-view": "^1.0.2",
        "is-negative-zero": "^2.0.3",
        "is-regex": "^1.2.1",
        "is-set": "^2.0.3",
        "is-shared-array-buffer": "^1.0.4",
        "is-string": "^1.1.1",
        "is-typed-array": "^1.1.15",
        "is-weakref": "^1.1.1",
        "math-intrinsics": "^1.1.0",
        "object-inspect": "^1.13.4",
        "object-keys": "^1.1.1",
        "object.assign": "^4.1.7",
        "own-keys": "^1.0.1",
        "regexp.prototype.flags": "^1.5.4",
        "safe-array-concat": "^1.1.3",
        "safe-push-apply": "^1.0.0",
        "safe-regex-test": "^1.1.0",
        "set-proto": "^1.0.0",
        "stop-iteration-iterator": "^1.1.0",
        "string.prototype.trim": "^1.2.10",
        "string.prototype.trimend": "^1.0.9",
        "string.prototype.trimstart": "^1.0.8",
        "typed-array-buffer": "^1.0.3",
        "typed-array-byte-length": "^1.0.3",
        "typed-array-byte-offset": "^1.0.4",
        "typed-array-length": "^1.0.7",
        "unbox-primitive": "^1.1.0",
        "which-typed-array": "^1.1.19"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-shim-unscopables": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/es-shim-unscopables/-/es-shim-unscopables-1.1.0.tgz",
      "integrity": "sha512-d9T8ucsEhh8Bi1woXCf+TIKDIROLG5WCkxg8geBCbvk22kzwC5G2OnXVMO6FUsvQlgUUXQ2itephWDLqDzbeCw==",
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-to-primitive": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.3.0.tgz",
      "integrity": "sha512-w+5mJ3GuFL+NjVtJlvydShqE1eN3h3PbI7/5LAsYJP/2qtuMXjfL2LpHSRqo4b4eSF5K/DH1JXKUAHSB2UW50g==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7",
        "is-date-object": "^1.0.5",
        "is-symbol": "^1.0.4"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/eslint-scope": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "esrecurse": "^4.3.0",
        "estraverse": "^4.1.1"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/esrecurse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "estraverse": "^5.2.0"
      },
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esrecurse/node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-3.1.2.tgz",
      "integrity": "sha512-tvtQIeLVHjDkJYnzf2dgVMxfuSGJeM/7UCG17TT4EumTfNtF+0nebF/4zWOIkCreAbtNqhGEboB6BWrwqNaw4Q==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/express-rate-limit": {
      "version": "7.5.0",
      "resolved": "https://registry.npmjs.org/express-rate-limit/-/express-rate-limit-7.5.0.tgz",
      "integrity": "sha512-eB5zbQh5h+VenMPM3fh+nw1YExi5nMr6HUCR62ELSP11huvxm/Uir1H1QEyTkk5QX6A58pX6NmaTMceKZ0Eodg==",
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      },
      "funding": {
        "url": "https://github.com/sponsors/express-rate-limit"
      },
      "peerDependencies": {
        "express": "^4.11 || 5 || ^5.0.0-beta.1"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/extsprintf": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/extsprintf/-/extsprintf-1.3.0.tgz",
      "integrity": "sha512-11Ndz7Nv+mvAC1j0ktTa7fAb0vLyGGX+rMHNBYQviQDGU0Hw7lhctJANqbPhu9nV9/izT/IntTgZ7Im/9LJs9g==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT"
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/fast-uri": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fastify"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fastify"
        }
      ],
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/fastest-levenshtein": {
      "version": "1.0.16",
      "resolved": "https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz",
      "integrity": "sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4.9.1"
      }
    },
    "node_modules/file-type": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/file-type/-/file-type-3.9.0.tgz",
      "integrity": "sha512-RLoqTXE8/vPmMuTI88DAzhMYC99I8BWv7zYP4A1puo5HIjEJ5EX48ighy4ZyKMG9EDXxBgW6e++cn7d1xuFghA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/flat/-/flat-5.0.2.tgz",
      "integrity": "sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==",
      "license": "BSD-3-Clause",
      "optional": true,
      "bin": {
        "flat": "cli.js"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/for-each": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.5.tgz",
      "integrity": "sha512-dKx12eRCVIzqCxFGplyFKJMPvLEWgmNtUrpTiJIR5u97zEhRG8ySrtboPHZXx7daLxQVrl643cTzbab2tkQjxg==",
      "license": "MIT",
      "dependencies": {
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/forever-agent": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/forever-agent/-/forever-agent-0.6.1.tgz",
      "integrity": "sha512-j0KLYPhm6zeac4lz3oJ3o65qvgQCcPubiyotZrXqEaG4hNagNYO8qdlUrX5vwqv9ohqeT/Z3j6+yW067yWWdUw==",
      "license": "Apache-2.0",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.3.tgz",
      "integrity": "sha512-qsITQPfmvMOSAdeyZ+12I1c+CKSstAFAwu+97zrnWAbIr5u8wfsExUzCesVLC8NgHuRUqNN4Zy6UPWUTRGslcA==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs": {
      "version": "0.0.1-security",
      "resolved": "https://registry.npmjs.org/fs/-/fs-0.0.1-security.tgz",
      "integrity": "sha512-3XY9e1pP0CVEUCdj5BmfIZxRBTSDycnbqhIOGec9QYtmVH2fbLpj86CFWkrNOkt/Fvty4KZG5lTglL9j/gJ87w==",
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/function.prototype.name": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.8.tgz",
      "integrity": "sha512-e5iwyodOHhbMr/yNrc7fDYG4qlbIvI5gajyzPnb5TCwyhjApznQh1BMFou9b30SevY43gCJKXycoCBjMbsuW0Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "functions-have-names": "^1.2.3",
        "hasown": "^2.0.2",
        "is-callable": "^1.2.7"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/functions-have-names": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-symbol-description": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.1.0.tgz",
      "integrity": "sha512-w9UMqWwJxHNOvoNzSJ2oPF5wvYcvP7jUvYzhp67yEhTi17ZDBBC1z9pTdGuzjD+EFIqLSYRweZjqfiPzQ06Ebg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/getpass": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/getpass/-/getpass-0.1.7.tgz",
      "integrity": "sha512-0fzj9JxOLfJ+XGLhR8ze3unN0KZCgZwiSSDz168VERjK8Wl8kVSdcu2kspd4s4wtAa1y/qrVRiAA0WclVsu0ng==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause",
      "optional": true
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "license": "MIT",
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/gzip-size": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/gzip-size/-/gzip-size-6.0.0.tgz",
      "integrity": "sha512-ax7ZYomf6jqPTQ4+XCpUGyXKHk5WweS+e05MBO4/y3WJ5RkmPXNKvX+bx1behVILVwr6JSQvZAku021CHPXG3Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "duplexer": "^0.1.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/har-schema": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/har-schema/-/har-schema-2.0.0.tgz",
      "integrity": "sha512-Oqluz6zhGX8cyRaTQlFMPw80bSJVG2x/cFb8ZPhUILGgHka9SsokCCOQgpveePerqidZOrT14ipqfJb7ILcW5Q==",
      "license": "ISC",
      "peer": true,
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/har-validator": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/har-validator/-/har-validator-5.1.5.tgz",
      "integrity": "sha512-nmT2T0lljbxdQZfspsno9hgrG3Uir6Ks5afism62poxqBM6sDnMEuPmzTq8XN0OEwqKLLdh1jQI3qyE66Nzb3w==",
      "deprecated": "this library is no longer supported",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ajv": "^6.12.3",
        "har-schema": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/has-bigints": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.1.0.tgz",
      "integrity": "sha512-R3pbpkcIqv2Pm3dUwgjclDRVmWpTJW2DcMzcIhEXEx1oh/CEMObMm3KLmRJOdvhM7o4uQBnwr8pzRK2sJWIqfg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "license": "MIT",
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-proto": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.2.0.tgz",
      "integrity": "sha512-KIL7eQPfHQRC8+XluaIw7BHUwwqL19bQn4hzNgdr+1wXoU0KKj6rufu47lhY7KbJR2C6T6+PfyN0Ea7wkSS+qQ==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-signature": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.4.0.tgz",
      "integrity": "sha512-G5akfn7eKbpDN+8nPS/cb57YeA1jLTVxjpCj7tmm3QKPdyDy7T+qSC40e9ptydSWvkwjSXw1VbkpyEm39ukeAg==",
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^2.0.2",
        "sshpk": "^1.18.0"
      },
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/internal-slot": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.1.0.tgz",
      "integrity": "sha512-4gd7VpWNQNB4UKKCFFVcp1AVv+FMOgs9NKzjHKusc8jTMhd5eL1NqQqOpE0KzMds804/yHlglp3uxgluOqAPLw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "hasown": "^2.0.2",
        "side-channel": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/interpret": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/interpret/-/interpret-2.2.0.tgz",
      "integrity": "sha512-Ju0Bz/cEia55xDwUWEa8+olFpCiQoypjnQySseKtmjNrnps3P+xfpUmGr90T7yjlVJmOtybRvPXhKMbHr+fWnw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-array-buffer": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.5.tgz",
      "integrity": "sha512-DDfANUiiG2wC1qawP66qlTugJeL5HyzMpfr8lLK+jMQirGzNod0B12cFB/9q838Ru27sBwfw78/rdoU7RERz6A==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-async-function": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-async-function/-/is-async-function-2.1.1.tgz",
      "integrity": "sha512-9dgM/cZBnNvjzaMYHVoxxfPj2QXt22Ev7SuuPrs+xav0ukGB0S6d4ydZdEiM48kLx5kDV+QBPrpVnFyefL8kkQ==",
      "license": "MIT",
      "dependencies": {
        "async-function": "^1.0.0",
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.1",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-bigint": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.1.0.tgz",
      "integrity": "sha512-n4ZT37wG78iz03xPRKJrHTdZbe3IicyucEtdRsV5yglwc3GyUfbAfpSeD0FJ41NbUNSt5wbhqfp1fS+BgnvDFQ==",
      "license": "MIT",
      "dependencies": {
        "has-bigints": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-boolean-object": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.2.2.tgz",
      "integrity": "sha512-wa56o2/ElJMYqjCjGkXri7it5FbebW5usLw/nPmCMs5DeZ7eziSYZhSmPRn0txqeW4LnAmQQU7FgqLpsEFKM4A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-callable": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-data-view": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/is-data-view/-/is-data-view-1.0.2.tgz",
      "integrity": "sha512-RKtWF8pGmS87i2D6gqQu/l7EYRlVdfzemCJN/P3UOs//x1QE7mfhvzHIApBTRf7axvT6DMGwSwBXYCT0nfB9xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "is-typed-array": "^1.1.13"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-date-object": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.1.0.tgz",
      "integrity": "sha512-PwwhEakHVKTdRNVOw+/Gyh0+MzlCl4R6qKvkhuvLtPMggI1WAHt9sOwZxQLSGpUaDnrdyDsomoRgNnCfKNSXXg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-finalizationregistry": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-finalizationregistry/-/is-finalizationregistry-1.1.1.tgz",
      "integrity": "sha512-1pC6N8qWJbWoPtEjgcL2xyhQOP491EQjeUo3qTKcmV8YSDDJrOepfG8pcC7h/QgnQHYSv0mJ3Z/ZWxmatVrysg==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-generator-function": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-function/-/is-generator-function-1.1.0.tgz",
      "integrity": "sha512-nPUB5km40q9e8UfN/Zc24eLlzdSf9OfKByBw9CIdw4H1giPMeA0OIJvbchsCu4npfI2QcMVBsGEBHKZ7wLTWmQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-proto": "^1.0.0",
        "has-tostringtag": "^1.0.2",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-map": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-map/-/is-map-2.0.3.tgz",
      "integrity": "sha512-1Qed0/Hr2m+YqxnM09CjA2d/i6YZNfF6R2oRAOj36eUdS6qIV/huPJNSEpKbupewFs+ZsJlxsjjPbc0/afW6Lw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-negative-zero": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-number-object": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.1.1.tgz",
      "integrity": "sha512-lZhclumE1G6VYD8VHe35wFaIif+CTy5SJIi5+3y4psDgWu4wPDoBhF8NxUOinEc7pHgiTsT6MaBb92rKhhD+Xw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-plain-object": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
      "integrity": "sha512-h5PpgXkWitc38BBMYawTYMWJHFZJVnBquFE57xFpjB8pJFiF6gZ+bU+WyI/yqXiFR5mdLsgYNaPe8uao6Uv9Og==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "isobject": "^3.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-regex": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.2.1.tgz",
      "integrity": "sha512-MjYsKHO5O7mCsmRGxWcLWheFqN9DJ/2TmngvjKXihe6efViPqc274+Fx/4fYj/r03+ESvBdTXK0V6tA3rgez1g==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-set": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/is-set/-/is-set-2.0.3.tgz",
      "integrity": "sha512-iPAjerrse27/ygGLxw+EBR9agv9Y6uLeYVJMu+QNCoouJ1/1ri0mGrcWpfCqFZuzzx3WjtwxG098X+n4OuRkPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-shared-array-buffer": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.4.tgz",
      "integrity": "sha512-ISWac8drv4ZGfwKl5slpHG9OwPNty4jOWPRIhBpxOoD+hqITiwuipOQ2bNthAzwA3B4fIjO4Nln74N0S9byq8A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-string": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.1.1.tgz",
      "integrity": "sha512-BtEeSsoaQjlSPBemMQIrY1MY0uM6vnS1g5fmufYOtnxLGUZM2178PKbhsk7Ffv58IX+ZtcvoGwccYsh0PglkAA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-symbol": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.1.1.tgz",
      "integrity": "sha512-9gGx6GTtCQM73BgmHQXfDmLtfjjTUDSyoxTCbp5WtoixAhfgsDirWIcVQ/IHpvI5Vgd5i/J5F7B9cN/WlVbC/w==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "has-symbols": "^1.1.0",
        "safe-regex-test": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typed-array": {
      "version": "1.1.15",
      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.15.tgz",
      "integrity": "sha512-p3EcsicXjit7SaskXHs1hA91QxgTw46Fv6EFKKGS5DRFLD8yKnohjF3hxoju94b/OcMZoQukzpPpBE9uLVKzgQ==",
      "license": "MIT",
      "dependencies": {
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-typedarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
      "license": "MIT"
    },
    "node_modules/is-weakmap": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/is-weakmap/-/is-weakmap-2.0.2.tgz",
      "integrity": "sha512-K5pXYOm9wqY1RgjpL3YTkF39tni1XajUIkawTLUo9EZEVUFga5gSQJF8nNS7ZwJQ02y+1YCNYcMh+HIf1ZqE+w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakref": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.1.1.tgz",
      "integrity": "sha512-6i9mGWSlqzNMEqpCp93KwRS1uUOodk2OJ6b+sq7ZPDSy2WuI5NFIxp/254TytR8ftefexkWn5xNiHUNpPOfSew==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-weakset": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/is-weakset/-/is-weakset-2.0.4.tgz",
      "integrity": "sha512-mfcwb6IzQyOKTs84CQMrOwW4gQcaTOAWJ0zzJCl2WSPDrWk/OzDaImWFH3djXhb24g4eudZfLRozAvPGw4d9hQ==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "get-intrinsic": "^1.2.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/isobject": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/isobject/-/isobject-3.0.1.tgz",
      "integrity": "sha512-WhB9zCku7EGTj/HQQRz5aUQEUeoQZH2bWcltRErOpymJ4boYE6wL9Tbr23krRPSZ+C5zqNSrSw+Cc7sZZ4b7vg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/isomorphic-ws": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/isomorphic-ws/-/isomorphic-ws-4.0.1.tgz",
      "integrity": "sha512-BhBvN2MBpWTaSHdWRb/bwdZJ1WaehQ2L1KngkCkfLUGF0mAWAT1sQUQacEmQ0jXkFw/czDXPNQSL5u2/Krsz1w==",
      "license": "MIT",
      "peerDependencies": {
        "ws": "*"
      }
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
      "license": "MIT"
    },
    "node_modules/jest-worker": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-27.5.1.tgz",
      "integrity": "sha512-7vuh85V5cdDofPyxn58nrPjBktZo0u9x1g8WtjQol+jZDaE+fhN+cIvTj11GndBnMnyfrUOG1sZQxCdjKh+DKg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/jest-worker/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jsbn": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
      "license": "MIT"
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/json-schema": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/json-schema/-/json-schema-0.4.0.tgz",
      "integrity": "sha512-es94M3nTIfsEPisRafak+HDLfHXnKBhV3vU5eqPcS3flIWqcxJWgXHXiey3YrpaNsanY5ei1VoYEbOzijuq9BA==",
      "license": "(AFL-2.1 OR BSD-3-Clause)"
    },
    "node_modules/json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
      "license": "ISC"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/jsprim": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-2.0.2.tgz",
      "integrity": "sha512-gqXddjPqQ6G40VdnI6T6yObEC+pDNvyP95wdQhkWkg7crHH3km5qP1FsOXEkzEQwnz6gz5qGTn1c2Y52wP3OyQ==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      }
    },
    "node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kind-of": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/loader-runner": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/loader-runner/-/loader-runner-4.3.0.tgz",
      "integrity": "sha512-3R/1M+yS3j5ou80Me59j7F9IMs4PXs3VqRrm0TU3AbKPxlmpoY1TNscJV/oGJXo8qCatFGTfDbY6W6ipGOYXfg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6.11.5"
      }
    },
    "node_modules/loader-utils": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.4.tgz",
      "integrity": "sha512-xXqpXoINfFhgua9xiqD8fPFHgkoq1mmmpE92WlDbm9rNRd/EbRb+Gqf908T2DMfuHjjJlksiK2RbHVOdD/MqSw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "big.js": "^5.2.2",
        "emojis-list": "^3.0.0",
        "json5": "^2.1.2"
      },
      "engines": {
        "node": ">=8.9.0"
      }
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/memory-fs": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/memory-fs/-/memory-fs-0.5.0.tgz",
      "integrity": "sha512-jA0rdU5KoQMC0e6ppoNRtpp6vjFq6+NY7r8hywnC7V+1Xj/MtHwGIbB1QaK/dunyjWteJzmkpd7ooeWg10T7GA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "errno": "^0.1.3",
        "readable-stream": "^2.0.1"
      },
      "engines": {
        "node": ">=4.3.0 <5.0.0 || >=5.10"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/mrmime": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/mrmime/-/mrmime-2.0.1.tgz",
      "integrity": "sha512-Y3wQdFg2Va6etvQ5I82yUhGdsKrcYox6p7FfL1LbK2J4V01F9TGlepTIhnK24t7koZibmg82KGglhA1XK5IsLQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/neo-async": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/neo-async/-/neo-async-2.6.2.tgz",
      "integrity": "sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/node-telegram-bot-api": {
      "version": "0.64.0",
      "resolved": "https://registry.npmjs.org/node-telegram-bot-api/-/node-telegram-bot-api-0.64.0.tgz",
      "integrity": "sha512-/gxCuaEDUyWMBiHInP0ufopUkaaKprXiv3lyP9MMZdPy2KPfYKNYNKfd1Ph7o9KhfURDtOYowPZCi4UCr+2caw==",
      "license": "MIT",
      "dependencies": {
        "@cypress/request": "^3.0.1",
        "@cypress/request-promise": "^5.0.0",
        "array.prototype.findindex": "^2.0.2",
        "bl": "^1.2.3",
        "debug": "^3.2.7",
        "eventemitter3": "^3.0.0",
        "file-type": "^3.9.0",
        "mime": "^1.6.0",
        "pump": "^2.0.0"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/node-telegram-bot-api/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/node-telegram-bot-api/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/nodemailer": {
      "version": "6.10.1",
      "resolved": "https://registry.npmjs.org/nodemailer/-/nodemailer-6.10.1.tgz",
      "integrity": "sha512-Z+iLaBGVaSjbIzQ4pX6XV41HrooLsQ10ZWPUehGmuantvzWoDVBnmsdUcOIDM1t+yPor5pDhVlDESgOMEGxhHA==",
      "license": "MIT-0",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/oauth-sign": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
      "integrity": "sha512-fexhUFFPTGV8ybAtSIGbV6gOkSv8UtRbDBnAyLQw4QPKkgNlsH2ByPGtMUqdWkos6YCRmAqViwgZrJc/mRDzZQ==",
      "license": "Apache-2.0",
      "peer": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/object.assign": {
      "version": "4.1.7",
      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.7.tgz",
      "integrity": "sha512-nK28WOo+QIjBkDduTINE4JkF/UJJKyf2EJxvJKfblDpyg0Q+pkOHNTL0Qwy6NP6FhE/EnzV73BxxqcJaXY9anw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.3",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0",
        "has-symbols": "^1.1.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/opener": {
      "version": "1.5.2",
      "resolved": "https://registry.npmjs.org/opener/-/opener-1.5.2.tgz",
      "integrity": "sha512-ur5UIdyw5Y7yEj9wLzhqXiy6GZ3Mwx0yGI+5sMn2r0N0v3cKJvUmFH5yPP+WXh9e0xfyzyJX95D8l088DNFj7A==",
      "license": "(WTFPL OR MIT)",
      "optional": true,
      "bin": {
        "opener": "bin/opener-bin.js"
      }
    },
    "node_modules/own-keys": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/own-keys/-/own-keys-1.0.1.tgz",
      "integrity": "sha512-qFOyK5PjiWZd+QQIh+1jhdb9LpxTF0qs7Pm8o5QHYZ0M3vKqSqzsZaEB6oWlxZ+q2sJBMI/Ktgd2N5ZwQoRHfg==",
      "license": "MIT",
      "dependencies": {
        "get-intrinsic": "^1.2.6",
        "object-keys": "^1.1.1",
        "safe-push-apply": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path": {
      "version": "0.12.7",
      "resolved": "https://registry.npmjs.org/path/-/path-0.12.7.tgz",
      "integrity": "sha512-aXXC6s+1w7otVF9UletFkFcDsJeO7lSZBPUQhtb5O0xJe8LtYhj/GxldoL09bBj9+ZmE2hNoHqQSFMN5fikh4Q==",
      "license": "MIT",
      "dependencies": {
        "process": "^0.11.1",
        "util": "^0.10.3"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/performance-now": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/performance-now/-/performance-now-2.1.0.tgz",
      "integrity": "sha512-7EAHlyLHI56VEIdK57uwHdHKIaAGbnXPiw0yWbarQZOKaKpvUIgW0jWRVLiatnM+XXlSwsanIBH/hzGMJulMow==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/possible-typed-array-names": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.1.0.tgz",
      "integrity": "sha512-/+5VFTchJDoVj3bhoqi6UeymcD00DAwb1nJwamzPvHEszJ4FpF6SNNbUbOS8yI56qHzdV8eK0qEfOSiodkTdxg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/prr": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/prr/-/prr-1.0.1.tgz",
      "integrity": "sha512-yPw4Sng1gWghHQWj0B3ZggWUm4qVbPwPFcRG8KyxiU7J2OHFSoEHKS+EZ3fv5l1t9CyCiop6l/ZYeWbrgoQejw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/psl": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/lupomontero"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pump": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pump/-/pump-2.0.1.tgz",
      "integrity": "sha512-ruPMNRkN3MHP1cWJc9OWr+T/xDP0jhXYCLfJcBuX54hhfIBnaQmAUMfDcG4DM5UMWByBbJY69QSphm3jtDKIkA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT"
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/rechoir": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.7.1.tgz",
      "integrity": "sha512-/njmZ8s1wVeR6pjTZ+0nCnv8SpZNRMT2D1RLOJQESlYFDBvwpTA4KWJpZ+sBJ4+vhjILRcK7JIFdGCdxEAAitg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "resolve": "^1.9.0"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/reflect.getprototypeof": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/reflect.getprototypeof/-/reflect.getprototypeof-1.0.10.tgz",
      "integrity": "sha512-00o4I+DVrefhv+nX0ulyi3biSHCPDe+yLv5o/p6d/UVlirijB8E16FtfwSAi4g3tcqrQ4lRAqQSoFEZJehYEcw==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.9",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0",
        "get-intrinsic": "^1.2.7",
        "get-proto": "^1.0.1",
        "which-builtin-type": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/regexp.prototype.flags": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.4.tgz",
      "integrity": "sha512-dYqgNSZbDwkaJ2ceRd9ojCGjBq+mOm9LmtXnAnEGyHhN/5R7iDW2TRw3h+o/jCFxus3P2LfWIIiwowAjANm7IA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "define-properties": "^1.2.1",
        "es-errors": "^1.3.0",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "set-function-name": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/request": {
      "version": "2.88.2",
      "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
      "integrity": "sha512-MsvtOrfG9ZcrOwAW+Qi+F6HbD0CWXEh9ou77uOb7FM2WPhwT7smM833PzanhJLsgXjN89Ir6V2PczXNnMpwKhw==",
      "deprecated": "request has been deprecated, see https://github.com/request/request/issues/3142",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "aws-sign2": "~0.7.0",
        "aws4": "^1.8.0",
        "caseless": "~0.12.0",
        "combined-stream": "~1.0.6",
        "extend": "~3.0.2",
        "forever-agent": "~0.6.1",
        "form-data": "~2.3.2",
        "har-validator": "~5.1.3",
        "http-signature": "~1.2.0",
        "is-typedarray": "~1.0.0",
        "isstream": "~0.1.2",
        "json-stringify-safe": "~5.0.1",
        "mime-types": "~2.1.19",
        "oauth-sign": "~0.9.0",
        "performance-now": "^2.1.0",
        "qs": "~6.5.2",
        "safe-buffer": "^5.1.2",
        "tough-cookie": "~2.5.0",
        "tunnel-agent": "^0.6.0",
        "uuid": "^3.3.2"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/request-promise-core": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/request-promise-core/-/request-promise-core-1.1.3.tgz",
      "integrity": "sha512-QIs2+ArIGQVp5ZYbWD5ZLCY29D5CfWizP8eWnm8FoGD1TX61veauETVQbrV60662V0oFBkrDOuaBI8XgtuyYAQ==",
      "license": "ISC",
      "dependencies": {
        "lodash": "^4.17.15"
      },
      "engines": {
        "node": ">=0.10.0"
      },
      "peerDependencies": {
        "request": "^2.34"
      }
    },
    "node_modules/request/node_modules/form-data": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-2.3.3.tgz",
      "integrity": "sha512-1lLKB2Mu3aGP1Q/2eCOx0fNbRMe7XdwktwOruhfqqd0rIJWwN4Dh+E3hrPSlDCXnSR7UtZ1N38rVXm+6+MEhJQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.6",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 0.12"
      }
    },
    "node_modules/request/node_modules/http-signature": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/http-signature/-/http-signature-1.2.0.tgz",
      "integrity": "sha512-CAbnr6Rz4CYQkLYUtSNXxQPUH2gK8f3iWexVlsnMeD+GjlsQ0Xsy1cOX+mN3dtxYomRy21CiOzU8Uhw6OwncEQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "assert-plus": "^1.0.0",
        "jsprim": "^1.2.2",
        "sshpk": "^1.7.0"
      },
      "engines": {
        "node": ">=0.8",
        "npm": ">=1.3.7"
      }
    },
    "node_modules/request/node_modules/jsprim": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jsprim/-/jsprim-1.4.2.tgz",
      "integrity": "sha512-P2bSOMAc/ciLz6DzgjVlGJP9+BrJWu5UDGK70C2iweC5QBIeFf0ZXRvGjEj2uYgrY2MkAAhsSWHDWlFtEroZWw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "assert-plus": "1.0.0",
        "extsprintf": "1.3.0",
        "json-schema": "0.4.0",
        "verror": "1.10.0"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/request/node_modules/qs": {
      "version": "6.5.3",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
      "integrity": "sha512-qxXIEh4pCGfHICj1mAJQ2/2XVZkjCDTcEgfoSQxc/fYivUZxTkk7L3bDBJSoNrEzXI17oUO5Dp07ktqE5KzczA==",
      "license": "BSD-3-Clause",
      "peer": true,
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/request/node_modules/tough-cookie": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "psl": "^1.1.28",
        "punycode": "^2.1.1"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/request/node_modules/uuid": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
      "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
      "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
      "license": "MIT",
      "peer": true,
      "bin": {
        "uuid": "bin/uuid"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT"
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/safe-array-concat": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.3.tgz",
      "integrity": "sha512-AURm5f0jYEOydBj7VQlVvDrjeFgthDdEF5H1dP+6mNpoXOMo1quQqJ4wvJDyRZ9+pO3kGWoOdmV08cSv2aJV6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "get-intrinsic": "^1.2.6",
        "has-symbols": "^1.1.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">=0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-array-concat/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safe-push-apply": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/safe-push-apply/-/safe-push-apply-1.0.0.tgz",
      "integrity": "sha512-iKE9w/Z7xCzUMIZqdBsp6pEQvwuEebH4vdpjcDWnyzaI6yl6O9FHvVpmGelvEHNsoY6wGblkxR6Zty/h00WiSA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "isarray": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safe-push-apply/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/safe-regex-test": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.1.0.tgz",
      "integrity": "sha512-x/+Cz4YrimQxQccJf5mKEbIa1NzeCRNI5Ecl/ekmlYaampdNLPalVyIcCZNNH3MvmqBugV5TMYZXv0ljslUlaw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "is-regex": "^1.2.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/schema-utils": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-4.3.2.tgz",
      "integrity": "sha512-Gn/JaSk/Mt9gYubxTtSn/QCV4em9mpAPiR1rqy/Ocu19u/G9J5WWdNoUT4SiV6mFC3y6cxyFcFwdzPM3FgxGAQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/json-schema": "^7.0.9",
        "ajv": "^8.9.0",
        "ajv-formats": "^2.1.1",
        "ajv-keywords": "^5.1.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      }
    },
    "node_modules/schema-utils/node_modules/ajv": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3",
        "fast-uri": "^3.0.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/schema-utils/node_modules/ajv-keywords": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ajv-keywords/-/ajv-keywords-5.1.0.tgz",
      "integrity": "sha512-YCS/JNFAUyr5vAuhk1DWm1CBxRHW9LbJ2ozWeemrIqpbsqKjHVxYPyi5GC0rjZIT5JxJ3virVTS8wk4i/Z+krw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.3"
      },
      "peerDependencies": {
        "ajv": "^8.8.2"
      }
    },
    "node_modules/schema-utils/node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serialize-javascript": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/serialize-javascript/-/serialize-javascript-6.0.2.tgz",
      "integrity": "sha512-Saa1xPByTTq2gdeFZYLLo+RFE35NHZkAbqZeWNd3BpzppeVisAqpDjcp8dyf6uIvEqJRd46jemmyA4iFIeVk8g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "randombytes": "^2.1.0"
      }
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-function-length": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2",
        "get-intrinsic": "^1.2.4",
        "gopd": "^1.0.1",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-function-name": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
      "license": "MIT",
      "dependencies": {
        "define-data-property": "^1.1.4",
        "es-errors": "^1.3.0",
        "functions-have-names": "^1.2.3",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/set-proto": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/set-proto/-/set-proto-1.0.0.tgz",
      "integrity": "sha512-RJRdvCo6IAnPdsvP/7m6bsQqNnn1FCBX5ZNtFL98MmFF/4xAIJTIg1YbHW5DC2W5SKZanrC6i4HsJqlajw/dZw==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shallow-clone": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz",
      "integrity": "sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "kind-of": "^6.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/sirv": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/sirv/-/sirv-2.0.4.tgz",
      "integrity": "sha512-94Bdh3cC2PKrbgSOUqTiGPWVZeSiXfKOVZNJniWoqrWrRkB1CJzBU3NEbiTsPcYy1lDsANA/THzS+9WBiy5nfQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@polka/url": "^1.0.0-next.24",
        "mrmime": "^2.0.0",
        "totalist": "^3.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/socket.io": {
      "version": "4.8.1",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-4.8.1.tgz",
      "integrity": "sha512-oZ7iUCxph8WYRHHcjBEc9unw3adt5CmSNlppj/5Q4k2RIrhl8Z5yY2Xr4j9zj0+wzVZ0bxmYoGSzKJnRl6A4yg==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.4",
        "base64id": "~2.0.0",
        "cors": "~2.8.5",
        "debug": "~4.3.2",
        "engine.io": "~6.6.0",
        "socket.io-adapter": "~2.5.2",
        "socket.io-parser": "~4.2.4"
      },
      "engines": {
        "node": ">=10.2.0"
      }
    },
    "node_modules/socket.io-adapter": {
      "version": "2.5.5",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.5.tgz",
      "integrity": "sha512-eLDQas5dzPgOWCk9GuuJC2lBqItuhKI4uxGgo9aIV7MYbk2h9Q6uULEh8WBzThoI7l+qU9Ast9fVUmkqPP9wYg==",
      "license": "MIT",
      "dependencies": {
        "debug": "~4.3.4",
        "ws": "~8.17.1"
      }
    },
    "node_modules/socket.io-adapter/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-adapter/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/socket.io-adapter/node_modules/ws": {
      "version": "8.17.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.17.1.tgz",
      "integrity": "sha512-6XQFvXTkbfUOZOKKILFG1PDK2NDQs4azKQl26T0YS5CxqWLgXajbPZ+h4gZekJyRqFU8pvnbAbbs/3TgRPy+GQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser": {
      "version": "4.2.4",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-4.2.4.tgz",
      "integrity": "sha512-/GbIKmo8ioc+NIWIhwdecY0ge+qVBSMdgxGygevmdHj24bsfgtCmcUUcQ5ZzcylGFHsN3k4HB4Cgkl96KVnuew==",
      "license": "MIT",
      "dependencies": {
        "@socket.io/component-emitter": "~3.1.0",
        "debug": "~4.3.1"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/socket.io-parser/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io-parser/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/socket.io/node_modules/debug": {
      "version": "4.3.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.7.tgz",
      "integrity": "sha512-Er2nc/H7RrMXZBFCEim6TCmMk02Z8vLC2Rbi1KEBggpo0fS6l0S1nnapwmIi3yW/+GOJap1Krg4w0Hg80oCqgQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socket.io/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-0.6.2.tgz",
      "integrity": "sha512-/3GptzWzu0+0MBQFrDKzw/DvvMTUORvgY6k6jd/VS6iCR4RDTKWH6v6WPwQoUO8667uQEf9Oe38DxAYWY5F/Ug==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-loader": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/source-map-loader/-/source-map-loader-2.0.2.tgz",
      "integrity": "sha512-yIYkFOsKn+OdOirRJUPQpnZiMkF74raDVQjj5ni3SzbOiA57SabeX80R5zyMQAKpvKySA3Z4a85vFX3bvpC6KQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "abab": "^2.0.5",
        "iconv-lite": "^0.6.2",
        "source-map-js": "^0.6.2"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.0.0"
      }
    },
    "node_modules/source-map-loader/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sshpk": {
      "version": "1.18.0",
      "resolved": "https://registry.npmjs.org/sshpk/-/sshpk-1.18.0.tgz",
      "integrity": "sha512-2p2KJZTSqQ/I3+HX42EpYOa2l3f8Erv8MWKsy2I9uf4wA7yFIkXRffYdsx86y6z4vHtV8u7g+pPlr8/4ouAxsQ==",
      "license": "MIT",
      "dependencies": {
        "asn1": "~0.2.3",
        "assert-plus": "^1.0.0",
        "bcrypt-pbkdf": "^1.0.0",
        "dashdash": "^1.12.0",
        "ecc-jsbn": "~0.1.1",
        "getpass": "^0.1.1",
        "jsbn": "~0.1.0",
        "safer-buffer": "^2.0.2",
        "tweetnacl": "~0.14.0"
      },
      "bin": {
        "sshpk-conv": "bin/sshpk-conv",
        "sshpk-sign": "bin/sshpk-sign",
        "sshpk-verify": "bin/sshpk-verify"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/stealthy-require": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/stealthy-require/-/stealthy-require-1.1.1.tgz",
      "integrity": "sha512-ZnWpYnYugiOVEY5GkcuJK1io5V8QmNYChG62gSit9pQVGErXtrKuPC55ITaVSukmMta5qpMU7vqLt2Lnni4f/g==",
      "license": "ISC",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/stop-iteration-iterator": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/stop-iteration-iterator/-/stop-iteration-iterator-1.1.0.tgz",
      "integrity": "sha512-eLoXW/DHyl62zxY4SCaIgnRhuMr6ri4juEYARS8E6sCEqzKpOiE521Ucofdx+KnDZl5xmvGYaaKCk5FEOxJCoQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "internal-slot": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/string.prototype.trim": {
      "version": "1.2.10",
      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.10.tgz",
      "integrity": "sha512-Rs66F0P/1kedk5lyYyH9uBzuiI/kNRmwJAR9quK6VOtIpZ2G+hMZd+HQbbv25MgCA6gEffoMZYxlTod4WcdrKA==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-data-property": "^1.1.4",
        "define-properties": "^1.2.1",
        "es-abstract": "^1.23.5",
        "es-object-atoms": "^1.0.0",
        "has-property-descriptors": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimend": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.9.tgz",
      "integrity": "sha512-G7Ok5C6E/j4SGfyLCloXTrngQIQU3PWtXGst3yM7Bea9FRURf1S42ZHlZZtsNque2FN2PoUhfZXYLNWwEr4dLQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.2",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/string.prototype.trimstart": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.8.tgz",
      "integrity": "sha512-UXSH262CSZY1tfu3G3Secr6uGLCFVPMhIqHjlgCUtCCcgihYc/xKs9djMTMUOb2j1mVSeU8EU6NWc/iQKU6Gfg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "define-properties": "^1.2.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tapable": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-1.1.3.tgz",
      "integrity": "sha512-4WK/bYZmj8xLr+HUCODHGF1ZFzsYffasLUgEiMBY4fgtltdO6B4WJtlSbPaDTLpYTcGVwM2qLnFTICEcNxs3kA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/terser": {
      "version": "5.42.0",
      "resolved": "https://registry.npmjs.org/terser/-/terser-5.42.0.tgz",
      "integrity": "sha512-UYCvU9YQW2f/Vwl+P0GfhxJxbUGLwd+5QrrGgLajzWAtC/23AX0vcise32kkP7Eu0Wu9VlzzHAXkLObgjQfFlQ==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "@jridgewell/source-map": "^0.3.3",
        "acorn": "^8.14.0",
        "commander": "^2.20.0",
        "source-map-support": "~0.5.20"
      },
      "bin": {
        "terser": "bin/terser"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/terser-webpack-plugin": {
      "version": "5.3.14",
      "resolved": "https://registry.npmjs.org/terser-webpack-plugin/-/terser-webpack-plugin-5.3.14.tgz",
      "integrity": "sha512-vkZjpUjb6OMS7dhV+tILUW6BhpDR7P2L/aQSAv+Uwk+m8KATX9EccViHTJR2qDtACKPIYndLGCyl3FMo+r2LMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.25",
        "jest-worker": "^27.4.5",
        "schema-utils": "^4.3.0",
        "serialize-javascript": "^6.0.2",
        "terser": "^5.31.1"
      },
      "engines": {
        "node": ">= 10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "^5.1.0"
      },
      "peerDependenciesMeta": {
        "@swc/core": {
          "optional": true
        },
        "esbuild": {
          "optional": true
        },
        "uglify-js": {
          "optional": true
        }
      }
    },
    "node_modules/tldts": {
      "version": "6.1.86",
      "resolved": "https://registry.npmjs.org/tldts/-/tldts-6.1.86.tgz",
      "integrity": "sha512-WMi/OQ2axVTf/ykqCQgXiIct+mSQDFdH2fkwhPwgEwvJ1kSzZRiinb0zF2Xb8u4+OqPChmyI6MEu4EezNJz+FQ==",
      "license": "MIT",
      "dependencies": {
        "tldts-core": "^6.1.86"
      },
      "bin": {
        "tldts": "bin/cli.js"
      }
    },
    "node_modules/tldts-core": {
      "version": "6.1.86",
      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-6.1.86.tgz",
      "integrity": "sha512-Je6p7pkk+KMzMv2XXKmAE3McmolOQFdxkKw0R8EYNr7sELW46JqnNeTX8ybPiQgvg1ymCoF8LXs5fzFaZvJPTA==",
      "license": "MIT"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/totalist": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/totalist/-/totalist-3.0.1.tgz",
      "integrity": "sha512-sf4i37nQ2LBx4m3wB74y+ubopq6W/dIzXg0FDGjsYnZHVa1Da8FH853wlL2gtUhg+xJXjfk3kUZS3BRoQeoQBQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tough-cookie": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-5.1.2.tgz",
      "integrity": "sha512-FVDYdxtnj0G6Qm/DhNPSb8Ju59ULcup3tuJxkFb5K8Bv2pUXILbf0xZWU8PX8Ov19OXljbUyveOFwRMwkXzO+A==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "tldts": "^6.1.32"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/ts-loader": {
      "version": "8.4.0",
      "resolved": "https://registry.npmjs.org/ts-loader/-/ts-loader-8.4.0.tgz",
      "integrity": "sha512-6nFY3IZ2//mrPc+ImY3hNWx1vCHyEhl6V+wLmL4CZcm6g1CqX7UKrkc6y0i4FwcfOhxyMPCfaEvh20f4r9GNpw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "chalk": "^4.1.0",
        "enhanced-resolve": "^4.0.0",
        "loader-utils": "^2.0.0",
        "micromatch": "^4.0.0",
        "semver": "^7.3.4"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "typescript": "*",
        "webpack": "*"
      }
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/tweetnacl": {
      "version": "0.14.5",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-0.14.5.tgz",
      "integrity": "sha512-KXXFFdAbFXY4geFIwoyNK+f5Z1b7swfXABfL7HXCmoIWMKU3dmS26672A4EeQtDzLKy7SXmfBu51JolvEKwtGA==",
      "license": "Unlicense"
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-array-buffer": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.3.tgz",
      "integrity": "sha512-nAYYwfY3qnzX30IkA6AQZjVbtK6duGontcQm1WSG1MD94YLqK0515GNApXkoxKOWMusVssAHWLh9SeaoefYFGw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "es-errors": "^1.3.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/typed-array-byte-length": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.3.tgz",
      "integrity": "sha512-BaXgOuIxz8n8pIq3e7Atg/7s+DpiYrxn4vdot3w9KbnBhcRQq6o3xemQdIfynqSeXeDrF32x+WvfzmOjPiY9lg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.14"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-byte-offset": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.4.tgz",
      "integrity": "sha512-bTlAFB/FBYMcuX81gbL4OcpH5PmlFHqlCCpAl8AlEzMz5k53oNDvN8p1PNOWLEmI2x4orp3raOFB51tv9X+MFQ==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "for-each": "^0.3.3",
        "gopd": "^1.2.0",
        "has-proto": "^1.2.0",
        "is-typed-array": "^1.1.15",
        "reflect.getprototypeof": "^1.0.9"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typed-array-length": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.7.tgz",
      "integrity": "sha512-3KS2b+kL7fsuk/eJZ7EQdnEmQoaho/r6KUef7hxvltNA5DR8NAUM+8wJMbJyZ4G9/7i3v5zPBIMN5aybAh2/Jg==",
      "license": "MIT",
      "dependencies": {
        "call-bind": "^1.0.7",
        "for-each": "^0.3.3",
        "gopd": "^1.0.1",
        "is-typed-array": "^1.1.13",
        "possible-typed-array-names": "^1.0.0",
        "reflect.getprototypeof": "^1.0.6"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/typescript": {
      "version": "5.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.8.3.tgz",
      "integrity": "sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==",
      "license": "Apache-2.0",
      "optional": true,
      "peer": true,
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/unbox-primitive": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.1.0.tgz",
      "integrity": "sha512-nWJ91DjeOkej/TA8pXQ3myruKpKEYgqvpw9lz4OPHj/NWFNluYrjbz9j01CJ8yKQd2g4jFoOkINCTW2I5LEEyw==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.3",
        "has-bigints": "^1.0.2",
        "has-symbols": "^1.1.0",
        "which-boxed-primitive": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/undici-types": {
      "version": "7.8.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.8.0.tgz",
      "integrity": "sha512-9UJ2xGDvQ43tYyVMpuHlsgApydB8ZKfVYTsLDhXkFL/6gfkp+U8xTGdh8pMJv1SpZna0zxG1DwsKZsreLbXBxw==",
      "license": "MIT"
    },
    "node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "peer": true,
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util": {
      "version": "0.10.4",
      "resolved": "https://registry.npmjs.org/util/-/util-0.10.4.tgz",
      "integrity": "sha512-0Pm9hTQ3se5ll1XihRic3FDIku70C+iHUdT/W926rSgHV5QgXsYbKZN8MSC3tJtSkhuROzvsQjAaFENRXr+19A==",
      "license": "MIT",
      "dependencies": {
        "inherits": "2.0.3"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/util/node_modules/inherits": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
      "integrity": "sha512-x00IRNXNy63jwGkJmzPigoySHbaqpNuzKbBOmzK+g2OdZpQ9w+sxCN+VSB3ja7IAge2OP2qpfxTjeNcyjmW1uw==",
      "license": "ISC"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/verror": {
      "version": "1.10.0",
      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
      "engines": [
        "node >=0.6.0"
      ],
      "license": "MIT",
      "dependencies": {
        "assert-plus": "^1.0.0",
        "core-util-is": "1.0.2",
        "extsprintf": "^1.2.0"
      }
    },
    "node_modules/verror/node_modules/core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha512-3lqz5YjWTYnW6dlDa5TLaTCcShfar1e40rmcJVwCBJC6mWlFuj0eCHIElmG1g5kyuJ/GD+8Wn4FFCcz4gJPfaQ==",
      "license": "MIT"
    },
    "node_modules/watchpack": {
      "version": "2.4.4",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.4.tgz",
      "integrity": "sha512-c5EGNOiyxxV5qmTtAB7rbiXxi1ooX1pQKMLX/MIabJjRA0SJBQOjKF+KSVfHkr9U1cADPon0mRiVe/riyaiDUA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack": {
      "version": "5.99.9",
      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.99.9.tgz",
      "integrity": "sha512-brOPwM3JnmOa+7kd3NsmOUOwbDAj8FT9xDsG3IW0MgbN9yZV7Oi/s/+MNQ/EcSMqw7qfoRyXPoeEWT8zLVdVGg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/eslint-scope": "^3.7.7",
        "@types/estree": "^1.0.6",
        "@types/json-schema": "^7.0.15",
        "@webassemblyjs/ast": "^1.14.1",
        "@webassemblyjs/wasm-edit": "^1.14.1",
        "@webassemblyjs/wasm-parser": "^1.14.1",
        "acorn": "^8.14.0",
        "browserslist": "^4.24.0",
        "chrome-trace-event": "^1.0.2",
        "enhanced-resolve": "^5.17.1",
        "es-module-lexer": "^1.2.1",
        "eslint-scope": "5.1.1",
        "events": "^3.2.0",
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.2.11",
        "json-parse-even-better-errors": "^2.3.1",
        "loader-runner": "^4.2.0",
        "mime-types": "^2.1.27",
        "neo-async": "^2.6.2",
        "schema-utils": "^4.3.2",
        "tapable": "^2.1.1",
        "terser-webpack-plugin": "^5.3.11",
        "watchpack": "^2.4.1",
        "webpack-sources": "^3.2.3"
      },
      "bin": {
        "webpack": "bin/webpack.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependenciesMeta": {
        "webpack-cli": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-bundle-analyzer": {
      "version": "4.10.2",
      "resolved": "https://registry.npmjs.org/webpack-bundle-analyzer/-/webpack-bundle-analyzer-4.10.2.tgz",
      "integrity": "sha512-vJptkMm9pk5si4Bv922ZbKLV8UTT4zib4FPgXMhgzUny0bfDDkLXAVQs3ly3fS4/TN9ROFtb0NFrm04UXFE/Vw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@discoveryjs/json-ext": "0.5.7",
        "acorn": "^8.0.4",
        "acorn-walk": "^8.0.0",
        "commander": "^7.2.0",
        "debounce": "^1.2.1",
        "escape-string-regexp": "^4.0.0",
        "gzip-size": "^6.0.0",
        "html-escaper": "^2.0.2",
        "opener": "^1.5.2",
        "picocolors": "^1.0.0",
        "sirv": "^2.0.3",
        "ws": "^7.3.1"
      },
      "bin": {
        "webpack-bundle-analyzer": "lib/bin/analyzer.js"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/webpack-bundle-analyzer/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/webpack-bundle-analyzer/node_modules/ws": {
      "version": "7.5.10",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.5.10.tgz",
      "integrity": "sha512-+dbF1tHwZpXcbOJdVOkzLDxZP1ailvSxM6ZweXTegylPny803bFhA+vqBYw4s31NSAk4S2Qz+AKXK9a4wkdjcQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8.3.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": "^5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-cli": {
      "version": "4.10.0",
      "resolved": "https://registry.npmjs.org/webpack-cli/-/webpack-cli-4.10.0.tgz",
      "integrity": "sha512-NLhDfH/h4O6UOy+0LSso42xvYypClINuMNBVVzX4vX98TmTaTUxwRbXdhucbFMd2qLaCTcLq/PdYrvi8onw90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@discoveryjs/json-ext": "^0.5.0",
        "@webpack-cli/configtest": "^1.2.0",
        "@webpack-cli/info": "^1.5.0",
        "@webpack-cli/serve": "^1.7.0",
        "colorette": "^2.0.14",
        "commander": "^7.0.0",
        "cross-spawn": "^7.0.3",
        "fastest-levenshtein": "^1.0.12",
        "import-local": "^3.0.2",
        "interpret": "^2.2.0",
        "rechoir": "^0.7.0",
        "webpack-merge": "^5.7.3"
      },
      "bin": {
        "webpack-cli": "bin/cli.js"
      },
      "engines": {
        "node": ">=10.13.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/webpack"
      },
      "peerDependencies": {
        "webpack": "4.x.x || 5.x.x"
      },
      "peerDependenciesMeta": {
        "@webpack-cli/generators": {
          "optional": true
        },
        "@webpack-cli/migrate": {
          "optional": true
        },
        "webpack-bundle-analyzer": {
          "optional": true
        },
        "webpack-dev-server": {
          "optional": true
        }
      }
    },
    "node_modules/webpack-cli/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/webpack-merge": {
      "version": "5.10.0",
      "resolved": "https://registry.npmjs.org/webpack-merge/-/webpack-merge-5.10.0.tgz",
      "integrity": "sha512-+4zXKdx7UnO+1jaN4l2lHVD+mFvnlZQP/6ljaJVb4SZiwIKeUnrT5l0gkT8z+n4hKpC+jpOv6O9R+gLtag7pSA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "clone-deep": "^4.0.1",
        "flat": "^5.0.2",
        "wildcard": "^2.0.0"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/webpack-sources": {
      "version": "3.3.2",
      "resolved": "https://registry.npmjs.org/webpack-sources/-/webpack-sources-3.3.2.tgz",
      "integrity": "sha512-ykKKus8lqlgXX/1WjudpIEjqsafjOTcOJqxnAbMLAu/KCsDCJ6GBtvscewvTkrn24HsnvFwrSCbenFrhtcCsAA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/enhanced-resolve": {
      "version": "5.18.1",
      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.18.1.tgz",
      "integrity": "sha512-ZSW3ma5GkcQBIpwZTSRAI8N71Uuwgs93IezB7mf7R60tC8ZbJideoDNKjHn2O9KIlx6rkGTTEk1xUCK2E1Y2Yg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.2.4",
        "tapable": "^2.2.0"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webpack/node_modules/tapable": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/tapable/-/tapable-2.2.2.tgz",
      "integrity": "sha512-Re10+NauLTMCudc7T5WLFLAwDhQ0JWdrMK+9B2M8zR5hRExKmsRDCBA7/aV/pNJFltmBFO5BAMlQFi/vq3nKOg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/which-boxed-primitive": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.1.1.tgz",
      "integrity": "sha512-TbX3mj8n0odCBFVlY8AxkqcHASw3L60jIuF8jFP78az3C2YhmGvqbHBpAjTRH2/xqYunrJ9g1jSyjCjpoWzIAA==",
      "license": "MIT",
      "dependencies": {
        "is-bigint": "^1.1.0",
        "is-boolean-object": "^1.2.1",
        "is-number-object": "^1.1.1",
        "is-string": "^1.1.1",
        "is-symbol": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/which-builtin-type/-/which-builtin-type-1.2.1.tgz",
      "integrity": "sha512-6iBczoX+kDQ7a3+YJBnh3T+KZRxM/iYNPXicqk66/Qfm1b93iu+yOImkg0zHbj5LNOcNv1TEADiZ0xa34B4q6Q==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "function.prototype.name": "^1.1.6",
        "has-tostringtag": "^1.0.2",
        "is-async-function": "^2.0.0",
        "is-date-object": "^1.1.0",
        "is-finalizationregistry": "^1.1.0",
        "is-generator-function": "^1.0.10",
        "is-regex": "^1.2.1",
        "is-weakref": "^1.0.2",
        "isarray": "^2.0.5",
        "which-boxed-primitive": "^1.1.0",
        "which-collection": "^1.0.2",
        "which-typed-array": "^1.1.16"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-builtin-type/node_modules/isarray": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.5.tgz",
      "integrity": "sha512-xHjhDr3cNBK0BzdUJSPXZntQUx/mwMS5Rw4A7lPJ90XGAO6ISP/ePDNuo0vhqOZU+UD5JoodwCAAoZQd3FeAKw==",
      "license": "MIT"
    },
    "node_modules/which-collection": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/which-collection/-/which-collection-1.0.2.tgz",
      "integrity": "sha512-K4jVyjnBdgvc86Y6BkaLZEN933SwYOuBFkdmBu9ZfkcAbdVbpITnDmjvZ/aQjRXQrv5EPkTnD1s39GiiqbngCw==",
      "license": "MIT",
      "dependencies": {
        "is-map": "^2.0.3",
        "is-set": "^2.0.3",
        "is-weakmap": "^2.0.2",
        "is-weakset": "^2.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/which-typed-array": {
      "version": "1.1.19",
      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.19.tgz",
      "integrity": "sha512-rEvr90Bck4WZt9HHFC4DJMsjvu7x+r6bImz0/BrbWb7A2djJ8hnZMrWnHo9F8ssv0OMErasDhftrfROTyqSDrw==",
      "license": "MIT",
      "dependencies": {
        "available-typed-arrays": "^1.0.7",
        "call-bind": "^1.0.8",
        "call-bound": "^1.0.4",
        "for-each": "^0.3.5",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-tostringtag": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/wildcard": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/wildcard/-/wildcard-2.0.1.tgz",
      "integrity": "sha512-CC1bOL87PIWSBhDcTrdeLo6eGT7mCFtrg0uIJtqJUFyK+eJnzl8A1niH56uu7KMa5XFrtiV+AQuHO3n7DsHnLQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.2",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.2.tgz",
      "integrity": "sha512-DMricUmwGZUVr++AEAe2uiVM7UoO9MAVZMDu05UQOaUII0lp+zOzLLU4Xqh/JvTqklB1T4uELaaPBKyjE1r4fQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    }
  }
}

-------------------------------------------------------------------------------------------------------------

#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('ü§ñ CONFIGURACI√ìN R√ÅPIDA DEL BOT DE ARBITRAJE CEX\n');

async function question(prompt) {
    return new Promise((resolve) => {
        rl.question(prompt, resolve);
    });
}

async function setupBot() {
    try {
        console.log('=== CONFIGURACI√ìN B√ÅSICA ===');
        
        const mode = await question('¬øModo de trading? (simulation/live) [simulation]: ') || 'simulation';
        const balance = await question('¬øBalance inicial en USD? [10000]: ') || '10000';
        const minProfit = await question('¬øGanancia m√≠nima %? [0.2]: ') || '0.2';
        
        console.log('\n=== EXCHANGES ===');
        
        const binanceKey = await question('Binance API Key (opcional): ');
        const binanceSecret = await question('Binance API Secret (opcional): ');
        
        const coinbaseKey = await question('Coinbase API Key (opcional): ');
        const coinbaseSecret = await question('Coinbase API Secret (opcional): ');
        const coinbasePassphrase = await question('Coinbase Passphrase (opcional): ');
        
        console.log('\n=== NOTIFICACIONES ===');
        
        const email = await question('Tu email para alertas (opcional): ');
        const emailPassword = await question('App Password de Gmail (opcional): ');
        
        const telegramToken = await question('Telegram Bot Token (opcional): ');
        const telegramChat = await question('Telegram Chat ID (opcional): ');
        
        console.log('\n=== ESTRATEGIAS ===');
        
        const basicEnabled = await question('¬øHabilitar arbitraje b√°sico? (y/n) [y]: ') || 'y';
        const triangularEnabled = await question('¬øHabilitar arbitraje triangular? (y/n) [n]: ') || 'n';
        const mlEnabled = await question('¬øHabilitar IA/ML? (y/n) [y]: ') || 'y';
        
        // Crear archivo .env
        const envContent = `# Configuraci√≥n generada autom√°ticamente
NODE_ENV=production
BOT_MODE=${mode}

# Exchanges
BINANCE_API_KEY=${binanceKey}
BINANCE_API_SECRET=${binanceSecret}
COINBASE_API_KEY=${coinbaseKey}
COINBASE_API_SECRET=${coinbaseSecret}
COINBASE_PASSPHRASE=${coinbasePassphrase}

# Seguridad
JWT_SECRET=${generateRandomString(64)}
ENCRYPTION_KEY=${generateRandomString(32)}

# Notificaciones
EMAIL_USER=${email}
EMAIL_PASS=${emailPassword}
TELEGRAM_BOT_TOKEN=${telegramToken}
TELEGRAM_CHAT_ID=${telegramChat}
`;

        fs.writeFileSync('.env', envContent);
        
        // Actualizar configuraci√≥n
        const configPath = './src/strategies/config.js';
        let configContent = fs.readFileSync(configPath, 'utf8');
        
        // Reemplazar valores
        configContent = configContent.replace(/TRADING_MODE: ".*"/, `TRADING_MODE: "${mode}"`);
        configContent = configContent.replace(/INITIAL_BALANCE: \d+/, `INITIAL_BALANCE: ${balance}`);
        configContent = configContent.replace(/minProfitPercentage: [\d.]+/, `minProfitPercentage: ${minProfit}`);
        
        // Habilitar/deshabilitar estrategias
        configContent = configContent.replace(/BASIC: {\s*enabled: \w+/, `BASIC: {\n        enabled: ${basicEnabled === 'y'}`);
        configContent = configContent.replace(/TRIANGULAR: {\s*enabled: \w+/, `TRIANGULAR: {\n        enabled: ${triangularEnabled === 'y'}`);
        configContent = configContent.replace(/ML: {\s*enabled: \w+/, `ML: {\n        enabled: ${mlEnabled === 'y'}`);
        
        fs.writeFileSync(configPath, configContent);
        
        console.log('\n‚úÖ CONFIGURACI√ìN COMPLETADA');
        console.log('\nüìÅ Archivos creados/actualizados:');
        console.log('   - .env');
        console.log('   - src/strategies/config.js');
        
        console.log('\nüöÄ Para iniciar el bot:');
        console.log('   npm start');
        
        console.log('\nüìä Para ver el dashboard:');
        console.log('   http://localhost:3000');
        
        console.log('\nüì± API m√≥vil disponible en:');
        console.log('   http://localhost:3001');
        
        if (mode === 'simulation') {
            console.log('\n‚ö†Ô∏è  IMPORTANTE: El bot est√° en modo SIMULACI√ìN');
            console.log('   No se ejecutar√°n trades reales');
            console.log('   Para trading real, cambiar BOT_MODE=live en .env');
        }
        
    } catch (error) {
        console.error('Error durante la configuraci√≥n:', error);
    } finally {
        rl.close();
    }
}

function generateRandomString(length) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result = '';
    for (let i = 0; i < length; i++) {
        result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
}

setupBot();

-------------------------------------------------------------------------------------------------------

const express = require("express");
const cors = require("cors");
require("dotenv").config();
const { Spot } = require('@binance/connector');
const { RestClientV5 } = require('bybit-api');
const riskRoutes = require('./routes/risk');


const app = express();
app.use(cors());
app.use(express.json());

app.use('/api', require('./routes/config'));
app.use('/api/risk', riskRoutes);

// === GLOBAL BOT MODE STATE ===
let botMode = process.env.TRADING_MODE || "simulation"; // "simulation" or "production"
let botIsRunning = true; // Puedes ajustar esta bandera seg√∫n l√≥gica real del bot

// === BINANCE SETUP ===
const binance = new Spot(process.env.BINANCE_API_KEY, process.env.BINANCE_API_SECRET);

// === BYBIT SETUP ===
const bybit = new RestClientV5({
  key: process.env.BYBIT_API_KEY,
  secret: process.env.BYBIT_API_SECRET,
  testnet: false
});

// === ENDPOINT: BALANCES ===
app.get("/api/balances", async (req, res) => {
  const tokens = ["USDT", "XRP", "BNB", "LTC"];

  // Binance
  let binanceList = [];
  try {
    const binanceAccount = await binance.accountInfo();
    binanceList = tokens.map(token => {
      const balance = binanceAccount.balances.find(b => b.asset === token) || { free: "0", locked: "0" };
      return {
        token,
        available: parseFloat(balance.free),
        total: parseFloat(balance.free) + parseFloat(balance.locked)
      };
    });
  } catch (e) {
    binanceList = tokens.map(token => ({ token, available: 0, total: 0 }));
  }

  // Bybit
  let bybitList = [];
  try {
    const bybitAccount = await bybit.getWalletBalance({ accountType: "SPOT" });
    const coins = (bybitAccount.result && bybitAccount.result.list && bybitAccount.result.list[0].coins) ? bybitAccount.result.list[0].coins : [];
    bybitList = tokens.map(token => {
      const coin = coins.find(c => c.coin === token) || { availableToWithdraw: "0", walletBalance: "0" };
      return {
        token,
        available: parseFloat(coin.availableToWithdraw),
        total: parseFloat(coin.walletBalance)
      };
    });
  } catch (e) {
    bybitList = tokens.map(token => ({ token, available: 0, total: 0 }));
  }

  res.json({
    binance: binanceList,
    bybit: bybitList
  });
});

// === ENDPOINT: OPORTUNIDADES DE ARBITRAJE ===
app.get("/api/opportunities", async (req, res) => {
  try {
    // 1. Lista de s√≠mbolos a comparar
    const symbolList = ["LTCUSDT", "BNBUSDT", "XRPUSDT"];

    // 2. --- BINANCE ---
    const binTickersResponse = await binance.tickerPrice();
    const binTickers = binTickersResponse.data;
    const binancePrices = {};
    binTickers.forEach(t => {
      if (symbolList.includes(t.symbol)) {
        binancePrices[t.symbol] = parseFloat(t.price);
      }
    });

    // 3. --- BYBIT ---
    const bybitPrices = {};
    const bybTickersObj = await bybit.getTickers({ category: "spot" });
    const bybTickers = (bybTickersObj.result && bybTickersObj.result.list) ? bybTickersObj.result.list : [];
    bybTickers.forEach(t => {
      if (symbolList.includes(t.symbol)) {
        bybitPrices[t.symbol] = parseFloat(t.lastPrice);
      }
    });

    // 4. Logs para depurar antes del c√°lculo de oportunidades
    console.log("Binance prices:", binancePrices);
    console.log("Bybit prices:", bybitPrices);

    // 5. --- L√ìGICA DE ARBITRAJE ---
    const opps = [];
    symbolList.forEach(symbol => {
      const binPrice = binancePrices[symbol];
      const bybPrice = bybitPrices[symbol];

      if (binPrice && bybPrice) {
        // Oportunidad: Comprar en Binance, vender en Bybit
        const spreadBybit = ((bybPrice - binPrice) / binPrice) * 100;
        if (spreadBybit > 0.2) {
          opps.push({
            pair: symbol.replace("USDT", "/USDT"),
            buyExchange: "Binance",
            sellExchange: "Bybit",
            profit: spreadBybit.toFixed(2),
            direction: "Binance -> Bybit",
            time: new Date().toLocaleTimeString()
          });
        }
        // Oportunidad: Comprar en Bybit, vender en Binance
        const spreadBinance = ((binPrice - bybPrice) / bybPrice) * 100;
        if (spreadBinance > 0.2) {
          opps.push({
            pair: symbol.replace("USDT", "/USDT"),
            buyExchange: "Bybit",
            sellExchange: "Binance",
            profit: spreadBinance.toFixed(2),
            direction: "Bybit -> Binance",
            time: new Date().toLocaleTimeString()
          });
        }
      }
    });

    console.log("Oportunidades encontradas:", opps);
    res.json(opps);
  } catch (err) {
    console.log("ERROR REAL EN /api/opportunities:", err);
    res.status(500).json({ error: err.toString() });
  }
});

// === ENDPOINT: STATUS (para frontend) ===
app.get("/api/status", (req, res) => {
  res.json({
    mode: botMode,
    isRunning: botIsRunning
  });
});

// === ENDPOINT: SET MODE (activar/desactivar modo producci√≥n/simulaci√≥n) ===
app.post("/api/set-mode", (req, res) => {
  const { mode } = req.body;
  if (mode !== "simulation" && mode !== "production") {
    return res.status(400).json({ ok: false, error: "Modo inv√°lido" });
  }
  botMode = mode;
  // Aqu√≠ podr√≠as agregar l√≥gica para pausar/reanudar el bot real si es necesario
  res.json({ ok: true, mode: botMode });
});

// === ENDPOINT ALIAS EN ESPA√ëOL (opcional, para compatibilidad) ===
app.get("/api/oportunidades", async (req, res) => {
  // Simplemente llama al endpoint ingl√©s
  req.url = "/api/opportunities";
  app._router.handle(req, res);
});

// === ENDPOINTS SIMPLES (puedes expandir a APIs reales seg√∫n tus necesidades) ===
app.get("/api/logs", (req, res) => {
  res.json(["Bot iniciado", "Trade ejecutado: LTC/USDT", "Balance actualizado"]);
});

  
// === ENDPOINT: COMMISSIONS (TRADING Y DEP√ìSITO) ===
app.get("/api/commissions", (req, res) => {
  res.json([
    { exchange: "BINANCE", trading_fee: 0.1, deposit_fee: 0 },
    { exchange: "BYBIT", trading_fee: 0.1, deposit_fee: 0 }
  ]);
}),
   
// === ENDPOINT: RISK CONTROL (UMBRAL OPERACI√ìN) ===
app.get("/api/risk", (req, res) => {
  res.json([
    { exchange: "BINANCE", min_trade: 10, max_trade: null },
    { exchange: "BYBIT", min_trade: 10, max_trade: null }
  ]);
});

// === ENDPOINT: ADDRESSES (DIRECCIONES) ===
app.get("/api/addresses", (req, res) => {
  res.json([
    // BINANCE
    { exchange: "BINANCE", token: "USDT", address: "EQD5mxRgCuRNLxKxeOjG6r14iSroLF5FtomPnet-sgP5xNJb", network: "TON", memo: "163771801" },
    { exchange: "BINANCE", token: "LTC", address: "LiCH4dMWM6YRHFWYC78hppAk1SwUFkDAK4", network: "Litecoin" },
    { exchange: "BINANCE", token: "BNB", address: "0xe5b10a8fa449155d5b4b657dab4e856815d52bd7", network: "BEP20 (BSC)" },
    { exchange: "BINANCE", token: "XRP", address: "rNxp4h8apvRis6mJf9Sh8C6iRxfrDWN7AV", tag: "466152795", network: "XRP" },
    // BYBIT
    { exchange: "BYBIT", token: "USDT", address: "UQCT1S9xDKxJV7zpOYNpnof-_xym-dG7W3TYxeGLxLKSSSvB", network: "TON" },
    { exchange: "BYBIT", token: "LTC", address: "LLCxH3L5fn9ejTPVk3nWTJcqvvTWsu2LbJ", network: "Litecoin" },
    { exchange: "BYBIT", token: "BNB", address: "0x4231d188a91481a8c3d39d444b7451436babee94", network: "BEP20 (BSC)" },
    { exchange: "BYBIT", token: "XRP", address: "rJn2zAPdFA193sixJwuFixRkYDUtx3apQh", tag: "501350199", network: "XRP" }
  ]);
});
// === ENDPOINT: FEES (COMISIONES Y M√çNIMOS) ===
app.get("/api/fees", (req, res) => {
  res.json([
    // BINANCE
    { exchange: "BINANCE", token: "USDT", withdraw_fee: 0.20, withdraw_min: 10, deposit_min: 0.002, network: "TON" },
    { exchange: "BINANCE", token: "LTC", withdraw_fee: 0.0001, withdraw_min: 0.002, deposit_min: 0.002, network: "Litecoin" },
    { exchange: "BINANCE", token: "BNB", withdraw_fee: 0.00001, withdraw_min: 0.0005, deposit_min: 0.000003, network: "BEP20 (BSC)" },
    { exchange: "BINANCE", token: "XRP", withdraw_fee: 0.2, withdraw_min: 2, deposit_min: 0.001, network: "XRP" },
    // BYBIT
    { exchange: "BYBIT", token: "USDT", withdraw_fee: 0.3, withdraw_min: 1, deposit_min: 0.001, network: "TON" },
    { exchange: "BYBIT", token: "LTC", withdraw_fee: 0.0001, withdraw_min: 0.001, deposit_min: 0.00000001, network: "Litecoin" },
    { exchange: "BYBIT", token: "BNB", withdraw_fee: 0.0002, withdraw_min: 0.0002, deposit_min: 0, network: "BEP20 (BSC)" },
    { exchange: "BYBIT", token: "XRP", withdraw_fee: 0.2, withdraw_min: 1.2, deposit_min: 0.01, network: "XRP" }
  ]);
});
// === ENDPOINT: M√âTRICAS (BALANCES INICIALES, ETC.) ===
app.get("/api/metrics", (req, res) => {
  res.json({
    binance: { initial_balance_usdt: 20 },
    bybit: { initial_balance_usdt: 20 },
    trades: 150,
    profit: 32.7,
    winRate: 78.5
  });
});
// === ENDPOINT: INICIAR EL BOT ===
app.post("/api/start", (req, res) => {
  botIsRunning = true;
  res.json({ ok: true, isRunning: true });
});

// === ENDPOINT: DETENER EL BOT ===
app.post("/api/stop", (req, res) => {
  botIsRunning = false;
  res.json({ ok: true, isRunning: false });
});

app.listen(8888, () => {
  console.log("Backend API listening on http://localhost:8888/");
});

-----------------------------------------------------------------------------------------------------------

require("dotenv").config()
const nodemailer = require("nodemailer")

console.log("=== DIAGN√ìSTICO DE EMAIL ===")
console.log("EMAIL_ENABLED:", process.env.EMAIL_ENABLED)
console.log("EMAIL_SERVICE:", process.env.EMAIL_SERVICE)
console.log("EMAIL_USER:", process.env.EMAIL_USER)
console.log("EMAIL_PASS:", process.env.EMAIL_PASS ? "CONFIGURADO" : "NO CONFIGURADO")
console.log("EMAIL_TO:", process.env.EMAIL_TO)

async function testEmail() {
  try {
    console.log("\n=== CREANDO TRANSPORTADOR ===")

    // CORREGIDO: createTransport (sin la "r")
    const transporter = nodemailer.createTransport({
      host: "smtp.gmail.com",
      port: 587,
      secure: false,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    })

    console.log("‚úÖ Transportador creado")

    console.log("\n=== VERIFICANDO CONFIGURACI√ìN ===")
    await transporter.verify()
    console.log("‚úÖ Configuraci√≥n verificada")

    console.log("\n=== ENVIANDO EMAIL DE PRUEBA ===")
    const info = await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: process.env.EMAIL_TO,
      subject: "ü§ñ Test de Email - Bot de Arbitraje",
      html: `
        <h2>Test de Email</h2>
        <p>Este es un email de prueba del Bot de Arbitraje CEX.</p>
        <p><strong>Timestamp:</strong> ${new Date().toLocaleString()}</p>
        <p>Si recibes este email, la configuraci√≥n est√° funcionando correctamente.</p>
      `,
    })

    console.log("‚úÖ EMAIL ENVIADO EXITOSAMENTE")
    console.log("Message ID:", info.messageId)
    console.log("Response:", info.response)
  } catch (error) {
    console.error("‚ùå ERROR:", error.message)

    if (error.code === "EAUTH") {
      console.error("\nüîë PROBLEMA DE AUTENTICACI√ìN:")
      console.error("- Verifica que EMAIL_USER sea correcto")
      console.error("- Verifica que EMAIL_PASS sea una contrase√±a de aplicaci√≥n (no tu contrase√±a normal)")
      console.error("- Aseg√∫rate de que la verificaci√≥n en 2 pasos est√© activada en Google")
    }

    if (error.code === "ENOTFOUND") {
      console.error("\nüåê PROBLEMA DE CONEXI√ìN:")
      console.error("- Verifica tu conexi√≥n a internet")
      console.error("- Verifica que el host SMTP sea correcto")
    }

    if (error.code === "ETIMEDOUT") {
      console.error("\n‚è∞ PROBLEMA DE TIMEOUT:")
      console.error("- El servidor SMTP no responde")
      console.error("- Verifica tu firewall o antivirus")
    }

    console.error("\nC√≥digo de error:", error.code)
    console.error("Detalles completos:", error)
  }
}

testEmail()

---------------------------------------------------------------------------------------------------------------

// Este script prueba la conexi√≥n a Telegram directamente
require("dotenv").config() // Cargar variables de entorno desde .env

const axios = require("axios")

// Obtener las variables de entorno
const botToken = process.env.TELEGRAM_BOT_TOKEN
const chatId = process.env.TELEGRAM_CHAT_ID

console.log("=== TEST DE CONEXI√ìN A TELEGRAM ===")
console.log("TELEGRAM_BOT_TOKEN:", botToken ? "CONFIGURADO" : "NO CONFIGURADO")
console.log("TELEGRAM_CHAT_ID:", chatId ? "CONFIGURADO" : "NO CONFIGURADO")

if (!botToken || !chatId) {
  console.error("ERROR: Variables de entorno no configuradas correctamente")
  console.error("Por favor, crea un archivo .env con TELEGRAM_BOT_TOKEN y TELEGRAM_CHAT_ID")
  process.exit(1)
}

// Funci√≥n para enviar un mensaje de prueba
async function sendTestMessage() {
  try {
    console.log("Enviando mensaje de prueba a Telegram...")

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`
    const message = `ü§ñ Test de conexi√≥n: ${new Date().toLocaleString()}`

    const response = await axios.post(url, {
      chat_id: chatId,
      text: message,
      parse_mode: "HTML",
    })

    if (response.data.ok) {
      console.log("‚úÖ √âXITO: Mensaje enviado correctamente a Telegram")
      console.log("Detalles:", response.data.result)
    } else {
      console.error("‚ùå ERROR: La API de Telegram respondi√≥ con un error")
      console.error("Respuesta:", response.data)
    }
  } catch (error) {
    console.error("‚ùå ERROR al enviar mensaje a Telegram:")

    if (error.response) {
      // Error de la API de Telegram
      console.error("C√≥digo de estado:", error.response.status)
      console.error("Respuesta:", error.response.data)
    } else if (error.request) {
      // Error de red
      console.error("Error de red - No se pudo conectar a la API de Telegram")
    } else {
      // Otro tipo de error
      console.error("Error:", error.message)
    }
  }
}

// Ejecutar la prueba
sendTestMessage()

----------------------------------------------------------------------------------------------------------

const checkedTokens = {}; // token: timestamp √∫ltimo chequeo

async function checkTokenStatus(token, exchange) {
  const now = Date.now();
  if (checkedTokens[token + exchange] && now - checkedTokens[token + exchange] < 12 * 3600 * 1000) {
    return; // Ya fue chequeado en las √∫ltimas 12 horas
  }
  // Llama a la API del exchange y revisa si el token/red est√° activo
  // Si no est√° activo: m√°rcalo como inactivo en la config temporal
  checkedTokens[token + exchange] = now;
}

--------------------------------------------------------------------------------------------------------------

FRONTEND

PUBLIC

COMPPONENTS

"use client"

const AIPanel = ({ aiConfig, botStatus, onToggleAI, aiRecommendations = [] }) => {
  const handleToggleAI = (e) => {
    onToggleAI(e.target.checked)
  }

  const getDirectionIcon = (direction) => {
    return direction === "up" ? (
      <i className="bi bi-arrow-up-circle-fill text-success me-1"></i>
    ) : (
      <i className="bi bi-arrow-down-circle-fill text-danger me-1"></i>
    )
  }

  const getConfidenceColor = (confidence) => {
    if (confidence >= 0.8) return "success"
    if (confidence >= 0.6) return "warning"
    return "danger"
  }

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">
          <i className="bi bi-robot me-2"></i>
          Inteligencia Artificial
        </h5>
        <div className="form-check form-switch">
          <input
            className="form-check-input"
            type="checkbox"
            id="aiSwitch"
            checked={aiConfig.enabled}
            onChange={handleToggleAI}
          />
          <label className="form-check-label" htmlFor="aiSwitch">
            {aiConfig.enabled ? "Activado" : "Desactivado"}
          </label>
        </div>
      </div>
      <div className="card-body">
        {!aiConfig.enabled ? (
          <div className="text-center py-4">
            <i className="bi bi-robot text-muted" style={{ fontSize: "3rem" }}></i>
            <p className="mt-3">La IA est√° desactivada. Act√≠vala para obtener predicciones y recomendaciones.</p>
          </div>
        ) : (
          <>
            <div className="mb-3">
              <div className="d-flex justify-content-between align-items-center mb-2">
                <span>
                  Modelo: <strong>{aiConfig.model}</strong>
                </span>
                <span className="badge bg-info">Confianza: {(aiConfig.confidence * 100).toFixed(0)}%</span>
              </div>

              <div className="mb-4">
                <small className="text-muted d-block mb-1">
                  √öltimo entrenamiento: {new Date(aiConfig.lastTraining).toLocaleString()}
                </small>
                <small className="text-muted d-block">
                  Pr√≥ximo entrenamiento: {new Date(aiConfig.nextTraining).toLocaleString()}
                </small>
              </div>
            </div>

            <h6 className="mb-3">Predicciones de Mercado</h6>

            {Object.entries(aiConfig.predictions).map(([pair, prediction]) => (
              <div key={pair} className="mb-3">
                <div className="d-flex justify-content-between align-items-center mb-1">
                  <div>
                    <strong>{pair}</strong>
                    <span className="ms-2 text-muted small">({prediction.timeframe})</span>
                  </div>
                  <div className={`ai-prediction-${prediction.direction}`}>
                    {getDirectionIcon(prediction.direction)}
                    {prediction.direction === "up" ? "Subida" : "Bajada"}
                  </div>
                </div>
                <div className="d-flex justify-content-between align-items-center small text-muted mb-1">
                  <span>Confianza</span>
                  <span>{(prediction.confidence * 100).toFixed(0)}%</span>
                </div>
                <div className="ai-confidence">
                  <div
                    className={`ai-confidence-level bg-${getConfidenceColor(prediction.confidence)}`}
                    style={{ width: `${prediction.confidence * 100}%` }}
                  ></div>
                </div>
              </div>
            ))}

            <div className="mt-4">
              <h6 className="mb-2">Recomendaciones de IA</h6>
              <ul className="small">
                {/* AGREGADO: Mostrar recomendaciones reales si est√°n disponibles */}
                {aiRecommendations.length > 0
                  ? aiRecommendations.map((rec, idx) => (
                      <li key={idx}>
                        {rec.texto}
                        {rec.probabilidad ? (
                          <span className="ms-2 text-muted">({rec.probabilidad}%)</span>
                        ) : null}
                      </li>
                    ))
                  : (
                    <>
                      <li>Enfocarse en el par USDC/XRP (92% confianza)</li>
                      <li>Evitar operaciones en USDC/BNB por tendencia bajista</li>
                      <li>Considerar aumentar exposici√≥n en USDC/LTC</li>
                    </>
                  )}
              </ul>
            </div>
          </>
        )}
      </div>
    </div>
  )
}

export default AIPanel

------------------------------------------------------------------------------------------------------------

"use client"

import React from "react"
import axios from "axios"
import Header from "./Header"
import StatusCard from "./StatusCard"
import ProfitChart from "./ProfitChart"
import Controls from "./Controls"
import SpecificPairs from "./SpecificPairs"
import AIPanel from "./AIPanel"
import BalanceChart from "./BalanceChart"
import AutoRebalance from "./AutoRebalance"
import ArbitrageOpportunities from "./ArbitrageOpportunities"
import RiskAnalysis from "./RiskAnalysis"

const App = () => {
  const [botStatus, setBotStatus] = React.useState({
    isRunning: false,
    mode: "simulation",
    totalProfit: 0,
    totalTrades: 0,
    successfulTrades: 0,
    failedTrades: 0,
    currentStrategy: "basic",
    riskLevel: "medium",
    tradingPairs: [],
    checkInterval: 5000,
    averageLatency: "45ms",
    aiEnabled: true,
    autoRebalanceEnabled: false,
    usingRealPrices: false, // Nuevo estado para precios reales
    balances: {
      Binance: 0,
      Kucoin: 0,
    },
  })

  const [profitHistory, setProfitHistory] = React.useState([])
  const [balanceHistory, setBalanceHistory] = React.useState({
    timestamps: [],
    balances: {
      Binance: [],
      Kucoin: [],
    },
  })

  const [opportunities, setOpportunities] = React.useState([])
  const [riskAnalysis, setRiskAnalysis] = React.useState({
    marketVolatility: 0,
    exchangeRisk: 0,
    liquidityRisk: 0,
    overallRisk: 0,
  })

  const [specificPairs, setSpecificPairs] = React.useState({})
  const [aiConfig, setAiConfig] = React.useState({
    enabled: true,
    model: "",
    confidence: 0,
    predictions: {},
    lastTraining: new Date(),
    nextTraining: new Date(),
  })

  // AGREGADO: Estado para recomendaciones IA y anomal√≠as
  const [aiRecommendations, setAiRecommendations] = React.useState([])
  const [anomalies, setAnomalies] = React.useState([])

  // Cargar datos iniciales
  React.useEffect(() => {
    fetchData()

    // Actualizar datos cada 5 segundos
    const interval = setInterval(fetchData, 5000)

    return () => clearInterval(interval)
  }, [])

  const fetchData = async () => {
    try {
      const [
        statusResponse,
        profitHistoryResponse,
        balanceHistoryResponse,
        opportunitiesResponse,
        riskAnalysisResponse,
        specificPairsResponse,
        aiConfigResponse,
        aiRecommendationsResponse,
        anomaliesResponse,
      ] = await Promise.all([
        axios.get("/api/status"),
        axios.get("/api/profit-history"),
        axios.get("/api/balance-history"),
        axios.get("/api/opportunities"),
        axios.get("/api/risk-analysis"),
        axios.get("/api/specific-pairs"),
        axios.get("/api/ai-config"),
        axios.get("/api/ia/recomendaciones"),
        axios.get("/api/anomalias"),
      ])

      setBotStatus(statusResponse.data)
      setProfitHistory(profitHistoryResponse.data)
      setBalanceHistory(balanceHistoryResponse.data)
      setOpportunities(opportunitiesResponse.data)
      setRiskAnalysis(riskAnalysisResponse.data)
      setSpecificPairs(specificPairsResponse.data)
      setAiConfig(aiConfigResponse.data)
      setAiRecommendations(aiRecommendationsResponse.data.recomendaciones || [])
      setAnomalies(anomaliesResponse.data.anomalias || [])
    } catch (error) {
      console.error("Error fetching data:", error)
    }
  }

  const handleStartBot = async () => {
    try {
      await axios.post("/api/start-bot", { mode: botStatus.mode })
      fetchData()
    } catch (error) {
      console.error("Error starting bot:", error)
    }
  }

  const handleStopBot = async () => {
    try {
      await axios.post("/api/stop-bot")
      fetchData()
    } catch (error) {
      console.error("Error stopping bot:", error)
    }
  }

  const handleChangeStrategy = async (strategy) => {
    try {
      await axios.post("/api/change-strategy", { strategy })
      fetchData()
    } catch (error) {
      console.error("Error changing strategy:", error)
    }
  }

  const handleUpdateRiskSettings = async (riskLevel) => {
    try {
      await axios.post("/api/update-risk-settings", { riskLevel })
      fetchData()
    } catch (error) {
      console.error("Error updating risk settings:", error)
    }
  }

  const handleToggleMode = async (mode) => {
    try {
      await axios.post("/api/toggle-mode", { mode })
      fetchData()
    } catch (error) {
      console.error("Error toggling mode:", error)
    }
  }

  const handleToggleAI = async (enabled) => {
    try {
      await axios.post("/api/toggle-ai", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling AI:", error)
    }
  }

  // NUEVO: Manejar toggle de precios reales
  const handleToggleRealPrices = async (enabled) => {
    try {
      await axios.post("/api/toggle-real-prices", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling real prices:", error)
    }
  }

  const handleToggleAutoRebalance = async (enabled) => {
    try {
      await axios.post("/api/toggle-auto-rebalance", { enabled })
      fetchData()
    } catch (error) {
      console.error("Error toggling auto-rebalance:", error)
    }
  }

  const handleRebalanceFunds = async () => {
    try {
      await axios.post("/api/rebalance-funds")
      fetchData()
    } catch (error) {
      console.error("Error rebalancing funds:", error)
    }
  }

  const handleExecuteArbitrage = async (pair, buyExchange, sellExchange, amount) => {
    try {
      await axios.post("/api/execute-arbitrage", {
        pair,
        buyExchange,
        sellExchange,
        amount,
      })
      fetchData()
    } catch (error) {
      console.error("Error executing arbitrage:", error)
    }
  }

  return (
    <div>
      <Header botStatus={botStatus} />

      <div className="container-fluid">
        <div className="row mb-4">
          <StatusCard
            title="Ganancia Total"
            value={`$${botStatus.totalProfit.toFixed(2)}`}
            icon="bi-graph-up-arrow"
            color="success"
          />
          <StatusCard
            title="Operaciones Totales"
            value={botStatus.totalTrades}
            icon="bi-arrow-left-right"
            color="primary"
          />
          <StatusCard
            title="Tasa de √âxito"
            value={`${
              botStatus.totalTrades > 0 ? ((botStatus.successfulTrades / botStatus.totalTrades) * 100).toFixed(1) : 0
            }%`}
            icon="bi-check-circle"
            color="info"
          />
          <StatusCard
            title="Latencia Promedio"
            value={botStatus.averageLatency}
            icon="bi-speedometer"
            color="warning"
          />
        </div>

        <div className="row mb-4">
          <div className="col-md-8">
            <ProfitChart profitHistory={profitHistory} />
          </div>
          <div className="col-md-4">
            <Controls
              botStatus={botStatus}
              onStartBot={handleStartBot}
              onStopBot={handleStopBot}
              onChangeStrategy={handleChangeStrategy}
              onUpdateRiskSettings={handleUpdateRiskSettings}
              onToggleMode={handleToggleMode}
              onToggleRealPrices={handleToggleRealPrices} // Nuevo prop
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-6">
            <SpecificPairs
              specificPairs={specificPairs}
              botStatus={botStatus}
              onExecuteArbitrage={handleExecuteArbitrage}
            />
          </div>
          <div className="col-md-6">
            <AIPanel
              aiConfig={aiConfig}
              botStatus={botStatus}
              onToggleAI={handleToggleAI}
              aiRecommendations={aiRecommendations}
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-6">
            <BalanceChart balanceHistory={balanceHistory} />
          </div>
          <div className="col-md-6">
            <AutoRebalance
              botStatus={botStatus}
              onToggleAutoRebalance={handleToggleAutoRebalance}
              onRebalanceFunds={handleRebalanceFunds}
            />
          </div>
        </div>

        <div className="row mb-4">
          <div className="col-md-8">
            <ArbitrageOpportunities opportunities={opportunities} />
          </div>
          <div className="col-md-4">
            <RiskAnalysis riskAnalysis={riskAnalysis} anomalies={anomalies} />
          </div>
        </div>
      </div>
    </div>
  )
}

export default App

-----------------------------------------------------------------------------------------------------------

const ArbitrageOpportunities = ({ opportunities }) => {
  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">Oportunidades de Arbitraje</h5>
      </div>
      <div className="card-body">
        {opportunities.length === 0 ? (
          <p className="text-center text-muted">No hay oportunidades disponibles</p>
        ) : (
          <div className="table-responsive">
            <table className="table table-hover">
              <thead>
                <tr>
                  <th>Par</th>
                  <th>Exchanges</th>
                  <th>Ganancia</th>
                  <th>Estado</th>
                </tr>
              </thead>
              <tbody>
                {opportunities.map((opportunity, index) => (
                  <tr key={index} className={opportunity.isOpportunity ? "table-success" : ""}>
                    <td>{opportunity.pair}</td>
                    <td>
                      {opportunity.exchanges.map((exchange, i) => (
                        <span key={i} className={`badge exchange-badge bg-${getExchangeColor(exchange)} me-1`}>
                          {exchange}
                        </span>
                      ))}
                    </td>
                    <td className={opportunity.profitPercentage >= 0.3 ? "text-success fw-bold" : ""}>
                      {opportunity.profitPercentage.toFixed(2)}%
                    </td>
                    <td>
                      {opportunity.isOpportunity ? (
                        <span className="badge bg-success">Viable</span>
                      ) : (
                        <span className="badge bg-secondary">No viable</span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  )
}

function getExchangeColor(exchange) {
  // AGREGADO: Bybit y lowercase fallback
  const colors = {
    Binance: "warning",
    Bybit: "danger",
    Coinbase: "primary",
    Kraken: "info",
    Kucoin: "success",
    binance: "warning",
    bybit: "danger",
    coinbase: "primary",
    kraken: "info",
    kucoin: "success",
  }

  return colors[exchange] || "secondary"
}

export default ArbitrageOpportunities

-----------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const AutoRebalance = ({ botStatus, onToggleAutoRebalance, onRebalanceFunds }) => {
  const [loading, setLoading] = React.useState(false)

  const handleToggleAutoRebalance = (e) => {
    onToggleAutoRebalance(e.target.checked)
  }

  const handleManualRebalance = async () => {
    setLoading(true)
    await onRebalanceFunds()
    setLoading(false)
  }

  // Calcular porcentajes para la visualizaci√≥n
  const totalBalance = Object.values(botStatus.balances || {}).reduce((sum, balance) => sum + balance, 0)
  const balancePercentages = {}

  Object.entries(botStatus.balances || {}).forEach(([exchange, balance]) => {
    balancePercentages[exchange] = totalBalance > 0 ? (balance / totalBalance) * 100 : 0
  })

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">
          <i className="bi bi-arrow-repeat me-2"></i>
          Emparejamiento Autom√°tico
        </h5>
        <div className="form-check form-switch">
          <input
            className="form-check-input"
            type="checkbox"
            id="rebalanceSwitch"
            checked={botStatus.autoRebalanceEnabled}
            onChange={handleToggleAutoRebalance}
          />
          <label className="form-check-label" htmlFor="rebalanceSwitch">
            {botStatus.autoRebalanceEnabled ? "Activado" : "Desactivado"}
          </label>
        </div>
      </div>
      <div className="card-body">
        <div className="mb-3">
          <h6>Distribuci√≥n Actual de Fondos</h6>
          <div className="balance-distribution">
            <div className="balance-bar" style={{ display: "flex", height: 22 }}>
              {Object.entries(balancePercentages).map(([exchange, percentage]) => (
                <div
                  key={exchange}
                  className={`balance-segment balance-${exchange.toLowerCase()}`}
                  style={{
                    width: `${percentage}%`,
                    minWidth: percentage > 0 && percentage < 8 ? "15px" : undefined,
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontWeight: 500,
                    fontSize: "0.95em",
                    color: "#fff",
                  }}
                  title={`${exchange}: $${(botStatus.balances[exchange] || 0).toFixed(2)} (${percentage.toFixed(1)}%)`}
                >
                  {percentage > 10 ? `${percentage.toFixed(0)}%` : ""}
                </div>
              ))}
            </div>
          </div>

          <div className="balance-legend d-flex flex-wrap mt-2">
            {Object.keys(botStatus.balances || {}).map((exchange) => (
              <div key={exchange} className="legend-item d-flex align-items-center me-3 mb-1">
                <div
                  className={`legend-color balance-${exchange.toLowerCase()}`}
                  style={{
                    width: 16,
                    height: 16,
                    borderRadius: 3,
                    marginRight: 6,
                  }}
                ></div>
                <span>{exchange}</span>
              </div>
            ))}
          </div>
        </div>

        <div className="mb-4">
          <h6>Balances por Exchange</h6>
          {Object.entries(botStatus.balances || {}).map(([exchange, balance]) => (
            <div key={exchange} className="exchange-balance d-flex justify-content-between">
              <div className="exchange-balance-name">{exchange}</div>
              <div className="exchange-balance-value">${balance.toFixed(2)}</div>
            </div>
          ))}
        </div>

        <div className="d-grid">
          <button className="btn btn-primary" onClick={handleManualRebalance} disabled={loading}>
            {loading ? (
              <>
                <span className="loading-spinner me-2"></span>
                Reequilibrando...
              </>
            ) : (
              <>
                <i className="bi bi-arrow-repeat me-2"></i>
                Reequilibrar Fondos Manualmente
              </>
            )}
          </button>
        </div>

        <div className="mt-3 small text-muted">
          <p>
            <i className="bi bi-info-circle me-1"></i>
            El emparejamiento autom√°tico distribuye los fondos equitativamente entre los exchanges para maximizar las
            oportunidades de arbitraje.
          </p>
        </div>
      </div>
    </div>
  )
}

export default AutoRebalance

---------------------------------------------------------------------------------------------------------

import React from "react"

const titleStyle = {
  color: "#FFD700", // amarillo
  fontWeight: "bold",
  fontSize: "1.1em",
  letterSpacing: "1px"
}

const cellStyle = {
  color: "#fff", // blanco para cifras
  fontWeight: "bold"
}

const BalancesTable = ({ balances }) => (
  <div>
    <div style={{marginBottom: 24}}>
      <div style={titleStyle}>Binance</div>
      <table style={{width: "100%"}}>
        <thead>
          <tr>
            <th style={titleStyle}>Token</th>
            <th style={titleStyle}>Disponible</th>
            <th style={titleStyle}>Total</th>
          </tr>
        </thead>
        <tbody>
          {balances?.binance?.map(b => (
            <tr key={b.token}>
              <td style={cellStyle}>{b.token}</td>
              <td style={cellStyle}>{b.available}</td>
              <td style={cellStyle}>{b.total}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
    <div>
      <div style={titleStyle}>Bybit</div>
      <table style={{width: "100%"}}>
        <thead>
          <tr>
            <th style={titleStyle}>Token</th>
            <th style={titleStyle}>Disponible</th>
            <th style={titleStyle}>Total</th>
          </tr>
        </thead>
        <tbody>
          {balances?.bybit?.map(b => (
            <tr key={b.token}>
              <td style={cellStyle}>{b.token}</td>
              <td style={cellStyle}>{b.available}</td>
              <td style={cellStyle}>{b.total}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  </div>
)

export default BalancesTable

---------------------------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const Controls = ({
  botStatus,
  onStartBot,
  onStopBot,
  onChangeStrategy,
  onUpdateRiskSettings,
  onToggleMode,
  onToggleRealPrices,
}) => {
  const [loading, setLoading] = React.useState(false)

  const handleStartBot = async () => {
    setLoading(true)
    await onStartBot()
    setLoading(false)
  }

  const handleStopBot = async () => {
    setLoading(true)
    await onStopBot()
    setLoading(false)
  }

  const handleModeToggle = (e) => {
    const mode = e.target.checked ? "production" : "simulation"
    onToggleMode(mode)
  }

  const handleRealPricesToggle = (e) => {
    onToggleRealPrices(e.target.checked)
  }

  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">Control del Bot</h5>
      </div>
      <div className="card-body">
        <div className="mode-switch mb-4">
          <div className="form-check form-switch">
            <input
              className="form-check-input"
              type="checkbox"
              id="modeSwitch"
              checked={botStatus.mode === "production"}
              onChange={handleModeToggle}
            />
            <label className="form-check-label" htmlFor="modeSwitch">
              <span className={botStatus.mode === "simulation" ? "simulation-mode" : "production-mode"}>
                Modo: {botStatus.mode === "simulation" ? "Simulaci√≥n" : "Producci√≥n"}
              </span>
            </label>
          </div>
        </div>

        {/* NUEVO: Toggle para precios reales */}
        <div className="mode-switch mb-4">
          <div className="form-check form-switch">
            <input
              className="form-check-input"
              type="checkbox"
              id="realPricesSwitch"
              checked={botStatus.usingRealPrices}
              onChange={handleRealPricesToggle}
            />
            <label className="form-check-label" htmlFor="realPricesSwitch">
              <span className={botStatus.usingRealPrices ? "text-success" : "text-secondary"}>
                Precios: {botStatus.usingRealPrices ? "Reales" : "Simulados"}
              </span>
            </label>
          </div>
        </div>

        <div className="d-grid gap-2 mb-4">
          {!botStatus.isRunning ? (
            <button className="btn btn-success" onClick={handleStartBot} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner me-2"></span>
                  Iniciando...
                </>
              ) : (
                <>
                  <i className="bi bi-play-fill me-2"></i>
                  Iniciar Bot
                </>
              )}
            </button>
          ) : (
            <button className="btn btn-danger" onClick={handleStopBot} disabled={loading}>
              {loading ? (
                <>
                  <span className="loading-spinner me-2"></span>
                  Deteniendo...
                </>
              ) : (
                <>
                  <i className="bi bi-stop-fill me-2"></i>
                  Detener Bot
                </>
              )}
            </button>
          )}
        </div>

        <div className="mb-3">
          <label className="form-label">Estrategia</label>
          <select
            className="form-select"
            value={botStatus.currentStrategy}
            onChange={(e) => onChangeStrategy(e.target.value)}
          >
            <option value="basic">Arbitraje B√°sico</option>
            <option value="triangular">Arbitraje Triangular</option>
            <option value="statistical">Arbitraje Estad√≠stico</option>
            <option value="ml">Machine Learning</option>
            <option value="combined">Estrategia Combinada</option>
          </select>
        </div>

        <div className="mb-3">
          <label className="form-label">Nivel de Riesgo</label>
          <select
            className="form-select"
            value={botStatus.riskLevel}
            onChange={(e) => onUpdateRiskSettings(e.target.value)}
          >
            <option value="low">Bajo</option>
            <option value="medium">Medio</option>
            <option value="high">Alto</option>
          </select>
        </div>

        <div className="mb-3">
          <label className="form-label">Intervalo de Verificaci√≥n</label>
          <div className="input-group">
            <input type="number" className="form-control" value={botStatus.checkInterval} readOnly />
            <span className="input-group-text">ms</span>
          </div>
          <div className="form-text">Tiempo entre verificaciones de oportunidades</div>
        </div>
      </div>
    </div>
  )
}

export default Controls


---------------------------------------------------------------------------------------------------------------

const Header = ({ botStatus }) => {
  return (
    <nav className="navbar navbar-expand-lg navbar-dark mb-4">
      <div className="container-fluid">
        <a className="navbar-brand" href="#">
          <i className="bi bi-currency-exchange me-2"></i>
          TageCoin Exchange CEX
        </a>
        <button className="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
          <span className="navbar-toggler-icon"></span>
        </button>
        <div className="collapse navbar-collapse" id="navbarNav">
          <ul className="navbar-nav me-auto">
            <li className="nav-item">
              <a className="nav-link active" href="#">
                Dashboard
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Configuraci√≥n
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Historial
              </a>
            </li>
            <li className="nav-item">
              <a className="nav-link" href="#">
                Ayuda
              </a>
            </li>
          </ul>
          <div className="d-flex align-items-center">
            <span className={`badge me-3 ${botStatus.isRunning ? "bg-success" : "bg-danger"}`}>
              {botStatus.isRunning ? "Activo" : "Inactivo"}
            </span>
            <span className={`badge me-3 ${botStatus.mode === "simulation" ? "bg-info" : "bg-danger"}`}>
              {botStatus.mode === "simulation" ? "Simulaci√≥n" : "Producci√≥n"}
            </span>
            {/* NUEVO: Badge para precios reales */}
            <span className={`badge me-3 ${botStatus.usingRealPrices ? "bg-success" : "bg-secondary"}`}>
              Precios: {botStatus.usingRealPrices ? "Reales" : "Simulados"}
            </span>
            <div className="dropdown">
              <button className="btn btn-dark position-relative" type="button" data-bs-toggle="dropdown">
                <i className="bi bi-bell"></i>
                <span className="notification-badge">3</span>
              </button>
              <ul className="dropdown-menu dropdown-menu-end notification-dropdown">
                <li className="notification-item">
                  <div className="notification-icon notification-success">
                    <i className="bi bi-check-circle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 5 minutos</div>
                    <div className="notification-message">Operaci√≥n exitosa: USDC/LTC</div>
                  </div>
                </li>
                <li className="notification-item">
                  <div className="notification-icon notification-info">
                    <i className="bi bi-info-circle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 15 minutos</div>
                    <div className="notification-message">Nueva oportunidad detectada</div>
                  </div>
                </li>
                <li className="notification-item">
                  <div className="notification-icon notification-warning">
                    <i className="bi bi-exclamation-triangle"></i>
                  </div>
                  <div>
                    <div className="notification-time">Hace 30 minutos</div>
                    <div className="notification-message">Alta volatilidad detectada</div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </nav>
  )
}

export default Header

---------------------------------------------------------------------------------------------------------

"use client"

import { Chart } from "@/components/ui/chart"
import React from "react"

const ProfitChart = ({ profitHistory }) => {
  const chartRef = React.useRef(null)
  const [chart, setChart] = React.useState(null)
  const [range, setRange] = React.useState("24h")

  // Filtrar profitHistory seg√∫n el rango seleccionado
  const getFilteredHistory = () => {
    if (!profitHistory || profitHistory.length === 0) return []
    let cutoff = 0
    const now = new Date()
    if (range === "24h") {
      cutoff = now.getTime() - 24 * 60 * 60 * 1000
    } else if (range === "7d") {
      cutoff = now.getTime() - 7 * 24 * 60 * 60 * 1000
    } else if (range === "30d") {
      cutoff = now.getTime() - 30 * 24 * 60 * 60 * 1000
    }
    return profitHistory.filter((item) => {
      if (!item.timestamp) return false
      const ts = typeof item.timestamp === "string" ? Date.parse(item.timestamp) : item.timestamp
      return ts >= cutoff
    })
  }

  React.useEffect(() => {
    const filtered = getFilteredHistory()
    if (chartRef.current && filtered.length > 0) {
      const ctx = chartRef.current.getContext("2d")

      if (chart) {
        chart.destroy()
      }

      const labels = filtered.map((item) => {
        const date = new Date(item.timestamp)
        if (range === "24h") {
          return `${date.getHours()}:${date.getMinutes().toString().padStart(2, "0")}`
        } else {
          return `${date.getDate()}/${date.getMonth() + 1}`
        }
      })

      const data = filtered.map((item) => item.profit)

      const newChart = new Chart(ctx, {
        type: "line",
        data: {
          labels: labels,
          datasets: [
            {
              label: "Ganancia ($)",
              data: data,
              borderColor: "#27ae60",
              backgroundColor: "rgba(39, 174, 96, 0.1)",
              borderWidth: 2,
              tension: 0.4,
              fill: true,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false,
            },
            tooltip: {
              mode: "index",
              intersect: false,
            },
          },
          scales: {
            y: {
              beginAtZero: false,
              grid: {
                color: "rgba(0, 0, 0, 0.05)",
              },
            },
            x: {
              grid: {
                display: false,
              },
            },
          },
        },
      })

      setChart(newChart)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [profitHistory, range])

  // Limpieza de chart al desmontar
  React.useEffect(() => {
    return () => {
      if (chart) chart.destroy()
    }
  }, [chart])

  return (
    <div className="card h-100">
      <div className="card-header d-flex justify-content-between align-items-center">
        <h5 className="mb-0">Historial de Ganancias</h5>
        <div className="btn-group">
          <button
            className={`btn btn-sm btn-outline-secondary${range === "24h" ? " active" : ""}`}
            onClick={() => setRange("24h")}
          >
            24h
          </button>
          <button
            className={`btn btn-sm btn-outline-secondary${range === "7d" ? " active" : ""}`}
            onClick={() => setRange("7d")}
          >
            7d
          </button>
          <button
            className={`btn btn-sm btn-outline-secondary${range === "30d" ? " active" : ""}`}
            onClick={() => setRange("30d")}
          >
            30d
          </button>
        </div>
      </div>
      <div className="card-body">
        <div style={{ height: "300px" }}>
          <canvas ref={chartRef}></canvas>
        </div>
      </div>
    </div>
  )
}

export default ProfitChart

--------------------------------------------------------------------------------------------------------------

const RiskAnalysis = ({ riskAnalysis }) => {
  const getRiskLevelClass = (value) => {
    if (value < 30) return "risk-low"
    if (value < 60) return "risk-medium"
    return "risk-high"
  }

  // AGREGADO: recomendaciones din√°micas si existen en el backend
  const recommendations =
    Array.isArray(riskAnalysis.recommendations) && riskAnalysis.recommendations.length > 0
      ? riskAnalysis.recommendations
      : [
          "Mantener exposici√≥n limitada en mercados vol√°tiles",
          "Diversificar entre m√∫ltiples exchanges",
          "Considerar ajustar el nivel de riesgo si es superior al 60%",
        ]

  return (
    <div className="card h-100">
      <div className="card-header">
        <h5 className="mb-0">An√°lisis de Riesgo</h5>
      </div>
      <div className="card-body">
        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Volatilidad del Mercado</span>
            <span>{riskAnalysis.marketVolatility}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.marketVolatility)}`}
              style={{ width: `${riskAnalysis.marketVolatility}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Riesgo de Exchange</span>
            <span>{riskAnalysis.exchangeRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.exchangeRisk)}`}
              style={{ width: `${riskAnalysis.exchangeRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span>Riesgo de Liquidez</span>
            <span>{riskAnalysis.liquidityRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.liquidityRisk)}`}
              style={{ width: `${riskAnalysis.liquidityRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mb-3">
          <div className="d-flex justify-content-between mb-1">
            <span className="fw-bold">Riesgo General</span>
            <span className="fw-bold">{riskAnalysis.overallRisk}%</span>
          </div>
          <div className="risk-meter">
            <div
              className={`risk-level ${getRiskLevelClass(riskAnalysis.overallRisk)}`}
              style={{ width: `${riskAnalysis.overallRisk}%` }}
            ></div>
          </div>
        </div>

        <div className="mt-4">
          <h6>Recomendaciones</h6>
          <ul className="small">
            {recommendations.map((rec, idx) =>
              typeof rec === "string" ? (
                <li key={idx}>{rec}</li>
              ) : (
                <li key={idx}>
                  {rec.message || rec.text || JSON.stringify(rec)}
                  {rec.priority && (
                    <span className={`ms-2 badge bg-${rec.priority === "HIGH" ? "danger" : rec.priority === "MEDIUM" ? "warning" : "secondary"}`}>
                      {rec.priority}
                    </span>
                  )}
                </li>
              )
            )}
          </ul>
        </div>
      </div>
    </div>
  )
}

export default RiskAnalysis

-----------------------------------------------------------------------------------------------------------

import React from "react";
import { Link } from "react-router-dom";

const Sidebar = () => (
  <div className="sidebar">
    <ul>
      <li><Link to="/dashboard">Inicio</Link></li>
      <li><Link to="/general-config">Configuraci√≥n General</Link></li>
      <li><Link to="/exchanges">Exchanges</Link></li>
      <li><Link to="/strategies">Estrategias de Trading</Link></li>
      <li><Link to="/risk">Gesti√≥n de Riesgos</Link></li>
      <li><Link to="/portfolio">Portfolio y Balances</Link></li>
      <li><Link to="/alerts">Alertas y Notificaciones</Link></li>
      <li><Link to="/ai">Inteligencia Artificial</Link></li>
      <li><Link to="/backtesting">Backtesting</Link></li>
      <li><Link to="/mobile-api">API M√≥vil</Link></li>
      <li><Link to="/logs">Logs y Monitoreo</Link></li>
      <li><Link to="/security">Seguridad</Link></li>
      <li><Link to="/troubleshooting">Troubleshooting</Link></li>
    </ul>
  </div>
);

export default Sidebar;

--------------------------------------------------------------------------------------------------------

"use client"

import React from "react"

const SpecificPairs = ({ specificPairs, botStatus, onExecuteArbitrage }) => {
  const [selectedPair, setSelectedPair] = React.useState(null)
  const [showModal, setShowModal] = React.useState(false)
  const [amount, setAmount] = React.useState(100)

  const handleExecuteClick = (pair) => {
    setSelectedPair(pair)
    setShowModal(true)
  }

  const handleExecuteArbitrage = () => {
    if (selectedPair) {
      const pairData = specificPairs[selectedPair]
      onExecuteArbitrage(selectedPair, pairData.bestBuy.exchange, pairData.bestSell.exchange, amount)
      setShowModal(false)
    }
  }

  const getExchangeColor = (exchange) => {
    const colors = {
      Binance: "warning",
      Coinbase: "primary",
      Kraken: "info",
      Kucoin: "success",
    }
    return colors[exchange] || "secondary"
  }

  return (
    <>
      <div className="card h-100">
        <div className="card-header d-flex justify-content-between align-items-center">
          <h5 className="mb-0">üéØ Pares Espec√≠ficos</h5>
          <span className="badge bg-primary">Tiempo Real</span>
        </div>
        <div className="card-body">
          {Object.entries(specificPairs).map(([pair, data]) => (
            <div key={pair} className={`pair-card ${data.isOpportunity ? "opportunity" : "no-opportunity"}`}>
              <div className="pair-header">
                <div className="pair-name">
                  <span className={`opportunity-indicator ${data.isOpportunity ? "yes" : "no"}`}></span>
                  {pair}
                </div>
                <div className={`profit-percentage ${data.profitPercentage >= 0.3 ? "positive" : "negative"}`}>
                  {data.profitPercentage.toFixed(2)}%
                </div>
              </div>

              <div className="exchange-prices">
                {Object.entries(data.exchanges).map(([exchange, exchangeData]) => (
                  <div
                    key={exchange}
                    className={`exchange-price ${
                      exchange === data.bestBuy.exchange
                        ? "best-buy"
                        : exchange === data.bestSell.exchange
                          ? "best-sell"
                          : ""
                    }`}
                  >
                    <div className="exchange-name">
                      <span className={`badge bg-${getExchangeColor(exchange)} me-2`}>{exchange}</span>
                      {exchange === data.bestBuy.exchange && <small>(Mejor compra)</small>}
                      {exchange === data.bestSell.exchange && <small>(Mejor venta)</small>}
                    </div>
                    <div className="exchange-price-value">${exchangeData.price.toFixed(4)}</div>
                  </div>
                ))}
              </div>

              <div className="action-buttons">
                <button
                  className="btn btn-sm btn-outline-primary"
                  onClick={() => handleExecuteClick(pair)}
                  disabled={!botStatus.isRunning || !data.isOpportunity}
                >
                  <i className="bi bi-lightning-charge-fill me-1"></i>
                  Ejecutar Arbitraje
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal de confirmaci√≥n */}
      {showModal && (
        <div className="modal show" style={{ display: "block", backgroundColor: "rgba(0,0,0,0.5)" }}>
          <div className="modal-dialog">
            <div className="modal-content">
              <div className="modal-header">
                <h5 className="modal-title">Confirmar Arbitraje</h5>
                <button type="button" className="btn-close" onClick={() => setShowModal(false)}></button>
              </div>
              <div className="modal-body">
                <p>
                  Est√°s a punto de ejecutar un arbitraje para el par <strong>{selectedPair}</strong>.
                </p>
                <p>
                  <strong>Compra:</strong> {specificPairs[selectedPair]?.bestBuy.exchange} ($
                  {specificPairs[selectedPair]?.bestBuy.price.toFixed(4)})<br />
                  <strong>Venta:</strong> {specificPairs[selectedPair]?.bestSell.exchange} ($
                  {specificPairs[selectedPair]?.bestSell.price.toFixed(4)})<br />
                  <strong>Ganancia estimada:</strong> {specificPairs[selectedPair]?.profitPercentage.toFixed(2)}%
                </p>
                <div className="mb-3">
                  <label className="form-label">Cantidad a invertir (USDC)</label>
                  <input
                    type="number"
                    className="form-control"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    min="10"
                  />
                </div>
                <div className="alert alert-warning">
                  <i className="bi bi-exclamation-triangle me-2"></i>
                  {botStatus.mode === "simulation"
                    ? "Esto es una simulaci√≥n. No se ejecutar√°n operaciones reales."
                    : "¬°ATENCI√ìN! Est√°s en modo PRODUCCI√ìN. Se ejecutar√°n operaciones reales."}
                </div>
              </div>
              <div className="modal-footer">
                <button type="button" className="btn btn-secondary" onClick={() => setShowModal(false)}>
                  Cancelar
                </button>
                <button
                  type="button"
                  className={`btn ${botStatus.mode === "simulation" ? "btn-primary" : "btn-danger"}`}
                  onClick={handleExecuteArbitrage}
                >
                  {botStatus.mode === "simulation" ? "Simular Arbitraje" : "Ejecutar Arbitraje Real"}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  )
}

--------------------------------------------------------------------------------------------------

const StatusCard = ({ title, value, icon, color }) => {
  return (
    <div className="col-md-3 mb-4">
      <div className="card status-card h-100">
        <div className="card-body">
          <div className={`status-icon text-${color}`}>
            <i className={`bi ${icon}`}></i>
          </div>
          <p>{title}</p>
          <h3>{value}</h3>
        </div>
      </div>
    </div>
  )
}

----------------------------------------------------------------------------------------------------

JS

import { Chart } from "@/components/ui/chart"
// ========== DASHBOARD AVANZADO CON FUNCIONALIDADES COMPLETAS ==========

class AdvancedArbitrageDashboard {
  constructor() {
    this.token = localStorage.getItem("token")
    this.user = JSON.parse(localStorage.getItem("user") || "{}")
    this.socket = null
    this.charts = {}
    this.refreshIntervals = {}
    this.notifications = []

    this.botData = {
      isRunning: false,
      totalTrades: 0,
      successfulTrades: 0,
      totalProfit: 0,
      dailyTrades: 0,
      dailyProfit: 0,
      exposure: { total: 0 },
      opportunities: [],
      balances: { BINANCE: {}, KUCOIN: {} },
      aiSuggestions: null,
    }

    this.init()
  }

  async init() {
    console.log("üöÄ Inicializando dashboard avanzado...")

    // Ocultar pantalla de carga
    setTimeout(() => {
      document.getElementById("loading-screen").style.display = "none"

      if (this.token) {
        this.showDashboard()
        this.initializeSocket()
        this.loadAllData()
      } else {
        this.showLogin()
      }
    }, 1000)

    this.setupEventListeners()
    this.initializeCharts()
    this.startAutoRefresh()
  }

  setupEventListeners() {
    // Login
    const loginForm = document.getElementById("loginForm")
    if (loginForm) {
      loginForm.addEventListener("submit", (e) => this.handleLogin(e))
    }

    // Logout
    document.getElementById("logout-btn")?.addEventListener("click", () => this.logout())
    document.getElementById("logout-link")?.addEventListener("click", () => this.logout())

    // Sidebar
    document.getElementById("sidebar-toggle")?.addEventListener("click", () => this.toggleSidebar())

    // Navigation
    document.querySelectorAll(".nav-link[data-page]").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault()
        this.navigateToPage(link.dataset.page)
      })
    })

    // Bot controls
    document.getElementById("start-bot-btn")?.addEventListener("click", () => this.startBot())
    document.getElementById("stop-bot-btn")?.addEventListener("click", () => this.stopBot())

    // Refresh buttons
    document.getElementById("refresh-opportunities")?.addEventListener("click", () => this.loadOpportunities())
    document.getElementById("refresh-balances")?.addEventListener("click", () => this.loadBalances())
    document.getElementById("refresh-ai")?.addEventListener("click", () => this.loadAISuggestions())

    // Settings
    document.getElementById("save-settings")?.addEventListener("click", () => this.saveSettings())
    document.getElementById("reset-settings")?.addEventListener("click", () => this.resetSettings())

    // Manual trade execution
    document.addEventListener("click", (e) => {
      if (e.target.classList.contains("execute-trade-btn")) {
        const opportunityId = e.target.dataset.opportunityId
        this.executeManualTrade(opportunityId)
      }
    })
  }

  showLogin() {
    document.getElementById("login-form").style.display = "flex"
    document.getElementById("dashboard").style.display = "none"
  }

  showDashboard() {
    document.getElementById("login-form").style.display = "none"
    document.getElementById("dashboard").style.display = "block"

    if (this.user.username) {
      document.getElementById("user-name").textContent = this.user.username
    }
  }

  async handleLogin(e) {
    e.preventDefault()

    const username = document.getElementById("username").value
    const password = document.getElementById("password").value
    const loginBtn = document.getElementById("login-btn")
    const errorDiv = document.getElementById("login-error")

    loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando sesi√≥n...'
    loginBtn.disabled = true
    errorDiv.style.display = "none"

    try {
      const response = await fetch("/api/login", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ username, password }),
      })

      const data = await response.json()

      if (response.ok) {
        this.token = data.token
        this.user = data.user
        localStorage.setItem("token", this.token)
        localStorage.setItem("user", JSON.stringify(this.user))

        this.showDashboard()
        this.initializeSocket()
        this.loadAllData()
        this.showNotification("Bienvenido al dashboard", "success")
      } else {
        errorDiv.textContent = data.message || "Error de autenticaci√≥n"
        errorDiv.style.display = "block"
      }
    } catch (error) {
      errorDiv.textContent = "Error de conexi√≥n"
      errorDiv.style.display = "block"
    } finally {
      loginBtn.innerHTML = '<i class="bi bi-box-arrow-in-right me-2"></i>Iniciar Sesi√≥n'
      loginBtn.disabled = false
    }
  }

  logout() {
    localStorage.removeItem("token")
    localStorage.removeItem("user")
    this.token = null
    this.user = {}

    if (this.socket) this.socket.disconnect()
    this.clearRefreshIntervals()
    this.showLogin()
  }

  toggleSidebar() {
    const sidebar = document.getElementById("sidebar")
    const header = document.getElementById("header")
    const mainContent = document.getElementById("main-content")
    const toggleIcon = document.querySelector("#sidebar-toggle i")

    sidebar.classList.toggle("sidebar-collapsed")
    header.classList.toggle("header-expanded")
    mainContent.classList.toggle("main-content-expanded")

    if (sidebar.classList.contains("sidebar-collapsed")) {
      toggleIcon.className = "bi bi-chevron-right"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "none"
      })
    } else {
      toggleIcon.className = "bi bi-chevron-left"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "inline"
      })
    }
  }

  navigateToPage(page) {
    // Update navigation
    document.querySelectorAll(".nav-link").forEach((link) => {
      link.classList.remove("active")
    })
    document.querySelector(`[data-page="${page}"]`)?.classList.add("active")

    // Update page title
    const titles = {
      dashboard: "Dashboard Principal",
      opportunities: "Oportunidades de Arbitraje",
      "ai-advisor": "Asesor de IA",
      reports: "Reportes y An√°lisis",
      settings: "Configuraci√≥n del Bot",
    }

    document.getElementById("page-title").textContent = titles[page] || "Dashboard"

    // Show/hide pages
    document.querySelectorAll(".page-content").forEach((pageEl) => {
      pageEl.style.display = "none"
    })

    const targetPage = document.getElementById(`page-${page}`)
    if (targetPage) {
      targetPage.style.display = "block"

      // Load page-specific data
      this.loadPageData(page)
    }
  }

  async loadPageData(page) {
    switch (page) {
      case "opportunities":
        await this.loadOpportunities()
        break
      case "ai-advisor":
        await this.loadAISuggestions()
        break
      case "reports":
        await this.loadReports()
        this.updateReportsCharts()
        break
      case "settings":
        this.loadSettings()
        break
    }
  }

  initializeSocket() {
    if (!this.token) return

    this.socket = io()

    this.socket.on("connect", () => {
      console.log("‚úÖ Conectado al servidor")
      this.showNotification("Conectado al servidor", "success")
    })

    this.socket.on("status_update", (data) => {
      this.updateBotStatus(data)
    })

    this.socket.on("new_opportunity", (data) => {
      this.addNewOpportunity(data)
      this.showNotification(`Nueva oportunidad: ${data.pair} (${data.finalProfit.toFixed(2)}%)`, "info")
    })

    this.socket.on("balance_update", (data) => {
      this.updateBalances(data)
    })

    this.socket.on("trade_executed", (data) => {
      this.showNotification(
        `Trade ejecutado: ${data.profit > 0 ? "Ganancia" : "P√©rdida"} de ${Math.abs(data.profit).toFixed(4)} USDT`,
        data.profit > 0 ? "success" : "warning",
      )
    })

    this.socket.on("disconnect", () => {
      console.log("‚ùå Desconectado del servidor")
      this.showNotification("Desconectado del servidor", "warning")
    })
  }

  async loadAllData() {
    try {
      await Promise.all([this.loadBotStatus(), this.loadOpportunities(), this.loadBalances(), this.loadAISuggestions()])
    } catch (error) {
      console.error("Error cargando datos:", error)
      this.showNotification("Error cargando datos", "danger")
    }
  }

  async apiCall(endpoint, options = {}) {
    const defaultOptions = {
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
    }

    try {
      const response = await fetch(endpoint, { ...defaultOptions, ...options })

      if (response.status === 401) {
        this.logout()
        throw new Error("No autorizado")
      }

      return await response.json()
    } catch (error) {
      console.error(`Error en API call ${endpoint}:`, error)
      throw error
    }
  }

  async loadBotStatus() {
    try {
      const data = await this.apiCall("/api/status")
      this.updateBotStatus(data)
    } catch (error) {
      console.error("Error cargando estado del bot:", error)
    }
  }

  updateBotStatus(data) {
    this.botData = { ...this.botData, ...data }
    const isRunning = data.botState?.isRunning || false

    // Update status indicators
    const statusBadge = document.getElementById("bot-status-badge")
    const statusText = document.getElementById("bot-status-text")
    const statusDescription = document.getElementById("bot-status-description")
    const runningIndicator = document.getElementById("bot-running-indicator")
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (isRunning) {
      statusBadge.className = "badge bg-success me-2"
      statusBadge.textContent = "Activo"
      statusText.textContent = "Bot en ejecuci√≥n"
      statusDescription.innerHTML =
        '<span class="text-success"><i class="bi bi-play-circle me-1"></i>En ejecuci√≥n</span>'
      runningIndicator.style.display = "block"
      startBtn.style.display = "none"
      stopBtn.style.display = "inline-block"
    } else {
      statusBadge.className = "badge bg-danger me-2"
      statusBadge.textContent = "Inactivo"
      statusText.textContent = "Bot detenido"
      statusDescription.innerHTML = '<span class="text-danger"><i class="bi bi-stop-circle me-1"></i>Detenido</span>'
      runningIndicator.style.display = "none"
      startBtn.style.display = "inline-block"
      stopBtn.style.display = "none"
    }

    // Update metrics
    if (data.botState) {
      this.updateElement("total-trades", data.botState.totalTrades || 0)
      this.updateElement("daily-trades", data.botState.dailyTrades || 0)
      this.updateElement("total-profit", `${(data.botState.totalProfit || 0).toFixed(4)} USDT`)
      this.updateElement("daily-profit", `${(data.botState.dailyProfit || 0).toFixed(4)} USDT`)
      this.updateElement("successful-trades", data.botState.successfulTrades || 0)

      const successRate =
        data.botState.totalTrades > 0
          ? ((data.botState.successfulTrades / data.botState.totalTrades) * 100).toFixed(1)
          : 0
      this.updateElement("success-rate", `${successRate}%`)
    }

    if (data.exposure) {
      this.updateElement("total-exposure", `$${(data.exposure.total || 0).toFixed(2)}`)
    }

    // Update charts if visible
    this.updateDashboardCharts(data)
  }

  updateElement(id, value) {
    const element = document.getElementById(id)
    if (element) element.textContent = value
  }

  async startBot() {
    const startBtn = document.getElementById("start-bot-btn")
    const originalText = startBtn.innerHTML

    startBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando...'
    startBtn.disabled = true

    try {
      const result = await this.apiCall("/api/bot/start", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot iniciado correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error iniciando el bot", "danger")
    } finally {
      startBtn.innerHTML = originalText
      startBtn.disabled = false
    }
  }

  async stopBot() {
    const stopBtn = document.getElementById("stop-bot-btn")
    const originalText = stopBtn.innerHTML

    stopBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Deteniendo...'
    stopBtn.disabled = true

    try {
      const result = await this.apiCall("/api/bot/stop", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot detenido correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error deteniendo el bot", "danger")
    } finally {
      stopBtn.innerHTML = originalText
      stopBtn.disabled = false
    }
  }

  async loadOpportunities() {
    try {
      const opportunities = await this.apiCall("/api/opportunities")
      this.botData.opportunities = opportunities
      this.updateOpportunitiesTable(opportunities)
    } catch (error) {
      console.error("Error cargando oportunidades:", error)
    }
  }

  updateOpportunitiesTable(opportunities) {
    const tbody = document.getElementById("opportunities-table")
    const detailedTbody = document.getElementById("detailed-opportunities-table")

    if (!opportunities || opportunities.length === 0) {
      const emptyRow = `
        <tr>
          <td colspan="7" class="text-center py-4">
            <i class="bi bi-search fs-4 text-muted"></i>
            <p class="mt-2 mb-0">No hay oportunidades disponibles</p>
          </td>
        </tr>
      `
      if (tbody) tbody.innerHTML = emptyRow
      if (detailedTbody) detailedTbody.innerHTML = emptyRow
      return
    }

    const createRow = (opp, detailed = false) => `
      <tr>
        <td>
          <strong>${opp.pair}</strong>
          ${detailed ? `<br><small class="text-muted">Riesgo: ${opp.riskLevel || "MEDIUM"}</small>` : ""}
        </td>
        <td>
          <span class="badge bg-primary me-1">${opp.buyExchange}</span>
          <i class="bi bi-arrow-right"></i>
          <span class="badge bg-secondary ms-1">${opp.sellExchange}</span>
        </td>
        <td class="text-success">
          <strong>${opp.finalProfit.toFixed(3)}%</strong>
          ${detailed ? `<br><small class="text-muted">Bruto: ${opp.grossProfit.toFixed(3)}%</small>` : ""}
        </td>
        <td>
          <div class="progress" style="height: 6px;">
            <div class="progress-bar ${opp.confidence > 0.7 ? "bg-success" : opp.confidence > 0.4 ? "bg-warning" : "bg-danger"}" 
                 style="width: ${opp.confidence * 100}%"></div>
          </div>
          <small>${(opp.confidence * 100).toFixed(1)}%</small>
        </td>
        <td>
          <strong>${opp.tradeAmount.toFixed(2)} USDT</strong>
          ${detailed ? `<br><small class="text-muted">Max: ${opp.pair.maxTradeAmount || "N/A"}</small>` : ""}
        </td>
        <td>
          <small>${new Date(opp.timestamp).toLocaleTimeString()}</small>
          ${detailed ? `<br><small class="text-muted">${new Date(opp.timestamp).toLocaleDateString()}</small>` : ""}
        </td>
        ${
          detailed
            ? `
          <td>
            <button class="btn btn-sm btn-success execute-trade-btn" data-opportunity-id="${opp.id || Date.now()}">
              <i class="bi bi-play-fill me-1"></i>
              Ejecutar
            </button>
          </td>
        `
            : ""
        }
      </tr>
    `

    if (tbody) {
      tbody.innerHTML = opportunities
        .slice(0, 5)
        .map((opp) => createRow(opp))
        .join("")
    }

    if (detailedTbody) {
      detailedTbody.innerHTML = opportunities.map((opp) => createRow(opp, true)).join("")
    }
  }

  addNewOpportunity(opportunity) {
    this.botData.opportunities.unshift(opportunity)
    this.botData.opportunities = this.botData.opportunities.slice(0, 20) // Keep only last 20
    this.updateOpportunitiesTable(this.botData.opportunities)
  }

  async executeManualTrade(opportunityId) {
    try {
      const result = await this.apiCall("/api/bot/execute", {
        method: "POST",
        body: JSON.stringify({ opportunityId }),
      })

      if (result.success) {
        this.showNotification(`Trade ejecutado exitosamente. Profit: ${result.profit?.toFixed(4)} USDT`, "success")
      } else {
        this.showNotification(`Error ejecutando trade: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error ejecutando trade manual", "danger")
    }
  }

  async loadBalances() {
    try {
      const balances = await this.apiCall("/api/balances")
      this.botData.balances = balances
      this.updateBalances(balances)
    } catch (error) {
      console.error("Error cargando balances:", error)
    }
  }

  updateBalances(balances) {
    this.updateExchangeBalances("binance-balances", balances.BINANCE || {})
    this.updateExchangeBalances("kucoin-balances", balances.KUCOIN || {})

    // Update balance charts
    this.updateBalanceCharts(balances)
  }

  updateExchangeBalances(tableId, balances) {
    const tbody = document.getElementById(tableId)
    if (!tbody) return

    const balanceEntries = Object.entries(balances).filter(([_, balance]) => balance.total > 0)

    if (balanceEntries.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="4" class="text-center py-4">
            <i class="bi bi-wallet2 fs-4 text-muted"></i>
            <p class="mt-2 mb-0">No hay balances disponibles</p>
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = balanceEntries
      .map(
        ([asset, balance]) => `
      <tr>
        <td>
          <strong>${asset}</strong>
          <small class="text-muted d-block">${this.getAssetName(asset)}</small>
        </td>
        <td>${balance.free.toFixed(6)}</td>
        <td>${balance.locked.toFixed(6)}</td>
        <td>
          <strong>${balance.total.toFixed(6)}</strong>
          <small class="text-muted d-block">‚âà $${(balance.total * this.getAssetPrice(asset)).toFixed(2)}</small>
        </td>
      </tr>
    `,
      )
      .join("")
  }

  getAssetName(asset) {
    const names = {
      USDT: "Tether",
      POL: "Polygon",
      USDC: "USD Coin",
      BTC: "Bitcoin",
      ETH: "Ethereum",
    }
    return names[asset] || asset
  }

  getAssetPrice(asset) {
    // Simplified price lookup
    const prices = {
      USDT: 1,
      USDC: 1,
      POL: 0.45,
      BTC: 45000,
      ETH: 3000,
    }
    return prices[asset] || 1
  }

  async loadAISuggestions() {
    try {
      const suggestions = await this.apiCall("/api/ai/suggestions")
      this.botData.aiSuggestions = suggestions
      this.updateAISuggestions(suggestions)
    } catch (error) {
      console.error("Error cargando sugerencias de IA:", error)
    }
  }

  updateAISuggestions(suggestions) {
    // Update general recommendations
    const recommendationsContainer = document.getElementById("ai-recommendations")
    if (recommendationsContainer && suggestions.generalRecommendations) {
      recommendationsContainer.innerHTML = suggestions.generalRecommendations
        .map(
          (rec) => `
        <div class="ai-recommendation ${rec.importance.toLowerCase()}">
          <div class="d-flex align-items-center mb-2">
            <span class="badge bg-${rec.importance === "HIGH" ? "danger" : rec.importance === "MEDIUM" ? "warning" : "info"} me-2">
              ${rec.importance === "HIGH" ? "Alta Prioridad" : rec.importance === "MEDIUM" ? "Media Prioridad" : "Baja Prioridad"}
            </span>
            <strong>${rec.type.replace("_", " ")}</strong>
          </div>
          <p class="mb-0">${rec.message}</p>
        </div>
      `,
        )
        .join("")
    }

    // Update market insights
    const marketInsights = document.getElementById("market-insights")
    if (marketInsights && suggestions.marketInsights) {
      const insights = suggestions.marketInsights
      marketInsights.innerHTML = `
        <div class="row">
          <div class="col-md-6">
            <h6>Volatilidad del Mercado</h6>
            <div class="progress mb-3">
              <div class="progress-bar ${insights.marketVolatility > 4 ? "bg-danger" : insights.marketVolatility > 2 ? "bg-warning" : "bg-success"}" 
                   style="width: ${Math.min(insights.marketVolatility * 10, 100)}%"></div>
            </div>
            <small>${insights.marketVolatility.toFixed(2)}% - ${insights.marketVolatility > 4 ? "Alta" : insights.marketVolatility > 2 ? "Moderada" : "Baja"}</small>
          </div>
          <div class="col-md-6">
            <h6>Mejores Horas de Trading</h6>
            ${
              insights.bestTradingHours
                ?.slice(0, 3)
                .map(
                  (hour) => `
              <div class="d-flex justify-content-between">
                <span>${hour.formattedHour}</span>
                <span class="text-success">${(hour.successRate * 100).toFixed(1)}%</span>
              </div>
            `,
                )
                .join("") || '<p class="text-muted">No hay datos disponibles</p>'
            }
          </div>
        </div>
      `
    }
  }

  async loadReports() {
    try {
      const report = await this.apiCall("/api/report")
      this.updateReportsPage(report)
    } catch (error) {
      console.error("Error cargando reportes:", error)
    }
  }

  updateReportsPage(report) {
    // Update performance metrics
    const performanceMetrics = document.getElementById("performance-metrics")
    if (performanceMetrics && report.performance) {
      const perf = report.performance
      performanceMetrics.innerHTML = `
        <div class="row">
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-primary">${perf.totalTrades}</h4>
              <small>Total Trades</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-success">${perf.successRate.toFixed(1)}%</h4>
              <small>Tasa de √âxito</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-info">${perf.totalProfit.toFixed(4)}</h4>
              <small>Profit Total (USDT)</small>
            </div>
          </div>
          <div class="col-md-3">
            <div class="text-center">
              <h4 class="text-warning">${(perf.avgExecutionTime / 1000).toFixed(2)}s</h4>
              <small>Tiempo Promedio</small>
            </div>
          </div>
        </div>
      `
    }
  }

  initializeCharts() {
    // Initialize Chart.js charts
    this.initializeProfitChart()
    this.initializeBalanceChart()
    this.initializeOpportunityChart()
  }

  initializeProfitChart() {
    const ctx = document.getElementById("profit-chart")
    if (!ctx) return

    this.charts.profit = new Chart(ctx, {
      type: "line",
      data: {
        labels: [],
        datasets: [
          {
            label: "Profit Acumulado (USDT)",
            data: [],
            borderColor: "#06d6a0",
            backgroundColor: "rgba(6, 214, 160, 0.1)",
            tension: 0.4,
            fill: true,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: true, position: "top" },
        },
        scales: {
          y: { beginAtZero: true },
        },
      },
    })
  }

  initializeBalanceChart() {
    const ctx = document.getElementById("balance-chart")
    if (!ctx) return

    this.charts.balance = new Chart(ctx, {
      type: "doughnut",
      data: {
        labels: ["Binance", "KuCoin"],
        datasets: [
          {
            data: [0, 0],
            backgroundColor: ["#3a86ff", "#8338ec"],
            borderWidth: 2,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { position: "bottom" },
        },
      },
    })
  }

  initializeOpportunityChart() {
    const ctx = document.getElementById("opportunity-chart")
    if (!ctx) return

    this.charts.opportunity = new Chart(ctx, {
      type: "bar",
      data: {
        labels: [],
        datasets: [
          {
            label: "Oportunidades por Par",
            data: [],
            backgroundColor: "#ffd166",
            borderColor: "#ffb347",
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: { display: false },
        },
        scales: {
          y: { beginAtZero: true },
        },
      },
    })
  }

  updateDashboardCharts(data) {
    // Update profit chart with new data
    if (this.charts.profit && data.botState) {
      const now = new Date().toLocaleTimeString()
      this.charts.profit.data.labels.push(now)
      this.charts.profit.data.datasets[0].data.push(data.botState.totalProfit || 0)

      // Keep only last 20 points
      if (this.charts.profit.data.labels.length > 20) {
        this.charts.profit.data.labels.shift()
        this.charts.profit.data.datasets[0].data.shift()
      }

      this.charts.profit.update()
    }
  }

  updateBalanceCharts(balances) {
    if (this.charts.balance) {
      const binanceTotal = Object.values(balances.BINANCE || {}).reduce((sum, balance) => sum + (balance.total || 0), 0)
      const kucoinTotal = Object.values(balances.KUCOIN || {}).reduce((sum, balance) => sum + (balance.total || 0), 0)

      this.charts.balance.data.datasets[0].data = [binanceTotal, kucoinTotal]
      this.charts.balance.update()
    }
  }

  updateReportsCharts() {
    // Update opportunity chart
    if (this.charts.opportunity && this.botData.opportunities) {
      const pairCounts = {}
      this.botData.opportunities.forEach((opp) => {
        pairCounts[opp.pair] = (pairCounts[opp.pair] || 0) + 1
      })

      this.charts.opportunity.data.labels = Object.keys(pairCounts)
      this.charts.opportunity.data.datasets[0].data = Object.values(pairCounts)
      this.charts.opportunity.update()
    }
  }

  loadSettings() {
    // Load current settings
    const settings = {
      dryRun: true,
      checkInterval: 10,
      maxDailyTrades: 20,
      minProfit: 0.3,
      maxExposure: 200,
    }

    document.getElementById("dry-run").checked = settings.dryRun
    document.getElementById("check-interval").value = settings.checkInterval
    document.getElementById("max-daily-trades").value = settings.maxDailyTrades
    document.getElementById("min-profit").value = settings.minProfit
    document.getElementById("max-exposure").value = settings.maxExposure
  }

  async saveSettings() {
    const settings = {
      BOT: {
        DRY_RUN: document.getElementById("dry-run").checked,
        CHECK_INTERVAL: Number.parseInt(document.getElementById("check-interval").value),
        MAX_DAILY_TRADES: Number.parseInt(document.getElementById("max-daily-trades").value),
      },
      RISK_MANAGEMENT: {
        MAX_TOTAL_EXPOSURE: Number.parseFloat(document.getElementById("max-exposure").value),
      },
      TRADING_PAIRS: [
        {
          symbol: "POL/USDT",
          minProfit: Number.parseFloat(document.getElementById("min-profit").value),
        },
      ],
    }

    try {
      const result = await this.apiCall("/api/bot/settings", {
        method: "POST",
        body: JSON.stringify({ settings }),
      })

      if (result.success) {
        this.showNotification("Configuraci√≥n guardada correctamente", "success")
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error guardando configuraci√≥n", "danger")
    }
  }

  resetSettings() {
    if (confirm("¬øEst√° seguro de que desea restablecer la configuraci√≥n por defecto?")) {
      this.loadSettings()
      this.showNotification("Configuraci√≥n restablecida", "info")
    }
  }

  startAutoRefresh() {
    // Auto-refresh data every 30 seconds
    this.refreshIntervals.status = setInterval(() => {
      if (this.token) this.loadBotStatus()
    }, 30000)

    // Auto-refresh opportunities every 15 seconds
    this.refreshIntervals.opportunities = setInterval(() => {
      if (this.token) this.loadOpportunities()
    }, 15000)

    // Auto-refresh balances every 60 seconds
    this.refreshIntervals.balances = setInterval(() => {
      if (this.token) this.loadBalances()
    }, 60000)
  }

  clearRefreshIntervals() {
    Object.values(this.refreshIntervals).forEach((interval) => {
      clearInterval(interval)
    })
    this.refreshIntervals = {}
  }

  showNotification(message, type = "info") {
    const notification = document.createElement("div")
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`
    notification.style.cssText = "top: 20px; right: 20px; z-index: 9999; min-width: 300px;"
    notification.innerHTML = `
      <i class="bi bi-${type === "success" ? "check-circle" : type === "danger" ? "exclamation-triangle" : type === "warning" ? "exclamation-circle" : "info-circle"} me-2"></i>
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `

    document.body.appendChild(notification)

    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove()
      }
    }, 5000)

    // Store notification
    this.notifications.unshift({ message, type, timestamp: Date.now() })
    this.notifications = this.notifications.slice(0, 50) // Keep only last 50
  }
}

// Initialize advanced dashboard
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ Inicializando dashboard avanzado...")
  new AdvancedArbitrageDashboard()
})

----------------------------------------------------------------------------------------------------------------

// ========== APLICACI√ìN PRINCIPAL DEL DASHBOARD ==========

class ArbitrageBotDashboard {
  constructor() {
    this.token = localStorage.getItem("token")
    this.user = JSON.parse(localStorage.getItem("user") || "{}")
    this.socket = null
    this.botData = {
      isRunning: false,
      totalTrades: 0,
      successfulTrades: 0,
      totalProfit: 0,
      dailyTrades: 0,
      dailyProfit: 0,
      exposure: { total: 0 },
    }

    this.init()
  }

  async init() {
    console.log("üöÄ Inicializando dashboard...")

    // Ocultar loading screen despu√©s de un tiempo m√°s corto
    setTimeout(() => {
      console.log("üì± Mostrando interfaz...")
      document.getElementById("loading-screen").style.display = "none"

      if (this.token) {
        console.log("‚úÖ Token encontrado, mostrando dashboard")
        this.showDashboard()
        this.initializeSocket()
        this.loadInitialData()
      } else {
        console.log("üîë No hay token, mostrando login")
        this.showLogin()
      }
    }, 500) // Reducido de 1000ms a 500ms

    this.setupEventListeners()
  }

  setupEventListeners() {
    console.log("üéØ Configurando event listeners...")

    // Login form
    const loginForm = document.getElementById("loginForm")
    if (loginForm) {
      loginForm.addEventListener("submit", (e) => this.handleLogin(e))
      console.log("‚úÖ Login form listener configurado")
    }

    // Logout buttons
    const logoutBtn = document.getElementById("logout-btn")
    const logoutLink = document.getElementById("logout-link")

    if (logoutBtn) {
      logoutBtn.addEventListener("click", () => this.logout())
      console.log("‚úÖ Logout button listener configurado")
    }

    if (logoutLink) {
      logoutLink.addEventListener("click", () => this.logout())
      console.log("‚úÖ Logout link listener configurado")
    }

    // Sidebar toggle
    const sidebarToggle = document.getElementById("sidebar-toggle")
    if (sidebarToggle) {
      sidebarToggle.addEventListener("click", () => this.toggleSidebar())
      console.log("‚úÖ Sidebar toggle listener configurado")
    }

    // Navigation
    document.querySelectorAll(".nav-link[data-page]").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault()
        this.navigateToPage(link.dataset.page)
      })
    })
    console.log("‚úÖ Navigation listeners configurados")

    // Bot controls
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (startBtn) {
      startBtn.addEventListener("click", () => this.startBot())
      console.log("‚úÖ Start bot listener configurado")
    }

    if (stopBtn) {
      stopBtn.addEventListener("click", () => this.stopBot())
      console.log("‚úÖ Stop bot listener configurado")
    }

    // Refresh buttons
    const refreshBtn = document.getElementById("refresh-opportunities")
    if (refreshBtn) {
      refreshBtn.addEventListener("click", () => this.loadOpportunities())
      console.log("‚úÖ Refresh opportunities listener configurado")
    }
  }

  showLogin() {
    console.log("üîë Mostrando pantalla de login")
    const loginForm = document.getElementById("login-form")
    const dashboard = document.getElementById("dashboard")

    if (loginForm) loginForm.style.display = "flex"
    if (dashboard) dashboard.style.display = "none"
  }

  showDashboard() {
    console.log("üìä Mostrando dashboard")
    const loginForm = document.getElementById("login-form")
    const dashboard = document.getElementById("dashboard")

    if (loginForm) loginForm.style.display = "none"
    if (dashboard) dashboard.style.display = "block"

    if (this.user.username) {
      const userNameEl = document.getElementById("user-name")
      if (userNameEl) {
        userNameEl.textContent = this.user.username
      }
    }
  }

  async handleLogin(e) {
    e.preventDefault()
    console.log("üîê Intentando login...")

    const username = document.getElementById("username").value
    const password = document.getElementById("password").value
    const loginBtn = document.getElementById("login-btn")
    const errorDiv = document.getElementById("login-error")

    // Show loading
    if (loginBtn) {
      loginBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando sesi√≥n...'
      loginBtn.disabled = true
    }

    if (errorDiv) {
      errorDiv.style.display = "none"
    }

    try {
      console.log("üì° Enviando credenciales al servidor...")
      const response = await fetch("/api/login", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ username, password }),
      })

      const data = await response.json()
      console.log("üì® Respuesta del servidor:", response.status)

      if (response.ok) {
        console.log("‚úÖ Login exitoso")
        this.token = data.token
        this.user = data.user
        localStorage.setItem("token", this.token)
        localStorage.setItem("user", JSON.stringify(this.user))

        this.showDashboard()
        this.initializeSocket()
        this.loadInitialData()
      } else {
        console.log("‚ùå Error en login:", data.message)
        if (errorDiv) {
          errorDiv.textContent = data.message || "Error de autenticaci√≥n"
          errorDiv.style.display = "block"
        }
      }
    } catch (error) {
      console.error("‚ùå Error de conexi√≥n:", error)
      if (errorDiv) {
        errorDiv.textContent = "Error de conexi√≥n"
        errorDiv.style.display = "block"
      }
    } finally {
      if (loginBtn) {
        loginBtn.innerHTML = '<i class="bi bi-box-arrow-in-right me-2"></i>Iniciar Sesi√≥n'
        loginBtn.disabled = false
      }
    }
  }

  logout() {
    console.log("üëã Cerrando sesi√≥n...")
    localStorage.removeItem("token")
    localStorage.removeItem("user")
    this.token = null
    this.user = {}

    if (this.socket) {
      this.socket.disconnect()
    }

    this.showLogin()
  }

  toggleSidebar() {
    console.log("üì± Toggle sidebar")
    const sidebar = document.getElementById("sidebar")
    const header = document.getElementById("header")
    const mainContent = document.getElementById("main-content")
    const toggleIcon = document.querySelector("#sidebar-toggle i")

    if (sidebar) sidebar.classList.toggle("sidebar-collapsed")
    if (header) header.classList.toggle("header-expanded")
    if (mainContent) mainContent.classList.toggle("main-content-expanded")

    if (sidebar && sidebar.classList.contains("sidebar-collapsed")) {
      if (toggleIcon) toggleIcon.className = "bi bi-chevron-right"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "none"
      })
    } else {
      if (toggleIcon) toggleIcon.className = "bi bi-chevron-left"
      document.querySelectorAll(".nav-text, #sidebar-text").forEach((el) => {
        el.style.display = "inline"
      })
    }
  }

  navigateToPage(page) {
    console.log("üß≠ Navegando a:", page)

    // Update navigation
    document.querySelectorAll(".nav-link").forEach((link) => {
      link.classList.remove("active")
    })
    const activeLink = document.querySelector(`[data-page="${page}"]`)
    if (activeLink) {
      activeLink.classList.add("active")
    }

    // Update page title
    const titles = {
      dashboard: "Dashboard",
      opportunities: "Oportunidades de Arbitraje",
      "ai-advisor": "Asesor de IA",
      reports: "Reportes y An√°lisis",
      settings: "Configuraci√≥n",
    }

    const pageTitle = document.getElementById("page-title")
    if (pageTitle) {
      pageTitle.textContent = titles[page] || "Dashboard"
    }

    // Show/hide pages
    document.querySelectorAll(".page-content").forEach((pageEl) => {
      pageEl.style.display = "none"
    })

    const targetPage = document.getElementById(`page-${page}`)
    if (targetPage) {
      targetPage.style.display = "block"
    }
  }

  initializeSocket() {
    console.log("üîå Inicializando Socket.IO...")

    try {
      this.socket = io()

      this.socket.on("connect", () => {
        console.log("‚úÖ Conectado al servidor via Socket.IO")
      })

      this.socket.on("status_update", (data) => {
        console.log("üìä Actualizaci√≥n de estado recibida")
        this.updateBotStatus(data)
      })

      this.socket.on("new_opportunity", (data) => {
        console.log("üéØ Nueva oportunidad:", data)
        this.loadOpportunities()
      })

      this.socket.on("balance_update", (data) => {
        console.log("üí∞ Actualizaci√≥n de balances")
        this.updateBalances(data)
      })

      this.socket.on("disconnect", () => {
        console.log("‚ùå Desconectado del servidor")
      })

      this.socket.on("connect_error", (error) => {
        console.error("‚ùå Error de conexi√≥n Socket.IO:", error)
      })
    } catch (error) {
      console.error("‚ùå Error inicializando Socket.IO:", error)
    }
  }

  async loadInitialData() {
    console.log("üì° Cargando datos iniciales...")

    try {
      await Promise.all([this.loadBotStatus(), this.loadOpportunities(), this.loadBalances()])
      console.log("‚úÖ Datos iniciales cargados")
    } catch (error) {
      console.error("‚ùå Error cargando datos iniciales:", error)
    }
  }

  async apiCall(endpoint, options = {}) {
    const defaultOptions = {
      headers: {
        Authorization: `Bearer ${this.token}`,
        "Content-Type": "application/json",
      },
    }

    try {
      const response = await fetch(endpoint, { ...defaultOptions, ...options })

      if (response.status === 401) {
        console.log("üîë Token expirado, redirigiendo a login")
        this.logout()
        throw new Error("No autorizado")
      }

      return await response.json()
    } catch (error) {
      console.error(`‚ùå Error en API call ${endpoint}:`, error)
      throw error
    }
  }

  async loadBotStatus() {
    try {
      console.log("üìä Cargando estado del bot...")
      const data = await this.apiCall("/api/status")
      this.updateBotStatus(data)
    } catch (error) {
      console.error("‚ùå Error cargando estado del bot:", error)
    }
  }

  updateBotStatus(data) {
    console.log("üîÑ Actualizando estado del bot")
    this.botData = { ...this.botData, ...data }

    // Update bot status indicators
    const isRunning = data.botState?.isRunning || false

    // Update sidebar status
    const statusBadge = document.getElementById("bot-status-badge")
    const statusText = document.getElementById("bot-status-text")
    const statusDescription = document.getElementById("bot-status-description")
    const runningIndicator = document.getElementById("bot-running-indicator")
    const startBtn = document.getElementById("start-bot-btn")
    const stopBtn = document.getElementById("stop-bot-btn")

    if (isRunning) {
      if (statusBadge) {
        statusBadge.className = "badge bg-success me-2"
        statusBadge.textContent = "Activo"
      }
      if (statusText) statusText.textContent = "Bot en ejecuci√≥n"
      if (statusDescription) {
        statusDescription.innerHTML =
          '<span class="text-success"><i class="bi bi-play-circle me-1"></i>En ejecuci√≥n</span>'
      }
      if (runningIndicator) runningIndicator.style.display = "block"
      if (startBtn) startBtn.style.display = "none"
      if (stopBtn) stopBtn.style.display = "inline-block"
    } else {
      if (statusBadge) {
        statusBadge.className = "badge bg-danger me-2"
        statusBadge.textContent = "Inactivo"
      }
      if (statusText) statusText.textContent = "Bot detenido"
      if (statusDescription) {
        statusDescription.innerHTML = '<span class="text-danger"><i class="bi bi-stop-circle me-1"></i>Detenido</span>'
      }
      if (runningIndicator) runningIndicator.style.display = "none"
      if (startBtn) startBtn.style.display = "inline-block"
      if (stopBtn) stopBtn.style.display = "none"
    }

    // Update metrics
    if (data.botState) {
      this.updateElement("total-trades", data.botState.totalTrades || 0)
      this.updateElement("daily-trades", data.botState.dailyTrades || 0)
      this.updateElement("total-profit", `${(data.botState.totalProfit || 0).toFixed(4)} USDT`)
      this.updateElement("daily-profit", `${(data.botState.dailyProfit || 0).toFixed(4)} USDT`)
      this.updateElement("successful-trades", data.botState.successfulTrades || 0)

      const successRate =
        data.botState.totalTrades > 0
          ? ((data.botState.successfulTrades / data.botState.totalTrades) * 100).toFixed(1)
          : 0
      this.updateElement("success-rate", `${successRate}%`)
    }

    if (data.exposure) {
      this.updateElement("total-exposure", `$${(data.exposure.total || 0).toFixed(2)}`)
    }
  }

  updateElement(id, value) {
    const element = document.getElementById(id)
    if (element) {
      element.textContent = value
    }
  }

  async startBot() {
    console.log("‚ñ∂ Iniciando bot...")
    const startBtn = document.getElementById("start-bot-btn")
    const originalText = startBtn ? startBtn.innerHTML : ""

    if (startBtn) {
      startBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Iniciando...'
      startBtn.disabled = true
    }

    try {
      const result = await this.apiCall("/api/bot/start", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot iniciado correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error iniciando el bot", "danger")
    } finally {
      if (startBtn) {
        startBtn.innerHTML = originalText
        startBtn.disabled = false
      }
    }
  }

  async stopBot() {
    console.log("‚èπÔ∏è Deteniendo bot...")
    const stopBtn = document.getElementById("stop-bot-btn")
    const originalText = stopBtn ? stopBtn.innerHTML : ""

    if (stopBtn) {
      stopBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Deteniendo...'
      stopBtn.disabled = true
    }

    try {
      const result = await this.apiCall("/api/bot/stop", { method: "POST" })

      if (result.success) {
        this.showNotification("Bot detenido correctamente", "success")
        this.loadBotStatus()
      } else {
        this.showNotification(`Error: ${result.message}`, "danger")
      }
    } catch (error) {
      this.showNotification("Error deteniendo el bot", "danger")
    } finally {
      if (stopBtn) {
        stopBtn.innerHTML = originalText
        stopBtn.disabled = false
      }
    }
  }

  async loadOpportunities() {
    try {
      console.log("üéØ Cargando oportunidades...")
      const opportunities = await this.apiCall("/api/opportunities")
      this.updateOpportunitiesTable(opportunities)
    } catch (error) {
      console.error("‚ùå Error cargando oportunidades:", error)
    }
  }

  updateOpportunitiesTable(opportunities) {
    const tbody = document.getElementById("opportunities-table")
    if (!tbody) return

    if (!opportunities || opportunities.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="6" class="text-center py-4">
            No hay oportunidades recientes
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = opportunities
      .slice(0, 5)
      .map(
        (opp) => `
      <tr>
        <td>${opp.pair}</td>
        <td>${opp.buyExchange} ‚Üí ${opp.sellExchange}</td>
        <td class="text-success">${opp.finalProfit.toFixed(2)}%</td>
        <td>
          <div class="progress" style="height: 6px;">
            <div class="progress-bar bg-success" role="progressbar" 
                 style="width: ${opp.confidence * 100}%" 
                 aria-valuenow="${opp.confidence * 100}" 
                 aria-valuemin="0" aria-valuemax="100"></div>
          </div>
          <small>${(opp.confidence * 100).toFixed(1)}%</small>
        </td>
        <td>${opp.tradeAmount.toFixed(2)} USDT</td>
        <td>${new Date(opp.timestamp).toLocaleTimeString()}</td>
      </tr>
    `,
      )
      .join("")
  }

  async loadBalances() {
    try {
      console.log("üí∞ Cargando balances...")
      const balances = await this.apiCall("/api/balances")
      this.updateBalances(balances)
    } catch (error) {
      console.error("‚ùå Error cargando balances:", error)
    }
  }

  updateBalances(balances) {
    this.updateExchangeBalances("binance-balances", balances.BINANCE || {})
    this.updateExchangeBalances("kucoin-balances", balances.KUCOIN || {})
  }

  updateExchangeBalances(tableId, balances) {
    const tbody = document.getElementById(tableId)
    if (!tbody) return

    const balanceEntries = Object.entries(balances).filter(([_, balance]) => balance.total > 0)

    if (balanceEntries.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="4" class="text-center py-4">
            No hay balances disponibles
          </td>
        </tr>
      `
      return
    }

    tbody.innerHTML = balanceEntries
      .map(
        ([asset, balance]) => `
      <tr>
        <td>${asset}</td>
        <td>${balance.free.toFixed(6)}</td>
        <td>${balance.locked.toFixed(6)}</td>
        <td>${balance.total.toFixed(6)}</td>
      </tr>
    `,
      )
      .join("")
  }

  showNotification(message, type = "info") {
    console.log(`üì¢ Notificaci√≥n [${type}]: ${message}`)

    // Create notification element
    const notification = document.createElement("div")
    notification.className = `alert alert-${type} alert-dismissible fade show position-fixed`
    notification.style.cssText = "top: 20px; right: 20px; z-index: 9999; min-width: 300px;"
    notification.innerHTML = `
      ${message}
      <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `

    document.body.appendChild(notification)

    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove()
      }
    }, 5000)
  }
}

// Initialize dashboard when DOM is loaded
document.addEventListener("DOMContentLoaded", () => {
  console.log("üöÄ DOM cargado, inicializando dashboard...")
  try {
    new ArbitrageBotDashboard()
  } catch (error) {
    console.error("‚ùå Error inicializando dashboard:", error)
  }
})

// Fallback para navegadores que no soporten DOMContentLoaded
if (document.readyState === "loading") {
  document.addEventListener("DOMContentLoaded", () => {
    console.log("üöÄ Fallback: DOM cargado")
    new ArbitrageBotDashboard()
  })
} else {
  console.log("üöÄ DOM ya estaba cargado")
  new ArbitrageBotDashboard()
}
const express = require('express');
const router = express.Router();
const config = require('../config');

router.get('/config', (req, res) => {
  res.json(config);
});

module.exports = router;


------------------------------------------------------------------------------------------------------

class Dashboard {
    constructor() {
        this.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };
        
        this.profitChart = null;
        this.balanceChart = null;
        this.opportunitiesChart = null;
        this.riskChart = null;
        this.isSimulationMode = true; // Por defecto en modo simulaci√≥n
        
        this.initCharts();
        this.initEventListeners();
        this.startDataPolling();
    }
    
    initEventListeners() {
        document.getElementById('start-bot').addEventListener('click', () => this.startBot());
        document.getElementById('stop-bot').addEventListener('click', () => this.stopBot());
        document.getElementById('toggle-mode').addEventListener('click', () => this.toggleMode());
        document.getElementById('rebalance-funds').addEventListener('click', () => this.rebalanceFunds());
        
        // Listeners para cambiar estrategias
        document.getElementById('strategy-selector').addEventListener('change', (e) => {
            this.changeStrategy(e.target.value);
        });
        
        // Listeners para ajustes de riesgo
        document.getElementById('risk-level').addEventListener('change', (e) => {
            this.updateRiskSettings({riskLevel: e.target.value});
        });

        // ============= AGREGADO PARA DASHBOARD (panel IA y auto-rebalance) =============
        const toggleIA = document.getElementById('toggle-ia');
        if (toggleIA) {
            toggleIA.addEventListener('click', () => this.toggleIA());
        }
        const toggleAutoRebalance = document.getElementById('toggle-auto-rebalance');
        if (toggleAutoRebalance) {
            toggleAutoRebalance.addEventListener('click', () => this.toggleAutoRebalance());
        }
        // ============= FIN AGREGADO =============
    }
    
    startDataPolling() {
        // Actualizar datos cada 5 segundos
        setInterval(() => {
            this.updateBotStatus();
            this.updateProfitChart();
            this.updateBalanceChart();
            this.updateOpportunitiesChart();
            this.updateRiskAnalysis();
            // ============= AGREGADO PARA DASHBOARD ============
            this.updateAIRecommendations();
            this.updateAnomaliesPanel();
            this.updateCommissionPanel();
            this.updateAutoRebalancePanel();
            // ============= FIN AGREGADO ============
        }, 5000);
        
        // Inicializar con datos actuales
        this.updateBotStatus();
        this.updateProfitChart();
        this.updateBalanceChart();
        this.updateOpportunitiesChart();
        this.updateRiskAnalysis();
        // ============= AGREGADO PARA DASHBOARD ============
        this.updateAIRecommendations();
        this.updateAnomaliesPanel();
        this.updateCommissionPanel();
        this.updateAutoRebalancePanel();
        // ============= FIN AGREGADO ============
    }
    
    async updateBotStatus() {
        try {
            const response = await fetch('/api/status');
            const data = await response.json();
            
            this.updateElement("bot-status", data.isRunning ? "Activo" : "Inactivo");
            this.updateElement("bot-status-indicator", data.isRunning ? "active" : "inactive");
            this.updateElement("total-profit", `$${data.totalProfit.toFixed(2)}`);
            this.updateElement("total-trades", data.totalTrades);
            this.updateElement("successful-trades", data.successfulTrades);
            this.updateElement("failed-trades", data.failedTrades);
            this.updateElement("current-strategy", data.currentStrategy);
            this.updateElement("risk-level", data.riskLevel);
            
            // Nuevas m√©tricas a√±adidas
            this.updateElement("trading-pairs", data.tradingPairs.join(", ") || "Ninguno");
            this.updateElement("cycle-interval", (data.checkInterval / 1000).toFixed(1) || "0");
            this.updateElement("average-latency", data.averageLatency || "N/A");
            
            // Actualizar modo (simulaci√≥n/producci√≥n)
            this.updateElement("current-mode", this.isSimulationMode ? "Simulaci√≥n" : "Producci√≥n");
            
            // Actualizar balances con formato correcto
            if (data.balances) {
                const balanceContainer = document.getElementById("exchange-balances");
                balanceContainer.innerHTML = "";
                
                Object.entries(data.balances).forEach(([exchange, balance]) => {
                    const balanceItem = document.createElement("div");
                    balanceItem.className = "balance-item";
                    balanceItem.innerHTML = `
                        <span class="exchange-name">${exchange}:</span>
                        <span class="exchange-balance">$${parseFloat(balance).toLocaleString('es-ES', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                        })}</span>
                    `;
                    balanceContainer.appendChild(balanceItem);
                });
            }
        } catch (error) {
            console.error("Error al actualizar el estado del bot:", error);
        }
    }
    
    async updateProfitChart() {
        try {
            const response = await fetch('/api/profit-history');
            const data = await response.json();
            
            const labels = data.map(item => new Date(item.timestamp).toLocaleTimeString());
            const profits = data.map(item => item.profit);
            
            if (this.profitChart) {
                this.profitChart.data.labels = labels;
                this.profitChart.data.datasets[0].data = profits;
                this.profitChart.update();
            } else {
                this.initProfitChart(labels, profits);
            }
        } catch (error) {
            console.error("Error al actualizar el gr√°fico de ganancias:", error);
        }
    }
    
    async updateBalanceChart() {
        try {
            const response = await fetch('/api/balance-history');
            const data = await response.json();
            
            const labels = data.timestamps.map(timestamp => new Date(timestamp).toLocaleDateString());
            const datasets = Object.entries(data.balances).map(([exchange, balances], index) => {
                const color = Object.values(this.chartColors)[index % Object.values(this.chartColors).length];
                return {
                    label: exchange,
                    data: balances,
                    borderColor: color,
                    backgroundColor: this.transparentize(color, 0.5),
                    fill: false,
                    tension: 0.4
                };
            });
            
            if (this.balanceChart) {
                this.balanceChart.data.labels = labels;
                this.balanceChart.data.datasets = datasets;
                this.balanceChart.update();
            } else {
                this.initBalanceChart(labels, datasets);
            }
        } catch (error) {
            console.error("Error al actualizar el gr√°fico de balances:", error);
        }
    }
    
    async updateOpportunitiesChart() {
        try {
            const response = await fetch('/api/opportunities');
            const data = await response.json();
            
            const labels = data.map(item => `${item.pair} (${item.exchanges.join(' ‚Üí ')})`);
            const values = data.map(item => item.profitPercentage);
            
            if (this.opportunitiesChart) {
                this.opportunitiesChart.data.labels = labels;
                this.opportunitiesChart.data.datasets[0].data = values;
                this.opportunitiesChart.update();
            } else {
                this.initOpportunitiesChart(labels, values);
            }
        } catch (error) {
            console.error("Error al actualizar el gr√°fico de oportunidades:", error);
        }
    }
    
    async updateRiskAnalysis() {
        try {
            const response = await fetch('/api/risk-analysis');
            const data = await response.json();
            
            // Actualizar indicadores de riesgo
            this.updateElement("market-volatility", `${data.marketVolatility}%`);
            this.updateElement("exchange-risk", `${data.exchangeRisk}%`);
            this.updateElement("liquidity-risk", `${data.liquidityRisk}%`);
            this.updateElement("overall-risk", `${data.overallRisk}%`);
            
            // Actualizar barras de progreso
            this.updateProgressBar("market-volatility-bar", data.marketVolatility);
            this.updateProgressBar("exchange-risk-bar", data.exchangeRisk);
            this.updateProgressBar("liquidity-risk-bar", data.liquidityRisk);
            this.updateProgressBar("overall-risk-bar", data.overallRisk);
            
            // Actualizar gr√°fico de riesgo
            const labels = ['Volatilidad', 'Riesgo de Exchange', 'Riesgo de Liquidez', 'Riesgo Total'];
            const values = [data.marketVolatility, data.exchangeRisk, data.liquidityRisk, data.overallRisk];
            
            if (this.riskChart) {
                this.riskChart.data.datasets[0].data = values;
                this.riskChart.update();
            } else {
                this.initRiskChart(labels, values);
            }
        } catch (error) {
            console.error("Error al actualizar el an√°lisis de riesgo:", error);
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL INTELIGENCIA ARTIFICIAL ==========
    async updateAIRecommendations() {
        try {
            const panel = document.getElementById("ai-recommendations-panel");
            if (!panel) return;
            const response = await fetch('/api/ia/recomendaciones');
            const data = await response.json();
            if (data && data.recomendaciones) {
                panel.innerHTML = data.recomendaciones.map(rec =>
                    `<div class="ai-recommendation">
                        <span class="icon">ü§ñ</span>
                        <span class="ai-text">${rec.texto}</span>
                        <span class="ai-confidence">${rec.probabilidad ? `(${rec.probabilidad}%)` : ""}</span>
                    </div>`
                ).join("");
            }
        } catch (error) {
            // Silencioso, panel es opcional
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL DE ANOMAL√çAS ==========
    async updateAnomaliesPanel() {
        try {
            const panel = document.getElementById("anomalies-panel");
            if (!panel) return;
            const response = await fetch('/api/anomalias');
            const data = await response.json();
            if (data && data.anomalias) {
                panel.innerHTML = data.anomalias.map(a =>
                    `<div class="anomaly">
                        <span class="anomaly-type">${a.tipo}</span>
                        <span class="anomaly-desc">${a.descripcion}</span>
                        <span class="anomaly-time">${a.timestamp}</span>
                    </div>`
                ).join("");
            }
        } catch (error) {
            // Silencioso, panel es opcional
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL DE COMISIONES ==========
    async updateCommissionPanel() {
        try {
            const panel = document.getElementById("commission-panel");
            if (!panel) return;
            const response = await fetch('/api/comisiones');
            const data = await response.json();
            if (data && data.comisiones) {
                panel.innerHTML = Object.entries(data.comisiones)
                    .map(([exchange, fees]) =>
                        `<div>
                            <strong>${exchange.toUpperCase()}:</strong>
                            <span>Taker: ${(fees.taker * 100).toFixed(2)}% | Maker: ${(fees.maker * 100).toFixed(2)}%</span>
                        </div>`
                    ).join("");
            }
        } catch (error) {
            // Silencioso
        }
    }

    // ========== AGREGADO DASHBOARD: PANEL AUTO-REBALANCE ==========
    async updateAutoRebalancePanel() {
        try {
            const panel = document.getElementById("auto-rebalance-panel");
            if (!panel) return;
            const response = await fetch('/api/rebalanceo/estado');
            const data = await response.json();
            panel.innerHTML = `<span>Auto-rebalance: <strong>${data.enabled ? "Activado" : "Desactivado"}</strong></span>`;
        } catch (error) { }
    }

    // ========== AGREGADO DASHBOARD: TOGGLE IA Y AUTO-REBALANCE ==========
    async toggleIA() {
        try {
            const response = await fetch('/api/toggle-ai', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ enabled: !this.lastIAEnabled })
            });
            const data = await response.json();
            this.lastIAEnabled = data.aiEnabled;
            this.updateAIRecommendations();
        } catch (e) { }
    }
    async toggleAutoRebalance() {
        try {
            const panel = document.getElementById("auto-rebalance-panel");
            const enabled = panel && panel.textContent.includes("Activado");
            const response = await fetch('/api/toggle-auto-rebalance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ enabled: !enabled })
            });
            await response.json();
            this.updateAutoRebalancePanel();
        } catch (e) { }
    }
    // ========== FIN AGREGADOS DASHBOARD ==========

    initCharts() {
        // Los gr√°ficos se inicializar√°n cuando lleguen los datos
    }
    
    initProfitChart(labels, data) {
        const ctx = document.getElementById('profit-chart').getContext('2d');
        this.profitChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Ganancia ($)',
                    data: data,
                    borderColor: this.chartColors.green,
                    backgroundColor: this.transparentize(this.chartColors.green, 0.5),
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Historial de Ganancias'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `Ganancia: $${context.raw.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Tiempo'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Ganancia ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    }
    
    initBalanceChart(labels, datasets) {
        const ctx = document.getElementById('balance-chart').getContext('2d');
        this.balanceChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: datasets
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Balances por Exchange'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false,
                        callbacks: {
                            label: function(context) {
                                return `${context.dataset.label}: $${context.raw.toFixed(2)}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Fecha'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Balance ($)'
                        },
                        ticks: {
                            callback: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    }
                }
            }
        });
    }
    
    initOpportunitiesChart(labels, data) {
        const ctx = document.getElementById('opportunities-chart').getContext('2d');
        this.opportunitiesChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Oportunidades de Arbitraje (%)',
                    data: data,
                    backgroundColor: this.transparentize(this.chartColors.blue, 0.5),
                    borderColor: this.chartColors.blue,
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Oportunidades de Arbitraje'
                    },
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Ganancia: ${context.raw.toFixed(2)}%`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Par / Exchanges'
                        }
                    },
                    y: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Ganancia Potencial (%)'
                        },
                        ticks: {
                            callback: function(value) {
                                return value.toFixed(2) + '%';
                            }
                        }
                    }
                }
            }
        });
    }
    
    initRiskChart(labels, data) {
        const ctx = document.getElementById('risk-chart').getContext('2d');
        this.riskChart = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nivel de Riesgo',
                    data: data,
                    backgroundColor: this.transparentize(this.chartColors.red, 0.5),
                    borderColor: this.chartColors.red,
                    pointBackgroundColor: this.chartColors.red,
                    pointBorderColor: '#fff',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: this.chartColors.red
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'An√°lisis de Riesgo'
                    }
                },
                scales: {
                    r: {
                        angleLines: {
                            display: true
                        },
                        suggestedMin: 0,
                        suggestedMax: 100,
                        ticks: {
                            stepSize: 20,
                            callback: function(value) {
                                return value + '%';
                            }
                        }
                    }
                }
            }
        });
    }
    
    updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }
    
    updateProgressBar(id, value) {
        const progressBar = document.getElementById(id);
        if (progressBar) {
            progressBar.style.width = `${value}%`;
            
            // Cambiar color seg√∫n el nivel de riesgo
            if (value < 30) {
                progressBar.className = "progress-bar bg-success";
            } else if (value < 70) {
                progressBar.className = "progress-bar bg-warning";
            } else {
                progressBar.className = "progress-bar bg-danger";
            }
        }
    }
    
    transparentize(color, alpha) {
        const rgbColor = color.replace('rgb(', '').replace(')', '').split(',');
        return `rgba(${rgbColor[0]}, ${rgbColor[1]}, ${rgbColor[2]}, ${alpha})`;
    }
    
    async startBot() {
        try {
            const response = await fetch('/api/start-bot', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    mode: this.isSimulationMode ? 'simulation' : 'production'
                })
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Bot iniciado correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al iniciar el bot: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al iniciar el bot:", error);
            alert("Error al iniciar el bot. Consulta la consola para m√°s detalles.");
        }
    }
    
    async stopBot() {
        try {
            const response = await fetch('/api/stop-bot', {
                method: 'POST'
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Bot detenido correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al detener el bot: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al detener el bot:", error);
            alert("Error al detener el bot. Consulta la consola para m√°s detalles.");
        }
    }
    
    async changeStrategy(strategy) {
        try {
            const response = await fetch('/api/change-strategy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ strategy })
            });
            
            const data = await response.json();
            if (data.success) {
                alert(`Estrategia cambiada a: ${strategy}`);
                this.updateBotStatus();
            } else {
                alert(`Error al cambiar la estrategia: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al cambiar la estrategia:", error);
            alert("Error al cambiar la estrategia. Consulta la consola para m√°s detalles.");
        }
    }
    
    async updateRiskSettings(settings) {
        try {
            const response = await fetch('/api/update-risk-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(settings)
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Configuraci√≥n de riesgo actualizada correctamente");
                this.updateRiskAnalysis();
            } else {
                alert(`Error al actualizar la configuraci√≥n de riesgo: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al actualizar la configuraci√≥n de riesgo:", error);
            alert("Error al actualizar la configuraci√≥n de riesgo. Consulta la consola para m√°s detalles.");
        }
    }
    
    // Nueva funci√≥n para alternar entre modo simulaci√≥n y producci√≥n
    toggleMode() {
        this.isSimulationMode = !this.isSimulationMode;
        this.updateElement("current-mode", this.isSimulationMode ? "Simulaci√≥n" : "Producci√≥n");
        
        // Cambiar el estilo del bot√≥n seg√∫n el modo
        const toggleButton = document.getElementById("toggle-mode");
        if (toggleButton) {
            if (this.isSimulationMode) {
                toggleButton.classList.remove("btn-danger");
                toggleButton.classList.add("btn-warning");
                toggleButton.textContent = "Cambiar a Producci√≥n";
            } else {
                toggleButton.classList.remove("btn-warning");
                toggleButton.classList.add("btn-danger");
                toggleButton.textContent = "Cambiar a Simulaci√≥n";
            }
        }
        
        // Si el bot est√° corriendo, reiniciarlo con el nuevo modo
        const botStatus = document.getElementById("bot-status");
        if (botStatus && botStatus.textContent === "Activo") {
            this.stopBot().then(() => {
                setTimeout(() => {
                    this.startBot();
                }, 1000);
            });
        }
    }
    
    // Nueva funci√≥n para reequilibrar fondos entre exchanges
    async rebalanceFunds() {
        try {
            const response = await fetch('/api/rebalance-funds', {
                method: 'POST'
            });
            
            const data = await response.json();
            if (data.success) {
                alert("Reequilibrio de fondos iniciado correctamente");
                this.updateBotStatus();
            } else {
                alert(`Error al reequilibrar fondos: ${data.error}`);
            }
        } catch (error) {
            console.error("Error al reequilibrar fondos:", error);
            alert("Error al reequilibrar fondos. Consulta la consola para m√°s detalles.");
        }
    }
}

// Inicializar el dashboard cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    window.dashboard = new Dashboard();
});

-------------------------------------------------------------------------------------------------------------

// ========== CLIENTE API M√ìVIL ==========
class MobileAPIClient {
  constructor() {
    this.baseURL = window.location.origin
    this.token = localStorage.getItem("authToken")
  }

  async request(endpoint, options = {}) {
    const url = `${this.baseURL}/api${endpoint}`
    const config = {
      headers: {
        "Content-Type": "application/json",
        ...(this.token && { Authorization: `Bearer ${this.token}` }),
      },
      ...options,
    }

    try {
      const response = await fetch(url, config)
      const data = await response.json()

      if (!response.ok) {
        throw new Error(data.message || "Error en la solicitud")
      }

      return data
    } catch (error) {
      console.error("API Error:", error)
      throw error
    }
  }

  // M√©todos espec√≠ficos
  async getStatus() {
    return this.request("/status")
  }

  async getOpportunities() {
    return this.request("/opportunities")
  }

  async getBalances() {
    return this.request("/balances")
  }

  async startBot() {
    return this.request("/start", { method: "POST" })
  }

  async stopBot() {
    return this.request("/stop", { method: "POST" })
  }

  async executeOpportunity(opportunityId) {
    return this.request("/execute-opportunity", {
      method: "POST",
      body: JSON.stringify({ opportunityId }),
    })
  }

  async getReport() {
    return this.request("/report")
  }

  // M√©todo para actualizar token
  setToken(token) {
    this.token = token
    localStorage.setItem("authToken", token)
  }

  // M√©todo para limpiar token
  clearToken() {
    this.token = null
    localStorage.removeItem("authToken")
  }
}

// Exportar para uso global
window.MobileAPIClient = MobileAPIClient


---------------------------------------------------------------------------------------------------------

// ========== GR√ÅFICO DE RIESGO ==========
class RiskChart {
  constructor(containerId) {
    this.container = document.getElementById(containerId)
    this.data = []
    this.init()
  }

  init() {
    if (!this.container) {
      console.warn("Contenedor de gr√°fico de riesgo no encontrado")
      return
    }

    this.container.innerHTML = `
      <div class="risk-chart-container">
        <h3>An√°lisis de Riesgo</h3>
        <div class="risk-metrics">
          <div class="metric">
            <span class="label">Exposici√≥n Total:</span>
            <span class="value" id="total-exposure">$0</span>
          </div>
          <div class="metric">
            <span class="label">Riesgo por Par:</span>
            <span class="value" id="pair-risk">Bajo</span>
          </div>
          <div class="metric">
            <span class="label">Volatilidad:</span>
            <span class="value" id="volatility">2.5%</span>
          </div>
        </div>
        <canvas id="risk-canvas" width="400" height="200"></canvas>
      </div>
    `

    this.canvas = document.getElementById("risk-canvas")
    this.ctx = this.canvas.getContext("2d")
    this.drawChart()
  }

  updateData(riskData) {
    this.data = riskData
    this.updateMetrics()
    this.drawChart()
  }

  updateMetrics() {
    const totalExposureEl = document.getElementById("total-exposure")
    const pairRiskEl = document.getElementById("pair-risk")
    const volatilityEl = document.getElementById("volatility")

    if (totalExposureEl) totalExposureEl.textContent = `$${this.data.totalExposure || 0}`
    if (pairRiskEl) pairRiskEl.textContent = this.data.riskLevel || "Bajo"
    if (volatilityEl) volatilityEl.textContent = `${this.data.volatility || 2.5}%`
  }

  drawChart() {
    if (!this.ctx) return

    // Limpiar canvas
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)

    // Dibujar gr√°fico simple
    this.ctx.fillStyle = "#4CAF50"
    this.ctx.fillRect(50, 50, 100, 100)

    this.ctx.fillStyle = "#FF9800"
    this.ctx.fillRect(170, 75, 80, 75)

    this.ctx.fillStyle = "#F44336"
    this.ctx.fillRect(270, 100, 60, 50)

    // Etiquetas
    this.ctx.fillStyle = "#333"
    this.ctx.font = "12px Arial"
    this.ctx.fillText("Bajo", 75, 170)
    this.ctx.fillText("Medio", 190, 170)
    this.ctx.fillText("Alto", 285, 170)
  }
}

// Exportar para uso global
window.RiskChart = RiskChart


--------------------------------------------------------------------------------------------------------------

// ========== GESTOR DE ESTRATEGIAS ==========
class StrategiesManager {
  constructor() {
    this.currentStrategy = "BALANCED"
    this.strategies = {
      CONSERVATIVE: {
        name: "Conservadora",
        minProfit: 0.5,
        maxExposure: 50,
        riskLevel: "Bajo",
      },
      BALANCED: {
        name: "Balanceada",
        minProfit: 0.3,
        maxExposure: 100,
        riskLevel: "Medio",
      },
      AGGRESSIVE: {
        name: "Agresiva",
        minProfit: 0.2,
        maxExposure: 150,
        riskLevel: "Alto",
      },
    }
  }

  init(containerId) {
    this.container = document.getElementById(containerId)
    if (!this.container) {
      console.warn("Contenedor de estrategias no encontrado")
      return
    }

    this.render()
    this.attachEventListeners()
  }

  render() {
    this.container.innerHTML = `
      <div class="strategies-container">
        <h3>Estrategias de Trading</h3>
        <div class="current-strategy">
          <span class="label">Estrategia Actual:</span>
          <span class="value" id="current-strategy-name">${this.strategies[this.currentStrategy].name}</span>
        </div>
        <div class="strategy-selector">
          ${Object.entries(this.strategies)
            .map(
              ([key, strategy]) => `
            <div class="strategy-option ${key === this.currentStrategy ? "active" : ""}" data-strategy="${key}">
              <h4>${strategy.name}</h4>
              <p>Min. Profit: ${strategy.minProfit}%</p>
              <p>Max. Exposure: $${strategy.maxExposure}</p>
              <p>Riesgo: ${strategy.riskLevel}</p>
            </div>
          `,
            )
            .join("")}
        </div>
        <button id="apply-strategy" class="btn btn-primary">Aplicar Estrategia</button>
      </div>
    `
  }

  attachEventListeners() {
    const strategyOptions = this.container.querySelectorAll(".strategy-option")
    const applyButton = document.getElementById("apply-strategy")

    strategyOptions.forEach((option) => {
      option.addEventListener("click", () => {
        strategyOptions.forEach((opt) => opt.classList.remove("active"))
        option.classList.add("active")
        this.currentStrategy = option.dataset.strategy
        document.getElementById("current-strategy-name").textContent = this.strategies[this.currentStrategy].name
      })
    })

    if (applyButton) {
      applyButton.addEventListener("click", () => {
        this.applyStrategy()
      })
    }
  }

  async applyStrategy() {
    try {
      const token = localStorage.getItem("authToken")
      const response = await fetch("/api/change-strategy", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ strategy: this.currentStrategy }),
      })

      const result = await response.json()

      if (response.ok) {
        this.showNotification("Estrategia aplicada exitosamente", "success")
      } else {
        this.showNotification(result.error || "Error aplicando estrategia", "error")
      }
    } catch (error) {
      this.showNotification("Error de conexi√≥n", "error")
    }
  }

  showNotification(message, type) {
    // Crear notificaci√≥n simple
    const notification = document.createElement("div")
    notification.className = `notification ${type}`
    notification.textContent = message
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 10px 20px;
      border-radius: 4px;
      color: white;
      background: ${type === "success" ? "#4CAF50" : "#F44336"};
      z-index: 1000;
    `

    document.body.appendChild(notification)

    setTimeout(() => {
      notification.remove()
    }, 3000)
  }

  // ========== AGREGADO PARA DASHBOARD (panel din√°mico con API backend) ==========
  getAvailableStrategies() {
    return Object.entries(this.strategies).map(([key, strategy]) => ({
      key,
      ...strategy,
    }))
  }

  getCurrentStrategy() {
    return this.currentStrategy
  }

  setStrategy(strategyKey) {
    if (this.strategies[strategyKey]) {
      this.currentStrategy = strategyKey
      this.render()
      this.attachEventListeners()
    }
  }
  // ========== FIN AGREGADO ==========
}

// Exportar para uso global
window.StrategiesManager = StrategiesManager

--------------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>YageCoin Exchange - Bot de Arbitraje</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" rel="stylesheet">
  </head>
  <body>
    <noscript>Necesitas habilitar JavaScript para ver este dashboard.</noscript>
    <div id="root"></div>
  </body>
</html>
----------------------------------------------------------------------------------------------------------------------------

:root {
  --primary: #3498db;
  --secondary: #2ecc71;
  --danger: #e74c3c;
  --warning: #f39c12;
  --dark: #2c3e50;
  --light: #ecf0f1;
  --gray: #95a5a6;
  --success: #27ae60;
  --info: #3498db;
}

body {
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  background-color: #f8f9fa;
  color: #333;
  margin: 0;
  padding: 0;
}

.navbar {
  background-color: var(--dark);
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.navbar-brand {
  font-weight: bold;
  color: white !important;
}

.card {
  border-radius: 10px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
  margin-bottom: 20px;
  border: none;
  transition: transform 0.2s, box-shadow 0.2s;
}

.card:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 15px rgba(0, 0, 0, 0.1);
}

.card-header {
  border-radius: 10px 10px 0 0 !important;
  font-weight: 600;
  background-color: white;
  border-bottom: 1px solid rgba(0, 0, 0, 0.05);
  padding: 15px 20px;
}

.card-body {
  padding: 20px;
}

.btn-primary {
  background-color: var(--primary);
  border-color: var(--primary);
}

.btn-success {
  background-color: var(--success);
  border-color: var(--success);
}

.btn-danger {
  background-color: var(--danger);
  border-color: var(--danger);
}

.btn-warning {
  background-color: var(--warning);
  border-color: var(--warning);
}

.status-card {
  text-align: center;
  padding: 15px;
}

.status-card h3 {
  font-size: 2rem;
  margin: 10px 0;
  font-weight: bold;
}

.status-card p {
  color: var(--gray);
  margin-bottom: 0;
}

.status-icon {
  font-size: 2rem;
  margin-bottom: 10px;
}

.opportunity-card {
  border-left: 5px solid var(--success);
}

.opportunity-card.no-opportunity {
  border-left: 5px solid var(--gray);
}

.risk-meter {
  height: 10px;
  border-radius: 5px;
  margin: 10px 0;
  background-color: #ecf0f1;
  overflow: hidden;
}

.risk-level {
  height: 100%;
  transition: width 0.5s;
}

.risk-low {
  background-color: var(--success);
}

.risk-medium {
  background-color: var(--warning);
}

.risk-high {
  background-color: var(--danger);
}

.badge-success {
  background-color: var(--success);
  color: white;
}

.badge-danger {
  background-color: var(--danger);
  color: white;
}

.badge-warning {
  background-color: var(--warning);
  color: white;
}

.badge-info {
  background-color: var(--info);
  color: white;
}

.badge-secondary {
  background-color: var(--secondary);
  color: white;
}

.badge-dark {
  background-color: var(--dark);
  color: white;
}

.badge-light {
  background-color: var(--light);
  color: var(--dark);
}

.badge-gray {
  background-color: var(--gray);
  color: white;
}

.exchange-badge {
  font-size: 0.8rem;
  padding: 5px 10px;
  border-radius: 15px;
  margin-right: 5px;
}

.price-table {
  width: 100%;
  border-collapse: collapse;
}

.price-table th,
.price-table td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.price-table th {
  font-weight: 600;
  color: #666;
}

.price-table tr:last-child td {
  border-bottom: none;
}

.price-table .best-price {
  font-weight: bold;
  color: var(--success);
}

.price-table .worst-price {
  color: var(--danger);
}

.opportunity-indicator {
  display: inline-block;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  margin-right: 5px;
}

.opportunity-indicator.yes {
  background-color: var(--success);
}

.opportunity-indicator.no {
  background-color: var(--danger);
}

.mode-switch {
  display: flex;
  align-items: center;
  margin-bottom: 15px;
}

.mode-switch .form-check-input {
  width: 50px;
  height: 24px;
}

.mode-label {
  margin-left: 10px;
  font-weight: 600;
}

.simulation-mode {
  color: var(--info);
}

.production-mode {
  color: var(--danger);
}

.ai-prediction {
  display: flex;
  align-items: center;
  margin-bottom: 10px;
}

.ai-prediction-up {
  color: var(--success);
}

.ai-prediction-down {
  color: var(--danger);
}

.ai-confidence {
  height: 6px;
  width: 100%;
  background-color: #eee;
  border-radius: 3px;
  margin-top: 5px;
}

.ai-confidence-level {
  height: 100%;
  border-radius: 3px;
  background-color: var(--primary);
}

.pair-card {
  border-radius: 10px;
  padding: 15px;
  margin-bottom: 15px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
  border: 1px solid #eee;
  transition: all 0.3s ease;
}

.pair-card:hover {
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  transform: translateY(-2px);
}

.pair-card.opportunity {
  border-left: 4px solid var(--success);
}

.pair-card.no-opportunity {
  border-left: 4px solid #ddd;
}

.pair-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.pair-name {
  font-weight: bold;
  font-size: 1.2rem;
}

.profit-percentage {
  font-weight: bold;
}

.profit-percentage.positive {
  color: var(--success);
}

.profit-percentage.negative {
  color: var(--danger);
}

.exchange-prices {
  margin-top: 10px;
}

.exchange-price {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px solid #f5f5f5;
}

.exchange-price:last-child {
  border-bottom: none;
}

.exchange-name {
  display: flex;
  align-items: center;
}

.best-buy {
  color: var(--success);
  font-weight: bold;
}

.best-sell {
  color: var(--danger);
  font-weight: bold;
}

.action-buttons {
  margin-top: 15px;
  display: flex;
  justify-content: flex-end;
}

.action-buttons button {
  margin-left: 10px;
}

.auto-rebalance-card {
  background-color: #f8f9fa;
  border-radius: 10px;
  padding: 15px;
}

.balance-distribution {
  display: flex;
  margin: 15px 0;
}

.balance-bar {
  height: 30px;
  border-radius: 15px;
  overflow: hidden;
  display: flex;
  flex: 1;
}

.balance-segment {
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-size: 0.8rem;
  font-weight: bold;
  transition: width 0.5s;
}

.balance-binance {
  background-color: #f3ba2f;
}

.balance-coinbase {
  background-color: #0052ff;
}

.balance-kraken {
  background-color: #5741d9;
}

.balance-kucoin {
  background-color: #24ae8f;
}

.balance-legend {
  display: flex;
  flex-wrap: wrap;
  margin-top: 10px;
}

.legend-item {
  display: flex;
  align-items: center;
  margin-right: 15px;
  margin-bottom: 5px;
}

.legend-color {
  width: 12px;
  height: 12px;
  border-radius: 3px;
  margin-right: 5px;
}

.exchange-balance {
  display: flex;
  justify-content: space-between;
  padding: 5px 0;
  border-bottom: 1px solid #f5f5f5;
}

.exchange-balance:last-child {
  border-bottom: none;
}

.exchange-balance-name {
  font-weight: 500;
}

.exchange-balance-value {
  font-weight: bold;
}

.loading-spinner {
  display: inline-block;
  width: 1rem;
  height: 1rem;
  border: 2px solid rgba(0, 0, 0, 0.1);
  border-left-color: var(--primary);
  border-radius: 50%;
  animation: spinner 1s linear infinite;
}

@keyframes spinner {
  to {
    transform: rotate(360deg);
  }
}

.notification-badge {
  position: absolute;
  top: -5px;
  right: -5px;
  background-color: var(--danger);
  color: white;
  border-radius: 50%;
  width: 18px;
  height: 18px;
  font-size: 0.7rem;
  display: flex;
  align-items: center;
  justify-content: center;
}

.notification-dropdown {
  min-width: 300px;
  max-height: 400px;
  overflow-y: auto;
}

.notification-item {
  padding: 10px;
  border-bottom: 1px solid #eee;
}

.notification-item:last-child {
  border-bottom: none;
}

.notification-time {
  font-size: 0.8rem;
  color: #999;
}

.notification-message {
  margin-top: 5px;
}

.notification-icon {
  margin-right: 10px;
}

.notification-info {
  color: var(--info);
}

.notification-success {
  color: var(--success);
}

.notification-warning {
  color: var(--warning);
}

.notification-danger {
  color: var(--danger);
}


----------------------------------------------------------------------------------------------------------------------

AI

// ========== M√ìDULO DE ASESOR DE TRADING CON IA ==========
// const tf = require("@tensorflow/tfjs-node")
const config = require('../strategies/config')
const EventEmitter = require('events');

class AITradingAdvisor extends EventEmitter {
  constructor() {
    super();
    this.model = null
    this.initialized = false
    this.marketData = {
      priceHistory: new Map(),
      volatilityHistory: new Map(),
      spreadHistory: new Map(),
      profitHistory: [],
    }

    this.initialize()
  }

  async initialize() {
    try {
      // Cargar modelo pre-entrenado o crear uno nuevo
      this.model = await this.createModel()
      this.initialized = true
      console.log("‚úÖ M√≥dulo de IA inicializado correctamente")
    } catch (error) {
      console.error("‚ùå Error inicializando m√≥dulo de IA:", error.message)
    }
  }

  async createModel() {
    // Modelo simplificado sin TensorFlow - usando heur√≠sticas
    console.log("ü§ñ Usando modelo heur√≠stico simplificado (sin TensorFlow)")
    return {
      predict: (inputData) => {
        // L√≥gica heur√≠stica simple
        const [spread, volatility, hour, dayOfWeek, lastProfit, marketTrend] = inputData.dataSync
          ? inputData.dataSync()
          : inputData[0]

        let probability = 0.5 // Base

        // Ajustar por spread
        if (spread > 0.5) probability += 0.2
        if (spread > 1.0) probability += 0.1

        // Ajustar por volatilidad
        if (volatility < 2.0) probability += 0.1
        if (volatility > 5.0) probability -= 0.2

        // Ajustar por hora del d√≠a
        if (hour >= 8 && hour <= 16) probability += 0.1 // Horario activo

        // Ajustar por tendencia de mercado
        if (marketTrend > 0) probability += 0.1

        return { dataSync: () => [Math.min(0.95, Math.max(0.05, probability))] }
      },
    }
  }

  // Registrar datos de mercado para entrenamiento
  recordMarketData(pair, buyPrice, sellPrice, spread, volatility, wasSuccessful = null) {
    const now = new Date()
    const timestamp = now.getTime()
    const hour = now.getHours()
    const dayOfWeek = now.getDay()

    // Registrar precios
    if (!this.marketData.priceHistory.has(pair)) {
      this.marketData.priceHistory.set(pair, [])
    }
    this.marketData.priceHistory.get(pair).push({ buyPrice, sellPrice, timestamp })

    // Registrar spread
    if (!this.marketData.spreadHistory.has(pair)) {
      this.marketData.spreadHistory.set(pair, [])
    }
    this.marketData.spreadHistory.get(pair).push({ spread, timestamp })

    // Registrar volatilidad
    if (!this.marketData.volatilityHistory.has(pair)) {
      this.marketData.volatilityHistory.set(pair, [])
    }
    this.marketData.volatilityHistory.get(pair).push({ volatility, timestamp })

    // Registrar resultado si est√° disponible
    if (wasSuccessful !== null) {
      this.marketData.profitHistory.push({
        pair,
        spread,
        volatility,
        hour,
        dayOfWeek,
        wasSuccessful,
        timestamp,
      })
    }

    // Limitar el tama√±o del historial
    this.pruneHistoricalData()
  }

  pruneHistoricalData() {
    const MAX_HISTORY_ITEMS = 1000
    const ONE_WEEK_MS = 7 * 24 * 60 * 60 * 1000
    const cutoffTime = Date.now() - ONE_WEEK_MS

    // Eliminar datos antiguos
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      this.marketData.priceHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.spreadHistory.entries()) {
      this.marketData.spreadHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      this.marketData.volatilityHistory.set(
        pair,
        history.filter((item) => item.timestamp > cutoffTime).slice(-MAX_HISTORY_ITEMS),
      )
    }

    this.marketData.profitHistory = this.marketData.profitHistory
      .filter((item) => item.timestamp > cutoffTime)
      .slice(-MAX_HISTORY_ITEMS)
  }

  async trainModel() {
    if (this.marketData.profitHistory.length < 10) {
      return { success: false, message: "Datos insuficientes para entrenar el modelo heur√≠stico" }
    }

    // Simular entrenamiento con heur√≠sticas
    const recentSuccessRate = this.getRecentProfitTrend()

    console.log(`ü§ñ Modelo heur√≠stico actualizado con ${this.marketData.profitHistory.length} datos hist√≥ricos`)

    return {
      success: true,
      accuracy: (recentSuccessRate + 1) / 2, // Convertir de -1,1 a 0,1
      loss: 1 - (recentSuccessRate + 1) / 2,
    }
  }

  getRecentProfitTrend() {
    // Calcular tendencia de ganancias recientes (-1 a 1)
    const recentProfits = this.marketData.profitHistory.slice(-10)
    if (recentProfits.length < 5) return 0

    const successCount = recentProfits.filter((p) => p.wasSuccessful).length
    return (successCount / recentProfits.length) * 2 - 1
  }

  getMarketTrend(pair) {
    // Calcular tendencia del mercado (-1 a 1)
    const priceHistory = this.marketData.priceHistory.get(pair)
    if (!priceHistory || priceHistory.length < 10) return 0

    const recentPrices = priceHistory.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)
    const firstPrice = recentPrices[0]
    const lastPrice = recentPrices[recentPrices.length - 1]

    return (lastPrice - firstPrice) / firstPrice
  }

  async predictOpportunitySuccess(opportunity) {
    if (!this.initialized) {
      return { probability: 0.5, confidence: "LOW" }
    }

    try {
      const now = new Date()
      const hour = now.getHours()
      const dayOfWeek = now.getDay()

      // Preparar datos para predicci√≥n heur√≠stica
      const inputData = [
        opportunity.grossProfit,
        this.getVolatility(opportunity.pair),
        hour / 24,
        dayOfWeek / 6,
        this.getRecentProfitTrend(),
        this.getMarketTrend(opportunity.pair),
      ]

      // Realizar predicci√≥n heur√≠stica
      const prediction = this.model.predict([inputData])
      const probability = prediction.dataSync()[0]

      // Determinar nivel de confianza
      let confidence = "MEDIUM"
      if (probability > 0.8 || probability < 0.2) {
        confidence = "HIGH"
      } else if (probability > 0.4 && probability < 0.6) {
        confidence = "LOW"
      }

      return { probability, confidence }
    } catch (error) {
      console.error("Error en predicci√≥n:", error)
      return { probability: 0.5, confidence: "LOW" }
    }
  }

  getVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length === 0) return 0

    // Obtener volatilidad m√°s reciente
    return volatilityHistory[volatilityHistory.length - 1].volatility
  }

  async generateTradingSuggestions(bot) {
    try {
      // Obtener oportunidades actuales
      const opportunities = await bot.findArbitrageOpportunities()

      // Analizar cada oportunidad con IA
      const enhancedOpportunities = await Promise.all(
        opportunities.map(async (opportunity) => {
          // Predecir probabilidad de √©xito
          const prediction = await this.predictOpportunitySuccess(opportunity)

          // Calcular tama√±o √≥ptimo basado en confianza
          const optimalSize = this.calculateOptimalSize(opportunity, prediction.probability, prediction.confidence)

          // Analizar mejor momento para ejecutar
          const timing = this.analyzeTradingTiming(opportunity.pair)

          return {
            ...opportunity,
            aiPrediction: {
              successProbability: prediction.probability,
              confidence: prediction.confidence,
              optimalSize,
              recommendedTiming: timing.recommendation,
              reasoning: this.generateReasoning(opportunity, prediction, timing),
            },
          }
        }),
      )

      // Ordenar por probabilidad de √©xito ajustada por profit
      const sortedOpportunities = enhancedOpportunities
        .filter((o) => o.profitable)
        .sort((a, b) => {
          const scoreA = a.aiPrediction.successProbability * a.finalProfit
          const scoreB = b.aiPrediction.successProbability * b.finalProfit
          return scoreB - scoreA
        })

      // Generar recomendaciones generales
      const generalRecommendations = this.generateGeneralRecommendations(bot)

      return {
        opportunities: sortedOpportunities,
        generalRecommendations,
        marketInsights: this.generateMarketInsights(),
        lastUpdated: new Date().toISOString(),
      }
    } catch (error) {
      console.error("Error generando sugerencias de trading:", error)
      return {
        opportunities: [],
        generalRecommendations: [
          {
            type: "ERROR",
            message: `Error generando sugerencias: ${error.message}`,
            importance: "HIGH",
          },
        ],
        lastUpdated: new Date().toISOString(),
      }
    }
  }

  calculateOptimalSize(opportunity, probability, confidence) {
    // Base: tama√±o m√≠nimo del par
    let size = opportunity.tradeAmount

    // Ajustar seg√∫n probabilidad de √©xito
    if (probability > 0.8) {
      // Alta probabilidad de √©xito
      size = Math.min(size * 1.5, opportunity.pair.maxTradeAmount)
    } else if (probability < 0.4) {
      // Baja probabilidad de √©xito
      size = Math.max(size * 0.5, opportunity.pair.minTradeAmount)
    }

    // Ajustar seg√∫n nivel de confianza
    if (confidence === "LOW") {
      size = Math.max(size * 0.7, opportunity.pair.minTradeAmount)
    }

    return Number.parseFloat(size.toFixed(2))
  }

  analyzeTradingTiming(pair) {
    const now = new Date()
    const hour = now.getHours()

    // Analizar patrones hist√≥ricos por hora
    const hourlySuccessRate = this.calculateHourlySuccessRate()
    const currentHourRate = hourlySuccessRate[hour] || 0.5

    let recommendation = "NEUTRAL"
    let reason = ""

    if (currentHourRate > 0.7) {
      recommendation = "EXECUTE_NOW"
      reason = `Alta tasa de √©xito hist√≥rica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del d√≠a`
    } else if (currentHourRate < 0.3) {
      recommendation = "WAIT"
      reason = `Baja tasa de √©xito hist√≥rica (${(currentHourRate * 100).toFixed(1)}%) para esta hora del d√≠a`
    }

    // Verificar volatilidad reciente
    const recentVolatility = this.getRecentVolatility(pair)
    if (recentVolatility > 3.0) {
      recommendation = "WAIT"
      reason = `Alta volatilidad reciente (${recentVolatility.toFixed(1)}%)`
    }

    return { recommendation, reason }
  }

  calculateHourlySuccessRate() {
    const hourlyStats = Array(24)
      .fill(0)
      .map(() => ({ success: 0, total: 0 }))

    // Calcular estad√≠sticas por hora
    this.marketData.profitHistory.forEach((item) => {
      const hour = new Date(item.timestamp).getHours()
      hourlyStats[hour].total++
      if (item.wasSuccessful) {
        hourlyStats[hour].success++
      }
    })

    // Calcular tasas de √©xito
    return hourlyStats.map((stats) => (stats.total > 0 ? stats.success / stats.total : 0.5))
  }

  getRecentVolatility(pair) {
    const volatilityHistory = this.marketData.volatilityHistory.get(pair)
    if (!volatilityHistory || volatilityHistory.length < 5) return 0

    // Calcular volatilidad promedio de las √∫ltimas 5 mediciones
    const recentVolatilities = volatilityHistory.slice(-5).map((v) => v.volatility)
    return recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length
  }

  generateReasoning(opportunity, prediction, timing) {
    const reasoning = []

    // An√°lisis de probabilidad
    if (prediction.probability > 0.8) {
      reasoning.push(`Alta probabilidad de √©xito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else if (prediction.probability < 0.4) {
      reasoning.push(`Baja probabilidad de √©xito (${(prediction.probability * 100).toFixed(1)}%)`)
    } else {
      reasoning.push(`Probabilidad moderada de √©xito (${(prediction.probability * 100).toFixed(1)}%)`)
    }

    // An√°lisis de profit
    if (opportunity.finalProfit > opportunity.pair.minProfit * 2) {
      reasoning.push(`Profit potencial alto (${opportunity.finalProfit.toFixed(2)}%)`)
    } else {
      reasoning.push(`Profit potencial moderado (${opportunity.finalProfit.toFixed(2)}%)`)
    }

    // An√°lisis de timing
    reasoning.push(timing.reason)

    // An√°lisis de riesgo
    const riskLevel = this.assessRiskLevel(opportunity)
    reasoning.push(`Nivel de riesgo: ${riskLevel.level} (${riskLevel.reason})`)

    return reasoning
  }

  assessRiskLevel(opportunity) {
    // Evaluar nivel de riesgo basado en m√∫ltiples factores
    let riskScore = 0
    const reasons = []

    // Factor 1: Volatilidad
    const volatility = this.getVolatility(opportunity.pair)
    if (volatility > 4.0) {
      riskScore += 2
      reasons.push(`alta volatilidad (${volatility.toFixed(1)}%)`)
    } else if (volatility > 2.0) {
      riskScore += 1
      reasons.push(`volatilidad moderada (${volatility.toFixed(1)}%)`)
    }

    // Factor 2: Spread sospechoso
    if (opportunity.grossProfit > config.SECURITY.SUSPICIOUS_PROFIT_THRESHOLD * 0.8) {
      riskScore += 2
      reasons.push(`spread inusualmente alto (${opportunity.grossProfit.toFixed(2)}%)`)
    }

    // Factor 3: Historial del par
    const pairHistory = this.getPairSuccessRate(opportunity.pair)
    if (pairHistory.rate < 0.4 && pairHistory.total > 5) {
      riskScore += 1
      reasons.push(`historial de √©xito bajo (${(pairHistory.rate * 100).toFixed(1)}%)`)
    }

    // Determinar nivel
    let level = "BAJO"
    if (riskScore >= 3) {
      level = "ALTO"
    } else if (riskScore >= 1) {
      level = "MEDIO"
    }

    return {
      level,
      reason: reasons.length > 0 ? reasons.join(", ") : "sin factores de riesgo significativos",
    }
  }

  getPairSuccessRate(pair) {
    const pairHistory = this.marketData.profitHistory.filter((item) => item.pair === pair)

    if (pairHistory.length === 0) {
      return { rate: 0.5, total: 0 }
    }

    const successCount = pairHistory.filter((item) => item.wasSuccessful).length
    return {
      rate: successCount / pairHistory.length,
      total: pairHistory.length,
    }
  }

  generateGeneralRecommendations(bot) {
    const recommendations = []

    // Recomendaci√≥n 1: Basada en rendimiento reciente
    const recentPerformance = this.analyzeRecentPerformance()
    if (recentPerformance.profitRate < 0.3 && recentPerformance.tradeCount > 5) {
      recommendations.push({
        type: "STRATEGY_ADJUSTMENT",
        message: `Considere ajustar par√°metros de trading. Tasa de √©xito reciente: ${(recentPerformance.profitRate * 100).toFixed(1)}%`,
        importance: "HIGH",
      })
    }

    // Recomendaci√≥n 2: Basada en volatilidad del mercado
    const marketVolatility = this.getAverageMarketVolatility()
    if (marketVolatility > 4.0) {
      recommendations.push({
        type: "RISK_WARNING",
        message: `Alta volatilidad del mercado (${marketVolatility.toFixed(1)}%). Considere reducir tama√±os de operaci√≥n`,
        importance: "HIGH",
      })
    }

    // Recomendaci√≥n 3: Oportunidad de rebalanceo
    if (bot.riskManager) {
      const imbalance = this.detectExchangeImbalance(bot)
      if (imbalance.detected) {
        recommendations.push({
          type: "REBALANCE",
          message: `Desbalance detectado: ${imbalance.message}`,
          importance: "MEDIUM",
        })
      }
    }

    // Recomendaci√≥n 4: Mejores pares para trading
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recommendations.push({
        type: "PAIR_SUGGESTION",
        message: `Mejores pares por rendimiento: ${bestPairs.map((p) => p.pair).join(", ")}`,
        importance: "MEDIUM",
      })
    }

    return recommendations
  }

  analyzeRecentPerformance() {
    // Analizar rendimiento de las √∫ltimas 10 operaciones
    const recentTrades = this.marketData.profitHistory.slice(-10)

    if (recentTrades.length === 0) {
      return { profitRate: 0.5, tradeCount: 0 }
    }

    const successCount = recentTrades.filter((trade) => trade.wasSuccessful).length
    return {
      profitRate: successCount / recentTrades.length,
      tradeCount: recentTrades.length,
    }
  }

  getAverageMarketVolatility() {
    let totalVolatility = 0
    let pairCount = 0

    for (const [pair, history] of this.marketData.volatilityHistory.entries()) {
      if (history.length > 0) {
        // Obtener volatilidad promedio de las √∫ltimas 5 mediciones
        const recentVolatilities = history.slice(-5).map((v) => v.volatility)
        const avgVolatility = recentVolatilities.reduce((sum, vol) => sum + vol, 0) / recentVolatilities.length

        totalVolatility += avgVolatility
        pairCount++
      }
    }

    return pairCount > 0 ? totalVolatility / pairCount : 0
  }

  detectExchangeImbalance(bot) {
    try {
      // Verificar si hay un desbalance significativo entre exchanges
      const binanceBalance = bot.balanceCache.get("BINANCE")
      const kucoinBalance = bot.balanceCache.get("KUCOIN")

      if (!binanceBalance || !kucoinBalance) {
        return { detected: false }
      }

      const binanceUsdt = binanceBalance.balances.USDT?.total || 0
      const kucoinUsdt = kucoinBalance.balances.USDT?.total || 0

      const totalUsdt = binanceUsdt + kucoinUsdt
      const threshold = totalUsdt * 0.3 // 30% de desbalance

      if (Math.abs(binanceUsdt - kucoinUsdt) > threshold) {
        const fromExchange = binanceUsdt > kucoinUsdt ? "Binance" : "KuCoin"
        const toExchange = binanceUsdt > kucoinUsdt ? "KuCoin" : "Binance"
        const amount = Math.abs(binanceUsdt - kucoinUsdt) / 2

        return {
          detected: true,
          message: `Considere transferir ~${amount.toFixed(2)} USDT de ${fromExchange} a ${toExchange}`,
        }
      }

      return { detected: false }
    } catch (error) {
      console.error("Error detectando desbalance:", error)
      return { detected: false }
    }
  }

  identifyBestPerformingPairs() {
    const pairStats = new Map()

    // Recopilar estad√≠sticas por par
    this.marketData.profitHistory.forEach((item) => {
      if (!pairStats.has(item.pair)) {
        pairStats.set(item.pair, { success: 0, total: 0 })
      }

      const stats = pairStats.get(item.pair)
      stats.total++
      if (item.wasSuccessful) {
        stats.success++
      }
    })

    // Convertir a array y calcular tasas
    const pairPerformance = Array.from(pairStats.entries())
      .map(([pair, stats]) => ({
        pair,
        successRate: stats.total > 0 ? stats.success / stats.total : 0,
        tradeCount: stats.total,
      }))
      .filter((item) => item.tradeCount >= 5) // M√≠nimo 5 operaciones

    // Ordenar por tasa de √©xito
    pairPerformance.sort((a, b) => b.successRate - a.successRate)

    // Devolver los 3 mejores
    return pairPerformance.slice(0, 3)
  }

  generateMarketInsights() {
    return {
      marketVolatility: this.getAverageMarketVolatility(),
      bestTradingHours: this.identifyBestTradingHours(),
      recentTrends: this.identifyRecentTrends(),
      lastUpdated: new Date().toISOString(),
    }
  }

  identifyBestTradingHours() {
    const hourlySuccessRate = this.calculateHourlySuccessRate()

    // Encontrar las mejores horas (top 3)
    const hourRanking = hourlySuccessRate
      .map((rate, hour) => ({ hour, rate }))
      .filter((item) => item.rate > 0) // Solo horas con datos
      .sort((a, b) => b.rate - a.rate)
      .slice(0, 3)

    return hourRanking.map((item) => ({
      hour: item.hour,
      successRate: item.rate,
      formattedHour: `${item.hour}:00 - ${item.hour + 1}:00`,
    }))
  }

  identifyRecentTrends() {
    const trends = []

    // Analizar tendencias de precios por par
    for (const [pair, history] of this.marketData.priceHistory.entries()) {
      if (history.length < 10) continue

      // Obtener precios recientes
      const recentPrices = history.slice(-10).map((p) => (p.buyPrice + p.sellPrice) / 2)

      // Calcular tendencia
      const firstPrice = recentPrices[0]
      const lastPrice = recentPrices[recentPrices.length - 1]
      const percentChange = ((lastPrice - firstPrice) / firstPrice) * 100

      // Determinar direcci√≥n
      let direction = "NEUTRAL"
      if (percentChange > 1.0) {
        direction = "UP"
      } else if (percentChange < -1.0) {
        direction = "DOWN"
      }

      trends.push({
        pair,
        direction,
        percentChange,
        strength: Math.abs(percentChange) > 3.0 ? "STRONG" : "MODERATE",
      })
    }

    return trends
  }

  // ======= AGREGADO PARA DASHBOARD (RECOMENDACIONES SIMPLES) =======
  /**
   * Devuelve recomendaciones actuales simples para el dashboard.
   * (Puedes mejorar esta funci√≥n para mostrar a√∫n m√°s informaci√≥n si lo deseas)
   */
  getCurrentRecommendations() {
    // Ejemplo b√°sico usando heur√≠stica y datos simulados
    const now = new Date()
    const hour = now.getHours()
    const recs = []

    // Ejemplo de recomendaci√≥n por horario
    if (hour >= 8 && hour <= 16) {
      recs.push({ texto: "Mayor volumen: operar con m√°s confianza", probabilidad: 80 })
    } else {
      recs.push({ texto: "Mercado lento: precauci√≥n al operar", probabilidad: 55 })
    }

    // Ejemplo de profit reciente
    const perf = this.analyzeRecentPerformance()
    if (perf.profitRate > 0.7) {
      recs.push({ texto: "El bot est√° en racha positiva", probabilidad: Math.round(perf.profitRate * 100) })
    } else if (perf.profitRate < 0.3) {
      recs.push({ texto: "Racha negativa: considere cambiar la estrategia", probabilidad: Math.round((1 - perf.profitRate) * 100) })
    } else {
      recs.push({ texto: "Rendimiento estable, mantener par√°metros", probabilidad: 60 })
    }

    // Sugerencia de par
    const bestPairs = this.identifyBestPerformingPairs()
    if (bestPairs.length > 0) {
      recs.push({ texto: `Mejores pares: ${bestPairs.map((p) => p.pair).join(", ")}`, probabilidad: 65 })
    }

    return recs
  }
}

module.exports = new AITradingAdvisor()

------------------------------------------------------------------------------------------------------------------

// ========== MOTOR DE MACHINE LEARNING AVANZADO ==========
const fs = require('fs').promises
const path = require('path')
const config = require("../strategies/config")

class MLEngine {
  constructor() {
    this.models = new Map()
    this.trainingData = []
    this.predictions = []
    this.modelAccuracy = new Map()
    this.featureImportance = new Map()
    this.lastTraining = 0
    this.minTrainingInterval = 3600000 // 1 hora
    
    this.initializeModels()
  }

  initializeModels() {
    // Modelo de predicci√≥n de precios
    this.models.set('PRICE_PREDICTION', {
      name: 'Predicci√≥n de Precios',
      type: 'REGRESSION',
      features: ['price', 'volume', 'rsi', 'macd', 'bollinger_position'],
      accuracy: 0.0,
      predictions: 0,
      correct: 0,
      lastTrained: 0,
    })